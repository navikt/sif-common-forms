{"version":3,"sources":["forms/components/summary/TallSvar.tsx","forms/components/summary/IntlLabelValue.tsx","forms/bosted-utland/BostedUtlandListAndDialog.tsx","forms/bosted-utland/BostedUtlandList.tsx","forms/ferieuttak/FerieuttakListAndDialog.tsx","forms/ferieuttak/FerieuttakList.tsx","forms/fosterbarn/types.ts","forms/fosterbarn/FosterbarnListAndDialog.tsx","forms/fosterbarn/FosterbarnList.tsx","forms/tidsperiode/TidsperiodeList.tsx","forms/utenlandsopphold/UtenlandsoppholdListAndDialog.tsx","forms/utenlandsopphold/UtenlandsoppholdList.tsx","forms/fravær/FraværDagerListAndDialog.tsx","forms/fravær/FraværDagerList.tsx","forms/fravær/FraværPerioderListAndDialog.tsx","forms/fravær/FraværPerioderList.tsx","forms/virksomhet/VirksomhetForm.tsx","forms/virksomhet/VirksomhetInfoAndDialog.tsx","forms/fravær/FraværListItem.tsx","forms/fravær/fraværÅrsakRadios.ts","forms/fravær/ÅrsakInfo.tsx","forms/components/summary/Sitat.tsx","forms/virksomhet/types.ts","forms/bosted-utland/index.ts","forms/ferieuttak/index.ts","forms/fosterbarn/index.ts","forms/fravær/index.ts","forms/tidsperiode/index.ts","forms/utenlandsopphold/index.ts","forms/index.ts","forms/fravær/fraværUtilities.ts","forms/i18n/defaultMessages.ts","forms/fravær/fraværValidationUtils.ts","forms/utils/index.ts","forms/annet-barn/annetBarnMessages.ts","dev/components/app-intl-provider/messages.ts","dev/components/app-intl-provider/AppIntlProvider.tsx","dev/components/svg/NAVLogo.tsx","dev/components/page-intro/PageIntro.tsx","dev/components/submit-preview/SubmitPreview.tsx","dev/examples/dialog-forms/BostedUtlandExample.tsx","dev/components/validation-error-messages/ValidationErrorMessages.tsx","dev/examples/dialog-forms/FerieuttakExample.tsx","dev/examples/dialog-forms/FosterbarnExample.tsx","dev/examples/dialog-forms/TidsperiodeExample.tsx","dev/examples/dialog-forms/UtenlandsoppholdExample.tsx","dev/examples/dialog-forms/FraværExample.tsx","forms/annet-barn/AnnetBarnForm.tsx","forms/annet-barn/annetBarnUtils.ts","forms/annet-barn/AnnetBarnList.tsx","forms/annet-barn/AnnetBarnListAndDialog.tsx","dev/examples/dialog-forms/AnnetBarnExample.tsx","dev/examples/virksomhet-example/VirksomhetExample.tsx","dev/examples/dialog-forms/DialogForms.tsx","dev/Intro.tsx","dev/examples/texts/Texts.tsx","dev/config/routeConfig.tsx","dev/components/header-menu/HeaderMenu.tsx","dev/components/left-menu/LeftMenu.tsx","dev/DevContent.tsx","dev/DevPage.tsx","App.tsx","index.tsx","forms/virksomhet/virksomhetUtils.ts","forms/components/summary/SummaryBlock.tsx","forms/fravær/fraværMessages.ts","forms/fravær/types.ts","forms/bosted-utland/bostedUtlandMessages.ts","forms/ferieuttak/ferieuttakMessages.ts","forms/utenlandsopphold/utenlandsoppholdMessages.ts","forms/tidsperiode/tidsperiodeMessages.ts","forms/components/summary/DatoSvar.tsx","forms/fosterbarn/fosterbarnMessages.ts","forms/virksomhet/virksomhetMessages.ts","forms/utenlandsopphold/types.ts","forms/components/formatted-html-message/FormattedHtmlMessage.tsx","forms/components/summary/JaNeiSvar.tsx","forms/fosterbarn/FosterbarnForm.tsx","forms/fravær/FraværPeriodeForm.tsx","forms/bosted-utland/BostedUtlandForm.tsx","forms/bosted-utland/bostedUtlandUtils.ts","forms/ferieuttak/FerieuttakForm.tsx","forms/ferieuttak/ferieuttakUtils.ts","forms/tidsperiode/TidsperiodeForm.tsx","forms/tidsperiode/tidsperiodeUtils.ts","forms/utenlandsopphold/UtenlandsoppholdForm.tsx","forms/utenlandsopphold/utenlandsoppholdUtils.ts","forms/fravær/FraværDagForm.tsx","forms/fravær/FraværTimerSelect.tsx","forms/tidsperiode/TidsperiodeListAndDialog.tsx","forms/virksomhet/mapVirksomhetToApiData.ts","forms/virksomhet/VirksomhetSummary.tsx"],"names":["TallSvar","verdi","undefined","value","bem","bemUtils","IntlLabelValue","intlLabelKey","labelKey","children","intl","useIntl","className","block","element","intlHelper","BostedUtlandListAndDialog","name","minDate","maxDate","validate","labels","dialogWidth","sortFunc","sortItemsByFom","formRenderer","onSubmit","onCancel","item","allItems","bosted","alleBosteder","listRenderer","items","onEdit","onDelete","bosteder","BostedUtlandList","getItemId","opphold","id","getItemTitle","getCountryName","landkode","locale","labelRenderer","navn","onClick","prettifyDateExtended","fom","tom","FerieuttakListAndDialog","ferieuttak","alleFerieuttak","FerieuttakList","getDateTitleString","uttak","title","filter","isFosterbarn","fosterbarn","includeName","fornavn","etternavn","fødselsnummer","hasValue","FosterbarnListAndDialog","texts","disallowedFødselsnumre","defaultText","liste_legg_til_knapp","liste_tittel","modal_tittel","txt","addLabel","modalTitle","emptyListText","liste_tom_liste_tekst","listTitle","FosterbarnList","getBarnTitleString","barn","style","paddingRight","formatName","TidsperiodeList","tidsperiode","UtenlandsoppholdListAndDialog","alleOpphold","utenlandsopphold","UtenlandsoppholdList","FraværDagerListAndDialog","dagDescription","formHeaderContent","dateRangesToDisable","helgedagerIkkeTillatt","maksArbeidstidPerDag","fraværDagA","fraværDagB","dato","fraværDag","headerContent","fraværDager","FraværDagerList","getFraværDagListItemTitle","timerArbeidsdag","timeText","timerFravær","årsak","FraværPerioderListAndDialog","periodeDescription","begrensTilSammeÅr","helgedagerIkkeTillat","fraværPeriodeA","fraværPeriodeB","fraOgMed","tilOgMed","fraværPeriode","fraværPerioder","FraværPerioderList","useTrashcan","MAKS_INNTEKT","VirksomhetFormErrors","VirksomhetFormField","næringstyper","ValidateListError","listIsEmpty","fiskerErPåBladB","ValidateYesOrNoError","yesOrNoIsUnanswered","navnPåVirksomheten","ValidateStringError","stringHasNoValue","registrertINorge","registrertILand","ValidateRequiredFieldError","noValue","organisasjonsnummer","ValidateOrgNumberError","orgNumberHasInvalidFormat","ValidateDateError","dateHasNoValue","dateIsAfterMax","dateHasInvalidFormat","ValidateDateRangeError","fromDateIsAfterToDate","dateIsBeforeMin","toDateIsBeforeFromDate","næringsinntekt","ValidateNumberError","numberHasInvalidFormat","numberIsTooSmall","numberIsTooLarge","harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene","blittYrkesaktivDato","hattVarigEndringAvNæringsinntektSiste4Kalenderår","varigEndringINæringsinntekt_dato","varigEndringINæringsinntekt_inntektEtterEndring","numberHasNoValue","varigEndringINæringsinntekt_forklaring","stringIsTooLong","stringIsTooShort","harRegnskapsfører","regnskapsfører_navn","regnskapsfører_telefon","Form","getTypedFormComponents","ensureValidNæringsinntekt","values","fomDate","ISOStringToDate","erVirksomhetRegnetSomNyoppstartet","visNæringsinntekt","VirksomhetForm","virksomhet","harFlereVirksomheter","skipOrgNumValidation","getText","key","FormikWrapper","initialValues","mapVirksomhetToFormValues","virksomhetToSubmit","mapFormValuesToVirksomhet","isVirksomhet","Error","renderForm","formik","setFieldValue","tomDate","includeValidationSummary","formErrorHandler","getFormErrorHandler","padBottom","tag","CheckboxPanelGroup","legend","checkboxes","Næringstype","FISKE","label","JORDBRUK_SKOGBRUK","DAGMAMMA","ANNEN","getListValidator","required","harFiskerNæringstype","margin","YesOrNoQuestion","getYesOrNoValidator","Input","getStringValidator","maxLength","description","YesOrNo","NO","CountrySelect","getRequiredFieldValidator","useAlpha3Code","YES","maxWidth","getOrgNumberValidator","DateRangePicker","showYearSelector","dateToday","fromInputProps","error","getDateRangeValidator","max","toDate","validateFromDate","prettifyDate","toInputProps","disabled","erPågående","fromDate","validateToDate","handleDateRangeValidationError","Checkbox","afterOnChange","checked","NumberInput","getNumberValidator","min","maks","DatePicker","date3YearsAgo","getDateValidator","date4YearsAgo","Textarea","minLength","VirksomhetInfoAndDialog","onAfterChange","renderEditButtons","data","infoRenderer","mapVirksomhetToVirksomhetApiData","FraværListItem","padding","FraværÅrsak","ordinært","marginTop","getFraværÅrsakTekstKort","getFraværÅrsakRadios","stengtSkoleBhg","smittevernhensyn","ÅrsakInfo","Sitat","display","paddingLeft","borderLeft","fontStyle","dayjs","extend","isSameOrAfter","isSameOrBefore","Weekday","isFraværDag","isFraværPeriode","fraværDagToFraværDateRange","from","to","fraværPeriodeToDateRange","getWeekdayName","date","getDay","sunday","monday","tuesday","wednesday","thursday","friday","saturday","dateErHelg","rangeCollideWithRanges","range","ranges","length","some","periode","fromDay","toDay","isBefore","isAfter","dateCollideWithRanges","timer","toMaybeNumber","isString","parseFloat","getHjemmePgaKoronaFormValueFromFraværÅrsak","UNANSWERED","getÅrsakFromFraværFormValues","formValues","hjemmePgaKorona","mapFormValuesToFraværDag","guid","mapFraværDagToFormValues","dateToISOString","mapFormValuesToFraværPeriode","mapFraværPeriodeToFormValues","defaultValidationMessages","nb","ValidateFødselsnummerError","fødselsnummerHasNoValue","fødselsnummerIsInvalid","fødselsnummerIsNot11Chars","fødselsnummerIsNotAllowed","listHasTooFewItems","stringIsNotAString","FraværFieldValidationErrors","validateLessOrEqualTo","maybeMaxValue","maybeValue","maybeValueFloat","fravær_timer_mer_enn_arbeidstimer","validateErSammeÅr","maybeDateFrom","maybeDateTo","getFullYear","fra_og_til_er_ulike_år","validateNotHelgedag","maybeDate","er_helg","validateFraværPeriodeCollision","dager_overlapper_med_andre_dager","validateFraOgMedForCollision","fra_dato_kolliderer_med_annet_fravær","validateTilOgMedForCollision","til_dato_kolliderer_med_annet_fravær","validateFraværDagCollision","dato_kolliderer_med_annet_fravær","validateNoCollisions","allFraværDagDateRanges","map","allFraværPeriodeDateRanges","hasDateCollision","dag","rangesWithoutCurrentDag","d","hasRangeCollision","rangesWithoutCurrentPeriode","p","mapFomTomToDateRange","annetBarnMessages","nn","commonNb","require","commonNn","validationNb","validationNn","appMessages","bostedUtlandMessages","fraværMessages","ferieuttakMessages","fosterbarnMessages","utenlandsoppholdMessages","tidsperiodeMessages","virksomhetMessages","AppIntlProvider","onError","messages","NAVLogo","props","width","viewBox","fill","fillRule","PageIntro","SubmitPreview","FormField","borderTop","paddingTop","fontSize","JSON","stringify","FormValidationErrorMessages","validationErrors","formName","intlMessages","validationErrorIntlKeys","validationeMessages","fields","Object","keys","forEach","field","errorKey","intlKey","fieldName","errorPrefix","createFieldErrorIntlKey","showExplanation","showMissingTextSummary","FormikExample","useState","singleFormValues","setSingleFormValues","listFormValues","setListFormValues","border","includeButtons","submitButtonLabel","date1YearAgo","date1YearFromNow","flat","BostedUtlandFormErrors","BostedUtlandForm","console","log","ferie","FerieuttakFormErrors","FerieuttakForm","FosterbarnExample","FosterbarnFormErrors","FosterbarnForm","TidsperiodeExample","TidsperiodeListAndDialog","TidsperiodeFormErrors","TidsperiodeForm","UtenlandsoppholdExample","UtlandsoppholdFormErrors","UtenlandsoppholdForm","AnnetBarnFormFields","perioder","dager","FraværExample","fraværPeriodeSingleFormValues","setFraværPeriodeSingleFormValues","fraværDagSingleFormValues","setFraværDagSingleFormValues","listError","collisionError","FraværPeriodeFormErrors","FraværDagFormErrors","annetBarnUtils","mapAnnetBarnToFormValues","annetBarn","fnr","fødselsdato","mapFormValuesToPartialAnnetBarn","isAnnetBarn","AnnetBarnFormErrors","AnnetBarnForm","defaultLabels","okButton","cancelButton","formLabels","annetBarnToSubmit","placeholder","placeholderNavn","aldersGrenseText","dateError","getFødselsnummerValidator","disallowedValues","inputMode","placeholderFnr","AnnetBarnList","AnnetBarnListAndDialog","AnnetBarnExample","flatten","tabRoutes","path","renderContent","BostedUtlandExample","FerieuttakExample","DialogForms","setPath","activeRoute","find","r","onChange","evt","idx","tabs","active","Date","VirksomhetExample","setFormValues","setHarFlereVirksomheter","apiVirksomhet","deleteLabel","editLabel","infoTitle","currentTarget","VirksomhetSummary","Intro","Texts","formMessages","push","paddingBottom","routes","isActiveRoute","pathname","indexOf","renderMenuItem","route","data-page","withRouter","history","location","onSelection","lenkeBem","classNames","modifierConditional","routeConfig","f","getRouteConfig","minWidth","DevPage","onChangeLocale","toggle","localeFromSessionStorage","getLocaleFromSessionStorage","App","React","setLocale","l","setLocaleInSessionStorage","Modal","setAppElement","ReactDOM","render","document","getElementById","n","oppstartsdato","startOf","SummaryBlock","header","prettifyApiDate","apiDato","apiStringDateToDate","DatoSvar","UtenlandsoppholdÅrsak","basicHtmlTagRenderers","li","strong","em","FormattedHtmlMessage","JaNeiSvar","harSvartJa","tagName","FosterbarnFormField","text","form_etternavn_label","form_fornavn_label","form_fødselsnummer_label","columns","FraværPeriodeFormFields","getFromDateValidator","disabledDateRanges","keepKeyUnaltered","getToDateValidator","FraværPeriodeForm","ok","avbryt","tittel","tidsrom","fraværÅrsakRadios","isSame","fraværPeriodeToSubmit","DateIntervalPicker","fraOgMed_tilOgMed","fromDatepickerProps","fullscreenOverlay","disableWeekend","dayPickerProps","initialMonth","setTimeout","validateField","toDatepickerProps","RadioPanelGroup","radios","BostedUtlandFormFields","bostedUtlandUtils","isValidBostedUtland","mapBostedUtlandToFormValues","mapFormValuesToBostedUtland","bostedToSubmit","fomDateLimits","tomDateLimits","andreBosteder","b","allowRangesToStartAndStopOnSameDate","FerieuttakFormFields","ferieuttakUtils","isValidFerieuttak","mapFerieuttakToFormValues","mapFormValuesToFerieuttak","intervalTitle","andreFerieuttak","ferieuttakToSubmit","TidsperiodeFormFields","tidsperiodeUtils","isValidDateTidsperiode","mapDateTidsperiodeToFormValues","mapFormValuesToDateTidsperiode","alleTidsperioder","inlineLabels","dateTidsperiodeToSubmit","t","UtenlandsoppholdFormFields","utenlandsoppholdUtils","isValidUtenlandsopphold","mapFormValuesToUtenlandsopphold","barnInnlagtPerioder","mapUtenlandsoppholdToFormValues","erBarnetInnlagt","defaultFormValues","registrerteTidsperioder","o","utils","utenlandsoppholdToSubmit","countryIsMemberOfEøsOrEfta","hasDateStringValues","includeInnlagtPerioderQuestion","includeInnlagtQuestion","showÅrsakQuestion","land","formTitle","INNLAGT_DEKKET_NORGE","INNLAGT_DEKKET_ANNET_LAND","ANNET","FraværDagFormFields","getOptionsList","maksTid","newOptionElement","toString","replace","go","jsxList","tid","FraværTimerSelect","FraværDagForm","Select","bredde","FraværDagFormView","antallArbeidstimer","fraværDagToSubmit","valgtDato","datepickerUtils","getDateFromDateString","datepickerProps","harBesvartFiskerPåBladB","erNyoppstartet","registrertIUtlandet","landnavn","formatDateToApiFormat","yrkesaktivSisteTreFerdigliknedeÅrene","harHattVarigEndring","varigEndring","forklaring","inntektEtterEndring","regnskapsfører","telefon","renderVirksomhetSummary","næring","erPåBladB","næringstekst","bladBTekst","getFiskerNæringTekst","join","tidsinfo","orgnr","erRegnetSomNyoppstartet"],"mappings":"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","file":"static/js/main.1cf328ce.chunk.js","sourcesContent":["import React from 'react';\nimport { FormattedNumber } from 'react-intl';\n\ninterface Props {\n    verdi?: number;\n}\n\nconst TallSvar: React.FunctionComponent<Props> = ({ verdi }) =>\n    verdi !== undefined ? <FormattedNumber value={verdi} /> : null;\n\nexport default TallSvar;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\n\ninterface Props {\n    labelKey: string;\n}\n\nconst bem = bemUtils('summaryLabelValue');\n\nconst IntlLabelValue: React.FunctionComponent<Props> = ({ labelKey: intlLabelKey, children }) => {\n    const intl = useIntl();\n    return (\n        <div className={bem.block}>\n            <span className={bem.element('label')}>{intlHelper(intl, intlLabelKey)}:</span>{' '}\n            <span className={bem.element('value')}>{children}</span>\n        </div>\n    );\n};\n\nexport default IntlLabelValue;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList,\n    ModalFormAndListLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport BostedUtlandForm from './BostedUtlandForm';\nimport BostedUtlandListe from './BostedUtlandList';\nimport { BostedUtland } from './types';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames, ValidationError> {\n    name: FieldNames;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction BostedUtlandListAndDialog<FieldNames>({ name, minDate, maxDate, validate, labels }: Props<FieldNames>) {\n    return (\n        <FormikModalFormAndList<FieldNames, BostedUtland, ValidationError>\n            name={name}\n            labels={labels}\n            validate={validate}\n            dialogWidth=\"narrow\"\n            sortFunc={sortItemsByFom}\n            formRenderer={({ onSubmit, onCancel, item, allItems }) => (\n                <BostedUtlandForm\n                    bosted={item}\n                    alleBosteder={allItems}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    onSubmit={onSubmit}\n                    onCancel={onCancel}\n                />\n            )}\n            listRenderer={({ items, onEdit, onDelete }) => (\n                <BostedUtlandListe bosteder={items} onEdit={onEdit} onDelete={onDelete} />\n            )}\n        />\n    );\n}\n\nexport default BostedUtlandListAndDialog;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { getCountryName } from '@navikt/sif-common-formik';\nimport { BostedUtland } from './types';\nimport './bostedUtlandList.less';\n\ninterface Props {\n    bosteder: BostedUtland[];\n    onEdit?: (opphold: BostedUtland) => void;\n    onDelete?: (opphold: BostedUtland) => void;\n}\n\nconst bem = bemUtils('bostedUtlandList');\n\nconst BostedUtlandList = ({ bosteder, onDelete, onEdit }: Props) => {\n    const intl = useIntl();\n    const renderBostedUtlandLabel = (opphold: BostedUtland): React.ReactNode => {\n        const navn = getCountryName(opphold.landkode, intl.locale);\n        return (\n            <div className={bem.element('label')}>\n                <span className={bem.element('land')}>\n                    {onEdit && <ActionLink onClick={() => onEdit(opphold)}>{navn}</ActionLink>}\n                    {!onEdit && <span>{navn}</span>}\n                </span>\n                <span className={bem.element('dato')}>\n                    {prettifyDateExtended(opphold.fom)} - {prettifyDateExtended(opphold.tom)}\n                </span>\n            </div>\n        );\n    };\n\n    return (\n        <ItemList<BostedUtland>\n            getItemId={(opphold) => opphold.id}\n            getItemTitle={(opphold) => getCountryName(opphold.landkode, intl.locale)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderBostedUtlandLabel}\n            items={bosteder}\n        />\n    );\n};\n\nexport default BostedUtlandList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList,\n    ModalFormAndListLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport FerieuttakForm from './FerieuttakForm';\nimport FerieuttakList from './FerieuttakList';\nimport { Ferieuttak } from './types';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames, ValidationError> {\n    name: FieldNames;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction FerieuttakListAndDialog<FieldNames>({ name, minDate, maxDate, validate, labels }: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, Ferieuttak, ValidationError>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                sortFunc={sortItemsByFom}\n                formRenderer={({ onSubmit, onCancel, item, allItems }) => (\n                    <FerieuttakForm\n                        ferieuttak={item}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                        alleFerieuttak={allItems}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FerieuttakList ferieuttak={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FerieuttakListAndDialog;\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { Ferieuttak } from './types';\n\ninterface Props {\n    ferieuttak: Ferieuttak[];\n    onEdit?: (opphold: Ferieuttak) => void;\n    onDelete?: (opphold: Ferieuttak) => void;\n}\n\nconst FerieuttakList = ({ ferieuttak = [], onDelete, onEdit }: Props) => {\n    const getDateTitleString = (uttak: Ferieuttak) =>\n        `${prettifyDateExtended(uttak.fom)} - ${prettifyDateExtended(uttak.tom)}`;\n\n    const renderFerieuttakLabel = (uttak: Ferieuttak): React.ReactNode => {\n        const title = getDateTitleString(uttak);\n        return (\n            <>\n                {onEdit && <ActionLink onClick={() => onEdit(uttak)}>{title}</ActionLink>}\n                {!onEdit && <span>{title}</span>}\n            </>\n        );\n    };\n\n    return (\n        <ItemList<Ferieuttak>\n            getItemId={(uttak) => uttak.id}\n            getItemTitle={(uttak) => getDateTitleString(uttak)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderFerieuttakLabel}\n            items={ferieuttak.filter((uttak) => uttak.id !== undefined)}\n        />\n    );\n};\n\nexport default FerieuttakList;\n","import { hasValue } from '@navikt/sif-common-formik/lib/validation/validationUtils';\n\nexport interface Fosterbarn {\n    id?: string;\n    fødselsnummer: string;\n    fornavn?: string;\n    etternavn?: string;\n}\n\nexport const isFosterbarn = (fosterbarn: Partial<Fosterbarn>, includeName?: boolean): fosterbarn is Fosterbarn => {\n    const { fornavn, etternavn, fødselsnummer } = fosterbarn;\n    if (includeName) {\n        return hasValue(fornavn) && hasValue(etternavn) && hasValue(fødselsnummer);\n    }\n    return hasValue(fødselsnummer);\n};\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { FormikModalFormAndList, TypedFormInputValidationProps } from '@navikt/sif-common-formik';\nimport FosterbarnForm from './FosterbarnForm';\nimport FosterbarnList from './FosterbarnList';\nimport { Fosterbarn } from './types';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\nexport interface FosterbarnListAndDialogText {\n    liste_legg_til_knapp: string;\n    liste_tittel?: string;\n    liste_tom_liste_tekst?: string;\n    modal_tittel: string;\n}\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames, ValidationError> {\n    name: FieldNames;\n    texts?: FosterbarnListAndDialogText;\n    includeName?: boolean;\n    disallowedFødselsnumre?: string[];\n}\n\nfunction FosterbarnListAndDialog<FieldNames>({\n    name,\n    validate,\n    texts,\n    includeName,\n    disallowedFødselsnumre,\n}: Props<FieldNames>) {\n    const intl = useIntl();\n\n    const defaultText: FosterbarnListAndDialogText = {\n        liste_legg_til_knapp: intlHelper(intl, 'fosterbarn.list.legg_til_knapp'),\n        liste_tittel: intlHelper(intl, 'fosterbarn.list.tittel'),\n        modal_tittel: intlHelper(intl, 'fosterbarn.modal.tittel'),\n    };\n\n    const txt = { ...defaultText, ...texts };\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, Fosterbarn, ValidationError>\n                name={name}\n                labels={{\n                    addLabel: txt.liste_legg_til_knapp,\n                    modalTitle: txt.modal_tittel,\n                    emptyListText: txt.liste_tom_liste_tekst,\n                    listTitle: txt.liste_tittel,\n                }}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                formRenderer={({ onSubmit, onCancel, item }) => (\n                    <FosterbarnForm\n                        fosterbarn={item}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                        includeName={includeName}\n                        disallowedFødselsnumre={disallowedFødselsnumre}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FosterbarnList fosterbarn={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FosterbarnListAndDialog;\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { formatName } from '@navikt/sif-common-core/lib/utils/personUtils';\nimport { Fosterbarn } from './types';\n\ninterface Props {\n    fosterbarn: Fosterbarn[];\n    onEdit?: (opphold: Fosterbarn) => void;\n    onDelete?: (opphold: Fosterbarn) => void;\n}\n\nconst FosterbarnList = ({ fosterbarn = [], onDelete, onEdit }: Props) => {\n    const getBarnTitleString = (barn: Fosterbarn) => {\n        return (\n            <>\n                <span style={{ paddingRight: '1rem' }}>{barn.fødselsnummer}</span>{' '}\n                {barn.fornavn && barn.etternavn && <span>{formatName(barn.fornavn, barn.etternavn)}</span>}\n            </>\n        );\n    };\n    const renderFosterbarnLabel = (barn: Fosterbarn): React.ReactNode => {\n        return (\n            <>\n                {onEdit && <ActionLink onClick={() => onEdit(barn)}>{getBarnTitleString(barn)}</ActionLink>}\n                {!onEdit && <span>{getBarnTitleString(barn)}</span>}\n            </>\n        );\n    };\n\n    return (\n        <ItemList<Fosterbarn>\n            getItemId={(barn) => barn.id}\n            getItemTitle={(barn) =>\n                barn.fornavn && barn.etternavn ? formatName(barn.fornavn, barn.etternavn) : barn.fødselsnummer\n            }\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderFosterbarnLabel}\n            items={fosterbarn.filter((barn) => barn.id !== undefined)}\n        />\n    );\n};\n\nexport default FosterbarnList;\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { DateTidsperiode } from './types';\n\ninterface Props {\n    tidsperiode: DateTidsperiode[];\n    onEdit?: (opphold: DateTidsperiode) => void;\n    onDelete?: (opphold: DateTidsperiode) => void;\n}\n\nconst TidsperiodeList = ({ tidsperiode = [], onDelete, onEdit }: Props) => {\n    const getDateTitleString = (uttak: DateTidsperiode) =>\n        `${prettifyDateExtended(uttak.fom)} - ${prettifyDateExtended(uttak.tom)}`;\n\n    const renderTidsperiodeLabel = (uttak: DateTidsperiode): React.ReactNode => {\n        const title = getDateTitleString(uttak);\n        return (\n            <>\n                {onEdit && <ActionLink onClick={() => onEdit(uttak)}>{title}</ActionLink>}\n                {!onEdit && <span>{title}</span>}\n            </>\n        );\n    };\n\n    return (\n        <ItemList<DateTidsperiode>\n            getItemId={(uttak) => uttak.id}\n            getItemTitle={(uttak) => getDateTitleString(uttak)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderTidsperiodeLabel}\n            items={tidsperiode.filter((uttak) => uttak.id !== undefined)}\n        />\n    );\n};\n\nexport default TidsperiodeList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList,\n    ModalFormAndListLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport { Utenlandsopphold } from './types';\nimport UtenlandsoppholdForm from './UtenlandsoppholdForm';\nimport UtenlandsoppholdListe from './UtenlandsoppholdList';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames, ValidationError> {\n    name: FieldNames;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction UtenlandsoppholdListAndDialog<FieldNames>({ name, minDate, maxDate, validate, labels }: Props<FieldNames>) {\n    return (\n        <FormikModalFormAndList<FieldNames, Utenlandsopphold, ValidationError>\n            name={name}\n            labels={labels}\n            validate={validate}\n            dialogWidth=\"narrow\"\n            sortFunc={sortItemsByFom}\n            formRenderer={({ onSubmit, onCancel, item, allItems }) => (\n                <UtenlandsoppholdForm\n                    opphold={item}\n                    alleOpphold={allItems}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    onSubmit={onSubmit}\n                    onCancel={onCancel}\n                />\n            )}\n            listRenderer={({ items, onEdit, onDelete }) => (\n                <UtenlandsoppholdListe utenlandsopphold={items} onEdit={onEdit} onDelete={onDelete} />\n            )}\n        />\n    );\n}\n\nexport default UtenlandsoppholdListAndDialog;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { getCountryName } from '@navikt/sif-common-formik';\nimport { Utenlandsopphold } from './types';\nimport './utenlandsoppholdList.less';\n\ninterface Props {\n    utenlandsopphold: Utenlandsopphold[];\n    onEdit?: (opphold: Utenlandsopphold) => void;\n    onDelete?: (opphold: Utenlandsopphold) => void;\n}\n\nconst bem = bemUtils('utenlandsoppholdList');\n\nconst UtenlandsoppholdList = ({ utenlandsopphold, onDelete, onEdit }: Props) => {\n    const intl = useIntl();\n    const renderUtenlandsoppholdLabel = (opphold: Utenlandsopphold): React.ReactNode => {\n        const navn = getCountryName(opphold.landkode, intl.locale);\n        return (\n            <div className={bem.element('label')}>\n                <span className={bem.element('land')}>\n                    {onEdit && <ActionLink onClick={() => onEdit(opphold)}>{navn}</ActionLink>}\n                    {!onEdit && <span>{navn}</span>}\n                </span>\n                <span className={bem.element('dato')}>\n                    {prettifyDateExtended(opphold.fom)} - {prettifyDateExtended(opphold.tom)}\n                </span>\n            </div>\n        );\n    };\n\n    return (\n        <ItemList<Utenlandsopphold>\n            getItemId={(opphold) => opphold.id}\n            getItemTitle={(opphold) => getCountryName(opphold.landkode, intl.locale)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderUtenlandsoppholdLabel}\n            items={utenlandsopphold}\n        />\n    );\n};\n\nexport default UtenlandsoppholdList;\n","import React from 'react';\nimport { DateRange, sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList,\n    ModalFormAndListLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport FraværDagerList from './FraværDagerList';\nimport FraværDagFormView from './FraværDagForm';\nimport { FraværDag } from './types';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames, ValidationError> {\n    name: FieldNames;\n    minDate: Date;\n    maxDate: Date;\n    dagDescription?: JSX.Element;\n    labels: ModalFormAndListLabels;\n    formHeaderContent?: JSX.Element;\n    dateRangesToDisable?: DateRange[];\n    helgedagerIkkeTillatt?: boolean;\n    maksArbeidstidPerDag?: number;\n}\n\nfunction FraværDagerListAndDialog<FieldNames>({\n    name,\n    minDate,\n    maxDate,\n    validate,\n    dagDescription,\n    labels,\n    formHeaderContent,\n    dateRangesToDisable,\n    helgedagerIkkeTillatt,\n    maksArbeidstidPerDag,\n}: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, FraværDag, ValidationError>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                sortFunc={(fraværDagA: FraværDag, fraværDagB: FraværDag) =>\n                    sortItemsByFom({ fom: fraværDagA.dato }, { fom: fraværDagB.dato })\n                }\n                formRenderer={({ onSubmit, onCancel, item }) => (\n                    <FraværDagFormView\n                        fraværDag={item}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        headerContent={formHeaderContent}\n                        dagDescription={dagDescription}\n                        dateRangesToDisable={dateRangesToDisable}\n                        helgedagerIkkeTillatt={helgedagerIkkeTillatt}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                        maksArbeidstidPerDag={maksArbeidstidPerDag}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FraværDagerList fraværDager={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FraværDagerListAndDialog;\n","import React from 'react';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport FraværListItem from './FraværListItem';\nimport { timeText } from './fraværUtilities';\nimport { FraværDag } from './types';\n\ninterface Props {\n    fraværDager: FraværDag[];\n    onEdit?: (fraværDag: FraværDag) => void;\n    onDelete?: (fraværDag: FraværDag) => void;\n}\n\nconst FraværDagerList = ({ fraværDager = [], onDelete, onEdit }: Props) => {\n    const getFraværDagListItemTitle = (fraværDag: FraværDag) =>\n        `${prettifyDateExtended(fraværDag.dato)}:\n        Skulle jobbet ${fraværDag.timerArbeidsdag} ${timeText(fraværDag.timerArbeidsdag)}.\n        Borte fra jobb ${fraværDag.timerFravær}  ${timeText(fraværDag.timerFravær)}.`;\n\n    const renderFraværDagLabel = (fraværDag: FraværDag): React.ReactNode => {\n        const title = getFraværDagListItemTitle(fraværDag);\n        return (\n            <FraværListItem\n                title={title}\n                årsak={fraværDag.årsak}\n                onEdit={onEdit ? () => onEdit(fraværDag) : undefined}\n            />\n        );\n    };\n\n    return (\n        <ItemList<FraværDag>\n            getItemId={(fraværDag) => fraværDag.id}\n            getItemTitle={(fraværDag) => getFraværDagListItemTitle(fraværDag)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderFraværDagLabel}\n            items={fraværDager.filter((fraværDag) => fraværDag.id !== undefined)}\n        />\n    );\n};\n\nexport default FraværDagerList;\n","import React from 'react';\nimport { DateRange, sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList,\n    ModalFormAndListLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport FraværPeriodeForm from './FraværPeriodeForm';\nimport FraværPerioderList from './FraværPerioderList';\nimport { FraværPeriode } from './types';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames, ValidationError> {\n    name: FieldNames;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n    periodeDescription?: JSX.Element;\n    formHeaderContent?: JSX.Element;\n    dateRangesToDisable?: DateRange[];\n    begrensTilSammeÅr?: boolean;\n    helgedagerIkkeTillat?: boolean;\n}\n\nfunction FraværPerioderListAndDialog<FieldNames>({\n    name,\n    minDate,\n    maxDate,\n    dateRangesToDisable,\n    periodeDescription,\n    formHeaderContent,\n    begrensTilSammeÅr = true,\n    validate,\n    labels,\n    helgedagerIkkeTillat,\n}: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, FraværPeriode, ValidationError>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                sortFunc={(fraværPeriodeA: FraværPeriode, fraværPeriodeB: FraværPeriode) =>\n                    sortItemsByFom({ fom: fraværPeriodeA.fraOgMed }, { fom: fraværPeriodeB.tilOgMed })\n                }\n                formRenderer={({ onSubmit, onCancel, item }) => (\n                    <FraværPeriodeForm\n                        fraværPeriode={item}\n                        periodeDescription={periodeDescription}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        headerContent={formHeaderContent}\n                        dateRangesToDisable={dateRangesToDisable}\n                        helgedagerIkkeTillat={helgedagerIkkeTillat}\n                        begrensTilSammeÅr={begrensTilSammeÅr}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FraværPerioderList fraværPerioder={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FraværPerioderListAndDialog;\n","import React from 'react';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { FraværPeriode } from './types';\nimport FraværListItem from './FraværListItem';\n\ninterface Props {\n    fraværPerioder: FraværPeriode[];\n    onEdit?: (fraværPeriode: FraværPeriode) => void;\n    onDelete?: (fraværPeriode: FraværPeriode) => void;\n    useTrashcan?: boolean;\n}\n\nconst FraværPerioderList = ({ fraværPerioder = [], onDelete, onEdit, useTrashcan }: Props) => {\n    const getDateTitleString = (fraværPeriode: FraværPeriode) =>\n        `${prettifyDateExtended(fraværPeriode.fraOgMed)} - ${prettifyDateExtended(fraværPeriode.tilOgMed)}`;\n\n    const renderFraværPeriodeLabel = (fraværPeriode: FraværPeriode): React.ReactNode => {\n        const title = getDateTitleString(fraværPeriode);\n        return (\n            <FraværListItem\n                title={title}\n                årsak={fraværPeriode.årsak}\n                onEdit={onEdit ? () => onEdit(fraværPeriode) : undefined}\n            />\n        );\n    };\n\n    return (\n        <ItemList<FraværPeriode>\n            getItemId={(fraværPeriode) => fraværPeriode.id}\n            getItemTitle={(fraværPeriode) => getDateTitleString(fraværPeriode)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderFraværPeriodeLabel}\n            items={fraværPerioder.filter((fraværPeriode) => fraværPeriode.id !== undefined)}\n            useTrashcan={useTrashcan || false}\n        />\n    );\n};\n\nexport default FraværPerioderList;\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport CounsellorPanel from '@navikt/sif-common-core/lib/components/counsellor-panel/CounsellorPanel';\nimport ExpandableInfo from '@navikt/sif-common-core/lib/components/expandable-content/ExpandableInfo';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport ResponsivePanel from '@navikt/sif-common-core/lib/components/responsive-panel/ResponsivePanel';\nimport { date3YearsAgo, date4YearsAgo, dateToday, prettifyDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { getTypedFormComponents, ISOStringToDate, YesOrNo } from '@navikt/sif-common-formik/lib';\nimport {\n    getDateRangeValidator,\n    getDateValidator,\n    getListValidator,\n    getNumberValidator,\n    getOrgNumberValidator,\n    getRequiredFieldValidator,\n    getStringValidator,\n    getYesOrNoValidator,\n    ValidateDateError,\n    ValidateDateRangeError,\n    ValidateListError,\n    ValidateNumberError,\n    ValidateOrgNumberError,\n    ValidateRequiredFieldError,\n    ValidateStringError,\n    ValidateYesOrNoError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport { FormikProps } from 'formik';\nimport { Systemtittel, Undertittel } from 'nav-frontend-typografi';\nimport { isVirksomhet, Næringstype, Virksomhet, VirksomhetFormField, VirksomhetFormValues } from './types';\nimport {\n    erVirksomhetRegnetSomNyoppstartet,\n    harFiskerNæringstype,\n    mapFormValuesToVirksomhet,\n    mapVirksomhetToFormValues,\n} from './virksomhetUtils';\nimport { handleDateRangeValidationError } from '../utils';\n\ninterface Props {\n    virksomhet?: Virksomhet;\n    skipOrgNumValidation?: boolean;\n    harFlereVirksomheter?: boolean;\n    onSubmit: (oppdrag: Virksomhet) => void;\n    onCancel: () => void;\n}\n\nconst MAKS_INNTEKT = 999999999;\n\nexport const VirksomhetFormErrors = {\n    [VirksomhetFormField.næringstyper]: {\n        [ValidateListError.listIsEmpty]: 'virksomhetForm.næringstyper.listIsEmpty',\n    },\n    [VirksomhetFormField.fiskerErPåBladB]: {\n        [ValidateYesOrNoError.yesOrNoIsUnanswered]: 'virksomhetForm.fiskerErPåBladB.yesOrNoIsUnanswered',\n    },\n    [VirksomhetFormField.navnPåVirksomheten]: {\n        [ValidateStringError.stringHasNoValue]: 'virksomhetForm.navnPåVirksomheten.stringHasNoValue',\n    },\n    [VirksomhetFormField.registrertINorge]: {\n        [ValidateYesOrNoError.yesOrNoIsUnanswered]: 'virksomhetForm.registrertINorge.yesOrNoIsUnanswered',\n    },\n    [VirksomhetFormField.registrertILand]: {\n        [ValidateRequiredFieldError.noValue]: 'virksomhetForm.registrertILand.noValue',\n    },\n    [VirksomhetFormField.organisasjonsnummer]: {\n        [ValidateOrgNumberError.orgNumberHasInvalidFormat]:\n            'virksomhetForm.organisasjonsnummer.orgNumberHasInvalidFormat',\n    },\n    [VirksomhetFormField.fom]: {\n        [ValidateDateError.dateHasNoValue]: 'virksomhetForm.fom.dateHasNoValue',\n        [ValidateDateError.dateIsAfterMax]: 'virksomhetForm.fom.dateIsAfterMax',\n        [ValidateDateError.dateHasInvalidFormat]: 'virksomhetForm.fom.dateHasInvalidFormat',\n        [ValidateDateRangeError.fromDateIsAfterToDate]: 'virksomhetForm.fom.fromDateIsAfterToDate',\n    },\n    [VirksomhetFormField.tom]: {\n        [ValidateDateError.dateHasNoValue]: 'virksomhetForm.tom.dateHasNoValue',\n        [ValidateDateError.dateIsBeforeMin]: 'virksomhetForm.tom.dateIsBeforeMin',\n        [ValidateDateError.dateIsAfterMax]: 'virksomhetForm.tom.dateIsAfterMax',\n        [ValidateDateError.dateHasInvalidFormat]: 'virksomhetForm.tom.dateHasInvalidFormat',\n        [ValidateDateRangeError.toDateIsBeforeFromDate]: 'virksomhetForm.tom.toDateIsBeforeFromDate',\n    },\n    [VirksomhetFormField.næringsinntekt]: {\n        [ValidateNumberError.numberHasInvalidFormat]: 'virksomhetForm.næringsinntekt.numberHasInvalidFormat',\n        [ValidateNumberError.numberIsTooSmall]: 'virksomhetForm.næringsinntekt.numberIsTooSmall',\n        [ValidateNumberError.numberIsTooLarge]: 'virksomhetForm.næringsinntekt.numberIsTooLarge',\n    },\n    [VirksomhetFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene]: {\n        [ValidateYesOrNoError.yesOrNoIsUnanswered]:\n            'virksomhetForm.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene.yesOrNoIsUnanswered',\n    },\n    [VirksomhetFormField.blittYrkesaktivDato]: {\n        [ValidateDateError.dateHasNoValue]: 'virksomhetForm.blittYrkesaktivDato.dateHasNoValue',\n        [ValidateDateError.dateHasInvalidFormat]: 'virksomhetForm.blittYrkesaktivDato.dateHasInvalidFormat',\n        [ValidateDateError.dateIsAfterMax]: 'virksomhetForm.blittYrkesaktivDato.dateIsAfterMax',\n        [ValidateDateError.dateIsBeforeMin]: 'virksomhetForm.blittYrkesaktivDato.dateIsBeforeMin',\n    },\n    [VirksomhetFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår]: {\n        [ValidateYesOrNoError.yesOrNoIsUnanswered]:\n            'virksomhetForm.hattVarigEndringAvNæringsinntektSiste4Kalenderår.yesOrNoIsUnanswered',\n    },\n    [VirksomhetFormField.varigEndringINæringsinntekt_dato]: {\n        [ValidateDateError.dateHasNoValue]: 'virksomhetForm.varigEndringINæringsinntekt_dato.dateHasNoValue',\n        [ValidateDateError.dateHasInvalidFormat]:\n            'virksomhetForm.varigEndringINæringsinntekt_dato.dateHasInvalidFormat',\n        [ValidateDateError.dateIsAfterMax]: 'virksomhetForm.varigEndringINæringsinntekt_dato.dateIsAfterMax',\n        [ValidateDateError.dateIsBeforeMin]: 'virksomhetForm.varigEndringINæringsinntekt_dato.dateIsBeforeMin',\n    },\n    [VirksomhetFormField.varigEndringINæringsinntekt_inntektEtterEndring]: {\n        [ValidateNumberError.numberHasNoValue]:\n            'virksomhetForm.varigEndringINæringsinntekt_inntektEtterEndring.numberHasNoValue',\n        [ValidateNumberError.numberHasInvalidFormat]:\n            'virksomhetForm.varigEndringINæringsinntekt_inntektEtterEndring.numberHasInvalidFormat',\n        [ValidateNumberError.numberIsTooLarge]:\n            'virksomhetForm.varigEndringINæringsinntekt_inntektEtterEndring.numberIsTooLarge',\n        [ValidateNumberError.numberIsTooSmall]:\n            'virksomhetForm.varigEndringINæringsinntekt_inntektEtterEndring.numberIsTooSmall',\n    },\n    [VirksomhetFormField.varigEndringINæringsinntekt_forklaring]: {\n        [ValidateStringError.stringHasNoValue]:\n            'virksomhetForm.varigEndringINæringsinntekt_forklaring.stringHasNoValue',\n        [ValidateStringError.stringIsTooLong]: 'virksomhetForm.varigEndringINæringsinntekt_forklaring.stringIsTooLong',\n        [ValidateStringError.stringIsTooShort]:\n            'virksomhetForm.varigEndringINæringsinntekt_forklaring.stringIsTooShort',\n    },\n    [VirksomhetFormField.harRegnskapsfører]: {\n        [ValidateYesOrNoError.yesOrNoIsUnanswered]: 'virksomhetForm.harRegnskapsfører.yesOrNoIsUnanswered',\n    },\n    [VirksomhetFormField.regnskapsfører_navn]: {\n        [ValidateStringError.stringHasNoValue]: 'virksomhetForm.regnskapsfører_navn.stringHasNoValue',\n        [ValidateStringError.stringIsTooLong]: 'virksomhetForm.regnskapsfører_navn.stringIsTooLong',\n        [ValidateStringError.stringIsTooShort]: 'virksomhetForm.regnskapsfører_navn.stringIsTooShort',\n    },\n    [VirksomhetFormField.regnskapsfører_telefon]: {\n        [ValidateStringError.stringHasNoValue]: 'virksomhetForm.regnskapsfører_telefon.stringHasNoValue',\n        [ValidateStringError.stringIsTooLong]: 'virksomhetForm.regnskapsfører_telefon.stringIsTooLong',\n        [ValidateStringError.stringIsTooShort]: 'virksomhetForm.regnskapsfører_telefon.stringIsTooShort',\n    },\n};\n\nconst Form = getTypedFormComponents<VirksomhetFormField, VirksomhetFormValues, ValidationError>();\n\nconst visNæringsinntekt = (values: VirksomhetFormValues): boolean => {\n    const fomDate = ISOStringToDate(values.fom);\n    return fomDate !== undefined && erVirksomhetRegnetSomNyoppstartet(fomDate);\n};\n\nconst ensureValidNæringsinntekt = (values: VirksomhetFormValues): number | undefined => {\n    if (visNæringsinntekt(values)) {\n        return values.næringsinntekt;\n    }\n    return undefined;\n};\n\nconst VirksomhetForm = ({ virksomhet, harFlereVirksomheter, onSubmit, onCancel, skipOrgNumValidation }: Props) => {\n    const intl = useIntl();\n    const getText = (key: string, value?: any): string => intlHelper(intl, `${key}`, value);\n\n    const onFormikSubmit = (values: VirksomhetFormValues) => {\n        const virksomhetToSubmit = mapFormValuesToVirksomhet(values, virksomhet?.id);\n        if (isVirksomhet(virksomhetToSubmit)) {\n            onSubmit({\n                ...virksomhetToSubmit,\n                næringsinntekt: ensureValidNæringsinntekt(values),\n            });\n        } else {\n            throw new Error('VirksomhetForm: Formvalues is not a valid Virksomhet on submit.');\n        }\n    };\n\n    return (\n        <Form.FormikWrapper\n            initialValues={virksomhet ? mapVirksomhetToFormValues(virksomhet) : { næringstyper: [] }}\n            onSubmit={onFormikSubmit}\n            renderForm={(formik: FormikProps<VirksomhetFormValues>) => {\n                const { values, setFieldValue } = formik;\n                const { navnPåVirksomheten = 'virksomheten', næringstyper = [] } = values;\n                const fomDate = ISOStringToDate(values.fom);\n                const tomDate = ISOStringToDate(values.tom);\n                return (\n                    <Form.Form\n                        includeValidationSummary={true}\n                        onCancel={onCancel}\n                        formErrorHandler={getFormErrorHandler(intl, 'virksomhetForm')}>\n                        <Box padBottom=\"l\">\n                            <Systemtittel tag=\"h1\">\n                                {harFlereVirksomheter\n                                    ? getText('sifForms.virksomhet.form_title.flere')\n                                    : getText('sifForms.virksomhet.form_title')}\n                            </Systemtittel>\n                        </Box>\n\n                        <Form.CheckboxPanelGroup\n                            name={VirksomhetFormField.næringstyper}\n                            legend={getText('sifForms.virksomhet.hvilken_type_virksomhet')}\n                            checkboxes={[\n                                {\n                                    value: Næringstype.FISKE,\n                                    label: getText(`sifForms.virksomhet.næringstype_${Næringstype.FISKE}`),\n                                },\n                                {\n                                    value: Næringstype.JORDBRUK_SKOGBRUK,\n                                    label: getText(`sifForms.virksomhet.næringstype_${Næringstype.JORDBRUK_SKOGBRUK}`),\n                                },\n                                {\n                                    value: Næringstype.DAGMAMMA,\n                                    label: getText(`sifForms.virksomhet.næringstype_${Næringstype.DAGMAMMA}`),\n                                },\n                                {\n                                    value: Næringstype.ANNEN,\n                                    label: getText(`sifForms.virksomhet.næringstype_${Næringstype.ANNEN}`),\n                                },\n                            ]}\n                            validate={getListValidator({ required: true })}\n                        />\n\n                        {harFiskerNæringstype(næringstyper) && (\n                            <Box margin=\"xl\">\n                                <Form.YesOrNoQuestion\n                                    name={VirksomhetFormField.fiskerErPåBladB}\n                                    legend={getText('sifForms.virksomhet.fisker_blad_b')}\n                                    validate={getYesOrNoValidator()}\n                                />\n                            </Box>\n                        )}\n\n                        <Box margin=\"xl\">\n                            <Form.Input\n                                name={VirksomhetFormField.navnPåVirksomheten}\n                                label={getText('sifForms.virksomhet.hva_heter_virksomheten')}\n                                validate={getStringValidator({ required: true })}\n                                maxLength={50}\n                            />\n                        </Box>\n\n                        <Box margin=\"xl\">\n                            <Form.YesOrNoQuestion\n                                name={VirksomhetFormField.registrertINorge}\n                                legend={getText('sifForms.virksomhet.registert_i_norge', { navnPåVirksomheten })}\n                                validate={getYesOrNoValidator()}\n                                description={\n                                    harFiskerNæringstype(næringstyper) ? (\n                                        <ExpandableInfo\n                                            title={intlHelper(intl, 'sifForms.virksomhet.veileder_fisker.tittel')}>\n                                            <FormattedMessage\n                                                id=\"sifForms.virksomhet.veileder_fisker\"\n                                                values={{ navnPåVirksomheten }}\n                                            />\n                                        </ExpandableInfo>\n                                    ) : undefined\n                                }\n                            />\n                        </Box>\n\n                        {values.registrertINorge === YesOrNo.NO && (\n                            <Box margin=\"xl\">\n                                <Form.CountrySelect\n                                    name={VirksomhetFormField.registrertILand}\n                                    label={getText('sifForms.virksomhet.registert_i_hvilket_land', {\n                                        navnPåVirksomheten,\n                                    })}\n                                    validate={getRequiredFieldValidator()}\n                                    useAlpha3Code={true}\n                                />\n                            </Box>\n                        )}\n\n                        {values.registrertINorge === YesOrNo.YES && (\n                            <Box margin=\"xl\">\n                                <Form.Input\n                                    name={VirksomhetFormField.organisasjonsnummer}\n                                    label={getText('sifForms.virksomhet.organisasjonsnummer')}\n                                    style={{ maxWidth: '10rem' }}\n                                    maxLength={9}\n                                    validate={\n                                        skipOrgNumValidation ? undefined : getOrgNumberValidator({ required: true })\n                                    }\n                                />\n                            </Box>\n                        )}\n\n                        {(values.registrertINorge === YesOrNo.YES || values.registrertINorge === YesOrNo.NO) && (\n                            <Box margin=\"xl\">\n                                <Form.DateRangePicker\n                                    legend={getText('sifForms.virksomhet.startdato', { navnPåVirksomheten })}\n                                    showYearSelector={true}\n                                    maxDate={dateToday}\n                                    fromInputProps={{\n                                        label: getText('sifForms.virksomhet.kalender_fom'),\n                                        name: VirksomhetFormField.fom,\n                                        validate: (value) => {\n                                            const error = getDateRangeValidator({\n                                                required: true,\n                                                max: dateToday,\n                                                toDate: tomDate,\n                                            }).validateFromDate(value);\n                                            if (error === ValidateDateError.dateIsAfterMax) {\n                                                return {\n                                                    key: error,\n                                                    values: { dato: prettifyDate(dateToday) },\n                                                };\n                                            }\n                                            return error;\n                                        },\n                                    }}\n                                    toInputProps={{\n                                        label: getText('sifForms.virksomhet.kalender_tom'),\n                                        name: VirksomhetFormField.tom,\n                                        disabled: values.erPågående === true,\n                                        validate:\n                                            values.erPågående === true\n                                                ? undefined\n                                                : (value) => {\n                                                      const error = getDateRangeValidator({\n                                                          required: true,\n                                                          max: dateToday,\n                                                          fromDate: fomDate,\n                                                      }).validateToDate(value);\n                                                      return handleDateRangeValidationError(\n                                                          error,\n                                                          undefined,\n                                                          dateToday\n                                                      );\n                                                  },\n                                    }}\n                                />\n                                <Form.Checkbox\n                                    label={getText('sifForms.virksomhet.kalender_pågående')}\n                                    name={VirksomhetFormField.erPågående}\n                                    afterOnChange={(checked) => {\n                                        if (checked) {\n                                            setFieldValue(VirksomhetFormField.tom, undefined);\n                                        }\n                                    }}\n                                />\n                            </Box>\n                        )}\n\n                        {fomDate && (\n                            <>\n                                {harFlereVirksomheter && (\n                                    <Box margin=\"xxl\">\n                                        {erVirksomhetRegnetSomNyoppstartet(fomDate) ? (\n                                            <>\n                                                <Undertittel>\n                                                    {getText(\n                                                        'sifForms.virksomhet.nyoppstartet.næringsinntektFlere.header'\n                                                    )}\n                                                </Undertittel>\n                                                <p>\n                                                    {getText(\n                                                        'sifForms.virksomhet.nyoppstartet.næringsinntektFlere.info'\n                                                    )}\n                                                </p>\n                                            </>\n                                        ) : (\n                                            <>\n                                                <Undertittel>\n                                                    {getText(\n                                                        'sifForms.virksomhet.ikkeNyoppstartet.næringsinntektFlere.header'\n                                                    )}\n                                                </Undertittel>\n                                                <p>\n                                                    {getText(\n                                                        'sifForms.virksomhet.ikkeNyoppstaret.næringsinntektFlere.info'\n                                                    )}\n                                                </p>\n                                            </>\n                                        )}\n                                    </Box>\n                                )}\n\n                                {/* Nyoppstartet  */}\n                                {erVirksomhetRegnetSomNyoppstartet(fomDate) && (\n                                    <>\n                                        <Box margin=\"xl\">\n                                            <Form.NumberInput\n                                                name={VirksomhetFormField.næringsinntekt}\n                                                label={\n                                                    harFlereVirksomheter\n                                                        ? getText(\n                                                              'sifForms.virksomhet.næringsinntekt.flereVirksomheter.spm'\n                                                          )\n                                                        : getText('sifForms.virksomhet.næringsinntekt.enVirksomhet.spm')\n                                                }\n                                                maxLength={10}\n                                                style={{ maxWidth: '10rem' }}\n                                                validate={(value) => {\n                                                    const error = getNumberValidator({\n                                                        required: true,\n                                                        min: 0,\n                                                        max: MAKS_INNTEKT,\n                                                    })(value);\n                                                    return error\n                                                        ? {\n                                                              key: error,\n                                                              values: {\n                                                                  navn: navnPåVirksomheten,\n                                                                  maks: MAKS_INNTEKT,\n                                                                  min: 0,\n                                                              },\n                                                          }\n                                                        : undefined;\n                                                }}\n                                                description={\n                                                    <>\n                                                        {harFlereVirksomheter\n                                                            ? getText(\n                                                                  'sifForms.virksomhet.næringsinntekt.flereVirksomheter.spm.description'\n                                                              )\n                                                            : getText(\n                                                                  'sifForms.virksomhet.næringsinntekt.enVirksomhet.spm.description'\n                                                              )}\n                                                        <ExpandableInfo\n                                                            title={getText(\n                                                                'sifForms.virksomhet.hvaErNæringsresultat.title'\n                                                            )}>\n                                                            {harFlereVirksomheter\n                                                                ? getText(\n                                                                      'sifForms.virksomhet.hvaErNæringsresultat.flereVirksomheter.text'\n                                                                  )\n                                                                : getText(\n                                                                      'sifForms.virksomhet.hvaErNæringsresultat.enVirksomhet.text'\n                                                                  )}\n                                                        </ExpandableInfo>\n                                                    </>\n                                                }\n                                            />\n                                        </Box>\n                                        <Box margin=\"xl\">\n                                            <Form.YesOrNoQuestion\n                                                name={\n                                                    VirksomhetFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene\n                                                }\n                                                legend={getText('sifForms.virksomhet.har_blitt_yrkesaktiv')}\n                                                validate={getYesOrNoValidator()}\n                                                description={\n                                                    <ExpandableInfo\n                                                        title={getText(\n                                                            'sifForms.virksomhet.har_blitt_yrkesaktiv_info_title'\n                                                        )}>\n                                                        {getText('sifForms.virksomhet.har_blitt_yrkesaktiv_info')}\n                                                    </ExpandableInfo>\n                                                }\n                                            />\n                                        </Box>\n                                        {values.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene ===\n                                            YesOrNo.YES && (\n                                            <FormBlock margin=\"m\">\n                                                <ResponsivePanel>\n                                                    <Form.DatePicker\n                                                        name={VirksomhetFormField.blittYrkesaktivDato}\n                                                        label={getText('sifForms.virksomhet.har_blitt_yrkesaktiv_dato')}\n                                                        showYearSelector={true}\n                                                        minDate={date3YearsAgo}\n                                                        maxDate={dateToday}\n                                                        validate={getDateValidator({\n                                                            required: true,\n                                                            max: dateToday,\n                                                            min: date3YearsAgo,\n                                                        })}\n                                                    />\n                                                </ResponsivePanel>\n                                            </FormBlock>\n                                        )}\n                                    </>\n                                )}\n\n                                {/* Ikke nyoppstartet */}\n                                {erVirksomhetRegnetSomNyoppstartet(fomDate) === false && (\n                                    <>\n                                        <Box margin=\"xl\">\n                                            <Form.YesOrNoQuestion\n                                                name={\n                                                    VirksomhetFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår\n                                                }\n                                                legend={getText('sifForms.virksomhet.varig_endring_spm')}\n                                                validate={getYesOrNoValidator()}\n                                            />\n                                        </Box>\n                                        {values.hattVarigEndringAvNæringsinntektSiste4Kalenderår === YesOrNo.YES && (\n                                            <>\n                                                <Box margin=\"xl\">\n                                                    <Form.DatePicker\n                                                        name={VirksomhetFormField.varigEndringINæringsinntekt_dato}\n                                                        label={getText('sifForms.virksomhet.varig_endring_dato')}\n                                                        validate={(value) => {\n                                                            const error = getDateValidator({\n                                                                required: true,\n                                                                min: date4YearsAgo,\n                                                                max: dateToday,\n                                                            })(value);\n                                                            if (error) {\n                                                                return {\n                                                                    key: error,\n                                                                    values: {\n                                                                        navn: navnPåVirksomheten,\n                                                                        min: prettifyDate(date4YearsAgo),\n                                                                        max: prettifyDate(dateToday),\n                                                                    },\n                                                                };\n                                                            }\n                                                        }}\n                                                        minDate={date4YearsAgo}\n                                                        maxDate={dateToday}\n                                                    />\n                                                </Box>\n                                                <Box margin=\"xl\">\n                                                    <Form.NumberInput\n                                                        name={\n                                                            VirksomhetFormField.varigEndringINæringsinntekt_inntektEtterEndring\n                                                        }\n                                                        label={getText('sifForms.virksomhet.varig_endring_inntekt')}\n                                                        maxLength={10}\n                                                        style={{ maxWidth: '10rem' }}\n                                                        validate={(value) => {\n                                                            const error = getNumberValidator({\n                                                                required: true,\n                                                                min: 0,\n                                                                max: MAKS_INNTEKT,\n                                                            })(value);\n                                                            return error\n                                                                ? {\n                                                                      key: error,\n                                                                      values: {\n                                                                          navn: navnPåVirksomheten,\n                                                                          min: 0,\n                                                                          maks: MAKS_INNTEKT,\n                                                                      },\n                                                                  }\n                                                                : undefined;\n                                                        }}\n                                                    />\n                                                </Box>\n                                                <Box margin=\"xl\">\n                                                    <Form.Textarea\n                                                        name={\n                                                            VirksomhetFormField.varigEndringINæringsinntekt_forklaring\n                                                        }\n                                                        label={getText('sifForms.virksomhet.varig_endring_tekst')}\n                                                        maxLength={1000}\n                                                        validate={(value) => {\n                                                            const error = getStringValidator({\n                                                                required: true,\n                                                                minLength: 5,\n                                                                maxLength: 1000,\n                                                            })(value);\n                                                            return error\n                                                                ? {\n                                                                      key: error,\n                                                                      values: {\n                                                                          navn: navnPåVirksomheten,\n                                                                          min: 5,\n                                                                          maks: 1000,\n                                                                      },\n                                                                  }\n                                                                : undefined;\n                                                        }}\n                                                    />\n                                                </Box>\n                                            </>\n                                        )}\n                                    </>\n                                )}\n\n                                {values.registrertINorge === YesOrNo.YES && (\n                                    <>\n                                        <Box margin=\"xl\">\n                                            <Form.YesOrNoQuestion\n                                                name={VirksomhetFormField.harRegnskapsfører}\n                                                legend={getText('sifForms.virksomhet.regnskapsfører_spm')}\n                                                validate={getYesOrNoValidator()}\n                                            />\n                                        </Box>\n                                        {values.harRegnskapsfører === YesOrNo.YES && (\n                                            <FormBlock margin=\"m\">\n                                                <ResponsivePanel>\n                                                    <Form.Input\n                                                        name={VirksomhetFormField.regnskapsfører_navn}\n                                                        label={getText('sifForms.virksomhet.regnskapsfører_navn')}\n                                                        validate={(value) => {\n                                                            const error = getStringValidator({\n                                                                required: true,\n                                                                minLength: 2,\n                                                                maxLength: 50,\n                                                            })(value);\n\n                                                            return error\n                                                                ? {\n                                                                      key: error,\n                                                                      values: {\n                                                                          navn: navnPåVirksomheten,\n                                                                          min: 2,\n                                                                          maks: 1000,\n                                                                      },\n                                                                  }\n                                                                : undefined;\n                                                        }}\n                                                        maxLength={50}\n                                                    />\n                                                    <Box margin=\"xl\">\n                                                        <Form.Input\n                                                            name={VirksomhetFormField.regnskapsfører_telefon}\n                                                            label={getText(\n                                                                'sifForms.virksomhet.regnskapsfører_telefon'\n                                                            )}\n                                                            validate={(value) => {\n                                                                const error = getStringValidator({\n                                                                    required: true,\n                                                                    minLength: 5,\n                                                                    maxLength: 15,\n                                                                })(value);\n\n                                                                return error\n                                                                    ? {\n                                                                          key: error,\n                                                                          values: {\n                                                                              navn: navnPåVirksomheten,\n                                                                              min: 5,\n                                                                              maks: 15,\n                                                                          },\n                                                                      }\n                                                                    : undefined;\n                                                            }}\n                                                            maxLength={15}\n                                                        />\n                                                    </Box>\n                                                </ResponsivePanel>\n                                            </FormBlock>\n                                        )}\n                                    </>\n                                )}\n                                {values.harRegnskapsfører === YesOrNo.YES && (\n                                    <Box margin=\"xl\">\n                                        <CounsellorPanel>\n                                            {getText('sifForms.virksomhet.veileder_innhenter_info.1')}\n                                            <br />\n                                            {getText('sifForms.virksomhet.veileder_innhenter_info.2')}\n                                        </CounsellorPanel>\n                                    </Box>\n                                )}\n                            </>\n                        )}\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default VirksomhetForm;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport {\n    FormikModalFormAndInfo,\n    ModalFormAndInfoLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport { mapVirksomhetToVirksomhetApiData } from './mapVirksomhetToApiData';\nimport { Virksomhet } from './types';\nimport VirksomhetForm from './VirksomhetForm';\nimport VirksomhetSummary from './VirksomhetSummary';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames, ValidationError> {\n    name: FieldNames;\n    labels: ModalFormAndInfoLabels;\n    skipOrgNumValidation?: boolean;\n    harFlereVirksomheter?: boolean;\n    onAfterChange?: (virksomhet: Virksomhet) => void;\n}\n\nfunction VirksomhetInfoAndDialog<FieldNames>({\n    name,\n    labels,\n    skipOrgNumValidation,\n    harFlereVirksomheter,\n    validate,\n    onAfterChange,\n}: Props<FieldNames>) {\n    const intl = useIntl();\n    return (\n        <FormikModalFormAndInfo<FieldNames, Virksomhet, ValidationError>\n            name={name}\n            validate={validate}\n            labels={labels}\n            dialogWidth=\"narrow\"\n            renderEditButtons={true}\n            formRenderer={({ onSubmit, onCancel, data }) => (\n                <VirksomhetForm\n                    virksomhet={data}\n                    harFlereVirksomheter={harFlereVirksomheter}\n                    onSubmit={onSubmit}\n                    onCancel={onCancel}\n                    skipOrgNumValidation={skipOrgNumValidation}\n                />\n            )}\n            infoRenderer={({ data }) => (\n                <VirksomhetSummary virksomhet={mapVirksomhetToVirksomhetApiData(intl.locale, data)} />\n            )}\n            onAfterChange={onAfterChange}\n        />\n    );\n}\n\nexport default VirksomhetInfoAndDialog;\n","import ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { getFraværÅrsakTekstKort } from './fraværMessages';\nimport { FraværÅrsak } from './types';\n\ninterface Props {\n    title: string;\n    årsak?: FraværÅrsak;\n    onEdit?: () => void;\n}\n\nconst FraværListItem: React.FunctionComponent<Props> = ({ title, årsak, onEdit }: Props) => {\n    const intl = useIntl();\n    return (\n        <div style={{ padding: '.5rem 0' }}>\n            <div>{onEdit ? <ActionLink onClick={() => onEdit()}>{title}</ActionLink> : { title }}</div>\n            {årsak && årsak !== FraværÅrsak.ordinært && (\n                <div style={{ marginTop: '.25rem' }}>\n                    <FormattedMessage\n                        id={`fravær.list.årsak`}\n                        values={{ årsak: getFraværÅrsakTekstKort(årsak, intl) }}\n                    />\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default FraværListItem;\n","import intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { RadioPanelProps } from 'nav-frontend-skjema';\nimport { IntlShape } from 'react-intl';\nimport { FraværÅrsak } from './types';\n\nexport const getFraværÅrsakRadios = (intl: IntlShape): RadioPanelProps[] => [\n    {\n        label: intlHelper(intl, `fravær.årsak.${FraværÅrsak.stengtSkoleBhg}`),\n        value: FraværÅrsak.stengtSkoleBhg,\n    },\n    {\n        label: intlHelper(intl, `fravær.årsak.${FraværÅrsak.smittevernhensyn}`),\n        value: FraværÅrsak.smittevernhensyn,\n    },\n];\n","import ExpandableInfo from '@navikt/sif-common-core/lib/components/expandable-content/ExpandableInfo';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { Element } from 'nav-frontend-typografi';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormattedHtmlMessage from '../components/formatted-html-message/FormattedHtmlMessage';\n\nconst ÅrsakInfo: React.FunctionComponent = () => {\n    const intl = useIntl();\n    return (\n        <ExpandableInfo title={intlHelper(intl, 'info.årsak.tittel')}>\n            <p style={{ marginTop: '0' }}>\n                <FormattedHtmlMessage id=\"info.årsak.info.1\" />\n            </p>\n            <Element tag=\"h3\">\n                <FormattedHtmlMessage id=\"info.årsak.info.2\" />\n            </Element>\n            <FormattedHtmlMessage id=\"info.årsak.info.3\" />\n        </ExpandableInfo>\n    );\n};\n\nexport default ÅrsakInfo;\n","import React from 'react';\n\nconst Sitat: React.FunctionComponent = ({ children }) => (\n    <span\n        style={{\n            display: 'block',\n            paddingLeft: '.5rem',\n            margin: '0.5rem 0',\n            borderLeft: '2px solid #C6C2BF',\n            fontStyle: 'italic',\n        }}>\n        {children}\n    </span>\n);\n\nexport default Sitat;\n","import { ApiStringDate } from '@navikt/sif-common-core/lib/types/ApiStringDate';\nimport { YesOrNo } from '@navikt/sif-common-core/lib/types/YesOrNo';\n\nexport enum Næringstype {\n    'FISKE' = 'FISKE',\n    'JORDBRUK_SKOGBRUK' = 'JORDBRUK_SKOGBRUK',\n    'DAGMAMMA' = 'DAGMAMMA',\n    'ANNEN' = 'ANNEN',\n}\n\nexport enum VirksomhetFormField {\n    'næringstyper' = 'næringstyper',\n    'fiskerErPåBladB' = 'fiskerErPåBladB',\n    'fom' = 'fom',\n    'tom' = 'tom',\n    'næringsinntekt' = 'næringsinntekt',\n    'erPågående' = 'erPågående',\n    'navnPåVirksomheten' = 'navnPåVirksomheten',\n    'organisasjonsnummer' = 'organisasjonsnummer',\n    'registrertINorge' = 'registrertINorge',\n    'registrertILand' = 'registrertILand',\n    'harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene' = 'harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene',\n    'blittYrkesaktivDato' = 'blittYrkesaktivDato',\n    'hattVarigEndringAvNæringsinntektSiste4Kalenderår' = 'hattVarigEndringAvNæringsinntektSiste4Kalenderår',\n    'varigEndringINæringsinntekt_dato' = 'varigEndringINæringsinntekt_dato',\n    'varigEndringINæringsinntekt_inntektEtterEndring' = 'varigEndringINæringsinntekt_inntektEtterEndring',\n    'varigEndringINæringsinntekt_forklaring' = 'varigEndringINæringsinntekt_forklaring',\n    'endretNæringsinntektInformasjon' = 'endretNæringsinntektInformasjon',\n    'harRegnskapsfører' = 'harRegnskapsfører',\n    'regnskapsfører' = 'regnskapsfører',\n    'regnskapsfører_navn' = 'regnskapsfører_navn',\n    'regnskapsfører_telefon' = 'regnskapsfører_telefon',\n}\n\nexport interface Virksomhet {\n    id?: string;\n    [VirksomhetFormField.næringstyper]: Næringstype[];\n    [VirksomhetFormField.fiskerErPåBladB]?: YesOrNo;\n    [VirksomhetFormField.fom]: Date;\n    [VirksomhetFormField.tom]?: Date;\n    [VirksomhetFormField.næringsinntekt]?: number;\n    [VirksomhetFormField.erPågående]?: boolean;\n    [VirksomhetFormField.navnPåVirksomheten]: string;\n    [VirksomhetFormField.organisasjonsnummer]?: string;\n    [VirksomhetFormField.registrertINorge]: YesOrNo;\n    [VirksomhetFormField.registrertILand]?: string;\n    [VirksomhetFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene]?: YesOrNo;\n    [VirksomhetFormField.blittYrkesaktivDato]?: Date;\n    [VirksomhetFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår]?: YesOrNo;\n    [VirksomhetFormField.varigEndringINæringsinntekt_dato]?: Date;\n    [VirksomhetFormField.varigEndringINæringsinntekt_inntektEtterEndring]?: number;\n    [VirksomhetFormField.varigEndringINæringsinntekt_forklaring]?: string;\n    [VirksomhetFormField.harRegnskapsfører]: YesOrNo;\n    [VirksomhetFormField.regnskapsfører_navn]?: string;\n    [VirksomhetFormField.regnskapsfører_telefon]?: string;\n}\nexport type VirksomhetFormValues = Partial<\n    Omit<Virksomhet, 'fom' | 'tom' | 'blittYrkesaktivDato' | 'varigEndringINæringsinntekt_dato'> & {\n        [VirksomhetFormField.fom]: string;\n        [VirksomhetFormField.tom]?: string;\n        [VirksomhetFormField.blittYrkesaktivDato]?: string;\n        [VirksomhetFormField.varigEndringINæringsinntekt_dato]?: string;\n    }\n>;\n\nexport const isVirksomhet = (virksomhet: Partial<Virksomhet>): virksomhet is Virksomhet => {\n    return virksomhet !== undefined;\n};\n\nexport interface VirksomhetApiData {\n    næringstyper: Næringstype[];\n    fiskerErPåBladB?: boolean;\n    fraOgMed: ApiStringDate;\n    tilOgMed?: ApiStringDate | null;\n    erNyoppstartet: boolean;\n    næringsinntekt?: number;\n    navnPåVirksomheten: string;\n    organisasjonsnummer?: string;\n    registrertINorge: boolean;\n    registrertIUtlandet?: {\n        landkode: string;\n        landnavn: string;\n    };\n    yrkesaktivSisteTreFerdigliknedeÅrene?: {\n        oppstartsdato: ApiStringDate;\n    };\n    varigEndring?: {\n        dato: ApiStringDate;\n        inntektEtterEndring: number;\n        forklaring: string;\n    };\n    regnskapsfører?: {\n        navn: string;\n        telefon: string;\n    };\n}\n","export * from './bostedUtlandMessages';\nexport * from './BostedUtlandForm';\nexport * from './BostedUtlandListAndDialog';\nexport * from './BostedUtlandList';\nexport * from './bostedUtlandMessages';\nexport * from './types';\n","export * from './ferieuttakMessages';\nexport * from './FerieuttakForm';\nexport * from './FerieuttakListAndDialog';\nexport * from './FerieuttakList';\nexport * from './ferieuttakMessages';\nexport * from './types';\n","export * from './FosterbarnForm';\nexport * from './FosterbarnListAndDialog';\nexport * from './FosterbarnList';\nexport * from './fosterbarnMessages';\nexport * from './types';\n","export * from './fraværMessages';\nexport * from './FraværPeriodeForm';\nexport * from './FraværDagForm';\nexport * from './FraværPerioderListAndDialog';\nexport * from './FraværDagerListAndDialog';\nexport * from './FraværPerioderList';\nexport * from './FraværDagerList';\nexport * from './fraværUtilities';\nexport * from './fraværMessages';\nexport * from './types';\n","export * from './tidsperiodeMessages';\nexport * from './TidsperiodeForm';\nexport * from './TidsperiodeListAndDialog';\nexport * from './TidsperiodeList';\nexport * from './tidsperiodeMessages';\nexport * from './types';\n","export * from './utenlandsoppholdMessages';\nexport * from './UtenlandsoppholdForm';\nexport * from './UtenlandsoppholdListAndDialog';\nexport * from './UtenlandsoppholdList';\nexport * from './utenlandsoppholdMessages';\nexport * from './types';\n","export * from './bosted-utland';\nexport * from './ferieuttak';\nexport * from './fosterbarn';\nexport * from './fravær';\nexport * from './tidsperiode';\nexport * from './utenlandsopphold';\nexport * from './virksomhet';\n","import { YesOrNo } from '@navikt/sif-common-core/lib/types/YesOrNo';\nimport { DateRange } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport dayjs from 'dayjs';\nimport isSameOrAfter from 'dayjs/plugin/isSameOrAfter';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\nimport { isString } from 'formik';\nimport { guid } from 'nav-frontend-js-utils';\nimport { FraværDag, FraværDagFormValues, FraværPeriode, FraværPeriodeFormValues, FraværÅrsak } from './types';\n\ndayjs.extend(isSameOrAfter);\ndayjs.extend(isSameOrBefore);\n\nexport const isFraværDag = (fraværDag: Partial<FraværDag>): fraværDag is FraværDag => {\n    return (\n        fraværDag.dato !== undefined &&\n        fraværDag.timerArbeidsdag !== undefined &&\n        fraværDag.timerFravær !== undefined &&\n        fraværDag.årsak !== undefined\n    );\n};\n\nexport const isFraværPeriode = (fraværPeriode: Partial<FraværPeriode>): fraværPeriode is FraværPeriode => {\n    return (\n        fraværPeriode.fraOgMed !== undefined &&\n        fraværPeriode.tilOgMed !== undefined &&\n        fraværPeriode.årsak !== undefined\n    );\n};\n\nexport const fraværDagToFraværDateRange = (fraværDag: FraværDag): DateRange => ({\n    from: fraværDag.dato,\n    to: fraværDag.dato,\n});\n\nexport const fraværPeriodeToDateRange = (fraværDag: FraværPeriode): DateRange => ({\n    from: fraværDag.fraOgMed,\n    to: fraværDag.tilOgMed,\n});\n\nexport enum Weekday {\n    monday = 'monday',\n    tuesday = 'tuesday',\n    wednesday = 'wednesday',\n    thursday = 'thursday',\n    friday = 'friday',\n    saturday = 'saturday',\n    sunday = 'sunday',\n}\n\nexport const getWeekdayName = (date: Date): Weekday | undefined => {\n    switch (date.getDay()) {\n        case 0:\n            return Weekday.sunday;\n        case 1:\n            return Weekday.monday;\n        case 2:\n            return Weekday.tuesday;\n        case 3:\n            return Weekday.wednesday;\n        case 4:\n            return Weekday.thursday;\n        case 5:\n            return Weekday.friday;\n        case 6:\n            return Weekday.saturday;\n        default:\n            return undefined;\n    }\n};\n\nexport const dateErHelg = (date: Date) =>\n    getWeekdayName(date) === Weekday.saturday || getWeekdayName(date) === Weekday.sunday;\n\nexport const rangeCollideWithRanges = (range: DateRange, ranges: DateRange[] = []): boolean => {\n    if (!range || !range.from || !range.to || ranges.length === 0) {\n        return false;\n    }\n    return ranges.some((periode) => {\n        const fromDay = dayjs(range.from);\n        const toDay = dayjs(range.to);\n        const { from, to } = periode;\n        if (fromDay.isBefore(from) && toDay.isAfter(to)) return true;\n        if (fromDay.isSameOrAfter(from, 'day') && fromDay.isSameOrBefore(to, 'day')) return true;\n        if (toDay.isSameOrAfter(from, 'day') && toDay.isSameOrBefore(to, 'day')) return true;\n    });\n};\n\nexport const dateCollideWithRanges = (date: Date | undefined, ranges: DateRange[] = []): boolean => {\n    if (!date || ranges.length === 0) {\n        return false;\n    }\n    return ranges.some((range) => {\n        return dayjs(date).isSameOrAfter(range.from, 'day') && dayjs(date).isSameOrBefore(range.to, 'day');\n    });\n};\n\nexport const timeText = (timer: string): string =>\n    timer === '0' || timer === '0.5' || timer === '1' ? 'time' : 'timer';\n\nexport const dateRangeToFomTom = (dateRange: DateRange): { fom: Date; tom: Date } => ({\n    fom: dateRange.from,\n    tom: dateRange.to,\n});\nexport const toMaybeNumber = (timerArbeidsdag: string | undefined): number | undefined => {\n    if (timerArbeidsdag && isString(timerArbeidsdag)) {\n        return parseFloat(timerArbeidsdag);\n    }\n    return undefined;\n};\n\nexport const getHjemmePgaKoronaFormValueFromFraværÅrsak = (årsak?: FraværÅrsak): YesOrNo => {\n    if (årsak === undefined) {\n        return YesOrNo.UNANSWERED;\n    }\n    return årsak === FraværÅrsak.smittevernhensyn || årsak === FraværÅrsak.stengtSkoleBhg ? YesOrNo.YES : YesOrNo.NO;\n};\n\nexport const getÅrsakFromFraværFormValues = (formValues: FraværDagFormValues | FraværPeriodeFormValues): FraværÅrsak =>\n    formValues.hjemmePgaKorona === YesOrNo.YES && formValues.årsak ? formValues.årsak : FraværÅrsak.ordinært;\n\nexport const mapFormValuesToFraværDag = (\n    formValues: FraværDagFormValues,\n    id: string | undefined\n): Partial<FraværDag> => {\n    return {\n        id: id || guid(),\n        timerArbeidsdag: formValues.timerArbeidsdag,\n        timerFravær: formValues.timerFravær,\n        dato: ISOStringToDate(formValues.dato),\n        årsak: getÅrsakFromFraværFormValues(formValues),\n    };\n};\n\nexport const mapFraværDagToFormValues = (fraværDag: Partial<FraværDag>): FraværDagFormValues => {\n    return {\n        timerArbeidsdag: fraværDag.timerArbeidsdag,\n        timerFravær: fraværDag.timerFravær,\n        dato: fraværDag.dato ? dateToISOString(fraværDag.dato) : '',\n        hjemmePgaKorona: getHjemmePgaKoronaFormValueFromFraværÅrsak(fraværDag.årsak),\n        årsak: fraværDag.årsak,\n    };\n};\n\nexport const mapFormValuesToFraværPeriode = (\n    formValues: FraværPeriodeFormValues,\n    id: string | undefined\n): Partial<FraværPeriode> => {\n    return {\n        id: id || guid(),\n        fraOgMed: ISOStringToDate(formValues.fraOgMed),\n        tilOgMed: ISOStringToDate(formValues.tilOgMed),\n        årsak: getÅrsakFromFraværFormValues(formValues),\n    };\n};\n\nexport const mapFraværPeriodeToFormValues = (fraværPeriode: Partial<FraværPeriode>): FraværPeriodeFormValues => {\n    return {\n        fraOgMed: fraværPeriode.fraOgMed ? dateToISOString(fraværPeriode.fraOgMed) : '',\n        tilOgMed: fraværPeriode.tilOgMed ? dateToISOString(fraværPeriode.tilOgMed) : '',\n        hjemmePgaKorona: getHjemmePgaKoronaFormValueFromFraværÅrsak(fraværPeriode.årsak),\n        årsak: fraværPeriode.årsak,\n    };\n};\n","import {\n    ValidateDateError,\n    ValidateDateRangeError,\n    ValidateFødselsnummerError,\n    ValidateListError,\n    ValidateNumberError,\n    ValidateRequiredFieldError,\n    ValidateStringError,\n    ValidateYesOrNoError,\n} from '@navikt/sif-common-formik/lib/validation';\n\nconst defaultValidationMessages = {\n    nb: {\n        [ValidateRequiredFieldError.noValue]: 'Feltet er påkrevd',\n        [ValidateYesOrNoError.yesOrNoIsUnanswered]: 'Feltet er påkrevd',\n        [ValidateFødselsnummerError.fødselsnummerHasNoValue]: 'Ugyldig fødselsnummer',\n        [ValidateFødselsnummerError.fødselsnummerIsInvalid]: 'Ugyldig fødselsnummer',\n        [ValidateFødselsnummerError.fødselsnummerIsNot11Chars]: 'Fødselsnummeret må bestå av 11 siffer',\n        [ValidateFødselsnummerError.fødselsnummerIsNotAllowed]:\n            'Fødselsnummeret du har fylt ut er ditt eget fødselsnummer',\n        [ValidateDateError.dateHasNoValue]: 'Dato er påkrevd',\n        [ValidateDateError.dateHasInvalidFormat]: 'Ugyldig datoformat. Formatet må være dd.mm.åååå',\n        [ValidateDateError.dateIsBeforeMin]: 'Dato kan ikke være tidligere enn {dato}',\n        [ValidateDateError.dateIsAfterMax]: `Dato kan ikke være etter {dato}`,\n        [ValidateDateRangeError.fromDateIsAfterToDate]: 'Fra-dato må være lik eller før til-dato',\n        [ValidateDateRangeError.toDateIsBeforeFromDate]: 'Til-dato må være lik eller etter fra-dato',\n        [ValidateListError.listIsEmpty]: 'Du har ikke lagt til noe i listen',\n        [ValidateListError.listHasTooFewItems]: 'Du har lagt til for få',\n        [ValidateListError.listHasTooFewItems]: 'Du har lagt til for mange',\n        [ValidateNumberError.numberHasNoValue]: 'Verdien er ikke et gyldig tall',\n        [ValidateNumberError.numberHasInvalidFormat]: 'Verdien er ikke et gyldig tall',\n        [ValidateNumberError.numberIsTooLarge]: 'Tallet kan ikke være større enn {maks}',\n        [ValidateNumberError.numberIsTooSmall]: 'Tallet kan ikke være mindre enn {min}',\n        [ValidateStringError.stringHasNoValue]: 'Verdien er ikke en tekst',\n        [ValidateStringError.stringIsNotAString]: 'Verdien er ikke en tekst',\n        [ValidateStringError.stringIsTooLong]: 'Teksten kan ikke inneholde flere enn {lengde} tegn',\n        [ValidateStringError.stringIsTooShort]: 'Teksten må være på minst {lengde} tegn',\n    },\n};\n\nexport default defaultValidationMessages;\n","import { DateRange } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { ValidationFunction } from '@navikt/sif-common-formik/lib/validation/types';\nimport {\n    dateCollideWithRanges,\n    dateErHelg,\n    fraværDagToFraværDateRange,\n    fraværPeriodeToDateRange,\n    rangeCollideWithRanges,\n} from './fraværUtilities';\nimport { FraværDag, FraværPeriode } from './types';\n\nexport enum FraværFieldValidationErrors {\n    fravær_timer_mer_enn_arbeidstimer = 'fravær_timer_mer_enn_arbeidstimer',\n    fra_og_til_er_ulike_år = 'fra_og_til_er_ulike_år',\n    er_helg = 'er_helg',\n    fra_dato_kolliderer_med_annet_fravær = 'fra_dato_kolliderer_med_annet_fravær',\n    til_dato_kolliderer_med_annet_fravær = 'til_dato_kolliderer_med_annet_fravær',\n    dato_kolliderer_med_annet_fravær = 'dato_kolliderer_med_annet_fravær',\n    dager_overlapper_med_andre_dager = 'dager_overlapper_med_andre_dager',\n}\n\nexport const validateLessOrEqualTo = (maybeMaxValue: number | undefined): ValidationFunction<any> => (\n    maybeValue: string | undefined\n) => {\n    const maybeValueFloat: number | undefined = maybeValue ? parseFloat(maybeValue) : undefined;\n    if (maybeMaxValue && maybeValueFloat) {\n        return maybeValueFloat <= maybeMaxValue\n            ? undefined\n            : FraværFieldValidationErrors.fravær_timer_mer_enn_arbeidstimer;\n    }\n    return undefined;\n};\n\nexport const validateErSammeÅr = (maybeDateFrom: string | undefined, maybeDateTo: string | undefined) => {\n    const fromDate = ISOStringToDate(maybeDateFrom);\n    const toDate = ISOStringToDate(maybeDateTo);\n    if (fromDate && toDate && fromDate.getFullYear() !== toDate.getFullYear()) {\n        return FraværFieldValidationErrors.fra_og_til_er_ulike_år;\n    }\n    return undefined;\n};\n\nexport const validateNotHelgedag = (maybeDate: string | undefined): FraværFieldValidationErrors | undefined => {\n    const date = ISOStringToDate(maybeDate);\n    return date && dateErHelg(date) ? FraværFieldValidationErrors.er_helg : undefined;\n};\n\nexport const validateFraværPeriodeCollision = (\n    from: Date | undefined,\n    to: Date | undefined,\n    ranges: DateRange[] | undefined\n): FraværFieldValidationErrors | undefined => {\n    if (!from || !to || (ranges || []).length === 0) {\n        return undefined;\n    }\n    return rangeCollideWithRanges({ from, to }, ranges)\n        ? FraværFieldValidationErrors.dager_overlapper_med_andre_dager\n        : undefined;\n};\n\nexport const validateFraOgMedForCollision = (\n    date: Date | undefined,\n    ranges: DateRange[] | undefined\n): FraværFieldValidationErrors | undefined => {\n    if (!date || (ranges || []).length === 0) {\n        return undefined;\n    }\n    return dateCollideWithRanges(date, ranges)\n        ? FraværFieldValidationErrors.fra_dato_kolliderer_med_annet_fravær\n        : undefined;\n};\n\nexport const validateTilOgMedForCollision = (\n    date: Date | undefined,\n    ranges: DateRange[] | undefined\n): FraværFieldValidationErrors | undefined => {\n    if (!date || (ranges || []).length === 0) {\n        return undefined;\n    }\n    return dateCollideWithRanges(date, ranges)\n        ? FraværFieldValidationErrors.til_dato_kolliderer_med_annet_fravær\n        : undefined;\n};\n\nexport const validateFraværDagCollision = (\n    date: Date | undefined,\n    ranges: DateRange[] | undefined\n): FraværFieldValidationErrors | undefined => {\n    if (!date || (ranges || []).length === 0) {\n        return undefined;\n    }\n    return dateCollideWithRanges(date, ranges)\n        ? FraværFieldValidationErrors.dato_kolliderer_med_annet_fravær\n        : undefined;\n};\n\nexport const validateNoCollisions = (\n    fraværDager: FraværDag[],\n    fraværPerioder: FraværPeriode[]\n): FraværFieldValidationErrors.dager_overlapper_med_andre_dager | undefined => {\n    if (fraværPerioder.length === 0 && fraværDager.length === 0) {\n        return undefined;\n    }\n\n    const allFraværDagDateRanges = fraværDager.map(fraværDagToFraværDateRange);\n    const allFraværPeriodeDateRanges = fraværPerioder.map(fraværPeriodeToDateRange);\n\n    const hasDateCollision = fraværDager.some((dag) => {\n        const rangesWithoutCurrentDag = [\n            ...fraværDager.filter((d) => d !== dag).map(fraværDagToFraværDateRange),\n            ...allFraværPeriodeDateRanges,\n        ];\n        return dateCollideWithRanges(dag.dato, rangesWithoutCurrentDag);\n    });\n\n    const hasRangeCollision = fraværPerioder.some((periode) => {\n        const rangesWithoutCurrentPeriode = [\n            ...allFraværDagDateRanges,\n            ...fraværPerioder.filter((p) => p !== periode).map(fraværPeriodeToDateRange),\n        ];\n        return rangeCollideWithRanges(fraværPeriodeToDateRange(periode), rangesWithoutCurrentPeriode);\n    });\n    return hasDateCollision || hasRangeCollision\n        ? FraværFieldValidationErrors.dager_overlapper_med_andre_dager\n        : undefined;\n};\n","import { DateRange, prettifyDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    ValidateDateError,\n    ValidateDateRangeError,\n    ValidateRequiredFieldError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport { DateTidsperiode } from '../tidsperiode';\n\nexport const mapFomTomToDateRange = ({ fom, tom }: DateTidsperiode): DateRange => ({\n    from: fom,\n    to: tom,\n});\n\nexport const handleDateRangeValidationError = (\n    error: ValidateDateError | ValidateDateRangeError | ValidateRequiredFieldError | undefined,\n    minDate: Date | undefined,\n    maxDate: Date | undefined\n): ValidationError | undefined => {\n    if (minDate && error === ValidateDateError.dateIsBeforeMin) {\n        return {\n            key: error,\n            values: { dato: prettifyDate(minDate) },\n        };\n    }\n    if (maxDate && error === ValidateDateError.dateIsAfterMax) {\n        return {\n            key: error,\n            values: { dato: prettifyDate(maxDate) },\n        };\n    }\n    return error;\n};\n","const annetBarnMessages = {\n    nb: {\n        'annetBarn.form.title': 'Legg til barn',\n        'annetBarn.form.fnr': 'Barnets fødselsnummer/D-nummer',\n        'annetBarn.form.fødselsdato': 'Barnets fødselsdato',\n        'annetBarn.form.navn': 'Barnets navn',\n        'annetBarn.form.okButton': 'Ok',\n        'annetBarn.form.cancelButton': 'Avbryt',\n        'annetBarn.form.validation.required': 'Feltet er påkrevd',\n        'annetBarn.list.født': 'Født',\n        'annetBarnForm.navn.stringHasNoValue': 'Feltet er påkrevd',\n        'annetBarnForm.fødselsdato.dateHasNoValue': 'Feltet er påkrevd',\n        'annetBarnForm.fødselsdato.dateIsBeforeMin': 'Fødselsdato kan ikke være tidligere enn {dato}',\n        'annetBarnForm.fødselsdato.dateIsAfterMax': 'Fødselsdato kan ikke være etter dagens dato',\n        'annetBarnForm.fødselsdato.dateHasInvalidFormat': 'Ugyldig datoformat. Formatet må være dd.mm.åååå',\n        'annetBarnForm.fnr.stringHasNoValue': 'Feltet er påkrevd',\n        'annetBarnForm.fnr.fødselsnummerIsInvalid': 'Ugyldig fødselsnummer',\n        'annetBarnForm.fnr.fødselsnummerIsNot11Chars': 'Fødselsnummeret må bestå av 11 siffer',\n        'annetBarnForm.fnr.fødselsnummerIsNotAllowed': 'Fødselsnummeret du har fylt ut er ditt eget fødselsnummer',\n    },\n    nn: {\n        'annetBarn.form.title': 'Legg til barn',\n        'annetBarn.form.fnr': 'Fødselsnummeret/D-nummeret til barnet',\n        'annetBarn.form.fødselsdato': 'Fødselsdatoen til barnet',\n        'annetBarn.form.navn': 'Namnet til barnet',\n        'annetBarn.form.okButton': 'Ok',\n        'annetBarn.form.cancelButton': 'Avbryt',\n        'annetBarn.form.validation.required': 'Feltet er påkravd',\n        'annetBarn.list.født': 'Født',\n    },\n};\n\nexport default annetBarnMessages;\n","import bostedUtlandMessages from '../../../forms/bosted-utland/bostedUtlandMessages';\nimport ferieuttakMessages from '../../../forms/ferieuttak/ferieuttakMessages';\nimport fraværMessages from '../../../forms/fravær/fraværMessages';\nimport utenlandsoppholdMessages from '../../../forms/utenlandsopphold/utenlandsoppholdMessages';\nimport fosterbarnMessages from '../../../forms/fosterbarn/fosterbarnMessages';\nimport virksomhetMessages from '../../../forms/virksomhet/virksomhetMessages';\nimport tidsperiodeMessages from '../../../forms/tidsperiode/tidsperiodeMessages';\nimport annetBarnMessages from '../../../forms/annet-barn/annetBarnMessages';\n\nconst commonNb = require('@navikt/sif-common-core/lib/i18n/common.nb.json');\nconst commonNn = require('@navikt/sif-common-core/lib/i18n/common.nn.json');\nconst validationNb = require('@navikt/sif-common-core/lib/i18n/validationErrors.nb.json');\nconst validationNn = require('@navikt/sif-common-core/lib/i18n/validationErrors.nn.json');\n\nconst bokmålstekster = {\n    ...commonNb,\n    ...validationNb,\n    ...bostedUtlandMessages.nb,\n    ...fraværMessages.nb,\n    ...ferieuttakMessages.nb,\n    ...fosterbarnMessages.nb,\n    ...utenlandsoppholdMessages.nb,\n    ...tidsperiodeMessages.nb,\n    ...virksomhetMessages.nb,\n    ...annetBarnMessages.nb,\n    'common.fieldvalidation.ugyldigTall': 'Ugyldig tall',\n};\n\nconst nynorsktekster = {\n    ...commonNn,\n    ...validationNn,\n    ...bostedUtlandMessages.nn,\n    ...fraværMessages.nn,\n    ...ferieuttakMessages.nn,\n    ...fosterbarnMessages.nn,\n    ...utenlandsoppholdMessages.nn,\n    ...tidsperiodeMessages.nn,\n    ...virksomhetMessages.nn,\n    ...annetBarnMessages.nn,\n    'common.fieldvalidation.ugyldigTall': 'Ugyldig tall',\n};\n\nexport const appMessages = {\n    nb: bokmålstekster,\n    nn: nynorsktekster,\n};\n","import * as React from 'react';\nimport { IntlProvider } from 'react-intl';\nimport '@formatjs/intl-pluralrules//locale-data/en';\nimport '@formatjs/intl-pluralrules//locale-data/nb';\nimport '@formatjs/intl-pluralrules//locale-data/nn';\nimport '@formatjs/intl-pluralrules/polyfill';\nimport { Locale } from '@navikt/sif-common-core/lib/types/Locale';\nimport { appMessages } from './messages';\nimport dayjs from 'dayjs';\nrequire('dayjs/locale/nb');\nrequire('dayjs/locale/nn');\n\nexport interface IntlProviderProps {\n    locale: Locale;\n    children: React.ReactNode;\n    onError?: (error: any) => void;\n}\n\nconst AppIntlProvider = ({ locale, onError, children }: IntlProviderProps) => {\n    const messages = locale === 'nb' ? appMessages.nb : appMessages.nn;\n    dayjs.locale(locale === 'nb' ? 'nb' : 'nn');\n    return (\n        <IntlProvider locale={locale} messages={messages} onError={onError}>\n            {children}\n        </IntlProvider>\n    );\n};\n\nexport default AppIntlProvider;\n","import React from 'react';\n\nfunction NAVLogo(props) {\n    return (\n        <svg className=\"prefix__navLogo\" width={90} viewBox=\"0 0 269 169\" {...props}>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <path\n                    fill=\"#C30000\"\n                    d=\"M125.31 168.942c-46.642 0-84.46-37.817-84.46-84.465C40.85 37.824 78.667 0 125.31 0c46.657 0 84.48 37.824 84.48 84.477 0 46.648-37.823 84.465-84.48 84.465zM0 121.359l17.265-42.73h16.589l-17.243 42.73zm213.044 0l17.044-42.73h9.044l-17.043 42.73zM246.564 121.359l17.04-42.73h4.803l-17.043 42.731z\"\n                />\n                <path\n                    fill=\"#FEFEFE\"\n                    d=\"M197.36 78.63h-15.016s-1.035 0-1.4.914l-8.31 25.439-8.304-25.44c-.366-.913-1.407-.913-1.407-.913h-28.872c-.625 0-1.149.522-1.149 1.143v8.639c0-6.853-7.292-9.782-11.562-9.782-9.562 0-15.963 6.298-17.956 15.873-.108-6.352-.636-8.628-2.347-10.96-.786-1.141-1.922-2.101-3.159-2.895-2.547-1.492-4.834-2.018-9.749-2.018h-5.77s-1.044 0-1.412.914l-5.25 13.013V79.773c0-.621-.52-1.143-1.145-1.143H61.198s-1.03 0-1.406.914l-5.459 13.53s-.545 1.354.701 1.354h5.133v25.784c0 .64.504 1.147 1.147 1.147h13.238c.624 0 1.144-.507 1.144-1.147V94.428h5.16c2.961 0 3.588.08 4.74.618.694.262 1.32.792 1.66 1.403.698 1.314.873 2.892.873 7.545v16.218c0 .64.514 1.147 1.15 1.147h12.687s1.434 0 2.001-1.416l2.812-6.95c3.74 5.237 9.893 8.366 17.541 8.366h1.671s1.443 0 2.014-1.416l4.897-12.128v12.397c0 .64.524 1.147 1.15 1.147h12.951s1.43 0 2.003-1.416c0 0 5.18-12.861 5.2-12.958h.008c.2-1.07-1.153-1.07-1.153-1.07h-4.623V83.847l14.545 36.096c.568 1.416 2 1.416 2 1.416h15.301s1.44 0 2.008-1.416l16.125-39.93c.558-1.383-1.057-1.383-1.057-1.383zm-64.458 27.285h-8.7c-3.463 0-6.28-2.804-6.28-6.271 0-3.461 2.817-6.283 6.28-6.283h2.433c3.454 0 6.267 2.822 6.267 6.283v6.27z\"\n                />\n            </g>\n        </svg>\n    );\n}\n\nexport default NAVLogo;\n","import React from 'react';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { Ingress, Undertittel } from 'nav-frontend-typografi';\n\ninterface Props {\n    title: string;\n    children: React.ReactNode;\n}\n\nconst PageIntro = ({ title, children }: Props) => (\n    <>\n        <Box padBottom=\"xl\" margin=\"m\">\n            <Box padBottom={children ? 'm' : 'none'}>\n                <Undertittel>{title}</Undertittel>\n            </Box>\n            {children && <Ingress tag=\"div\">{children}</Ingress>}\n        </Box>\n    </>\n);\n\nexport default PageIntro;\n","import React from 'react';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport Panel from 'nav-frontend-paneler';\n\ninterface Props {\n    values?: any;\n}\n\nfunction SubmitPreview({ values }: Props) {\n    return (\n        <Box margin=\"xl\">\n            <div style={{ borderTop: '1px dashed #59514B', paddingTop: '1rem', margin: '0 -1rem' }}>\n                <Box margin=\"m\">\n                    {values && (\n                        <Panel style={{ padding: '1rem' }}>\n                            <pre style={{ margin: 0, fontSize: '.8rem' }}>{JSON.stringify(values, null, 2)}</pre>\n                        </Panel>\n                    )}\n                    {values === undefined && <Panel style={{ padding: '1rem' }}>Ingen data</Panel>}\n                </Box>\n            </div>\n        </Box>\n    );\n}\n\nexport default SubmitPreview;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { date1YearAgo, date1YearFromNow } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport flat from 'flat';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport BostedUtlandForm, { BostedUtlandFormErrors } from '../../../forms/bosted-utland/BostedUtlandForm';\nimport BostedUtlandListAndDialog from '../../../forms/bosted-utland/BostedUtlandListAndDialog';\nimport bostedUtlandMessages from '../../../forms/bosted-utland/bostedUtlandMessages';\nimport { BostedUtland } from '../../../forms/bosted-utland/types';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\n\nenum FormField {\n    'bosted' = 'bosted',\n}\n\ninterface FormValues {\n    [FormField.bosted]: BostedUtland[];\n}\nconst initialValues: FormValues = { bosted: [] };\n\nconst FormikExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<BostedUtland> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues, ValidationError>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                formErrorHandler={getFormErrorHandler(intl)}>\n                                <BostedUtlandListAndDialog<FormField>\n                                    name={FormField.bosted}\n                                    minDate={date1YearAgo}\n                                    maxDate={date1YearFromNow}\n                                    validate={getListValidator({ required: true })}\n                                    labels={{\n                                        addLabel: 'Legg til bosted',\n                                        listTitle: 'Registrerte bosteder',\n                                        modalTitle: 'Bosted',\n                                        emptyListText: 'Ingen bosteder er lagt til',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrorIntlKeys={flat(BostedUtlandFormErrors)}\n                    intlMessages={bostedUtlandMessages}\n                />\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <DialogFormWrapper>\n                    <Panel border={true}>\n                        <BostedUtlandForm\n                            minDate={date1YearAgo}\n                            maxDate={date1YearFromNow}\n                            onSubmit={setSingleFormValues}\n                            onCancel={() => console.log('cancel me')}\n                        />\n                    </Panel>\n                    <SubmitPreview values={singleFormValues} />\n                </DialogFormWrapper>\n            </Box>\n\n            <MessagesPreview title=\"Alle tekster\" messages={bostedUtlandMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default FormikExample;\n","import React from 'react';\nimport { MessageFileFormat } from '@navikt/sif-common-core/lib/dev-utils/intl/devIntlUtils';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\nconst createFieldErrorIntlKey = (error: ValidationError, fieldName: string, errorPrefix?: string): string =>\n    `${errorPrefix ? `${errorPrefix}.` : ''}${fieldName}.${error}`;\n\nexport type ValidationErrorMessagesDocType = {\n    fields: { [key: string]: string[] };\n};\n\ninterface Props {\n    formName?: string;\n    validationErrors?: ValidationErrorMessagesDocType;\n    validationErrorIntlKeys?: { [key: string]: string };\n    intlMessages: MessageFileFormat;\n}\n\nconst FormValidationErrorMessages: React.FunctionComponent<Props> = ({\n    validationErrors,\n    formName,\n    intlMessages,\n    validationErrorIntlKeys,\n}) => {\n    const validationeMessages: MessageFileFormat = {\n        nb: {},\n        nn: {},\n    };\n\n    if (validationErrors) {\n        const fields = validationErrors.fields;\n\n        Object.keys(fields).forEach((field) =>\n            Object.keys(fields[field]).forEach((errorKey) => {\n                const error = fields[field][errorKey];\n                const intlKey = createFieldErrorIntlKey(error, field, formName);\n                validationeMessages['nb'][intlKey] = intlMessages['nb'][intlKey];\n                validationeMessages['nn'][intlKey] = intlMessages['nn'][intlKey];\n            })\n        );\n    }\n\n    if (validationErrorIntlKeys) {\n        Object.keys(validationErrorIntlKeys).forEach((key) => {\n            const intlKey = validationErrorIntlKeys[key];\n            validationeMessages['nb'][intlKey] = intlMessages['nb'][intlKey];\n            validationeMessages['nn'][intlKey] = intlMessages['nn'][intlKey];\n        });\n    }\n    return (\n        <MessagesPreview\n            title=\"Feilmeldinger\"\n            messages={validationeMessages}\n            showExplanation={false}\n            showMissingTextSummary={false}\n        />\n    );\n};\n\nexport default FormValidationErrorMessages;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { date1YearAgo, date1YearFromNow } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport flat from 'flat';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport FerieuttakForm, { FerieuttakFormErrors } from '../../../forms/ferieuttak/FerieuttakForm';\nimport FerieuttakListAndDialog from '../../../forms/ferieuttak/FerieuttakListAndDialog';\nimport ferieuttakMessages from '../../../forms/ferieuttak/ferieuttakMessages';\nimport { Ferieuttak } from '../../../forms/ferieuttak/types';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\nenum FormField {\n    'ferie' = 'ferie',\n}\n\ninterface FormValues {\n    [FormField.ferie]: Ferieuttak[];\n}\nconst initialValues: FormValues = { ferie: [] };\n\nconst FormikExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<Ferieuttak> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues, ValidationError>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                formErrorHandler={getFormErrorHandler(intl)}>\n                                <FerieuttakListAndDialog<FormField>\n                                    name={FormField.ferie}\n                                    minDate={date1YearAgo}\n                                    maxDate={date1YearFromNow}\n                                    validate={getListValidator({ required: true })}\n                                    labels={{\n                                        addLabel: 'Legg til ferie',\n                                        listTitle: 'Registrerte ferier',\n                                        modalTitle: 'Ferie',\n                                        emptyListText: 'Ingen ferier er lagt til',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrorIntlKeys={flat(FerieuttakFormErrors)}\n                    intlMessages={ferieuttakMessages}\n                />\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <FerieuttakForm\n                        minDate={date1YearAgo}\n                        maxDate={date1YearFromNow}\n                        ferieuttak={{}}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                    />\n                </Panel>\n                <SubmitPreview values={singleFormValues} />\n            </DialogFormWrapper>\n\n            <MessagesPreview messages={ferieuttakMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default FormikExample;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport flat from 'flat';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { Fosterbarn } from '../../../forms/fosterbarn';\nimport FosterbarnForm, { FosterbarnFormErrors } from '../../../forms/fosterbarn/FosterbarnForm';\nimport FosterbarnListAndDialog from '../../../forms/fosterbarn/FosterbarnListAndDialog';\nimport fosterbarnMessages from '../../../forms/fosterbarn/fosterbarnMessages';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\n\nenum FormField {\n    'fosterbarn' = 'fosterbarn',\n}\n\ninterface FormValues {\n    [FormField.fosterbarn]: Fosterbarn[];\n}\nconst initialValues: FormValues = { fosterbarn: [] };\n\nconst FosterbarnExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<Fosterbarn> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues, ValidationError>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                formErrorHandler={getFormErrorHandler(intl)}>\n                                <FosterbarnListAndDialog<FormField>\n                                    name={FormField.fosterbarn}\n                                    validate={getListValidator({ required: true })}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrorIntlKeys={flat(FosterbarnFormErrors)}\n                    intlMessages={fosterbarnMessages}\n                />\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <FosterbarnForm\n                        fosterbarn={{}}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                    />\n                </Panel>\n                <SubmitPreview values={singleFormValues} />\n            </DialogFormWrapper>\n\n            <MessagesPreview messages={fosterbarnMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default FosterbarnExample;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { date1YearAgo, date1YearFromNow, dateToday } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport flat from 'flat';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { DateTidsperiode } from '../../../forms/tidsperiode';\nimport TidsperiodeForm, { TidsperiodeFormErrors } from '../../../forms/tidsperiode/TidsperiodeForm';\nimport TidsperiodeListAndDialog from '../../../forms/tidsperiode/TidsperiodeListAndDialog';\nimport tidsperiodeMessages from '../../../forms/tidsperiode/tidsperiodeMessages';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\n\nenum FormField {\n    'tidsperiode' = 'tidsperiode',\n}\n\ninterface FormValues {\n    [FormField.tidsperiode]: DateTidsperiode[];\n}\nconst initialValues: FormValues = { tidsperiode: [] };\n\nconst TidsperiodeExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<DateTidsperiode> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues, ValidationError>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                formErrorHandler={getFormErrorHandler(intl)}>\n                                <TidsperiodeListAndDialog<FormField>\n                                    name={FormField.tidsperiode}\n                                    minDate={date1YearAgo}\n                                    maxDate={dateToday}\n                                    validate={getListValidator({ required: true })}\n                                    labels={{\n                                        addLabel: 'Legg til periode',\n                                        listTitle: 'Registrerte periode',\n                                        modalTitle: 'Periode',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrorIntlKeys={flat(TidsperiodeFormErrors)}\n                    intlMessages={tidsperiodeMessages}\n                />\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <TidsperiodeForm\n                        minDate={date1YearAgo}\n                        maxDate={date1YearFromNow}\n                        tidsperiode={{}}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                    />\n                </Panel>\n                <SubmitPreview values={singleFormValues} />\n            </DialogFormWrapper>\n\n            <MessagesPreview messages={tidsperiodeMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default TidsperiodeExample;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { date1YearAgo, date1YearFromNow } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport flat from 'flat';\nimport Panel from 'nav-frontend-paneler';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { Utenlandsopphold } from '../../../forms/utenlandsopphold/types';\nimport UtenlandsoppholdForm, { UtlandsoppholdFormErrors } from '../../../forms/utenlandsopphold/UtenlandsoppholdForm';\nimport UtenlandsoppholdListAndDialog from '../../../forms/utenlandsopphold/UtenlandsoppholdListAndDialog';\nimport utenlandsoppholdMessages from '../../../forms/utenlandsopphold/utenlandsoppholdMessages';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\n\nenum FormField {\n    'utenlandsopphold' = 'utenlandsopphold',\n}\n\ninterface FormValues {\n    [FormField.utenlandsopphold]: Utenlandsopphold[];\n}\nconst initialValues: FormValues = {\n    utenlandsopphold: [],\n};\n\nconst UtenlandsoppholdExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<Utenlandsopphold> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues, ValidationError>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                formErrorHandler={getFormErrorHandler(intl)}>\n                                <UtenlandsoppholdListAndDialog\n                                    minDate={date1YearAgo}\n                                    maxDate={date1YearFromNow}\n                                    name={FormField.utenlandsopphold}\n                                    validate={getListValidator({ required: true })}\n                                    labels={{\n                                        addLabel: 'Legg til utenlandsopphold',\n                                        listTitle: 'Registrerte utenlandsopphold',\n                                        modalTitle: 'Utenlandsopphold',\n                                        emptyListText: 'Ingen utenlandsopphold er lagt til',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrorIntlKeys={flat(UtlandsoppholdFormErrors)}\n                    intlMessages={utenlandsoppholdMessages}\n                />\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <UtenlandsoppholdForm\n                        opphold={initialValues.utenlandsopphold[0]}\n                        minDate={date1YearAgo}\n                        maxDate={date1YearFromNow}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                    />\n                    <SubmitPreview values={singleFormValues} />\n                </Panel>\n            </DialogFormWrapper>\n\n            <MessagesPreview messages={utenlandsoppholdMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default UtenlandsoppholdExample;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { date1YearAgo, date1YearFromNow, dateToday } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport flat from 'flat';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { FraværDag, FraværPeriode } from '../../../forms/fravær';\nimport FraværDagerListAndDialog from '../../../forms/fravær/FraværDagerListAndDialog';\nimport FraværDagFormView, { FraværDagFormErrors } from '../../../forms/fravær/FraværDagForm';\nimport fraværMessages from '../../../forms/fravær/fraværMessages';\nimport FraværPeriodeForm, { FraværPeriodeFormErrors } from '../../../forms/fravær/FraværPeriodeForm';\nimport FraværPerioderListAndDialog from '../../../forms/fravær/FraværPerioderListAndDialog';\nimport { fraværDagToFraværDateRange, fraværPeriodeToDateRange } from '../../../forms/fravær/fraværUtilities';\nimport { FraværFieldValidationErrors, validateNoCollisions } from '../../../forms/fravær/fraværValidationUtils';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\n\nenum FormField {\n    perioder = 'perioder',\n    dager = 'dager',\n}\n\ninterface FormValues {\n    [FormField.perioder]: FraværPeriode[];\n    [FormField.dager]: FraværDag[];\n}\n\nconst initialValues: FormValues = { [FormField.perioder]: [], [FormField.dager]: [] };\n\nconst FraværExample: React.FunctionComponent = () => {\n    const [fraværPeriodeSingleFormValues, setFraværPeriodeSingleFormValues] = useState<\n        Partial<FraværPeriode> | undefined\n    >(undefined);\n    const [fraværDagSingleFormValues, setFraværDagSingleFormValues] = useState<Partial<FraværDag> | undefined>(\n        undefined\n    );\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={(formik) => {\n                        const { values } = formik;\n                        const dateRangesToDisable = [\n                            ...values.perioder.map(fraværPeriodeToDateRange),\n                            ...values.dager.map(fraværDagToFraværDateRange),\n                        ];\n                        return (\n                            <TypedFormikForm<FormValues, ValidationError | FraværFieldValidationErrors>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                formErrorHandler={getFormErrorHandler(intl)}>\n                                <FormBlock>\n                                    <FraværPerioderListAndDialog<FormField>\n                                        name={FormField.perioder}\n                                        minDate={date1YearAgo}\n                                        maxDate={dateToday}\n                                        periodeDescription={\n                                            <p style={{ marginTop: '.5rem' }}>\n                                                Du kan kun søke for ett og samme år i en søknad. Får å søke for flere\n                                                år, må du sende en søknad for hvert år.\n                                            </p>\n                                        }\n                                        validate={(value) => {\n                                            const listError = getListValidator({ required: true })(value);\n                                            if (listError) {\n                                                return listError;\n                                            }\n                                            const collisionError = validateNoCollisions(values.dager, values.perioder);\n                                            if (collisionError) {\n                                                return collisionError;\n                                            }\n                                        }}\n                                        labels={{\n                                            addLabel: 'Legg til periode',\n                                            modalTitle: 'Fravær hele dager',\n                                        }}\n                                        dateRangesToDisable={dateRangesToDisable}\n                                        helgedagerIkkeTillat={true}\n                                    />\n                                </FormBlock>\n                                <FormBlock>\n                                    <FraværDagerListAndDialog<FormField>\n                                        name={FormField.dager}\n                                        minDate={date1YearAgo}\n                                        maxDate={dateToday}\n                                        validate={(value) => {\n                                            const listError = getListValidator({ required: true })(value);\n                                            if (listError) {\n                                                return listError;\n                                            }\n                                            const collisionError = validateNoCollisions(values.dager, values.perioder);\n                                            if (collisionError) {\n                                                return collisionError;\n                                            }\n                                        }}\n                                        labels={{\n                                            addLabel: 'Legg til dag med delvis fravær',\n                                            listTitle: 'Dager med delvis fravær',\n                                            modalTitle: 'Fravær deler av dag',\n                                            emptyListText: 'Ingen dager er lagt til',\n                                        }}\n                                        dateRangesToDisable={dateRangesToDisable}\n                                        helgedagerIkkeTillatt={true}\n                                        maksArbeidstidPerDag={24}\n                                    />\n                                </FormBlock>\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrorIntlKeys={flat(FraværPeriodeFormErrors)}\n                    intlMessages={fraværMessages}\n                />\n                <FormValidationErrorMessages\n                    validationErrorIntlKeys={flat(FraværDagFormErrors)}\n                    intlMessages={fraværMessages}\n                />\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialoger</Undertittel>\n            </Box>\n\n            <FormBlock>\n                <DialogFormWrapper>\n                    <Panel border={true}>\n                        <FraværPeriodeForm\n                            minDate={date1YearAgo}\n                            maxDate={date1YearFromNow}\n                            fraværPeriode={{}}\n                            onSubmit={setFraværPeriodeSingleFormValues}\n                            onCancel={() => {\n                                // tslint:disable-next-line:no-console\n                                return console.log('cancel me');\n                            }}\n                        />\n                    </Panel>\n                    <SubmitPreview values={fraværPeriodeSingleFormValues} />\n                </DialogFormWrapper>\n            </FormBlock>\n\n            <FormBlock>\n                <DialogFormWrapper>\n                    <Panel border={true}>\n                        <FraværDagFormView\n                            minDate={date1YearAgo}\n                            maxDate={date1YearFromNow}\n                            fraværDag={{}}\n                            onSubmit={setFraværDagSingleFormValues}\n                            onCancel={() => {\n                                // tslint:disable-next-line:no-console\n                                return console.log('cancel me');\n                            }}\n                        />\n                    </Panel>\n                    <SubmitPreview values={fraværDagSingleFormValues} />\n                </DialogFormWrapper>\n            </FormBlock>\n\n            <MessagesPreview messages={fraværMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default FraværExample;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { prettifyDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport {\n    getDateValidator,\n    getFødselsnummerValidator,\n    getRequiredFieldValidator,\n    ValidateDateError,\n    ValidateFødselsnummerError,\n    ValidateStringError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport annetBarnUtils from './annetBarnUtils';\nimport { AnnetBarn, AnnetBarnFormValues } from './types';\n\nexport interface AnnetBarnFormLabels {\n    title: string;\n    fnr: string;\n    placeholderFnr?: string;\n    fødselsdato: string;\n    navn: string;\n    placeholderNavn?: string;\n    okButton: string;\n    cancelButton: string;\n    aldersGrenseText?: string;\n}\n\nenum AnnetBarnFormFields {\n    fnr = 'fnr',\n    fødselsdato = 'fødselsdato',\n    navn = 'navn',\n}\n\nexport const AnnetBarnFormErrors = {\n    [AnnetBarnFormFields.navn]: { [ValidateStringError.stringHasNoValue]: 'annetBarnForm.navn.stringHasNoValue' },\n    [AnnetBarnFormFields.fødselsdato]: {\n        [ValidateDateError.dateHasNoValue]: 'annetBarnForm.fødselsdato.dateHasNoValue',\n        [ValidateDateError.dateIsBeforeMin]: 'annetBarnForm.fødselsdato.dateIsBeforeMin',\n        [ValidateDateError.dateIsAfterMax]: 'annetBarnForm.fødselsdato.dateIsAfterMax',\n        [ValidateDateError.dateHasInvalidFormat]: 'annetBarnForm.fødselsdato.dateHasInvalidFormat',\n    },\n    [AnnetBarnFormFields.fnr]: {\n        [ValidateFødselsnummerError.fødselsnummerHasNoValue]: 'annetBarnForm.fnr.fødselsnummerHasNoValue',\n        [ValidateFødselsnummerError.fødselsnummerIsInvalid]: 'annetBarnForm.fnr.fødselsnummerIsInvalid',\n        [ValidateFødselsnummerError.fødselsnummerIsNot11Chars]: 'annetBarnForm.fnr.fødselsnummerIsNot11Chars',\n        [ValidateFødselsnummerError.fødselsnummerIsNotAllowed]: 'annetBarnForm.fnr.fødselsnummerIsNotAllowed',\n    },\n};\n\ninterface Props {\n    annetBarn?: Partial<AnnetBarn>;\n    labels?: Partial<AnnetBarnFormLabels>;\n    minDate: Date;\n    maxDate: Date;\n    disallowedFødselsnumre?: string[];\n    onSubmit: (values: AnnetBarn) => void;\n    onCancel: () => void;\n}\n\nconst Form = getTypedFormComponents<AnnetBarnFormFields, AnnetBarnFormValues, ValidationError>();\n\nconst AnnetBarnForm = ({\n    annetBarn = { fnr: '', navn: '', fødselsdato: undefined, id: undefined },\n    labels,\n    minDate,\n    maxDate,\n    disallowedFødselsnumre,\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: AnnetBarnFormValues) => {\n        const annetBarnToSubmit = annetBarnUtils.mapFormValuesToPartialAnnetBarn(formValues, annetBarn.id);\n        if (annetBarnUtils.isAnnetBarn(annetBarnToSubmit)) {\n            onSubmit(annetBarnToSubmit);\n        } else {\n            throw new Error('AnnetBarnForm: Formvalues is not a valid AnnetBarn on submit.');\n        }\n    };\n\n    const defaultLabels: AnnetBarnFormLabels = {\n        title: intlHelper(intl, 'annetBarn.form.title'),\n        fnr: intlHelper(intl, 'annetBarn.form.fnr'),\n        fødselsdato: intlHelper(intl, 'annetBarn.form.fødselsdato'),\n        navn: intlHelper(intl, 'annetBarn.form.navn'),\n        okButton: intlHelper(intl, 'annetBarn.form.okButton'),\n        cancelButton: intlHelper(intl, 'annetBarn.form.cancelButton'),\n    };\n\n    const formLabels: AnnetBarnFormLabels = { ...defaultLabels, ...labels };\n\n    return (\n        <Form.FormikWrapper\n            initialValues={annetBarnUtils.mapAnnetBarnToFormValues(annetBarn)}\n            onSubmit={onFormikSubmit}\n            renderForm={() => (\n                <Form.Form onCancel={onCancel} formErrorHandler={getFormErrorHandler(intl, 'annetBarnForm')}>\n                    <Systemtittel tag=\"h1\">{formLabels.title}</Systemtittel>\n                    <FormBlock>\n                        <Form.Input\n                            name={AnnetBarnFormFields.navn}\n                            label={formLabels.navn}\n                            validate={getRequiredFieldValidator()}\n                            placeholder={formLabels.placeholderNavn}\n                        />\n                    </FormBlock>\n                    <FormBlock>\n                        <Form.DatePicker\n                            name={AnnetBarnFormFields.fødselsdato}\n                            label={\n                                formLabels.aldersGrenseText\n                                    ? `${formLabels.fødselsdato} ${formLabels.aldersGrenseText}`\n                                    : `${formLabels.fødselsdato}`\n                            }\n                            validate={(value) => {\n                                const dateError = getDateValidator({ required: true, min: minDate, max: maxDate })(\n                                    value\n                                );\n                                if (dateError === ValidateDateError.dateIsBeforeMin) {\n                                    return {\n                                        key: dateError,\n                                        values: { dato: prettifyDate(minDate) },\n                                    };\n                                }\n                                return dateError;\n                            }}\n                            maxDate={maxDate}\n                            minDate={minDate}\n                            showYearSelector={true}\n                        />\n                    </FormBlock>\n\n                    <FormBlock>\n                        <Form.Input\n                            name={AnnetBarnFormFields.fnr}\n                            label={formLabels.fnr}\n                            validate={getFødselsnummerValidator({\n                                required: true,\n                                disallowedValues: disallowedFødselsnumre,\n                            })}\n                            inputMode=\"numeric\"\n                            maxLength={11}\n                            placeholder={formLabels.placeholderFnr}\n                        />\n                    </FormBlock>\n                </Form.Form>\n            )}\n        />\n    );\n};\n\nexport default AnnetBarnForm;\n","import { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { hasValue } from '@navikt/sif-common-formik/lib/validation/validationUtils';\nimport { guid } from 'nav-frontend-js-utils';\nimport { AnnetBarn, AnnetBarnFormValues } from './types';\n\nconst isAnnetBarn = (annetBarn: Partial<AnnetBarn>): annetBarn is AnnetBarn => {\n    const { fnr, navn, fødselsdato } = annetBarn;\n    return hasValue(fnr) && hasValue(navn) && hasValue(fødselsdato);\n};\n\nconst mapFormValuesToPartialAnnetBarn = (\n    formValues: AnnetBarnFormValues,\n    id: string | undefined\n): Partial<AnnetBarn> => {\n    return {\n        ...formValues,\n        id: id || guid(),\n        fødselsdato: ISOStringToDate(formValues.fødselsdato),\n    };\n};\n\nconst mapAnnetBarnToFormValues = (annetBarn: Partial<AnnetBarn>): AnnetBarnFormValues => {\n    return {\n        fnr: annetBarn.fnr,\n        navn: annetBarn.navn,\n        fødselsdato: dateToISOString(annetBarn.fødselsdato),\n    };\n};\n\nconst annetBarnUtils = {\n    mapAnnetBarnToFormValues,\n    mapFormValuesToPartialAnnetBarn,\n    isAnnetBarn,\n};\n\nexport default annetBarnUtils;\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { AnnetBarn } from './types';\nimport './annetBarnList.less';\n\ninterface Props {\n    annetBarn: AnnetBarn[];\n    onEdit?: (annetBarn: AnnetBarn) => void;\n    onDelete?: (annetBarn: AnnetBarn) => void;\n}\n\nconst bem = bemUtils('annetBarnList');\n\nconst AnnetBarnList = ({ annetBarn = [], onDelete, onEdit }: Props) => {\n    const renderAnnetBarnLabel = (annetBarn: AnnetBarn): React.ReactNode => {\n        return (\n            <div className={bem.element('label')}>\n                <span className={bem.element('dato')}>{prettifyDate(annetBarn.fødselsdato)}</span>\n                <span className={bem.element('land')}>\n                    {onEdit && <ActionLink onClick={() => onEdit(annetBarn)}>{annetBarn.navn}</ActionLink>}\n                    {!onEdit && <span>{annetBarn.navn}</span>}\n                </span>\n            </div>\n        );\n    };\n\n    return (\n        <ItemList<AnnetBarn>\n            getItemId={(annetBarn) => annetBarn.id}\n            getItemTitle={(annetBarn) => annetBarn.navn}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderAnnetBarnLabel}\n            items={annetBarn.filter((annetBarn) => annetBarn.id !== undefined)}\n        />\n    );\n};\n\nexport default AnnetBarnList;\n","import React from 'react';\nimport {\n    FormikModalFormAndList,\n    ModalFormAndListLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport AnnetBarnForm from './AnnetBarnForm';\nimport AnnetBarnList from './AnnetBarnList';\nimport { AnnetBarn } from './types';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames, ValidationError> {\n    name: FieldNames;\n    labels: ModalFormAndListLabels;\n    minDate: Date;\n    maxDate: Date;\n    disallowedFødselsnumre?: string[];\n    aldersGrenseText?: string;\n    placeholderFnr?: string;\n    placeholderNavn?: string;\n}\n\nfunction AnnetBarnListAndDialog<FieldNames>({\n    name,\n    validate,\n    labels,\n    minDate,\n    maxDate,\n    disallowedFødselsnumre,\n    aldersGrenseText,\n    placeholderFnr,\n    placeholderNavn,\n}: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, AnnetBarn, ValidationError>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                formRenderer={({ onSubmit, onCancel, item }) => (\n                    <AnnetBarnForm\n                        annetBarn={item}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        disallowedFødselsnumre={disallowedFødselsnumre}\n                        labels={{\n                            aldersGrenseText: aldersGrenseText,\n                            placeholderFnr: placeholderFnr,\n                            placeholderNavn: placeholderNavn,\n                        }}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <AnnetBarnList annetBarn={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default AnnetBarnListAndDialog;\n","import React, { useState } from 'react';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { date4YearsAgo, dateToday } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport flatten from 'flat';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport AnnetBarnForm, { AnnetBarnFormErrors } from '../../../forms/annet-barn/AnnetBarnForm';\nimport AnnetBarnListAndDialog from '../../../forms/annet-barn/AnnetBarnListAndDialog';\nimport annetBarnMessages from '../../../forms/annet-barn/annetBarnMessages';\nimport { AnnetBarn } from '../../../forms/annet-barn/types';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\nenum FormField {\n    'annetBarn' = 'annetBarn',\n}\n\ninterface FormValues {\n    [FormField.annetBarn]: AnnetBarn[];\n}\nconst initialValues: FormValues = { annetBarn: [] };\n\nconst AnnetBarnExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<AnnetBarn> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    // const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues, ValidationError>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\">\n                                <AnnetBarnListAndDialog<FormField>\n                                    name={FormField.annetBarn}\n                                    validate={getListValidator({ required: true })}\n                                    labels={{\n                                        addLabel: 'Legg til barn',\n                                        listTitle: 'Registrerte barn',\n                                        modalTitle: 'Legg til barn',\n                                        emptyListText: 'Ingen barn er lagt til',\n                                    }}\n                                    minDate={date4YearsAgo}\n                                    maxDate={dateToday}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrorIntlKeys={flatten(AnnetBarnFormErrors)}\n                    formName={'annetBarn'}\n                    intlMessages={annetBarnMessages}\n                />\n            </Box>\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <AnnetBarnForm\n                        annetBarn={{}}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                        minDate={date4YearsAgo}\n                        maxDate={dateToday}\n                    />\n                </Panel>\n                <SubmitPreview values={singleFormValues} />\n            </DialogFormWrapper>\n\n            <MessagesPreview messages={annetBarnMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default AnnetBarnExample;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { TypedFormikForm, TypedFormikWrapper, YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport flat from 'flat';\nimport Panel from 'nav-frontend-paneler';\nimport { Checkbox } from 'nav-frontend-skjema';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { VirksomhetFormErrors } from '../../../forms';\nimport { mapVirksomhetToVirksomhetApiData } from '../../../forms/virksomhet/mapVirksomhetToApiData';\nimport { isVirksomhet, Næringstype, Virksomhet } from '../../../forms/virksomhet/types';\nimport VirksomhetInfoAndDialog from '../../../forms/virksomhet/VirksomhetInfoAndDialog';\nimport virksomhetMessages from '../../../forms/virksomhet/virksomhetMessages';\nimport VirksomhetSummary from '../../../forms/virksomhet/VirksomhetSummary';\nimport PageIntro from '../../components/page-intro/PageIntro';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\n\nenum FormField {\n    'virksomhet' = 'virksomhet',\n}\n\nexport const mockVirksomhet: Virksomhet = {\n    id: '024782550-1402-01448-04932-71872390929312',\n    næringstyper: [Næringstype.ANNEN, Næringstype.DAGMAMMA, Næringstype.FISKE, Næringstype.JORDBRUK_SKOGBRUK],\n    fiskerErPåBladB: YesOrNo.YES,\n    navnPåVirksomheten: 'Virksomhet AS',\n    registrertINorge: YesOrNo.YES,\n    organisasjonsnummer: '123123123',\n    fom: new Date('2007-02-01T00:00:00.000Z'),\n    erPågående: true,\n    næringsinntekt: 20000,\n    harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene: YesOrNo.YES,\n    blittYrkesaktivDato: new Date(),\n    hattVarigEndringAvNæringsinntektSiste4Kalenderår: YesOrNo.YES,\n    varigEndringINæringsinntekt_dato: new Date('2019-12-09T00:00:00.000Z'),\n    varigEndringINæringsinntekt_inntektEtterEndring: 200000,\n    varigEndringINæringsinntekt_forklaring: 'Jeg fikk flere barn',\n    harRegnskapsfører: YesOrNo.YES,\n    regnskapsfører_navn: 'Regnskapsefører Truls',\n    regnskapsfører_telefon: '98219409',\n};\n\ninterface FormValues {\n    [FormField.virksomhet]?: Virksomhet;\n}\n\nconst initialValues: FormValues = {};\n\nconst VirksomhetExample = () => {\n    const [formValues, setFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const [harFlereVirksomheter, setHarFlereVirksomheter] = useState<boolean>(false);\n    const intl = useIntl();\n\n    const { virksomhet } = formValues || {};\n\n    const apiVirksomhet =\n        virksomhet && isVirksomhet(virksomhet) ? mapVirksomhetToVirksomhetApiData(intl.locale, virksomhet) : undefined;\n    return (\n        <>\n            <PageIntro title=\"Næringsvirksomhet\">Skjema som brukes for på registrere en næringsvirksomhet.</PageIntro>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues, ValidationError>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                formErrorHandler={getFormErrorHandler(intl)}>\n                                <VirksomhetInfoAndDialog<FormField>\n                                    name={FormField.virksomhet}\n                                    harFlereVirksomheter={harFlereVirksomheter}\n                                    validate={getListValidator({ required: true })}\n                                    labels={{\n                                        addLabel: harFlereVirksomheter ? 'Registrer virksomhet' : 'Legg til',\n                                        deleteLabel: 'Fjern',\n                                        editLabel: 'Endre',\n                                        infoTitle: 'Virksomhet',\n                                        modalTitle: 'Virksomhet',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <Box margin=\"l\">\n                    <hr />\n                    <Panel style={{ padding: '1rem' }}>\n                        <Box padBottom=\"m\">Varianter:</Box>\n                        <Box margin=\"m\">\n                            <Checkbox\n                                label=\"Bruker har flere virksomheter\"\n                                checked={harFlereVirksomheter}\n                                onChange={(evt) => setHarFlereVirksomheter(evt.currentTarget.checked)}\n                            />\n                        </Box>\n                    </Panel>\n                </Box>\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrorIntlKeys={flat(VirksomhetFormErrors)}\n                    intlMessages={virksomhetMessages}\n                />\n            </Box>\n\n            {apiVirksomhet && (\n                <>\n                    <Box margin=\"xxl\" padBottom=\"l\">\n                        <Undertittel>Oppsummering av api data</Undertittel>\n                    </Box>\n                    <Panel border={true}>\n                        <VirksomhetSummary virksomhet={apiVirksomhet} />\n                    </Panel>\n                </>\n            )}\n        </>\n    );\n};\n\nexport default VirksomhetExample;\n","/* eslint-disable react/display-name */\nimport React, { useState } from 'react';\nimport Tabs from 'nav-frontend-tabs';\nimport 'nav-frontend-tabs-style';\nimport PageIntro from '../../components/page-intro/PageIntro';\nimport { RouteConfig } from '../../config/routeConfig';\nimport BostedUtlandExample from './BostedUtlandExample';\nimport FerieuttakExample from './FerieuttakExample';\nimport FosterbarnExample from './FosterbarnExample';\nimport TidsperiodeExample from './TidsperiodeExample';\nimport UtenlandsoppholdIPeriodenExample from './UtenlandsoppholdExample';\nimport FraværExample from './FraværExample';\nimport AnnetBarnExample from './AnnetBarnExample';\n\nconst tabRoutes: RouteConfig[] = [\n    {\n        path: 'fravær',\n        renderContent: () => <FraværExample />,\n        title: 'Fravær',\n    },\n    {\n        path: 'tidsrom',\n        renderContent: () => <TidsperiodeExample />,\n        title: 'Tidsperiode',\n    },\n    {\n        path: 'utenlandsopphold',\n        renderContent: () => <UtenlandsoppholdIPeriodenExample />,\n        title: 'Utenlandsopphold i perioden',\n    },\n    {\n        path: 'bosted-utland',\n        renderContent: () => <BostedUtlandExample />,\n        title: 'Bosted utland',\n    },\n    {\n        path: 'ferieuttak',\n        renderContent: () => <FerieuttakExample />,\n        title: 'Ferieuttak i perioden',\n    },\n    {\n        path: 'fosterbarn',\n        renderContent: () => <FosterbarnExample />,\n        title: 'Fosterbarn',\n    },\n    {\n        path: 'annetbarn',\n        renderContent: () => <AnnetBarnExample />,\n        title: 'Annet Barn',\n    },\n];\n\nconst DialogForms = () => {\n    const [path, setPath] = useState(tabRoutes[0].path);\n    const activeRoute = tabRoutes.find((r) => {\n        return r.path === path;\n    });\n    return (\n        <>\n            <PageIntro title=\"Dialogskjema\">\n                Skjema for ferieuttak i perioden, utenlandsopphold i perioden og bosted i utlandet.\n            </PageIntro>\n            <Tabs\n                onChange={(evt, idx) => setPath(tabRoutes[idx].path)}\n                tabs={tabRoutes.map((r) => ({\n                    label: r.title,\n                    active: r.path === path ? 'true' : 'false',\n                }))}\n            />\n            {activeRoute && activeRoute.renderContent()}\n        </>\n    );\n};\n\nexport default DialogForms;\n","import React from 'react';\nimport PageIntro from './components/page-intro/PageIntro';\n\nconst Intro = () => (\n    <>\n        <PageIntro title=\"SIF-common guide\">\n            Dette er starten på en enkel guide til komponenter og konsepter i SIF-common, og som kan brukes i\n            søknadsapplikasjonene til kapittel 9. Vi legger det vi trenger, etter hvert som vi ser at vi trenger det :)\n        </PageIntro>\n    </>\n);\n\nexport default Intro;\n","import React from 'react';\nimport { MessageFileFormat } from '@navikt/sif-common-core/lib/dev-utils/intl/devIntlUtils';\nimport bostedUtlandMessages from '../../../forms/bosted-utland/bostedUtlandMessages';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport MessagePreviewExplanation from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagePreviewExplanation';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport ferieuttakMessages from '../../../forms/ferieuttak/ferieuttakMessages';\nimport fosterbarnMessages from '../../../forms/fosterbarn/fosterbarnMessages';\nimport fraværMessages from '../../../forms/fravær/fraværMessages';\nimport tidsperiodeMessages from '../../../forms/tidsperiode/tidsperiodeMessages';\nimport utenlandsoppholdMessages from '../../../forms/utenlandsopphold/utenlandsoppholdMessages';\nimport virksomhetMessages from '../../../forms/virksomhet/virksomhetMessages';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport annetBarnMessages from '../../../forms/annet-barn/annetBarnMessages';\n\nconst Texts = () => {\n    const formMessages: { title: string; messages: MessageFileFormat }[] = [];\n    formMessages.push({ title: 'Bosted utland', messages: bostedUtlandMessages });\n    formMessages.push({ title: 'Ferieuttak', messages: ferieuttakMessages });\n    formMessages.push({ title: 'Fosterbarn', messages: fosterbarnMessages });\n    formMessages.push({ title: 'Fravær', messages: fraværMessages });\n    formMessages.push({ title: 'Tidsperiode', messages: tidsperiodeMessages });\n    formMessages.push({ title: 'Utenlandsopphold', messages: utenlandsoppholdMessages });\n    formMessages.push({ title: 'Næringsvirksomhet (selvstendig næringsdrivende)', messages: virksomhetMessages });\n    formMessages.push({ title: 'Annet barn', messages: annetBarnMessages });\n    return (\n        <div>\n            <Box>\n                <MessagePreviewExplanation />\n            </Box>\n            {formMessages.map(({ title, messages }) => {\n                return (\n                    <div key={title}>\n                        <FormBlock margin=\"none\" paddingBottom=\"xl\">\n                            <MessagesPreview\n                                messages={messages}\n                                title={title}\n                                showExplanation={false}\n                                showMissingTextSummary={true}\n                            />\n                        </FormBlock>\n                    </div>\n                );\n            })}\n        </div>\n    );\n};\n\nexport default Texts;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport DialogForms from '../examples/dialog-forms/DialogForms';\nimport VirksomhetExample from '../examples/virksomhet-example/VirksomhetExample';\nimport Intro from '../Intro';\nimport Texts from '../examples/texts/Texts';\n\nexport interface RouteConfig {\n    path: string;\n    title: string;\n    renderContent: () => React.ReactNode;\n}\n\nexport const routes: RouteConfig[] = [\n    {\n        path: 'frontpage',\n        title: 'Forside',\n        renderContent: () => <Intro />,\n    },\n    {\n        path: 'dialog-forms',\n        title: 'Dialogskjema',\n        renderContent: () => <DialogForms />,\n    },\n    {\n        path: 'næring',\n        title: 'Næringsvirksomhet',\n        renderContent: () => <VirksomhetExample />,\n    },\n    {\n        path: 'texts',\n        title: 'Tekster',\n        renderContent: () => <Texts />,\n    },\n];\n\nexport const isActiveRoute = (path: string, pathname: string): boolean => {\n    return pathname.indexOf(path) >= 0;\n};\n\nexport const getRouteConfig = (pathname: string): RouteConfig | undefined => {\n    return routes.find((f) => isActiveRoute(f.path, pathname));\n};\n","import * as React from 'react';\nimport { Button, Menu, MenuItem, Wrapper } from 'react-aria-menubutton';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { NedChevron } from 'nav-frontend-chevron';\nimport { isActiveRoute, RouteConfig, routes } from '../../config/routeConfig';\nimport './headerMenu.less';\n\nconst renderMenuItem = (route: RouteConfig) => {\n    return (\n        <li key={route.path}>\n            <MenuItem className=\"headerMenu__menu__item\">\n                <div data-page={route.path}>{route.title}</div>\n            </MenuItem>\n        </li>\n    );\n};\n\ntype Props = RouteComponentProps;\n\nconst HeaderMenu = ({ history }: Props) => {\n    const {\n        location: { pathname },\n    } = history;\n\n    const toggle = (element: any) => {\n        const r = element.props ? element.props['data-page'] : undefined;\n        if (r) {\n            history.push(r);\n        }\n    };\n    const route = routes.find((r) => isActiveRoute(r.path, pathname)) || routes[0];\n    return (\n        <div className=\"headerMenu\">\n            <Wrapper className=\"headerMenu__wrapper\" onSelection={toggle}>\n                <Button className=\"headerMenu__button\">\n                    <div className=\"headerMenu__button__label\">{route ? route.title : 'Velg'}</div>\n                    <div className=\"headerMenu__button__chevron\">\n                        <NedChevron />\n                    </div>\n                </Button>\n                <Menu className=\"headerMenu__menu\">\n                    <ul>{routes.map(renderMenuItem)}</ul>\n                </Menu>\n            </Wrapper>\n        </div>\n    );\n};\nexport default withRouter(HeaderMenu);\n","import React from 'react';\nimport { Link, withRouter, RouteComponentProps } from 'react-router-dom';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport 'nav-frontend-lenker-style';\nimport { isActiveRoute, routes } from '../../config/routeConfig';\n\nconst lenkeBem = bemUtils('lenke');\n\nconst LeftMenu = ({\n    history: {\n        location: { pathname },\n    },\n}: RouteComponentProps) => {\n    return (\n        <div className=\"leftMenu\">\n            {routes.map((route) => (\n                <Link\n                    key={route.path}\n                    to={route.path}\n                    className={lenkeBem.classNames(\n                        lenkeBem.block,\n                        lenkeBem.modifierConditional('active', isActiveRoute(route.path, pathname))\n                    )}>\n                    {route.title}\n                </Link>\n            ))}\n        </div>\n    );\n};\n\nexport default withRouter(LeftMenu);\n","import React from 'react';\nimport MediaQuery from 'react-responsive';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport HeaderMenu from './components/header-menu/HeaderMenu';\nimport LeftMenu from './components/left-menu/LeftMenu';\nimport { getRouteConfig } from './config/routeConfig';\nimport Intro from './Intro';\n\ntype Props = RouteComponentProps;\n\nconst DevContent = ({\n    history: {\n        location: { pathname },\n    },\n}: Props) => {\n    const routeConfig = getRouteConfig(pathname);\n    return (\n        <>\n            <MediaQuery minWidth={1072}>\n                <aside className=\"asideContent\">\n                    <LeftMenu />\n                </aside>\n                <article style={{ maxWidth: '1000px' }} className=\"mainContent\">\n                    {routeConfig ? routeConfig.renderContent() : <Intro />}\n                </article>\n            </MediaQuery>\n            <MediaQuery maxWidth={1071}>\n                <aside className=\"asideContentTop\">\n                    <HeaderMenu />\n                </aside>\n                <article style={{ maxWidth: '1000px' }} className=\"mainContent\">\n                    {routeConfig ? routeConfig.renderContent() : <Intro />}\n                </article>\n            </MediaQuery>\n        </>\n    );\n};\n\nexport default withRouter(DevContent);\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { HashRouter } from 'react-router-dom';\nimport LanguageToggle from '@navikt/sif-common-core/lib/components/language-toggle/LanguageToggle';\nimport { Locale } from '@navikt/sif-common-core/lib/types/Locale';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport NAVLogo from './components/svg/NAVLogo';\nimport DevContent from './DevContent';\nimport './styles/dev.less';\n\ninterface Props {\n    onChangeLocale: (locale: Locale) => void;\n}\n\nconst DevPage = ({ onChangeLocale }: Props) => {\n    const intl = useIntl();\n    return (\n        <main className=\"devPage\">\n            <header className=\"header\">\n                <span className=\"navLogo\">\n                    <NAVLogo />\n                </span>\n                <span className=\"header__title\">\n                    <Systemtittel>Sykdom i familien - sif-common-forms</Systemtittel>\n                </span>\n                <span className=\"languageToggler\">\n                    <LanguageToggle toggle={onChangeLocale} locale={intl.locale as Locale} />\n                </span>\n            </header>\n            <div className=\"contentWrapper\">\n                <HashRouter>\n                    <DevContent />\n                </HashRouter>\n            </div>\n        </main>\n    );\n};\n\nexport default DevPage;\n","import * as React from 'react';\nimport '@formatjs/intl-pluralrules//locale-data/nb';\nimport '@formatjs/intl-pluralrules//locale-data/nn';\nimport '@formatjs/intl-pluralrules/polyfill';\nimport { Locale } from '@navikt/sif-common-core/lib/types/Locale';\nimport { getLocaleFromSessionStorage, setLocaleInSessionStorage } from '@navikt/sif-common-core/lib/utils/localeUtils';\nimport 'nav-frontend-skjema-style';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport AppIntlProvider from './dev/components/app-intl-provider/AppIntlProvider';\nimport DevPage from './dev/DevPage';\nimport '@navikt/sif-common-core/lib/styles/globalStyles.less';\n\nconst localeFromSessionStorage = getLocaleFromSessionStorage();\n\nconst App = () => {\n    const [locale, setLocale] = React.useState(localeFromSessionStorage || 'nb');\n    return (\n        <Normaltekst tag=\"div\">\n            <AppIntlProvider locale={locale as Locale}>\n                <DevPage\n                    onChangeLocale={(l: Locale) => {\n                        setLocaleInSessionStorage(l);\n                        setLocale(l);\n                    }}\n                />\n            </AppIntlProvider>\n        </Normaltekst>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Modal from 'react-modal';\nimport App from './App';\n\nModal.setAppElement('#root');\nReactDOM.render(<App />, document.getElementById('root'));\n","import { date4YearsAgo } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport dayjs from 'dayjs';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Næringstype, Virksomhet, VirksomhetFormValues } from './types';\n\nexport const harFiskerNæringstype = (næringstyper: Næringstype[]): boolean =>\n    næringstyper.find((n) => n === Næringstype.FISKE) !== undefined;\n\nexport const erVirksomhetRegnetSomNyoppstartet = (oppstartsdato: Date) => {\n    return dayjs(oppstartsdato).startOf('day').isAfter(date4YearsAgo);\n};\n\nexport const mapFormValuesToVirksomhet = (\n    formValues: VirksomhetFormValues,\n    id: string | undefined\n): Partial<Virksomhet> => {\n    return {\n        ...formValues,\n        id: id || guid(),\n        fom: ISOStringToDate(formValues.fom),\n        tom: ISOStringToDate(formValues.tom),\n        blittYrkesaktivDato: ISOStringToDate(formValues.blittYrkesaktivDato),\n        varigEndringINæringsinntekt_dato: ISOStringToDate(formValues.varigEndringINæringsinntekt_dato),\n    };\n};\n\nexport const mapVirksomhetToFormValues = (virksomhet: Virksomhet): VirksomhetFormValues => {\n    return {\n        ...virksomhet,\n        fom: dateToISOString(virksomhet.fom),\n        tom: dateToISOString(virksomhet.tom),\n        blittYrkesaktivDato: dateToISOString(virksomhet.blittYrkesaktivDato),\n        varigEndringINæringsinntekt_dato: dateToISOString(virksomhet.varigEndringINæringsinntekt_dato),\n    };\n};\n","import React from 'react';\nimport ContentWithHeader from '@navikt/sif-common-core/lib/components/content-with-header/ContentWithHeader';\nimport Box, { BoxMargin } from '@navikt/sif-common-core/lib/components/box/Box';\n\ninterface Props {\n    header: string;\n    margin?: BoxMargin;\n}\n\nconst SummaryBlock: React.FunctionComponent<Props> = ({ header, margin = 'l', children }) => (\n    <Box margin={margin}>\n        <ContentWithHeader header={header}>{children}</ContentWithHeader>\n    </Box>\n);\n\nexport default SummaryBlock;\n","import intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { IntlShape } from 'react-intl';\nimport defaultValidationMessages from '../i18n/defaultMessages';\nimport { FraværÅrsak } from './types';\n\nconst fraværMessages = {\n    nb: {\n        'fravær.årsak.STENGT_SKOLE_ELLER_BARNEHAGE': 'Skolen/barnehagen var stengt på grunn av koronasituasjonen.',\n        'fravær.årsak.SMITTEVERNHENSYN':\n            'Skolen/barnehagen var åpen, men barnet måtte være hjemme på grunn av særlige smittevernhensyn.',\n        'fravær.årsak.STENGT_SKOLE_ELLER_BARNEHAGE.kort': 'stengt skole/barnehage',\n        'fravær.årsak.SMITTEVERNHENSYN.kort': 'særlige smittevernhensyn',\n\n        'fravær.list.årsak': 'På grunn av {årsak}',\n        'fravær.form.validation.required': 'Feltet er påkrevd',\n        'fravær.form.validation.dateOutsideRange': 'Første gyldige dato er {fom}, og siste gyldige dato er {tom}',\n        'fravær.form.validation.fromDateAfterToDate': 'Fra-dato må være lik eller før til-dato',\n        'fravær.form.validation.toDateBeforeFromDate': 'Til-dato må være lik eller etter fra-dato',\n        'fravær.form.validation.fra_og_til_er_ulike_år': 'Fra og til dato må være i samme år',\n        'fravær.form.validation.timer_mer_enn_arbeidstimer':\n            'Antall timer med fravær kan ikke være mer enn antall timer du skulle ha jobbet denne dagen',\n        'fravær.form.validation.er_helg': 'Lørdag og søndag er ikke gyldig.',\n        'fieldvalidation.dager_overlapper_med_andre_dager':\n            'Én eller flere dager med fravær overlapper med andre dager med fravær.',\n        'fieldvalidation.fra_dato_kolliderer_med_annet_fravær':\n            'Fra og med datoen overlapper med allerede registrert fraværsdag',\n        'fieldvalidation.til_dato_kolliderer_med_annet_fravær':\n            'Til og med datoen overlapper med allerede registrert fraværsdag',\n        'fieldvalidation.dato_kolliderer_med_annet_fravær': 'Datoen overlapper med allerede registrert fraværsdag',\n        'info.smittevern.tittel': 'Hva menes med særlige smittevernhensyn?',\n        'info.smittevern.info.html':\n            'Når barnehagen eller skolen er åpen, men du må være hjemme med barnet ditt på grunn <strong>av særlige smittevernhensyn</strong>, kan du bruke omsorgsdager. Det er en lege som avgjør om det foreligger særlige smittevernhensyn. Det kan være smittevernhensyn til barnet eller andre familiemedlemmer som bor med barnet.',\n        'info.årsak.tittel': 'Hva om begge årsakene gjelder i perioden jeg har lagt inn?',\n        'info.årsak.info.1': `Hvis du har vært hjemme med barn både fordi barnehage/skole var stengt, og på grunn av særlige smittevernshensyn, må du legge inn flere perioder. Når du har lagt inn én periode og trykker OK, får du mulighet til å legge til flere perioder.`,\n        'info.årsak.info.2': `Eksempel:`,\n        'info.årsak.info.3': `1.-2. mars var du hjemme med barn fordi barnehage/skole var stengt. Da legger du inn 1.-2. mars som en periode. I tillegg var du hjemme 3.-5. mars på grunn av særlige smittevernshensyn. Da legger du inn 3.-5. mars som en egen periode.`,\n\n        'fravær.form.felles.hjemmePgaKorona':\n            'Var du hjemme med barn fordi barnehage/skole var stengt på grunn av koronaviruset, eller på grunn av særlige smittevernshensyn?',\n        'fravær.form.felles.årsak': 'Velg årsaken til at du var hjemme med barn i perioden du har lagt inn',\n        'fravær.form.felles.ok': 'Ok',\n        'fravær.form.felles.avbryt': 'Avbryt',\n        'fravær.form.periode.tittel': 'Periode med fravær fra jobb',\n        'fravær.form.periode.tidsrom': 'Velg tidsrom',\n        'fravær.form.periode.fom': 'Fra og med',\n        'fravær.form.periode.tom': 'Til og med',\n        'fravær.form.dag.tittel': 'Dag med delvis fravær fra jobb',\n        'fravær.form.dag.dato': 'Dato',\n        'fravær.form.dag.antallArbeidstimer': 'Antall timer du skulle ha jobbet denne dagen',\n        'fravær.form.dag.timerFravær': 'Antall timer du var borte fra jobb denne dagen',\n\n        'fraværDagForm.dato.dateHasNoValue': defaultValidationMessages.nb.dateHasNoValue,\n        'fraværDagForm.dato.dateHasInvalidFormat': defaultValidationMessages.nb.dateHasInvalidFormat,\n        'fraværDagForm.dato.dateIsAfterMax': defaultValidationMessages.nb.dateIsAfterMax,\n        'fraværDagForm.dato.dateIsBeforeMin': defaultValidationMessages.nb.dateIsBeforeMin,\n        'fraværDagForm.dato.er_helg': 'Lørdag og søndag er ikke gyldig',\n        'fraværDagForm.dato.dato_kolliderer_med_annet_fravær': 'Datoen overlapper med allerede registrert fraværsdag',\n        'fraværDagForm.timerArbeidsdag.numberHasNoValue': defaultValidationMessages.nb.numberHasNoValue,\n        'fraværDagForm.timerFravær.numberHasNoValue': defaultValidationMessages.nb.numberHasNoValue,\n        'fraværDagForm.timerFravær.fravær_timer_mer_enn_arbeidstimer': 'Fravær kan ikke være høyere enn arbeidstimer',\n        'fraværDagForm.hjemmePgaKorona.yesOrNoIsUnanswered': defaultValidationMessages.nb.yesOrNoIsUnanswered,\n        'fraværDagForm.årsak.noValue': defaultValidationMessages.nb.noValue,\n\n        'fraværPeriodeForm.fraOgMed.dateHasNoValue': defaultValidationMessages.nb.dateHasNoValue,\n        'fraværPeriodeForm.fraOgMed.dateIsAfterMax': defaultValidationMessages.nb.dateIsAfterMax,\n        'fraværPeriodeForm.fraOgMed.dateIsBeforeMin': defaultValidationMessages.nb.dateIsBeforeMin,\n        'fraværPeriodeForm.fraOgMed.dateHasInvalidFormat': defaultValidationMessages.nb.dateHasInvalidFormat,\n        'fraværPeriodeForm.fraOgMed.fromDateIsAfterToDate': defaultValidationMessages.nb.fromDateIsAfterToDate,\n        'fraværPeriodeForm.fraOgMed.er_helg': 'Lørdag og søndag er ikke gyldig',\n        'fraværPeriodeForm.fraOgMed.fra_og_til_er_ulike_år': 'Fra og til dato må være i samme år',\n        'fraværPeriodeForm.fraOgMed.fra_dato_kolliderer_med_annet_fravær':\n            'Fra og med datoen overlapper med allerede registrert fraværsdag',\n        'fraværPeriodeForm.tilOgMed.dateHasNoValue': defaultValidationMessages.nb.dateHasNoValue,\n        'fraværPeriodeForm.tilOgMed.dateIsAfterMax': defaultValidationMessages.nb.dateIsAfterMax,\n        'fraværPeriodeForm.tilOgMed.dateIsBeforeMin': defaultValidationMessages.nb.dateIsBeforeMin,\n        'fraværPeriodeForm.tilOgMed.dateHasInvalidFormat': defaultValidationMessages.nb.dateHasInvalidFormat,\n        'fraværPeriodeForm.tilOgMed.toDateIsBeforeFromDate': defaultValidationMessages.nb.toDateIsBeforeFromDate,\n        'fraværPeriodeForm.tilOgMed.er_helg': 'Lørdag og søndag er ikke gyldig',\n        'fraværPeriodeForm.tilOgMed.fra_og_til_er_ulike_år': 'Fra og til dato må være i samme år',\n        'fraværPeriodeForm.tilOgMed.til_dato_kolliderer_med_annet_fravær':\n            'Til og med datoen overlapper med allerede registrert fraværsdag',\n        'fraværPeriodeForm.årsak.noValue': defaultValidationMessages.nb.noValue,\n        'fraværPeriodeForm.årsak.yesOrNoIsUnanswered': defaultValidationMessages.nb.yesOrNoIsUnanswered,\n        'fraværPeriodeForm.periode.dager_overlapper_med_andre_dager':\n            'Én eller flere dager med fravær overlapper med andre dager med fravær.',\n        'fraværPeriodeForm.hjemmePgaKorona.yesOrNoIsUnanswered': defaultValidationMessages.nb.yesOrNoIsUnanswered,\n    },\n    nn: {\n        'fravær.list.årsak': 'På grunn av {årsak}',\n        'fravær.form.validation.required': 'Feltet er påkrevd',\n        'fravær.form.validation.dateOutsideRange': 'Første gyldige dato er {fom}, og siste gyldige dato er {tom}',\n        'fravær.form.validation.fromDateAfterToDate': 'Frå-datoen må vere lik eller før til-datoen',\n        'fravær.form.validation.toDateBeforeFromDate': 'Til-datoen må vere lik eller etter frå-datoen',\n        'fravær.form.validation.fra_og_til_er_ulike_år': 'Fra og til dato må vera i same år',\n        'fieldvalidation.dager_overlapper_med_andre_dager':\n            'Ein eller fleire dagar med fråvær overlappar andre dagar med fråvær.',\n        'fieldvalidation.fra_dato_kolliderer_med_annet_fravær':\n            'Frå og med datoen overlappar med allereie registrert fråværsdag',\n        'fieldvalidation.til_dato_kolliderer_med_annet_fravær':\n            'Til og med datoen overlappar med allereie registrert fråværsdag',\n        'fieldvalidation.dato_kolliderer_med_annet_fravær': 'Datoen overlappar med allereie registrert fråværsdag',\n        'fravær.form.validation.timer_mer_enn_arbeidstimer':\n            'Talet på timar med fråvær kan ikkje vere meir enn talet på timar du skulle ha jobba denne dagen',\n        'fravær.form.validation.er_helg': 'Laurdag og søndag er ikkje gyldig.',\n\n        'fravær.årsak.STENGT_SKOLE_ELLER_BARNEHAGE': 'Skolen/barnehagen var stengt på grunn av koronasituasjonen',\n        'fravær.årsak.SMITTEVERNHENSYN':\n            'Skolen/barnehagen var åpen, men barnet måtte være hjemme på grunn av særlige smittevernhensyn.',\n        'fravær.årsak.ORDINÆRT_FRAVÆR': 'Ordinært fravær',\n        'fravær.årsak.STENGT_SKOLE_ELLER_BARNEHAGE.kort': 'stengt skole/barnehage',\n        'fravær.årsak.SMITTEVERNHENSYN.kort': 'særlige smittevernhensyn',\n        'fravær.årsak.ORDINÆRT_FRAVÆR.kort': 'ordinært fravær',\n        'info.smittevern.tittel': 'Hva menes med særlige smittevernhensyn?',\n        'info.smittevern.info.html':\n            'Når barnehagen eller skolen er åpen, men du må være hjemme med barnet ditt på grunn <strong>av særlige smittevernhensyn</strong>, kan du bruke omsorgsdager. Det er en lege som avgjør om det foreligger særlige smittevernhensyn. Det kan være smittevernhensyn til barnet eller andre familiemedlemmer som bor med barnet.',\n        'info.årsak.tittel': 'Hva om begge årsakene gjelder i perioden jeg har lagt inn?',\n        'info.årsak.info.1': `Hvis du har vært hjemme med barn både fordi barnehage/skole var stengt, og på grunn av særlige smittevernshensyn, må du legge inn flere perioder. Når du har lagt inn én periode og trykker OK, får du mulighet til å legge til flere perioder.`,\n        'info.årsak.info.2': `Eksempel:`,\n        'info.årsak.info.3': `1.-2. mars var du hjemme med barn fordi barnehage/skole var stengt. Da legger du inn 1.-2. mars som en periode. I tillegg var du hjemme 3.-5. mars på grunn av særlige smittevernshensyn. Da legger du inn 3.-5. mars som en egen periode.`,\n    },\n};\n\nexport const getFraværÅrsakTekst = (årsak: FraværÅrsak, intl: IntlShape): string => {\n    return intlHelper(intl, `fravær.årsak.${årsak}`);\n};\n\nexport const getFraværÅrsakTekstKort = (årsak: FraværÅrsak, intl: IntlShape): string => {\n    return intlHelper(intl, `fravær.årsak.${årsak}.kort`);\n};\n\nexport default fraværMessages;\n","import { YesOrNo } from '@navikt/sif-common-core/lib/types/YesOrNo';\n\nexport enum FraværÅrsak {\n    'stengtSkoleBhg' = 'STENGT_SKOLE_ELLER_BARNEHAGE',\n    'smittevernhensyn' = 'SMITTEVERNHENSYN',\n    'ordinært' = 'ORDINÆRT_FRAVÆR',\n}\n\nexport interface FraværPeriode {\n    id?: string;\n    fraOgMed: Date;\n    tilOgMed: Date;\n    årsak: FraværÅrsak;\n}\n\nexport type FraværPeriodeFormValues = Partial<{\n    id: string;\n    fraOgMed: string;\n    tilOgMed: string;\n    hjemmePgaKorona: YesOrNo;\n    årsak: FraværÅrsak;\n}>;\n\nexport interface FraværDag {\n    id?: string;\n    dato: Date;\n    timerArbeidsdag: string;\n    timerFravær: string;\n    årsak: FraværÅrsak;\n}\n\nexport type FraværDagFormValues = Partial<\n    Omit<FraværDag, 'dato'> & {\n        dato: string;\n        hjemmePgaKorona: YesOrNo;\n        årsak?: FraværÅrsak;\n    }\n>;\n","const bostedUtlandMessages = {\n    nb: {\n        'bostedUtland.list.add': 'Legg til opphold',\n        'bostedUtland.form.tittel': 'Utenlandsopphold',\n        'bostedUtland.form.tidsperiode.spm': 'Tidsperiode',\n        'bostedUtland.form.tidsperiode.fraDato': 'Fra og med',\n        'bostedUtland.form.tidsperiode.tilDato': 'Til og med',\n        'bostedUtland.form.land.spm': 'Velg land',\n        'bostedUtland.form.ok': 'Legg til',\n        'bostedUtland.form.avbryt': 'Avbryt',\n        'bostedUtlandForm.fom.dateHasNoValue':\n            'Du må oppgi hvilken dato utenlandsoppholdet startet. Skriv inn eller velg dato.',\n        'bostedUtlandForm.fom.dateIsAfterMax':\n            'Datoen utenlandsoppholdet startet kan ikke være etter {dato}. Skriv inn eller velg dato fra datovelgeren.',\n        'bostedUtlandForm.fom.dateIsBeforeMin':\n            'Datoen utenlandsoppholdet startet kan ikke være før {dato}. Skriv inn eller velg sluttdato fra datovelgeren.',\n        'bostedUtlandForm.fom.dateHasInvalidFormat':\n            'Du må oppgi når utenlandsoppholdet startet i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'bostedUtlandForm.fom.fromDateIsAfterToDate':\n            'Datoen utenlandsoppholdet startet kan ikke være etter datoen det ble avsluttet. Skriv inn eller velg sluttdato fra datovelgeren.',\n        'bostedUtlandForm.tom.dateHasNoValue':\n            'Du må oppgi hvilken dato utenlandsoppholdet ble avsluttet. Skriv inn eller velg dato fra datovelgeren.',\n        'bostedUtlandForm.tom.dateIsAfterMax':\n            'Datoen utenlandsoppholdet ble avsluttet kan ikke være etter {dato}. Skriv inn eller velg dato fra datovelgeren.',\n        'bostedUtlandForm.tom.dateIsBeforeMin':\n            'Datoen utenlandsoppholdet ble avsluttet kan ikke være før {dato}. Skriv inn eller velg dato fra datovelgeren.',\n        'bostedUtlandForm.tom.dateHasInvalidFormat':\n            'Du må oppgi når utenlandsoppholdet ble avsluttet i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'bostedUtlandForm.tom.toDateIsBeforeFromDate':\n            'Datoen utenlandsoppholdet ble avsluttet kan ikke være før datoen det ble startet. Skriv inn eller velg sluttdato fra datovelgeren.',\n        'bostedUtlandForm.landkode.noValue': 'Du må velge i hvilket land du bodde.',\n    },\n    nn: {\n        'bostedUtland.list.add': 'Legg til opphald',\n        'bostedUtland.form.tittel': 'Utenlandsopphald',\n        'bostedUtland.form.tidsperiode.spm': 'Tidsperiode',\n        'bostedUtland.form.tidsperiode.fraDato': 'Frå og med',\n        'bostedUtland.form.tidsperiode.tilDato': 'Til og med',\n        'bostedUtland.form.land.spm': 'Velg land',\n        'bostedUtland.form.ok': 'Legg til',\n        'bostedUtland.form.avbryt': 'Avbryt',\n    },\n};\n\nexport default bostedUtlandMessages;\n","const ferieuttakMessages = {\n    nb: {\n        'ferieuttak.list.title': 'Registrer uttak av ferie',\n        'ferieuttak.list.fromDate': 'Fra og med',\n        'ferieuttak.list.toDate': 'Til og med',\n        'ferieuttak.list.intervalTitle': 'Velg tidsrom',\n        'ferieuttak.list.okButton': 'Ok',\n        'ferieuttak.list.cancelButton': 'Avbryt',\n        'ferieuttakForm.fom.dateHasNoValue':\n            'Du må oppgi når ferien startet. Skriv inn eller velg dato fra datovelgeren.',\n        'ferieuttakForm.fom.dateIsAfterMax':\n            'Datoen for når ferien startet kan ikke være etter dagens dato. Skriv inn eller velg dato fra datovelgeren.',\n        'ferieuttakForm.fom.dateIsBeforeMin':\n            'Datoen for når ferien startet kan ikke være før {dato}. Skriv inn eller velg sluttdato fra datovelgeren.',\n        'ferieuttakForm.fom.dateHasInvalidFormat':\n            'Du må oppgi dato for når ferien startet i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'ferieuttakForm.fom.fromDateIsAfterToDate':\n            'Startdatoen for ferien må være før sluttdatoen, eller på samme dag som sluttdatoen. Skriv inn eller velg dato fra datovelgeren.',\n        'ferieuttakForm.tom.dateHasNoValue':\n            'Du må oppgi når ferien sluttet. Skriv inn eller velg dato fra datovelgeren.',\n        'ferieuttakForm.tom.dateIsAfterMax':\n            'Datoen for når ferien sluttet kan ikke være etter dagens dato. Skriv inn eller velg dato fra datovelgeren.',\n        'ferieuttakForm.tom.dateIsBeforeMin':\n            'Datoen for når ferien sluttet kan ikke være før {dato}. Skriv inn eller velg dato fra datovelgeren.',\n        'ferieuttakForm.tom.dateHasInvalidFormat':\n            'Du må oppgi dato for når ferien sluttet i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'ferieuttakForm.tom.toDateIsBeforeFromDate':\n            'Sluttdatoen for ferien kan ikke være før startdatoen. Skriv inn eller velg dato fra datovelgeren.',\n    },\n    nn: {\n        'ferieuttak.list.title': 'Registrer uttak av ferie',\n        'ferieuttak.list.fromDate': 'Frå og med',\n        'ferieuttak.list.toDate': 'Til og med',\n        'ferieuttak.list.intervalTitle': 'Velg tidsrom',\n        'ferieuttak.list.okButton': 'Ok',\n        'ferieuttak.list.cancelButton': 'Avbryt',\n    },\n};\n\nexport default ferieuttakMessages;\n","const utenlandsoppholdMessages = {\n    nb: {\n        'utenlandsopphold.list.add': '+ Legg til opphold',\n        'utenlandsopphold.form.tittel': 'Utenlandsopphold',\n        'utenlandsopphold.form.tidsperiode.spm': 'Velg tidsperiode for oppholdet',\n        'utenlandsopphold.form.tidsperiode.fraDato': 'Fra og med',\n        'utenlandsopphold.form.tidsperiode.tilDato': 'Til og med',\n        'utenlandsopphold.form.land.spm': 'Velg land',\n        'utenlandsopphold.form.erBarnetInnlagt.spm': 'Er, eller skal, barnet være innlagt i helseinstitusjon i {land}?',\n        'utenlandsopphold.form.perioderBarnetErInnlag.formTitle': 'Periode barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.addLabel': 'Legg til periode barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.modalTitle': 'Periode(r) barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.listTitle': 'Periode(r) barnet er innlagt',\n        'utenlandsopphold.form.årsak.spm': 'Hvordan dekkes utgiftene til innleggelsen?',\n        'utenlandsopphold.form.årsak.BARNET_INNLAGT_I_HELSEINSTITUSJON_FOR_NORSK_OFFENTLIG_REGNING':\n            'For norsk offentlig regning',\n        'utenlandsopphold.form.årsak.BARNET_INNLAGT_I_HELSEINSTITUSJON_DEKKET_ETTER_AVTALE_MED_ET_ANNET_LAND_OM_TRYGD':\n            'Etter trygdeavtale med et annet land',\n        'utenlandsopphold.form.årsak.ANNET': 'Jeg dekker utgiftene selv',\n        'utenlandsopphold.oppsummering.årsak.ANNET': 'Jeg dekker utgiftene selv',\n        'utenlandsopphold.form.ok': 'Legg til',\n        'utenlandsopphold.form.avbryt': 'Avbryt',\n        'utenlandsoppholdForm.fom.dateHasNoValue':\n            'Du må oppgi når utenlandsoppholdet startet. Skriv inn eller velg dato fra datovelgeren.',\n        'utenlandsoppholdForm.fom.dateIsAfterMax':\n            'Datoen for når utenlandsoppholdet startet kan ikke være etter dagens dato. Skriv inn eller velg dato fra datovelgeren.',\n        'utenlandsoppholdForm.fom.dateIsBeforeMin':\n            'Datoen for når utenlandsoppholdet startet kan ikke være før {dato}. Skriv inn eller velg sluttdato fra datovelgeren.',\n        'utenlandsoppholdForm.fom.dateHasInvalidFormat':\n            'Du må oppgi dato for når utenlandsoppholdet startet i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'utenlandsoppholdForm.fom.fromDateIsAfterToDate':\n            'Startdatoen for utenlandsoppholdet må være før sluttdatoen, eller på samme dag som sluttdatoen. Skriv inn eller velg dato fra datovelgeren.',\n        'utenlandsoppholdForm.tom.dateHasNoValue':\n            'Du må oppgi når utenlandsoppholdet sluttet. Skriv inn eller velg dato fra datovelgeren.',\n        'utenlandsoppholdForm.tom.dateIsAfterMax':\n            'Datoen for når utenlandsoppholdet sluttet kan ikke være etter dagens dato. Skriv inn eller velg dato fra datovelgeren.',\n        'utenlandsoppholdForm.tom.dateIsBeforeMin':\n            'Datoen for når utenlandsoppholdet sluttet kan ikke være før {dato}. Skriv inn eller velg dato fra datovelgeren.',\n        'utenlandsoppholdForm.tom.dateHasInvalidFormat':\n            'Du må oppgi dato for når utenlandsoppholdet sluttet i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'utenlandsoppholdForm.tom.toDateIsBeforeFromDate':\n            'Sluttdatoen for utenlandsoppholdet kan ikke være før startdatoen. Skriv inn eller velg dato fra datovelgeren.',\n        'utenlandsoppholdForm.landkode.noValue': 'Du må velge i hvilket land du var i.',\n        'utenlandsoppholdForm.årsak.noValue': 'Du må velge hvordan utgiftene til innleggelsen dekkes.',\n        'utenlandsoppholdForm.erBarnetInnlagt.yesOrNoIsUnanswered':\n            'Du må svare ja eller nei på om barnet er, eller skal være innlagt i helseinstitusjon i {land}.',\n        'utenlandsoppholdForm.barnInnlagtPerioder.listIsEmpty':\n            'Du må legge til perioder barnet er, eller skal være innlagt.',\n    },\n    nn: {\n        'utenlandsopphold.list.add': 'Legg til opphald',\n        'utenlandsopphold.form.tittel': 'Utanlandsopphald',\n        'utenlandsopphold.form.tidsperiode.spm': 'Tidsperiode',\n        'utenlandsopphold.form.tidsperiode.fraDato': 'Frå og med',\n        'utenlandsopphold.form.tidsperiode.tilDato': 'Til og med',\n        'utenlandsopphold.form.land.spm': 'Vel land',\n        'utenlandsopphold.form.erBarnetInnlagt.spm': 'Er, eller skal, barnet bli lagt inn i helseinstitusjon i {land}?',\n        'utenlandsopphold.form.perioderBarnetErInnlag.formTitle': 'Perioden barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.addLabel': 'Legg til perioden barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.modalTitle': 'Perioden/periodane barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.listTitle': 'Perioden/periodane barnet er innlagt',\n        'utenlandsopphold.form.årsak.spm': 'Korleis blir utgiftene til innlegginga dekte?',\n        'utenlandsopphold.form.årsak.BARNET_INNLAGT_I_HELSEINSTITUSJON_FOR_NORSK_OFFENTLIG_REGNING':\n            'For norsk offentleg rekning',\n        'utenlandsopphold.form.årsak.BARNET_INNLAGT_I_HELSEINSTITUSJON_DEKKET_ETTER_AVTALE_MED_ET_ANNET_LAND_OM_TRYGD':\n            'Etter trygdeavtale med eit anna land',\n        'utenlandsopphold.form.årsak.ANNET': 'Eg dekkjer utgiftene sjølv',\n        'utenlandsopphold.oppsummering.årsak.ANNET': 'Eg dekkjer utgiftene sjølv',\n        'utenlandsopphold.form.ok': 'Legg til',\n        'utenlandsopphold.form.avbryt': 'Avbryt',\n    },\n};\n\nexport default utenlandsoppholdMessages;\n","const tidsperiodeMessages = {\n    nb: {\n        'tidsperiode.form.title': 'Tidsperiode',\n        'tidsperiode.form.fromDate': 'Fra og med',\n        'tidsperiode.form.toDate': 'Til og med',\n        'tidsperiode.form.okButton': 'Ok',\n        'tidsperiode.form.cancelButton': 'Avbryt',\n        'tidsperiodeForm.fom.dateHasNoValue':\n            'Du må oppgi når perioden startet. Skriv inn eller velg dato fra datovelgeren.',\n        'tidsperiodeForm.fom.dateIsAfterMax':\n            'Datoen for når perioden startet kan ikke være etter dagens dato. Skriv inn eller velg dato fra datovelgeren.',\n        'tidsperiodeForm.fom.dateIsBeforeMin':\n            'Datoen for når perioden startet kan ikke være før {dato}. Skriv inn eller velg sluttdato fra datovelgeren.',\n        'tidsperiodeForm.fom.dateHasInvalidFormat':\n            'Du må oppgi dato for når perioden startet i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'tidsperiodeForm.fom.fromDateIsAfterToDate':\n            'Startdatoen for perioden må være før sluttdatoen, eller på samme dag som sluttdatoen. Skriv inn eller velg dato fra datovelgeren.',\n        'tidsperiodeForm.tom.dateHasNoValue':\n            'Du må oppgi når perioden sluttet. Skriv inn eller velg dato fra datovelgeren.',\n        'tidsperiodeForm.tom.dateIsAfterMax':\n            'Datoen for når perioden sluttet kan ikke være etter dagens dato. Skriv inn eller velg dato fra datovelgeren.',\n        'tidsperiodeForm.tom.dateIsBeforeMin':\n            'Datoen for når perioden sluttet kan ikke være før {dato}. Skriv inn eller velg dato fra datovelgeren.',\n        'tidsperiodeForm.tom.dateHasInvalidFormat':\n            'Du må oppgi dato for når perioden sluttet i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'tidsperiodeForm.tom.toDateIsBeforeFromDate':\n            'Sluttdatoen for perioden kan ikke være før startdatoen. Skriv inn eller velg dato fra datovelgeren.',\n    },\n    nn: {\n        'tidsperiode.form.title': 'Tidsperiode',\n        'tidsperiode.form.fromDate': 'Frå og med',\n        'tidsperiode.form.toDate': 'Til og med',\n        'tidsperiode.form.okButton': 'Ok',\n        'tidsperiode.form.cancelButton': 'Avbryt',\n    },\n};\n\nexport default tidsperiodeMessages;\n","import React from 'react';\nimport { ApiStringDate } from '@navikt/sif-common-core/lib/types/ApiStringDate';\nimport { apiStringDateToDate, prettifyDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\n\ninterface Props {\n    apiDato: ApiStringDate;\n}\nexport const prettifyApiDate = (apiDato: ApiStringDate): string => prettifyDate(apiStringDateToDate(apiDato));\n\nconst DatoSvar: React.FunctionComponent<Props> = ({ apiDato }) => <>{prettifyApiDate(apiDato)}</>;\n\nexport default DatoSvar;\n","import defaultValidationMessages from '../i18n/defaultMessages';\n\nconst fosterbarnMessages = {\n    nb: {\n        'fosterbarn.form.etternavn_label': 'Etternavn',\n        'fosterbarn.form.fornavn_label': 'Fornavn',\n        'fosterbarn.form.fødselsnummer_label': 'Fødselsnummer',\n        'fosterbarn.list.legg_til_knapp': 'Legg til fosterbarn',\n        'fosterbarn.list.tittel': 'Registrerte fosterbarn',\n        'fosterbarn.modal.tittel': 'Fosterbarn',\n        'fosterbarnForm.fødselsnummer.noValue': defaultValidationMessages.nb.noValue,\n        'fosterbarnForm.fødselsnummer.fødselsnummerIsInvalid': defaultValidationMessages.nb.fødselsnummerIsInvalid,\n        'fosterbarnForm.fødselsnummer.fødselsnummerIsNot11Chars':\n            defaultValidationMessages.nb.fødselsnummerIsNot11Chars,\n        'fosterbarnForm.fødselsnummer.fødselsnummerIsNotAllowed':\n            defaultValidationMessages.nb.fødselsnummerIsNotAllowed,\n    },\n    nn: {\n        'fosterbarn.form.etternavn_label': 'Etternavn',\n        'fosterbarn.form.fornavn_label': 'Fornavn',\n        'fosterbarn.form.fødselsnummer_label': 'Fødselsnummer',\n        'fosterbarn.list.legg_til_knapp': 'Legg til fosterbarn',\n        'fosterbarn.list.tittel': 'Registrerte fosterbarn',\n        'fosterbarn.modal.tittel': 'Fosterbarn',\n    },\n};\n\nexport default fosterbarnMessages;\n","const virksomhetMessages = {\n    nb: {\n        'sifForms.virksomhet.næringstype_FISKE': 'Fisker',\n        'sifForms.virksomhet.næringstype_JORDBRUK_SKOGBRUK': 'Jordbruker',\n        'sifForms.virksomhet.næringstype_DAGMAMMA': 'Dagmamma eller familiebarnehage i eget hjem',\n        'sifForms.virksomhet.næringstype_ANNEN': 'Annet',\n        'sifForms.virksomhet.form_title': 'Opplysninger om virksomheten din',\n        'sifForms.virksomhet.form_title.flere': 'Opplysninger om den eldste virksomheten din',\n        'sifForms.virksomhet.hvilken_type_virksomhet': 'Hvilken type virksomhet har du?',\n        'sifForms.virksomhet.hvilken_type_virksomhet.flere': 'Hvilken type virksomhet er den eldste virksomheten din?',\n        'sifForms.virksomhet.hva_heter_virksomheten': 'Hva heter virksomheten?',\n        'sifForms.virksomhet.fisker_blad_b': 'Er du fisker på blad B?',\n        'sifForms.virksomhet.veileder_fisker.tittel': `Hvis du ikke har organiasjonsnummer`,\n        'sifForms.virksomhet.veileder_fisker': `Hvis du ikke har organisasjonsnummer, svarer du nei på spørsmålet \"Er {navnPåVirksomheten} registrert i Norge?\" I nedtrekkslisten velger du at virksomheten er registrert i Norge.`,\n        'sifForms.virksomhet.registert_i_norge': `Er {navnPåVirksomheten} registert i Norge?`,\n        'sifForms.virksomhet.registert_i_hvilket_land': `I hvilket land er {navnPåVirksomheten} din registrert i?`,\n        'sifForms.virksomhet.organisasjonsnummer': 'Hva er organisasjonsnummeret?',\n        'sifForms.virksomhet.startdato': `Når startet du {navnPåVirksomheten}?`,\n        'sifForms.virksomhet.kalender_fom': 'Startdato',\n        'sifForms.virksomhet.kalender_tom': 'Eventuell sluttdato',\n        'sifForms.virksomhet.kalender_pågående': 'Er pågående',\n        'sifForms.virksomhet.nyoppstartet.næringsinntektFlere.header': 'Næringsresultat for alle virksomhetene dine',\n        'sifForms.virksomhet.nyoppstartet.næringsinntektFlere.info':\n            'Du har opplyst at du har flere næringsvirksomheter. Her skal du legge inn næringsresultatet totalt for alle virksomhetene du har.',\n        'sifForms.virksomhet.ikkeNyoppstartet.næringsinntektFlere.header': 'Næringsvirksomhetene dine',\n        'sifForms.virksomhet.ikkeNyoppstartet.næringsinntektFlere.info':\n            'Du har opplyst at du har flere næringsvirksomheter som selvstendig næringsdrivende. Nå skal du svare på spørsmål som gjelder alle virksomhetene dine.',\n        'sifForms.virksomhet.næringsinntekt.enVirksomhet.spm':\n            'Hva har du hatt i næringsresultat før skatt de siste 12 månedene?',\n        'sifForms.virksomhet.næringsinntekt.enVirksomhet.spm.description':\n            'Hvis virksomheten har vart i kortere tid enn 12 måneder, kan du bruke denne perioden og regne om til årsinntekt. Oppgi beløpet i hele kroner.',\n        'sifForms.virksomhet.næringsinntekt.flereVirksomheter.spm':\n            'Hva har du hatt totalt i næringsresultat før skatt de siste 12 månedene?',\n        'sifForms.virksomhet.næringsinntekt.flereVirksomheter.spm.description':\n            'Hvis virksomhetene har vart i kortere tid enn 12 måneder, kan du bruke denne perioden og regne om til årsinntekt. Oppgi beløpet i hele kroner.',\n        'sifForms.virksomhet.hvaErNæringsresultat.enVirksomhet.text':\n            'Næringsresultatet er inntekter du har i næringen din, minus utgifter og avskrivninger.',\n        'sifForms.virksomhet.hvaErNæringsresultat.flereVirksomheter.text':\n            'Næringsresultatet er inntekter du har i næringene din, minus utgifter og avskrivninger.',\n        'sifForms.virksomhet.hvaErNæringsresultat.title': 'Hva er næringsresultatet?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv':\n            'Har du begynt i arbeidslivet i løpet av de 3 siste ferdigliknede årene?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_info_title': 'Hva betyr dette?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_info':\n            'Du skal svare ja på spørsmålet hvis du før oppstart av næringsvirksomheten din hadde lav eller ingen inntekt.',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_dato': 'Oppgi dato for når du begynte i arbeidslivet',\n        'sifForms.virksomhet.varig_endring_spm':\n            'Har du hatt en varig endring i noen av arbeidsforholdene, virksomhetene eller arbeidssituasjonen din de siste fire årene?',\n        'sifForms.virksomhet.varig_endring_dato': 'Oppgi dato for endringen',\n        'sifForms.virksomhet.varig_endring_inntekt':\n            'Oppgi næringsinntekten din etter endringen. Oppgi årsinntekten i hele kroner.',\n        'sifForms.virksomhet.varig_endring_tekst':\n            'Her kan du skrive kort hva som har endret seg i arbeidsforholdene, virksomhetene eller arbeidssituasjonen din',\n        'sifForms.virksomhet.regnskapsfører_spm': 'Har du regnskapsfører?',\n        'sifForms.virksomhet.regnskapsfører_navn': 'Oppgi navnet til regnskapsfører',\n        'sifForms.virksomhet.regnskapsfører_telefon': 'Oppgi telefonnummeret til regnskapsfører',\n        'sifForms.virksomhet.veileder_innhenter_info.1':\n            'Vi henter inn opplysninger om virksomheten og inntekten din fra offentlige registre.',\n        'sifForms.virksomhet.veileder_innhenter_info.2': 'Vi tar kontakt med deg hvis vi trenger flere opplysninger.',\n\n        'sifForms.virksomhet.summary.tittel': 'Næringsvirksomhet som du har lagt inn:',\n        'sifForms.virksomhet.summary.navn': 'Navn',\n        'sifForms.virksomhet.summary.næringstype': 'Næringstype',\n        'sifForms.virksomhet.summary.varigEndring.dato': 'Dato for varig endring',\n        'sifForms.virksomhet.summary.varigEndring.næringsinntekt': 'Næringsinntekt etter endring',\n        'sifForms.virksomhet.summary.varigEndring.beskrivelse': 'Beskrivelse av endring',\n        'sifForms.virksomhet.summary.ikkeRegnskapsfører': 'Har ikke regnskapsfører.',\n        'sifForms.virksomhet.summary.tidsinfo.avsluttet': 'Startet {fraOgMed}, avsluttet {tilOgMed}.',\n        'sifForms.virksomhet.summary.tidsinfo.pågående': 'Startet {fraOgMed} (pågående).',\n        'sifForms.virksomhet.summary.fisker.påBladB': 'på Blad B',\n        'sifForms.virksomhet.summary.fisker.ikkePåBladB': 'ikke på Blad B',\n        'sifForms.virksomhet.summary.registrertILand': 'Registrert i {land}',\n        'sifForms.virksomhet.summary.registrertILand.orgnr': ' (organisasjonsnummer {orgnr})',\n        'sifForms.virksomhet.summary.yrkesaktiv.jaStartetDato': 'Ja, ble yrkesaktiv {dato}',\n        'sifForms.virksomhet.summary.næringsinntekst': 'Næringsinntekt:',\n        'sifForms.virksomhet.summary.regnskapsfører.header': 'Regnskapsfører',\n        'sifForms.virksomhet.summary.regnskapsfører.info': 'Ja, {navn}, telefon {telefon}',\n\n        'virksomhetForm.næringstyper.listIsEmpty': 'Velg hvilken type virksomhet du har fra listen.',\n        'virksomhetForm.fiskerErPåBladB.yesOrNoIsUnanswered':\n            'Du må svare ja eller nei på spørsmålet om du er fisker på Blad B.',\n        'virksomhetForm.navnPåVirksomheten.stringHasNoValue': 'Skriv inn navnet på virksomheten din.',\n        'virksomhetForm.registrertINorge.yesOrNoIsUnanswered':\n            'Du må svare ja eller nei på spørsmålet om virksomheten din er registrert i Norge.',\n        'virksomhetForm.registrertILand.noValue':\n            'Du må velge hvilket land virksomheten din er registrert i. Velg land fra listen.',\n        'virksomhetForm.organisasjonsnummer.orgNumberHasNoValue':\n            'Skriv inn organisasjonsnummeret. Et gyldig organsisasjonsnummer inneholder 9 siffer',\n        'virksomhetForm.organisasjonsnummer.orgNumberHasInvalidFormat':\n            'Du har oppgitt et ugyldig organisasjonsnummer. Oppgi et gyldig organsisasjonsnummer som inneholder 9 siffer.',\n        'virksomhetForm.fom.dateHasNoValue':\n            'Du må oppgi hvilken dato du startet virksomheten. Skriv inn eller velg startdato fra datovelgeren.',\n        'virksomhetForm.fom.dateIsAfterMax':\n            'Startdatoen for når du startet {navn} må være før dagens dato. Skriv inn eller velg startdato fra datovelgeren.',\n        'virksomhetForm.fom.dateHasInvalidFormat':\n            'Du må oppgi startdato for virksomheten i et gyldig format. Gyldig format er dd.mm.ååå.',\n        'virksomhetForm.fom.fromDateIsAfterToDate':\n            'Startdatoen for når du startet {navn} må være før sluttdatoen, eller på samme dag som sluttdatoen. Skriv inn eller velg dato fra datovelgeren.',\n        'virksomhetForm.tom.dateHasNoValue':\n            'Du må oppgi hvilken dato du avsluttet virksomheten. Skriv inn eller velg dato fra datovelgeren.',\n        'virksomhetForm.tom.dateIsBeforeMin':\n            'Sluttdatoen for når du avsluttet virksomheten kan ikke være før startdatoen. Skriv inn eller velg sluttdato fra datovelgeren.',\n        'virksomhetForm.tom.dateIsAfterMax':\n            'Sluttdatoen for når du avsluttet virksomheten kan ikke være etter dagens dato. Skriv inn eller velg sluttdato fra datovelgeren.',\n        'virksomhetForm.tom.dateHasInvalidFormat':\n            'Du må oppgi dato for når du avsluttet virksomheten i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'virksomhetForm.tom.toDateIsBeforeFromDate':\n            'Sluttdatoen for når du avsluttet virksomheten kan ikke være før startdatoen. Skriv inn eller velg sluttdato fra datovelgeren.',\n        'virksomhetForm.næringsinntekt.numberHasNoValue': 'Du må oppgi næringsinntekten i {navn}.',\n        'virksomhetForm.næringsinntekt.numberHasInvalidFormat':\n            'Du må oppgi et gyldig tall for næringsinntekten i {navn}. Et gyldig tall inneholder kun siffer.',\n        'virksomhetForm.næringsinntekt.numberIsTooSmall':\n            'Tallet du har oppgitt som næringsinntekt for {navn} er for lavt. Tallet kan ikke være lavere enn {min}.',\n        'virksomhetForm.næringsinntekt.numberIsTooLarge':\n            'Tallet du har oppgitt som næringsinntekt for {navn} er for høyt. Tallet kan ikke være høyere enn {maks}.',\n        'virksomhetForm.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene.yesOrNoIsUnanswered':\n            'Du må svare ja eller nei på spørsmålet om du har begynt arbeidslivet i løpet av de 3 siste ferdigliknede årene.',\n        'virksomhetForm.blittYrkesaktivDato.dateHasNoValue':\n            'Du må oppgi dato for når du begynte i arbeidslivet. Skriv inn eller velg dato fra datovelgeren.',\n        'virksomhetForm.blittYrkesaktivDato.dateHasInvalidFormat':\n            'Du må oppgi dato for når du begynte i arbeidslivet i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'virksomhetForm.blittYrkesaktivDato.dateIsAfterMax':\n            'Datoen for når du begynte i arbeidslivet kan ikke være etter dagens dato. Skriv inn eller velg dato fra datovelgeren.',\n        'virksomhetForm.blittYrkesaktivDato.dateIsBeforeMin':\n            'Datoen for når du begynte i arbeidslivet kan ikke være før {dato}. Skriv inn eller velg dato fra datovelgeren.',\n        'virksomhetForm.hattVarigEndringAvNæringsinntektSiste4Kalenderår.yesOrNoIsUnanswered':\n            'Du må svare ja eller nei på spørsmålet om du har hatt varig endring i næringsinntekten i de siste 4 kalenderårene.',\n        'virksomhetForm.varigEndringINæringsinntekt_dato.dateHasNoValue':\n            'Du må oppgi fra hvilken dato du fikk en varig endring i næringsinntekten i {navn}. Skriv inn eller velg dato fra datovelgeren.',\n        'virksomhetForm.varigEndringINæringsinntekt_dato.dateHasInvalidFormat':\n            'Du må oppgi dato for når du fikk varig endring i næringsinntekt i {navn} i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'virksomhetForm.varigEndringINæringsinntekt_dato.dateIsAfterMax':\n            'Datoen for når du fikk varig endring i næringsinntekt kan ikke være etter {dato}. Skriv inn eller velg dato fra datovelgeren.',\n        'virksomhetForm.varigEndringINæringsinntekt_dato.dateIsBeforeMin':\n            'Datoen for når du fikk varig endring i næringsinntekt kan ikke være før {dato}. Skriv inn eller velg dato fra datovelgeren.',\n        'virksomhetForm.varigEndringINæringsinntekt_inntektEtterEndring.numberHasNoValue':\n            'Du må oppgi inntekt etter inntektsendring for {navn}.',\n        'virksomhetForm.varigEndringINæringsinntekt_inntektEtterEndring.numberHasInvalidFormat':\n            'Du må oppgi et gyldig tall for ny inntekt etter inntektsendring i {navn}. Et gyldig tall inneholder kun siffer.',\n        'virksomhetForm.varigEndringINæringsinntekt_inntektEtterEndring.numberIsTooLarge':\n            'Tallet du har oppgitt som ny inntekt etter inntektsendring for {navn} er for høyt. Tallet kan ikke være høyere enn {maks}.',\n        'virksomhetForm.varigEndringINæringsinntekt_inntektEtterEndring.numberIsTooSmall':\n            'Tallet du har oppgitt som ny inntekt etter inntektsendring for {navn} er for lavt. Tallet kan ikke være lavere enn {min}.',\n        'virksomhetForm.varigEndringINæringsinntekt_forklaring.stringHasNoValue':\n            'Skriv en forklaring på hvorfor du har hatt en varig endring i næringsinntekten for {navn}.',\n        'virksomhetForm.varigEndringINæringsinntekt_forklaring.stringIsTooLong':\n            'Du har brukt for mange tegn i forklaringen din. Teksten kan ikke inneholde flere enn {maks} tegn.',\n        'virksomhetForm.varigEndringINæringsinntekt_forklaring.stringIsTooShort':\n            'Du har brukt for få tegn i forklaringen din. Teksten må inneholde minst {min} tegn.',\n        'virksomhetForm.harRegnskapsfører.yesOrNoIsUnanswered':\n            'Du må svare ja eller nei på spørsmålet om du har regnskapsfører.',\n        'virksomhetForm.regnskapsfører_navn.stringHasNoValue': 'Skriv inn navnet på regnskapsføreren din.',\n        'virksomhetForm.regnskapsfører_navn.stringIsTooLong':\n            'Navnet på regnskapsfører kan ikke inneholde flere enn {maks} tegn.',\n        'virksomhetForm.regnskapsfører_navn.stringIsTooShort':\n            'Navnet på regnskapsfører må inneholde minst {min} tegn.',\n        'virksomhetForm.regnskapsfører_telefon.stringHasNoValue': 'Skriv inn telefonnummeret til regnskapsføreren din.',\n        'virksomhetForm.regnskapsfører_telefon.stringIsTooLong':\n            'Telefonnummeret til regnskapsfører kan ikke inneholde flere enn {maks} tegn.',\n        'virksomhetForm.regnskapsfører_telefon.stringIsTooShort':\n            'Telefonnummeret til regnskapsfører må inneholde minst {min} tegn.',\n    },\n    nn: {\n        'sifForms.virksomhet.næringstype_FISKE': 'Fisker',\n        'sifForms.virksomhet.næringstype_JORDBRUK_SKOGBRUK': 'Jordbrukar',\n        'sifForms.virksomhet.næringstype_DAGMAMMA': 'Dagmamma eller familiebarnehage i eigen heim',\n        'sifForms.virksomhet.næringstype_ANNEN': 'Anna',\n        'sifForms.virksomhet.form_title': 'Opplysningar om verksemda di',\n        'sifForms.virksomhet.form_title.flere': 'Opplysningar om den eldste verksemda di',\n        'sifForms.virksomhet.hvilken_type_virksomhet': 'Kva type verksemd har du?',\n        'sifForms.virksomhet.hvilken_type_virksomhet.flere': 'Kva type er den eldste verksemda di?',\n        'sifForms.virksomhet.hva_heter_virksomheten': 'Kva heiter verksemda?',\n        'sifForms.virksomhet.fisker_blad_b': 'Er du fiskar på blad B?',\n        'sifForms.virksomhet.veileder_fisker.tittel': `Dersom du ikkje har organiasjonsnummer`,\n        'sifForms.virksomhet.veileder_fisker': `Dersom du ikkje har organisasjonsnummer, svarer du nei på spørsmålet \"Er {navnPåVirksomheten} registrert i Noreg?\". I nedtrekkslista vel du at verksemda er registrert i Noreg.`,\n        'sifForms.virksomhet.registert_i_norge': `Er {navnPåVirksomheten} registert i Noreg?`,\n        'sifForms.virksomhet.registert_i_hvilket_land': `I kva land er {navnPåVirksomheten} registrert?`,\n        'sifForms.virksomhet.organisasjonsnummer': 'Kva er organisasjonsnummeret?',\n        'sifForms.virksomhet.startdato': `Når starta du {navnPåVirksomheten}?`,\n        'sifForms.virksomhet.kalender_fom': 'Startdato',\n        'sifForms.virksomhet.kalender_tom': 'Eventuell sluttdato',\n        'sifForms.virksomhet.kalender_pågående': 'Er i gang',\n        'sifForms.virksomhet.nyoppstartet.næringsinntektFlere.header': 'Næringsresultat for alle verksemdene dine',\n        'sifForms.virksomhet.nyoppstartet.næringsinntektFlere.info':\n            'Du har opplyst at du har fleire næringsverksemder. Her skal du leggje inn næringsresultatet totalt for alle verksemdene du har.',\n        'sifForms.virksomhet.ikkeNyoppstartet.næringsinntektFlere.header': 'Næringsverksemdene dine',\n        'sifForms.virksomhet.ikkeNyoppstartet.næringsinntektFlere.info':\n            'Du har opplyst at du har fleire næringsverksemder som sjølvstendig næringsdrivande. Nå skal du svare på spørsmål som gjeld alle verksemdene dine.',\n        'sifForms.virksomhet.næringsinntekt.enVirksomhet.spm':\n            'Kva har du hatt i næringsresultat før skatt dei siste 12 månadene?',\n        'sifForms.virksomhet.næringsinntekt.enVirksomhet.spm.description':\n            'Dersom verksemda har vart i kortare tid enn 12 månader, kan du bruke denne perioden og rekne om til årsinntekt. Gi opp beløpet i heile kroner.',\n        'sifForms.virksomhet.næringsinntekt.flereVirksomheter.spm':\n            'Kva har du hatt totalt i næringsresultat før skatt dei siste 12 månadene?',\n        'sifForms.virksomhet.næringsinntekt.flereVirksomheter.spm.description':\n            'Dersom verksemdene har vart i kortare tid enn 12 månader, kan du bruke denne perioden og rekne om til årsinntekt. Gi opp beløpet i heile kroner.',\n        'sifForms.virksomhet.hvaErNæringsresultat.enVirksomhet.text':\n            'Næringsresultatet er inntekter du har i næringa di, minus utgifter og avskrivingar.',\n        'sifForms.virksomhet.hvaErNæringsresultat.flereVirksomheter.text':\n            'Næringsresultatet er inntekter du har i næringane dine, minus utgifter og avskrivingar.',\n        'sifForms.virksomhet.hvaErNæringsresultat.title': 'Kva er næringsresultatet?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv':\n            'Har du begynt i arbeidslivet i løpet av dei 3 siste ferdiglikna åra?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_info_title': 'Kva betyr dette?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_info':\n            'Du skal svare ja på spørsmålet dersom du før oppstart av næringsverksemda di hadde låg eller inga inntekt.',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_dato': 'Gi opp datoen for når du begynte i arbeidslivet',\n        'sifForms.virksomhet.varig_endring_spm':\n            'Har du hatt ei varig endring i nokre av arbeidsforholda, verksemdene eller arbeidssituasjonen din dei siste fire åra?',\n        'sifForms.virksomhet.varig_endring_dato': 'Gi opp datoen for endringa',\n        'sifForms.virksomhet.varig_endring_inntekt':\n            'Gi opp næringsinntekta di etter endringa. Gi opp årsinntekta i heile kroner.',\n        'sifForms.virksomhet.varig_endring_tekst':\n            'Her kan du skrive kort kva som har endra seg i arbeidsforholda, verksemdene eller arbeidssituasjonen din',\n        'sifForms.virksomhet.regnskapsfører_spm': 'Har du rekneskapsførar?',\n        'sifForms.virksomhet.regnskapsfører_navn': 'Gi opp namnet til rekneskapsføraren',\n        'sifForms.virksomhet.regnskapsfører_telefon': 'Gi opp telefonnummeret til rekneskapsføraren',\n        'sifForms.virksomhet.veileder_innhenter_info.1':\n            'Vi hentar inn opplysningar om verksemda og inntekta di frå offentlege register.',\n        'sifForms.virksomhet.veileder_innhenter_info.2': 'Vi tek kontakt med deg dersom vi treng fleire opplysningar',\n\n        'sifForms.virksomhet.summary.tittel': 'Næringsvirksomhet som du har lagt inn:',\n        'sifForms.virksomhet.summary.navn': 'Namn',\n        'sifForms.virksomhet.summary.næringstype': 'Næringstype',\n        'sifForms.virksomhet.summary.varigEndring.dato': 'Dato for varig endring',\n        'sifForms.virksomhet.summary.varigEndring.næringsinntekt': 'Næringsinntekt etter endring',\n        'sifForms.virksomhet.summary.varigEndring.beskrivelse': 'Skildring av endring',\n        'sifForms.virksomhet.summary.ikkeRegnskapsfører': 'Har ikkje regnskapsførar.',\n        'sifForms.virksomhet.summary.tidsinfo.avsluttet': 'Startet {fraOgMed}, avsluttet {tilOgMed}.',\n        'sifForms.virksomhet.summary.tidsinfo.pågående': 'Startet {fraOgMed} (pågåande).',\n        'sifForms.virksomhet.summary.fisker.påBladB': 'på Blad B',\n        'sifForms.virksomhet.summary.fisker.ikkePåBladB': 'ikkje på Blad B',\n        'sifForms.virksomhet.summary.registrertILand': 'Registrert i {land}',\n        'sifForms.virksomhet.summary.registrertILand.orgnr': ' (organisasjonsnummer {orgnr})',\n        'sifForms.virksomhet.summary.næringsinntekst': 'Næringsinntekt:',\n        'sifForms.virksomhet.summary.yrkesaktiv.jaStartetDato': 'Ja, vart yrkesaktiv {dato}',\n        'sifForms.virksomhet.summary.regnskapsfører.header': 'Regnskapsførar',\n        'sifForms.virksomhet.summary.regnskapsfører.info': 'Ja, {navn}, telefon {telefon}',\n    },\n};\nexport default virksomhetMessages;\n","import { YesOrNo } from '@navikt/sif-common-formik/lib';\n\nexport enum UtenlandsoppholdÅrsak {\n    'INNLAGT_DEKKET_NORGE' = 'BARNET_INNLAGT_I_HELSEINSTITUSJON_FOR_NORSK_OFFENTLIG_REGNING',\n    'INNLAGT_DEKKET_ANNET_LAND' = 'BARNET_INNLAGT_I_HELSEINSTITUSJON_DEKKET_ETTER_AVTALE_MED_ET_ANNET_LAND_OM_TRYGD',\n    'ANNET' = 'ANNET',\n}\n\nexport interface UtenlandsoppholdInnlagtPeriode {\n    fom: Date;\n    tom: Date;\n}\n\nexport interface Utenlandsopphold {\n    id?: string;\n    fom: Date;\n    tom: Date;\n    landkode: string;\n    erBarnetInnlagt?: YesOrNo;\n    barnInnlagtPerioder?: UtenlandsoppholdInnlagtPeriode[];\n    årsak?: UtenlandsoppholdÅrsak;\n}\n\nexport type UtenlandsoppholdFormValues = Partial<\n    Omit<Utenlandsopphold, 'id' | 'fom' | 'tom' | 'barnInnlagtPerioder'> & {\n        fom?: string;\n        tom?: string;\n        barnInnlagtPerioder?: UtenlandsoppholdInnlagtPeriode[];\n    }\n>;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\ninterface Props {\n    id: string;\n    value?: Record<string, string | number | boolean | null | undefined | Date>;\n}\n\nconst basicHtmlTagRenderers = {\n    li: (value: string) => <li>{value}</li>,\n    strong: (value: string) => <strong>{value}</strong>,\n    p: (value: string) => <p>{value}</p>,\n    em: (value: string) => <em>{value}</em>,\n};\n\nconst FormattedHtmlMessage = ({ id, value }: Props) => (\n    <FormattedMessage id={id} values={{ ...value, ...basicHtmlTagRenderers }} />\n);\n\nexport default FormattedHtmlMessage;\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\ninterface Props {\n    harSvartJa?: boolean;\n}\n\nconst JaNeiSvar: React.FunctionComponent<Props> = ({ harSvartJa }) => {\n    return <FormattedMessage id={harSvartJa === true ? 'Ja' : 'Nei'} tagName=\"span\" />;\n};\n\nexport default JaNeiSvar;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport Tiles from '@navikt/sif-common-core/lib/components/tiles/Tiles';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport {\n    getFødselsnummerValidator,\n    getRequiredFieldValidator,\n    ValidateFødselsnummerError,\n    ValidateStringError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { Fosterbarn, isFosterbarn } from './types';\n\ninterface FosterbarnFormText {\n    form_fødselsnummer_label: string;\n    form_fornavn_label: string;\n    form_etternavn_label: string;\n}\n\ninterface Props {\n    fosterbarn?: Partial<Fosterbarn>;\n    onSubmit: (values: Fosterbarn) => void;\n    onCancel: () => void;\n    disallowedFødselsnumre?: string[];\n    includeName?: boolean;\n    text?: FosterbarnFormText;\n}\n\nenum FosterbarnFormField {\n    fødselsnummer = 'fødselsnummer',\n    fornavn = 'fornavn',\n    etternavn = 'etternavn',\n}\n\ntype FormValues = Partial<Fosterbarn>;\n\nexport const FosterbarnFormErrors = {\n    [FosterbarnFormField.fornavn]: {\n        [ValidateStringError.stringHasNoValue]: 'fosterbarnForm.fornavn.stringHasNoValue',\n    },\n    [FosterbarnFormField.etternavn]: {\n        [ValidateStringError.stringHasNoValue]: 'fosterbarnForm.etternavn.stringHasNoValue',\n    },\n    [FosterbarnFormField.fødselsnummer]: {\n        [ValidateStringError.stringHasNoValue]: 'fosterbarnForm.fødselsnummer.stringHasNoValue',\n        [ValidateFødselsnummerError.fødselsnummerIsNotAllowed]:\n            'fosterbarnForm.fødselsnummer.fødselsnummerIsNotAllowed',\n        [ValidateFødselsnummerError.fødselsnummerIsNot11Chars]:\n            'fosterbarnForm.fødselsnummer.fødselsnummerIsNot11Chars',\n        [ValidateFødselsnummerError.fødselsnummerIsInvalid]: 'fosterbarnForm.fødselsnummer.fødselsnummerIsInvalid',\n    },\n};\n\nconst Form = getTypedFormComponents<FosterbarnFormField, FormValues, ValidationError>();\n\nconst FosterbarnForm = ({\n    fosterbarn: initialValues = { fornavn: '', etternavn: '', fødselsnummer: '' },\n    disallowedFødselsnumre,\n    text,\n    includeName,\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n    const onFormikSubmit = (formValues: FormValues) => {\n        if (isFosterbarn(formValues, includeName)) {\n            onSubmit({ ...formValues, id: initialValues.id || guid() });\n        } else {\n            throw new Error('Fosterbarn skjema: Formvalues is not a valid Fosterbarn on submit.');\n        }\n    };\n\n    const defaultText: FosterbarnFormText = {\n        form_etternavn_label: intlHelper(intl, 'fosterbarn.form.etternavn_label'),\n        form_fornavn_label: intlHelper(intl, 'fosterbarn.form.fornavn_label'),\n        form_fødselsnummer_label: intlHelper(intl, 'fosterbarn.form.fødselsnummer_label'),\n    };\n\n    const txt = { ...defaultText, ...text };\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={initialValues}\n                onSubmit={onFormikSubmit}\n                renderForm={() => (\n                    <Form.Form onCancel={onCancel} formErrorHandler={getFormErrorHandler(intl, 'fosterbarnForm')}>\n                        <Systemtittel tag=\"h1\">Fosterbarn</Systemtittel>\n                        <FormBlock>\n                            <Form.Input\n                                name={FosterbarnFormField.fødselsnummer}\n                                label={txt.form_fødselsnummer_label}\n                                validate={getFødselsnummerValidator({\n                                    required: true,\n                                    disallowedValues: disallowedFødselsnumre,\n                                })}\n                                inputMode=\"numeric\"\n                                maxLength={11}\n                                style={{ width: '11rem' }}\n                            />\n                        </FormBlock>\n                        {includeName && (\n                            <Tiles columns={2}>\n                                <FormBlock>\n                                    <Form.Input\n                                        name={FosterbarnFormField.fornavn}\n                                        label={txt.form_fornavn_label}\n                                        validate={getRequiredFieldValidator()}\n                                    />\n                                </FormBlock>\n                                <FormBlock>\n                                    <Form.Input\n                                        name={FosterbarnFormField.etternavn}\n                                        label={txt.form_etternavn_label}\n                                        validate={getRequiredFieldValidator()}\n                                    />\n                                </FormBlock>\n                            </Tiles>\n                        )}\n                    </Form.Form>\n                )}\n            />\n        </>\n    );\n};\n\nexport default FosterbarnForm;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport ExpandableInfo from '@navikt/sif-common-core/lib/components/expandable-content/ExpandableInfo';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { YesOrNo } from '@navikt/sif-common-core/lib/types/YesOrNo';\nimport { DateRange, dateToday } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { getTypedFormComponents, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport {\n    getDateRangeValidator,\n    getRequiredFieldValidator,\n    getYesOrNoValidator,\n    ValidateDateError,\n    ValidateDateRangeError,\n    ValidateRequiredFieldError,\n    ValidateYesOrNoError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport dayjs from 'dayjs';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport FormattedHtmlMessage from '../components/formatted-html-message/FormattedHtmlMessage';\nimport { isFraværPeriode, mapFormValuesToFraværPeriode, mapFraværPeriodeToFormValues } from './fraværUtilities';\nimport {\n    FraværFieldValidationErrors,\n    validateErSammeÅr,\n    validateFraOgMedForCollision,\n    validateFraværPeriodeCollision,\n    validateNotHelgedag,\n    validateTilOgMedForCollision,\n} from './fraværValidationUtils';\nimport { getFraværÅrsakRadios } from './fraværÅrsakRadios';\nimport { FraværPeriode, FraværPeriodeFormValues } from './types';\nimport ÅrsakInfo from './ÅrsakInfo';\nimport { handleDateRangeValidationError } from '../utils';\n\nexport interface FraværPeriodeFormLabels {\n    tittel: string;\n    tidsrom: string;\n    fom: string;\n    tom: string;\n    hjemmePgaKorona: string;\n    årsak: string;\n    ok: string;\n    avbryt: string;\n}\n\ninterface Props {\n    fraværPeriode?: Partial<FraværPeriode>;\n    periodeDescription?: JSX.Element;\n    minDate: Date;\n    maxDate: Date;\n    dateRangesToDisable?: DateRange[];\n    helgedagerIkkeTillat?: boolean;\n    begrensTilSammeÅr?: boolean;\n    headerContent?: JSX.Element;\n    onSubmit: (values: FraværPeriode) => void;\n    onCancel: () => void;\n}\n\nenum FraværPeriodeFormFields {\n    fraOgMed = 'fraOgMed',\n    tilOgMed = 'tilOgMed',\n    årsak = 'årsak',\n    hjemmePgaKorona = 'hjemmePgaKorona',\n}\n\nexport const FraværPeriodeFormErrors = {\n    [FraværPeriodeFormFields.fraOgMed]: {\n        [ValidateDateError.dateHasNoValue]: 'fraværPeriodeForm.fraOgMed.dateHasNoValue',\n        [ValidateDateError.dateIsAfterMax]: 'fraværPeriodeForm.fraOgMed.dateIsAfterMax',\n        [ValidateDateError.dateIsBeforeMin]: 'fraværPeriodeForm.fraOgMed.dateIsBeforeMin',\n        [ValidateDateError.dateHasInvalidFormat]: 'fraværPeriodeForm.fraOgMed.dateHasInvalidFormat',\n        [ValidateDateRangeError.fromDateIsAfterToDate]: 'fraværPeriodeForm.fraOgMed.fromDateIsAfterToDate',\n        [FraværFieldValidationErrors.er_helg]: 'fraværPeriodeForm.fraOgMed.er_helg',\n        [FraværFieldValidationErrors.fra_og_til_er_ulike_år]: 'fraværPeriodeForm.fraOgMed.fra_og_til_er_ulike_år',\n        [FraværFieldValidationErrors.fra_dato_kolliderer_med_annet_fravær]:\n            'fraværPeriodeForm.fraOgMed.fra_dato_kolliderer_med_annet_fravær',\n    },\n    [FraværPeriodeFormFields.tilOgMed]: {\n        [ValidateDateError.dateHasNoValue]: 'fraværPeriodeForm.tilOgMed.dateHasNoValue',\n        [ValidateDateError.dateIsAfterMax]: 'fraværPeriodeForm.tilOgMed.dateIsAfterMax',\n        [ValidateDateError.dateIsBeforeMin]: 'fraværPeriodeForm.tilOgMed.dateIsBeforeMin',\n        [ValidateDateError.dateHasInvalidFormat]: 'fraværPeriodeForm.tilOgMed.dateHasInvalidFormat',\n        [ValidateDateRangeError.toDateIsBeforeFromDate]: 'fraværPeriodeForm.tilOgMed.toDateIsBeforeFromDate',\n        [FraværFieldValidationErrors.er_helg]: 'fraværPeriodeForm.tilOgMed.er_helg',\n        [FraværFieldValidationErrors.fra_og_til_er_ulike_år]: 'fraværPeriodeForm.tilOgMed.fra_og_til_er_ulike_år',\n        [FraværFieldValidationErrors.til_dato_kolliderer_med_annet_fravær]:\n            'fraværPeriodeForm.tilOgMed.til_dato_kolliderer_med_annet_fravær',\n    },\n    [FraværPeriodeFormFields.årsak]: {\n        [ValidateRequiredFieldError.noValue]: 'fraværPeriodeForm.årsak.noValue',\n    },\n    [FraværPeriodeFormFields.hjemmePgaKorona]: {\n        [ValidateYesOrNoError.yesOrNoIsUnanswered]: 'fraværPeriodeForm.årsak.yesOrNoIsUnanswered',\n    },\n    ['fraOgMed_tilOgMed']: {\n        [FraværFieldValidationErrors.dager_overlapper_med_andre_dager]:\n            'fraværPeriodeForm.periode.dager_overlapper_med_andre_dager',\n    },\n};\n\nexport const FraværPeriodeFormName = 'fraværPeriodeForm';\n\nconst Form = getTypedFormComponents<FraværPeriodeFormFields, FraværPeriodeFormValues, ValidationError>();\n\nconst FraværPeriodeForm = ({\n    fraværPeriode = {},\n    periodeDescription,\n    maxDate,\n    minDate,\n    dateRangesToDisable,\n    helgedagerIkkeTillat,\n    headerContent,\n    begrensTilSammeÅr,\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: FraværPeriodeFormValues) => {\n        const fraværPeriodeToSubmit = mapFormValuesToFraværPeriode(formValues, fraværPeriode.id);\n        if (isFraværPeriode(fraværPeriodeToSubmit)) {\n            onSubmit(fraværPeriodeToSubmit);\n        } else {\n            throw new Error('FraværPeriodeForm: Formvalues is not a valid FraværPeriode on submit.');\n        }\n    };\n\n    const formLabels: FraværPeriodeFormLabels = {\n        ok: intlHelper(intl, 'fravær.form.felles.ok'),\n        avbryt: intlHelper(intl, 'fravær.form.felles.avbryt'),\n        årsak: intlHelper(intl, 'fravær.form.felles.årsak'),\n        tittel: intlHelper(intl, 'fravær.form.periode.tittel'),\n        tidsrom: intlHelper(intl, 'fravær.form.periode.tidsrom'),\n        hjemmePgaKorona: intlHelper(intl, 'fravær.form.felles.hjemmePgaKorona'),\n        fom: intlHelper(intl, 'fravær.form.periode.fom'),\n        tom: intlHelper(intl, 'fravær.form.periode.tom'),\n    };\n    const fraværÅrsakRadios = getFraværÅrsakRadios(intl);\n\n    const disabledDateRanges = dateRangesToDisable\n        ? dateRangesToDisable.filter((range) => {\n              const { fraOgMed, tilOgMed } = fraværPeriode;\n              return !(\n                  fraOgMed &&\n                  tilOgMed &&\n                  dayjs(fraOgMed).isSame(range.from, 'day') &&\n                  dayjs(tilOgMed).isSame(range.to, 'day')\n              );\n          })\n        : undefined;\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={mapFraværPeriodeToFormValues(fraværPeriode)}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => {\n                    const { fraOgMed, tilOgMed } = formik.values;\n                    const fromDate: Date | undefined = ISOStringToDate(fraOgMed);\n                    const toDate: Date | undefined = ISOStringToDate(tilOgMed);\n                    return (\n                        <Form.Form\n                            onCancel={onCancel}\n                            formErrorHandler={getFormErrorHandler(intl, 'fraværPeriodeForm')}>\n                            <Systemtittel tag=\"h1\">{formLabels.tittel}</Systemtittel>\n                            {headerContent && <Box margin=\"l\">{headerContent}</Box>}\n                            <FormBlock>\n                                <Form.DateIntervalPicker\n                                    legend={formLabels.tidsrom}\n                                    description={periodeDescription}\n                                    validate={() => {\n                                        const err = validateFraværPeriodeCollision(\n                                            fromDate,\n                                            toDate,\n                                            disabledDateRanges\n                                        );\n                                        if (err) {\n                                            return FraværPeriodeFormErrors.fraOgMed_tilOgMed\n                                                .dager_overlapper_med_andre_dager;\n                                        }\n                                    }}\n                                    fromDatepickerProps={{\n                                        label: formLabels.fom,\n                                        name: FraværPeriodeFormFields.fraOgMed,\n                                        fullscreenOverlay: true,\n                                        minDate: minDate,\n                                        maxDate: toDate || maxDate,\n                                        disableWeekend: helgedagerIkkeTillat || false,\n                                        disabledDateRanges,\n                                        dayPickerProps: {\n                                            initialMonth:\n                                                fromDate || toDate || dayjs(dateToday).isAfter(maxDate)\n                                                    ? maxDate\n                                                    : dateToday,\n                                        },\n                                        validate: getFromDateValidator({\n                                            begrensTilSammeÅr,\n                                            minDate,\n                                            maxDate,\n                                            helgedagerIkkeTillat,\n                                            disabledDateRanges,\n                                            toDate,\n                                            tilOgMed,\n                                        }),\n                                        onChange: () => {\n                                            setTimeout(() => {\n                                                formik.validateField(FraværPeriodeFormFields.fraOgMed);\n                                                formik.validateField(FraværPeriodeFormFields.tilOgMed);\n                                            });\n                                        },\n                                    }}\n                                    toDatepickerProps={{\n                                        label: formLabels.tom,\n                                        name: FraværPeriodeFormFields.tilOgMed,\n                                        fullscreenOverlay: true,\n                                        minDate: fromDate || minDate,\n                                        maxDate,\n                                        disableWeekend: helgedagerIkkeTillat || false,\n                                        disabledDateRanges,\n                                        dayPickerProps: {\n                                            initialMonth:\n                                                toDate || fromDate || dayjs(dateToday).isAfter(maxDate)\n                                                    ? maxDate\n                                                    : dateToday,\n                                        },\n                                        validate: getToDateValidator({\n                                            begrensTilSammeÅr,\n                                            disabledDateRanges,\n                                            fraOgMed,\n                                            fromDate,\n                                            helgedagerIkkeTillat,\n                                            maxDate,\n                                            minDate,\n                                        }),\n                                        onChange: () => {\n                                            setTimeout(() => {\n                                                formik.validateField(FraværPeriodeFormFields.fraOgMed);\n                                                formik.validateField(FraværPeriodeFormFields.tilOgMed);\n                                            });\n                                        },\n                                    }}\n                                />\n                            </FormBlock>\n                            <FormBlock>\n                                <Form.YesOrNoQuestion\n                                    legend={formLabels.hjemmePgaKorona}\n                                    name={FraværPeriodeFormFields.hjemmePgaKorona}\n                                    validate={getYesOrNoValidator()}\n                                    description={\n                                        <ExpandableInfo title={intlHelper(intl, 'info.smittevern.tittel')}>\n                                            <FormattedHtmlMessage id=\"info.smittevern.info.html\" />\n                                        </ExpandableInfo>\n                                    }\n                                />\n                            </FormBlock>\n\n                            {formik.values.hjemmePgaKorona === YesOrNo.YES && (\n                                <FormBlock>\n                                    <Form.RadioPanelGroup\n                                        legend={formLabels.årsak}\n                                        name={FraværPeriodeFormFields.årsak}\n                                        validate={getRequiredFieldValidator()}\n                                        radios={fraværÅrsakRadios}\n                                        description={<ÅrsakInfo />}\n                                    />\n                                </FormBlock>\n                            )}\n                        </Form.Form>\n                    );\n                }}\n            />\n        </>\n    );\n};\n\nconst getFromDateValidator = ({\n    helgedagerIkkeTillat,\n    begrensTilSammeÅr,\n    tilOgMed,\n    toDate,\n    disabledDateRanges,\n    minDate,\n    maxDate,\n}: {\n    helgedagerIkkeTillat?: boolean;\n    begrensTilSammeÅr?: boolean;\n    tilOgMed?: string;\n    toDate?: Date;\n    disabledDateRanges?: DateRange[];\n    minDate?: Date;\n    maxDate?: Date;\n}) => (value): ValidationError | undefined => {\n    if (helgedagerIkkeTillat && validateNotHelgedag(value)) {\n        return {\n            key: FraværPeriodeFormErrors.fraOgMed.er_helg,\n            keepKeyUnaltered: true,\n        };\n    }\n    if (begrensTilSammeÅr && validateErSammeÅr(value, tilOgMed)) {\n        return {\n            key: FraværPeriodeFormErrors.fraOgMed.fra_og_til_er_ulike_år,\n            keepKeyUnaltered: true,\n        };\n    }\n    if (validateFraOgMedForCollision(toDate, disabledDateRanges)) {\n        return {\n            key: FraværPeriodeFormErrors.fraOgMed.fra_dato_kolliderer_med_annet_fravær,\n            keepKeyUnaltered: true,\n        };\n    }\n    const dateError = getDateRangeValidator({\n        required: true,\n        min: minDate,\n        max: maxDate,\n        toDate,\n    }).validateFromDate(value);\n\n    return handleDateRangeValidationError(dateError, minDate, maxDate);\n};\n\nconst getToDateValidator = ({\n    helgedagerIkkeTillat,\n    begrensTilSammeÅr,\n    fraOgMed,\n    fromDate,\n    disabledDateRanges,\n    minDate,\n    maxDate,\n}: {\n    helgedagerIkkeTillat?: boolean;\n    begrensTilSammeÅr?: boolean;\n    fraOgMed?: string;\n    fromDate?: Date;\n    disabledDateRanges?: DateRange[];\n    minDate?: Date;\n    maxDate?: Date;\n}) => (value) => {\n    if (helgedagerIkkeTillat && validateNotHelgedag(value)) {\n        return {\n            key: FraværPeriodeFormErrors.tilOgMed.er_helg,\n            keepKeyUnaltered: true,\n        };\n    }\n    if (begrensTilSammeÅr && validateErSammeÅr(fraOgMed, value)) {\n        return {\n            key: FraværPeriodeFormErrors.tilOgMed.fra_og_til_er_ulike_år,\n            keepKeyUnaltered: true,\n        };\n    }\n    if (validateTilOgMedForCollision(fromDate, disabledDateRanges)) {\n        return {\n            key: FraværPeriodeFormErrors.tilOgMed.til_dato_kolliderer_med_annet_fravær,\n            keepKeyUnaltered: true,\n        };\n    }\n    const dateError = getDateRangeValidator({\n        required: true,\n        min: minDate,\n        max: maxDate,\n        fromDate,\n    }).validateToDate(value);\n    return handleDateRangeValidationError(dateError, minDate, maxDate);\n};\nexport default FraværPeriodeForm;\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { getTypedFormComponents, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport {\n    getDateRangeValidator,\n    getRequiredFieldValidator,\n    ValidateDateError,\n    ValidateDateRangeError,\n    ValidateRequiredFieldError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { handleDateRangeValidationError, mapFomTomToDateRange } from '../utils';\nimport bostedUtlandUtils from './bostedUtlandUtils';\nimport { BostedUtland, BostedUtlandFormValues } from './types';\n\nexport interface BostedUtlandFormLabels {\n    tittel: string;\n}\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    bosted?: BostedUtland;\n    alleBosteder?: BostedUtland[];\n    onSubmit: (values: BostedUtland) => void;\n    onCancel: () => void;\n}\n\nenum BostedUtlandFormFields {\n    fom = 'fom',\n    tom = 'tom',\n    landkode = 'landkode',\n}\n\ninterface DateLimits {\n    minDate: Date;\n    maxDate: Date;\n}\n\nexport const BostedUtlandFormErrors = {\n    [BostedUtlandFormFields.fom]: {\n        [ValidateDateError.dateHasNoValue]: 'bostedUtlandForm.fom.dateHasNoValue',\n        [ValidateDateError.dateIsAfterMax]: 'bostedUtlandForm.fom.dateIsAfterMax',\n        [ValidateDateError.dateIsBeforeMin]: 'bostedUtlandForm.fom.dateIsBeforeMin',\n        [ValidateDateError.dateHasInvalidFormat]: 'bostedUtlandForm.fom.dateHasInvalidFormat',\n        [ValidateDateRangeError.fromDateIsAfterToDate]: 'bostedUtlandForm.fom.fromDateIsAfterToDate',\n    },\n    [BostedUtlandFormFields.tom]: {\n        [ValidateDateError.dateHasNoValue]: 'bostedUtlandForm.tom.dateHasNoValue',\n        [ValidateDateError.dateIsAfterMax]: 'bostedUtlandForm.tom.dateIsAfterMax',\n        [ValidateDateError.dateIsBeforeMin]: 'bostedUtlandForm.tom.dateIsBeforeMin',\n        [ValidateDateError.dateHasInvalidFormat]: 'bostedUtlandForm.tom.dateHasInvalidFormat',\n        [ValidateDateRangeError.toDateIsBeforeFromDate]: 'bostedUtlandForm.tom.toDateIsBeforeFromDate',\n    },\n    [BostedUtlandFormFields.landkode]: {\n        [ValidateRequiredFieldError.noValue]: 'bostedUtlandForm.landkode.noValue',\n    },\n};\n\nconst Form = getTypedFormComponents<BostedUtlandFormFields, BostedUtlandFormValues, ValidationError>();\n\nconst BostedUtlandForm = ({ maxDate, minDate, bosted, alleBosteder = [], onSubmit, onCancel }: Props) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: BostedUtlandFormValues) => {\n        const bostedToSubmit = bostedUtlandUtils.mapFormValuesToBostedUtland(formValues, bosted?.id);\n        if (bostedUtlandUtils.isValidBostedUtland(bostedToSubmit)) {\n            onSubmit(bostedToSubmit);\n        } else {\n            throw new Error('BostedUtlandForm: Formvalues is not a valid BostedUtland on submit.');\n        }\n    };\n\n    return (\n        <Form.FormikWrapper\n            initialValues={bostedUtlandUtils.mapBostedUtlandToFormValues(bosted || {})}\n            onSubmit={onFormikSubmit}\n            renderForm={(formik) => {\n                const { values } = formik;\n                const fomDateLimits: DateLimits = {\n                    minDate,\n                    maxDate: ISOStringToDate(values.tom) || maxDate,\n                };\n                const tomDateLimits: DateLimits = {\n                    minDate: ISOStringToDate(values.fom) || minDate,\n                    maxDate: maxDate,\n                };\n\n                const andreBosteder =\n                    bosted === undefined\n                        ? alleBosteder.map(mapFomTomToDateRange)\n                        : alleBosteder.filter((b) => b.id !== bosted.id).map(mapFomTomToDateRange);\n\n                return (\n                    <Form.Form onCancel={onCancel} formErrorHandler={getFormErrorHandler(intl, 'bostedUtlandForm')}>\n                        <Systemtittel tag=\"h1\">\n                            <FormattedMessage id=\"bostedUtland.form.tittel\" />\n                        </Systemtittel>\n\n                        <FormBlock>\n                            <Form.DateRangePicker\n                                legend={intlHelper(intl, 'bostedUtland.form.tidsperiode.spm')}\n                                fullscreenOverlay={true}\n                                minDate={minDate}\n                                maxDate={maxDate}\n                                allowRangesToStartAndStopOnSameDate={false}\n                                disabledDateRanges={andreBosteder}\n                                fromInputProps={{\n                                    name: BostedUtlandFormFields.fom,\n                                    label: intlHelper(intl, 'bostedUtland.form.tidsperiode.fraDato'),\n                                    validate: (value) => {\n                                        const error = getDateRangeValidator({\n                                            required: true,\n                                            min: fomDateLimits.minDate,\n                                            max: fomDateLimits.maxDate,\n                                            toDate: ISOStringToDate(values.tom),\n                                        }).validateFromDate(value);\n                                        return handleDateRangeValidationError(\n                                            error,\n                                            fomDateLimits.minDate,\n                                            fomDateLimits.maxDate\n                                        );\n                                    },\n                                }}\n                                toInputProps={{\n                                    name: BostedUtlandFormFields.tom,\n                                    label: intlHelper(intl, 'bostedUtland.form.tidsperiode.tilDato'),\n                                    validate: (value) => {\n                                        const error = getDateRangeValidator({\n                                            required: true,\n                                            min: tomDateLimits.minDate,\n                                            max: tomDateLimits.maxDate,\n                                            fromDate: ISOStringToDate(values.fom),\n                                        }).validateToDate(value);\n                                        return handleDateRangeValidationError(\n                                            error,\n                                            tomDateLimits.minDate,\n                                            tomDateLimits.maxDate\n                                        );\n                                    },\n                                }}\n                            />\n                        </FormBlock>\n                        <FormBlock>\n                            <Form.CountrySelect\n                                name={BostedUtlandFormFields.landkode}\n                                label={intlHelper(intl, 'bostedUtland.form.land.spm')}\n                                validate={getRequiredFieldValidator()}\n                            />\n                        </FormBlock>\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default BostedUtlandForm;\n","import { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { guid } from 'nav-frontend-js-utils';\nimport { BostedUtland, BostedUtlandFormValues } from './types';\n\nconst isValidBostedUtland = (bosted: Partial<BostedUtland>): bosted is BostedUtland => {\n    const { fom, landkode, tom } = bosted;\n    return fom !== undefined && landkode !== undefined && tom !== undefined;\n};\n\nconst mapFormValuesToBostedUtland = (\n    formValues: BostedUtlandFormValues,\n    id: string | undefined\n): Partial<BostedUtland> => {\n    return {\n        id: id || guid(),\n        fom: ISOStringToDate(formValues.fom),\n        tom: ISOStringToDate(formValues.tom),\n        landkode: formValues.landkode,\n    };\n};\n\nconst mapBostedUtlandToFormValues = ({ fom, tom, landkode }: Partial<BostedUtland>): BostedUtlandFormValues => {\n    return {\n        fom: dateToISOString(fom),\n        tom: dateToISOString(tom),\n        landkode,\n    };\n};\n\nconst bostedUtlandUtils = {\n    isValidBostedUtland,\n    mapBostedUtlandToFormValues,\n    mapFormValuesToBostedUtland,\n};\n\nexport default bostedUtlandUtils;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { DateRange, prettifyDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { getTypedFormComponents, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport {\n    getDateRangeValidator,\n    ValidateDateError,\n    ValidateDateRangeError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { handleDateRangeValidationError, mapFomTomToDateRange } from '../utils';\nimport ferieuttakUtils from './ferieuttakUtils';\nimport { Ferieuttak, FerieuttakFormValues } from './types';\n\nexport interface FerieuttakFormLabels {\n    title: string;\n    fromDate: string;\n    toDate: string;\n    intervalTitle: string;\n    okButton: string;\n    cancelButton: string;\n}\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    ferieuttak?: Partial<Ferieuttak>;\n    alleFerieuttak?: Ferieuttak[];\n    labels?: Partial<FerieuttakFormLabels>;\n    onSubmit: (values: Ferieuttak) => void;\n    onCancel: () => void;\n}\n\nenum FerieuttakFormFields {\n    tom = 'tom',\n    fom = 'fom',\n}\n\nexport const FerieuttakFormErrors = {\n    [FerieuttakFormFields.fom]: {\n        [ValidateDateError.dateHasNoValue]: 'ferieuttakForm.fom.dateHasNoValue',\n        [ValidateDateRangeError.fromDateIsAfterToDate]: 'ferieuttakForm.fom.fromDateIsAfterToDate',\n        [ValidateDateError.dateHasInvalidFormat]: 'ferieuttakForm.fom.dateHasInvalidFormat',\n        [ValidateDateError.dateIsBeforeMin]: 'ferieuttakForm.fom.dateIsBeforeMin',\n        [ValidateDateError.dateIsAfterMax]: 'ferieuttakForm.fom.dateIsAfterMax',\n    },\n    [FerieuttakFormFields.tom]: {\n        [ValidateDateError.dateHasNoValue]: 'ferieuttakForm.tom.dateHasNoValue',\n        [ValidateDateRangeError.toDateIsBeforeFromDate]: 'ferieuttakForm.tom.toDateIsBeforeFromDate',\n        [ValidateDateError.dateHasInvalidFormat]: 'ferieuttakForm.tom.dateHasInvalidFormat',\n        [ValidateDateError.dateIsBeforeMin]: 'ferieuttakForm.tom.dateIsBeforeMin',\n        [ValidateDateError.dateIsAfterMax]: 'ferieuttakForm.tom.dateIsAfterMax',\n    },\n};\n\nconst Form = getTypedFormComponents<FerieuttakFormFields, FerieuttakFormValues, ValidationError>();\n\nconst FerieuttakForm = ({ maxDate, minDate, labels, ferieuttak, alleFerieuttak = [], onSubmit, onCancel }: Props) => {\n    const intl = useIntl();\n    const onFormikSubmit = (formValues: FerieuttakFormValues) => {\n        const ferieuttakToSubmit = ferieuttakUtils.mapFormValuesToFerieuttak(formValues, ferieuttak?.id);\n        if (ferieuttakUtils.isValidFerieuttak(ferieuttakToSubmit)) {\n            onSubmit({ ...ferieuttak, ...ferieuttakToSubmit });\n        } else {\n            throw new Error('FerieuttakForm: Formvalues is not a valid Ferieuttak on submit.');\n        }\n    };\n\n    const defaultLabels: FerieuttakFormLabels = {\n        title: intlHelper(intl, 'ferieuttak.list.title'),\n        fromDate: intlHelper(intl, 'ferieuttak.list.fromDate'),\n        toDate: intlHelper(intl, 'ferieuttak.list.toDate'),\n        intervalTitle: intlHelper(intl, 'ferieuttak.list.intervalTitle'),\n        okButton: intlHelper(intl, 'ferieuttak.list.okButton'),\n        cancelButton: intlHelper(intl, 'ferieuttak.list.cancelButton'),\n    };\n\n    const formLabels: FerieuttakFormLabels = { ...defaultLabels, ...labels };\n\n    const andreFerieuttak: DateRange[] | undefined =\n        ferieuttak === undefined\n            ? alleFerieuttak.map(mapFomTomToDateRange)\n            : alleFerieuttak.filter((f) => f.id !== ferieuttak.id).map(mapFomTomToDateRange);\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={ferieuttakUtils.mapFerieuttakToFormValues(ferieuttak || {})}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => (\n                    <Form.Form onCancel={onCancel} formErrorHandler={getFormErrorHandler(intl, 'ferieuttakForm')}>\n                        <Systemtittel tag=\"h1\">{formLabels.title}</Systemtittel>\n                        <FormBlock>\n                            <Form.DateRangePicker\n                                legend={formLabels.intervalTitle}\n                                fullscreenOverlay={true}\n                                minDate={minDate}\n                                maxDate={maxDate}\n                                allowRangesToStartAndStopOnSameDate={true}\n                                disabledDateRanges={andreFerieuttak}\n                                fromInputProps={{\n                                    label: formLabels.fromDate,\n                                    name: FerieuttakFormFields.fom,\n                                    validate: (value) => {\n                                        const error = getDateRangeValidator({\n                                            required: true,\n                                            min: minDate,\n                                            max: maxDate,\n                                            toDate: ISOStringToDate(formik.values.tom),\n                                        }).validateFromDate(value);\n                                        return handleDateRangeValidationError(error, minDate, maxDate);\n                                    },\n                                    onChange: () => {\n                                        setTimeout(() => {\n                                            formik.validateField(FerieuttakFormFields.tom);\n                                        });\n                                    },\n                                }}\n                                toInputProps={{\n                                    label: formLabels.toDate,\n                                    name: FerieuttakFormFields.tom,\n                                    validate: (value) => {\n                                        const dateError = getDateRangeValidator({\n                                            required: true,\n                                            min: minDate,\n                                            max: maxDate,\n                                            fromDate: ISOStringToDate(formik.values.fom),\n                                        }).validateToDate(value);\n                                        switch (dateError) {\n                                            case ValidateDateError.dateIsBeforeMin:\n                                                return {\n                                                    key: dateError,\n                                                    values: { dato: prettifyDate(minDate) },\n                                                };\n                                            case ValidateDateError.dateIsAfterMax:\n                                                return {\n                                                    key: dateError,\n                                                    values: { dato: prettifyDate(maxDate) },\n                                                };\n                                            default:\n                                                return dateError;\n                                        }\n                                    },\n                                    onChange: () => {\n                                        setTimeout(() => {\n                                            formik.validateField(FerieuttakFormFields.fom);\n                                        });\n                                    },\n                                }}\n                            />\n                        </FormBlock>\n                    </Form.Form>\n                )}\n            />\n        </>\n    );\n};\n\nexport default FerieuttakForm;\n","import { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Ferieuttak, FerieuttakFormValues } from './types';\n\nexport const isValidFerieuttak = (ferieuttak: Partial<Ferieuttak>): ferieuttak is Ferieuttak => {\n    return ferieuttak.fom !== undefined && ferieuttak.tom !== undefined;\n};\n\nconst mapFormValuesToFerieuttak = (formValues: FerieuttakFormValues, id: string | undefined): Partial<Ferieuttak> => {\n    return {\n        id: id || guid(),\n        fom: ISOStringToDate(formValues.fom),\n        tom: ISOStringToDate(formValues.tom),\n    };\n};\n\nconst mapFerieuttakToFormValues = ({ fom, tom }: Partial<Ferieuttak>): FerieuttakFormValues => {\n    return {\n        fom: dateToISOString(fom),\n        tom: dateToISOString(tom),\n    };\n};\n\nconst ferieuttakUtils = {\n    isValidFerieuttak,\n    mapFerieuttakToFormValues,\n    mapFormValuesToFerieuttak,\n};\n\nexport default ferieuttakUtils;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { getTypedFormComponents, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport {\n    getDateRangeValidator,\n    ValidateDateError,\n    ValidateDateRangeError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { handleDateRangeValidationError, mapFomTomToDateRange } from '../utils';\nimport tidsperiodeUtils from './tidsperiodeUtils';\nimport { DateTidsperiode, DateTidsperiodeFormValues } from './types';\n\nexport interface TidsperiodeFormLabels {\n    title?: string;\n    fromDate: string;\n    toDate: string;\n    intervalTitle?: string;\n    okButton: string;\n    cancelButton: string;\n}\n\ninterface Props {\n    minDate?: Date;\n    maxDate?: Date;\n    tidsperiode?: Partial<DateTidsperiode>;\n    alleTidsperioder?: DateTidsperiode[];\n    formLabels?: Partial<TidsperiodeFormLabels>;\n    onSubmit: (values: DateTidsperiode) => void;\n    onCancel: () => void;\n}\n\nenum TidsperiodeFormFields {\n    tom = 'tom',\n    fom = 'fom',\n}\n\nexport const TidsperiodeFormErrors = {\n    [TidsperiodeFormFields.fom]: {\n        [ValidateDateError.dateHasNoValue]: 'tidsperiodeForm.fom.dateHasNoValue',\n        [ValidateDateRangeError.fromDateIsAfterToDate]: 'tidsperiodeForm.fom.fromDateIsAfterToDate',\n        [ValidateDateError.dateHasInvalidFormat]: 'tidsperiodeForm.fom.dateHasInvalidFormat',\n        [ValidateDateError.dateIsBeforeMin]: 'tidsperiodeForm.fom.dateIsBeforeMin',\n        [ValidateDateError.dateIsAfterMax]: 'tidsperiodeForm.fom.dateIsAfterMax',\n    },\n    [TidsperiodeFormFields.tom]: {\n        [ValidateDateError.dateHasNoValue]: 'tidsperiodeForm.tom.dateHasNoValue',\n        [ValidateDateRangeError.toDateIsBeforeFromDate]: 'tidsperiodeForm.tom.toDateIsBeforeFromDate',\n        [ValidateDateError.dateHasInvalidFormat]: 'tidsperiodeForm.tom.dateHasInvalidFormat',\n        [ValidateDateError.dateIsBeforeMin]: 'tidsperiodeForm.tom.dateIsBeforeMin',\n        [ValidateDateError.dateIsAfterMax]: 'tidsperiodeForm.tom.dateIsAfterMax',\n    },\n};\n\nconst Form = getTypedFormComponents<TidsperiodeFormFields, DateTidsperiodeFormValues, ValidationError>();\n\nconst TidsperiodeForm = ({\n    maxDate,\n    minDate,\n    formLabels,\n    tidsperiode,\n    alleTidsperioder = [],\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: DateTidsperiodeFormValues) => {\n        const dateTidsperiodeToSubmit = tidsperiodeUtils.mapFormValuesToDateTidsperiode(formValues, tidsperiode?.id);\n        if (tidsperiodeUtils.isValidDateTidsperiode(dateTidsperiodeToSubmit)) {\n            onSubmit(dateTidsperiodeToSubmit);\n        } else {\n            throw new Error('TidsperiodeForm: Formvalues is not a valid Tidsperiode on submit.');\n        }\n    };\n\n    const defaultLabels: TidsperiodeFormLabels = {\n        title: intlHelper(intl, 'tidsperiode.form.title'),\n        fromDate: intlHelper(intl, 'tidsperiode.form.fromDate'),\n        toDate: intlHelper(intl, 'tidsperiode.form.toDate'),\n        okButton: intlHelper(intl, 'tidsperiode.form.okButton'),\n        cancelButton: intlHelper(intl, 'tidsperiode.form.cancelButton'),\n    };\n\n    const inlineLabels: TidsperiodeFormLabels = { ...defaultLabels, ...formLabels };\n\n    console.log({ minDate, maxDate });\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={tidsperiodeUtils.mapDateTidsperiodeToFormValues(tidsperiode || {})}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => {\n                    const disabledDateRanges =\n                        tidsperiode === undefined\n                            ? alleTidsperioder.map(mapFomTomToDateRange)\n                            : alleTidsperioder.filter((t) => t.id !== tidsperiode.id).map(mapFomTomToDateRange);\n\n                    return (\n                        <Form.Form onCancel={onCancel} formErrorHandler={getFormErrorHandler(intl, 'tidsperiodeForm')}>\n                            <Systemtittel tag=\"h1\">{inlineLabels.title}</Systemtittel>\n                            <FormBlock>\n                                <Form.DateRangePicker\n                                    legend={inlineLabels.intervalTitle}\n                                    fullscreenOverlay={true}\n                                    minDate={minDate}\n                                    maxDate={maxDate}\n                                    disabledDateRanges={disabledDateRanges}\n                                    fromInputProps={{\n                                        label: inlineLabels.fromDate,\n                                        name: TidsperiodeFormFields.fom,\n                                        validate: (value) => {\n                                            const error = getDateRangeValidator({\n                                                required: true,\n                                                min: minDate,\n                                                max: maxDate,\n                                                toDate: ISOStringToDate(formik.values.tom),\n                                            }).validateFromDate(value);\n                                            return handleDateRangeValidationError(error, minDate, maxDate);\n                                        },\n                                        onChange: () => {\n                                            setTimeout(() => {\n                                                formik.validateField(TidsperiodeFormFields.tom);\n                                            });\n                                        },\n                                    }}\n                                    toInputProps={{\n                                        label: inlineLabels.toDate,\n                                        name: TidsperiodeFormFields.tom,\n                                        validate: getDateRangeValidator({\n                                            required: true,\n                                            min: minDate,\n                                            max: maxDate,\n                                            fromDate: ISOStringToDate(formik.values.fom),\n                                        }).validateToDate,\n                                        onChange: () => {\n                                            setTimeout(() => {\n                                                formik.validateField(TidsperiodeFormFields.fom);\n                                            });\n                                        },\n                                    }}\n                                />\n                            </FormBlock>\n                        </Form.Form>\n                    );\n                }}\n            />\n        </>\n    );\n};\n\nexport default TidsperiodeForm;\n","import { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { guid } from 'nav-frontend-js-utils';\nimport { DateTidsperiode, DateTidsperiodeFormValues } from './types';\n\nconst isValidDateTidsperiode = (tidsperiode: Partial<DateTidsperiode>): tidsperiode is DateTidsperiode => {\n    return tidsperiode.fom !== undefined && tidsperiode.tom !== undefined;\n};\n\nconst mapFormValuesToDateTidsperiode = (\n    formValues: DateTidsperiodeFormValues,\n    id: string | undefined\n): Partial<DateTidsperiode> => {\n    return {\n        id: id || guid(),\n        fom: ISOStringToDate(formValues.fom),\n        tom: ISOStringToDate(formValues.tom),\n    };\n};\n\nconst mapDateTidsperiodeToFormValues = ({ fom, tom }: Partial<DateTidsperiode>): DateTidsperiodeFormValues => {\n    return {\n        fom: dateToISOString(fom),\n        tom: dateToISOString(tom),\n    };\n};\n\nconst tidsperiodeUtils = {\n    isValidDateTidsperiode,\n    mapDateTidsperiodeToFormValues,\n    mapFormValuesToDateTidsperiode,\n};\n\nexport default tidsperiodeUtils;\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { countryIsMemberOfEøsOrEfta } from '@navikt/sif-common-core/lib/utils/countryUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { DateRange, getCountryName, ISOStringToDate, YesOrNo } from '@navikt/sif-common-formik';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport {\n    getDateRangeValidator,\n    getListValidator,\n    getRequiredFieldValidator,\n    getYesOrNoValidator,\n    ValidateDateError,\n    ValidateDateRangeError,\n    ValidateListError,\n    ValidateRequiredFieldError,\n    ValidateYesOrNoError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport { hasValue } from '@navikt/sif-common-formik/lib/validation/validationUtils';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport TidsperiodeListAndDialog from '../tidsperiode/TidsperiodeListAndDialog';\nimport { handleDateRangeValidationError, mapFomTomToDateRange } from '../utils';\nimport { Utenlandsopphold, UtenlandsoppholdFormValues, UtenlandsoppholdÅrsak } from './types';\nimport utils from './utenlandsoppholdUtils';\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    opphold?: Utenlandsopphold;\n    alleOpphold?: Utenlandsopphold[];\n    onSubmit: (values: Utenlandsopphold) => void;\n    onCancel: () => void;\n}\n\nenum UtenlandsoppholdFormFields {\n    fom = 'fom',\n    tom = 'tom',\n    landkode = 'landkode',\n    årsak = 'årsak',\n    erBarnetInnlagt = 'erBarnetInnlagt',\n    barnInnlagtPerioder = 'barnInnlagtPerioder',\n}\n\nexport const UtlandsoppholdFormErrors = {\n    [UtenlandsoppholdFormFields.fom]: {\n        [ValidateDateError.dateHasNoValue]: 'utenlandsoppholdForm.fom.dateHasNoValue',\n        [ValidateDateRangeError.fromDateIsAfterToDate]: 'utenlandsoppholdForm.fom.fromDateIsAfterToDate',\n        [ValidateDateError.dateHasInvalidFormat]: 'utenlandsoppholdForm.fom.dateHasInvalidFormat',\n        [ValidateDateError.dateIsBeforeMin]: 'utenlandsoppholdForm.fom.dateIsBeforeMin',\n        [ValidateDateError.dateIsAfterMax]: 'utenlandsoppholdForm.fom.dateIsAfterMax',\n    },\n    [UtenlandsoppholdFormFields.tom]: {\n        [ValidateDateError.dateHasNoValue]: 'utenlandsoppholdForm.tom.dateHasNoValue',\n        [ValidateDateRangeError.toDateIsBeforeFromDate]: 'utenlandsoppholdForm.tom.toDateIsBeforeFromDate',\n        [ValidateDateError.dateHasInvalidFormat]: 'utenlandsoppholdForm.tom.dateHasInvalidFormat',\n        [ValidateDateError.dateIsBeforeMin]: 'utenlandsoppholdForm.tom.dateIsBeforeMin',\n        [ValidateDateError.dateIsAfterMax]: 'utenlandsoppholdForm.tom.dateIsAfterMax',\n    },\n    [UtenlandsoppholdFormFields.landkode]: {\n        [ValidateRequiredFieldError.noValue]: 'utenlandsoppholdForm.landkode.noValue',\n    },\n    [UtenlandsoppholdFormFields.årsak]: { [ValidateRequiredFieldError.noValue]: 'utenlandsoppholdForm.årsak.noValue' },\n    [UtenlandsoppholdFormFields.erBarnetInnlagt]: {\n        [ValidateYesOrNoError.yesOrNoIsUnanswered]: 'utenlandsoppholdForm.erBarnetInnlagt.yesOrNoIsUnanswered',\n    },\n    [UtenlandsoppholdFormFields.barnInnlagtPerioder]: {\n        [ValidateListError.listIsEmpty]: 'utenlandsoppholdForm.barnInnlagtPerioder.listIsEmpty',\n    },\n};\n\nconst defaultFormValues: UtenlandsoppholdFormValues = {\n    fom: undefined,\n    tom: undefined,\n    landkode: undefined,\n    erBarnetInnlagt: YesOrNo.UNANSWERED,\n    barnInnlagtPerioder: [],\n    årsak: undefined,\n};\n\nconst Form = getTypedFormComponents<UtenlandsoppholdFormFields, UtenlandsoppholdFormValues, ValidationError>();\n\nconst UtenlandsoppholdForm = ({ maxDate, minDate, opphold, alleOpphold = [], onSubmit, onCancel }: Props) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: Partial<UtenlandsoppholdFormValues>) => {\n        const utenlandsoppholdToSubmit = utils.mapFormValuesToUtenlandsopphold(formValues, opphold?.id);\n        if (utils.isValidUtenlandsopphold(utenlandsoppholdToSubmit)) {\n            onSubmit({\n                ...utenlandsoppholdToSubmit,\n                årsak: countryIsMemberOfEøsOrEfta(utenlandsoppholdToSubmit.landkode) ? undefined : formValues.årsak,\n            });\n        } else {\n            throw new Error('UtenlandsoppholdForm: Formvalues is not a valid Utenlandsopphold on submit.');\n        }\n    };\n\n    const registrerteTidsperioder: DateRange[] | undefined =\n        opphold === undefined\n            ? alleOpphold.map(mapFomTomToDateRange)\n            : alleOpphold.filter((o) => o.id !== opphold.id).map(mapFomTomToDateRange);\n\n    const initialValues = opphold ? utils.mapUtenlandsoppholdToFormValues(opphold) : defaultFormValues;\n    return (\n        <Form.FormikWrapper\n            initialValues={initialValues}\n            onSubmit={onFormikSubmit}\n            renderForm={(formik) => {\n                const {\n                    values: { fom, tom, landkode, erBarnetInnlagt, barnInnlagtPerioder = [] },\n                } = formik;\n\n                const hasDateStringValues = hasValue(fom) && hasValue(tom);\n\n                const includeInnlagtPerioderQuestion =\n                    hasDateStringValues && landkode !== undefined && erBarnetInnlagt === YesOrNo.YES;\n\n                const includeInnlagtQuestion: boolean =\n                    landkode !== undefined && hasValue(landkode) && !countryIsMemberOfEøsOrEfta(landkode);\n\n                const showÅrsakQuestion = barnInnlagtPerioder.length > 0;\n\n                return (\n                    <Form.Form\n                        includeButtons={true}\n                        onCancel={onCancel}\n                        formErrorHandler={getFormErrorHandler(intl, 'utenlandsoppholdForm')}>\n                        <Systemtittel tag=\"h1\">\n                            <FormattedMessage id=\"utenlandsopphold.form.tittel\" />\n                        </Systemtittel>\n                        <FormBlock>\n                            <Form.DateRangePicker\n                                legend={intlHelper(intl, 'utenlandsopphold.form.tidsperiode.spm')}\n                                fullscreenOverlay={true}\n                                disabledDateRanges={registrerteTidsperioder}\n                                minDate={minDate}\n                                maxDate={maxDate}\n                                fromInputProps={{\n                                    name: UtenlandsoppholdFormFields.fom,\n                                    label: intlHelper(intl, 'utenlandsopphold.form.tidsperiode.fraDato'),\n                                    validate: (value) => {\n                                        const error = getDateRangeValidator({\n                                            required: true,\n                                            min: minDate,\n                                            max: maxDate,\n                                            toDate: ISOStringToDate(tom),\n                                        }).validateFromDate(value);\n                                        return handleDateRangeValidationError(error, minDate, maxDate);\n                                    },\n                                }}\n                                toInputProps={{\n                                    name: UtenlandsoppholdFormFields.tom,\n                                    label: intlHelper(intl, 'utenlandsopphold.form.tidsperiode.tilDato'),\n                                    validate: (value) => {\n                                        const error = getDateRangeValidator({\n                                            required: true,\n                                            min: minDate,\n                                            max: maxDate,\n                                            fromDate: ISOStringToDate(fom),\n                                        }).validateToDate(value);\n                                        return handleDateRangeValidationError(error, minDate, maxDate);\n                                    },\n                                }}\n                            />\n                        </FormBlock>\n                        {hasDateStringValues && (\n                            <FormBlock>\n                                <Form.CountrySelect\n                                    name={UtenlandsoppholdFormFields.landkode}\n                                    label={intlHelper(intl, 'utenlandsopphold.form.land.spm')}\n                                    validate={getRequiredFieldValidator()}\n                                />\n                            </FormBlock>\n                        )}\n\n                        {includeInnlagtQuestion && landkode && hasDateStringValues && (\n                            <>\n                                <FormBlock>\n                                    <Form.YesOrNoQuestion\n                                        name={UtenlandsoppholdFormFields.erBarnetInnlagt}\n                                        legend={intlHelper(intl, 'utenlandsopphold.form.erBarnetInnlagt.spm', {\n                                            land: getCountryName(landkode, intl.locale),\n                                        })}\n                                        validate={(value) => {\n                                            const error = getYesOrNoValidator()(value);\n                                            return error\n                                                ? {\n                                                      key: error,\n                                                      values: { land: getCountryName(landkode, intl.locale) },\n                                                  }\n                                                : undefined;\n                                        }}\n                                    />\n                                </FormBlock>\n                                {includeInnlagtPerioderQuestion && (\n                                    <FormBlock margin=\"l\">\n                                        <TidsperiodeListAndDialog\n                                            name={UtenlandsoppholdFormFields.barnInnlagtPerioder}\n                                            minDate={ISOStringToDate(fom)}\n                                            maxDate={ISOStringToDate(tom)}\n                                            validate={getListValidator({ required: true })}\n                                            formTitle={intlHelper(\n                                                intl,\n                                                'utenlandsopphold.form.perioderBarnetErInnlag.formTitle'\n                                            )}\n                                            labels={{\n                                                addLabel: intlHelper(\n                                                    intl,\n                                                    'utenlandsopphold.form.perioderBarnetErInnlag.addLabel'\n                                                ),\n                                                modalTitle: intlHelper(\n                                                    intl,\n                                                    'utenlandsopphold.form.perioderBarnetErInnlag.modalTitle'\n                                                ),\n                                                listTitle: intlHelper(\n                                                    intl,\n                                                    'utenlandsopphold.form.perioderBarnetErInnlag.listTitle'\n                                                ),\n                                            }}\n                                        />\n                                    </FormBlock>\n                                )}\n                                {showÅrsakQuestion && (\n                                    <>\n                                        <FormBlock>\n                                            <Form.RadioPanelGroup\n                                                legend={intlHelper(intl, 'utenlandsopphold.form.årsak.spm', {\n                                                    land: getCountryName(landkode, intl.locale),\n                                                })}\n                                                name={UtenlandsoppholdFormFields.årsak}\n                                                validate={getRequiredFieldValidator()}\n                                                radios={[\n                                                    {\n                                                        value: UtenlandsoppholdÅrsak.INNLAGT_DEKKET_NORGE,\n                                                        label: intlHelper(\n                                                            intl,\n                                                            `utenlandsopphold.form.årsak.${UtenlandsoppholdÅrsak.INNLAGT_DEKKET_NORGE}`\n                                                        ),\n                                                    },\n                                                    {\n                                                        value: UtenlandsoppholdÅrsak.INNLAGT_DEKKET_ANNET_LAND,\n                                                        label: intlHelper(\n                                                            intl,\n                                                            `utenlandsopphold.form.årsak.${UtenlandsoppholdÅrsak.INNLAGT_DEKKET_ANNET_LAND}`,\n                                                            { land: getCountryName(landkode, intl.locale) }\n                                                        ),\n                                                    },\n                                                    {\n                                                        value: UtenlandsoppholdÅrsak.ANNET,\n                                                        label: intlHelper(\n                                                            intl,\n                                                            `utenlandsopphold.form.årsak.${UtenlandsoppholdÅrsak.ANNET}`\n                                                        ),\n                                                    },\n                                                ]}\n                                            />\n                                        </FormBlock>\n                                    </>\n                                )}\n                            </>\n                        )}\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default UtenlandsoppholdForm;\n","import { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Utenlandsopphold, UtenlandsoppholdFormValues } from './types';\n\nconst isValidUtenlandsopphold = (utenlandsopphold: Partial<Utenlandsopphold>): utenlandsopphold is Utenlandsopphold => {\n    return (\n        utenlandsopphold.fom !== undefined &&\n        utenlandsopphold.tom !== undefined &&\n        utenlandsopphold.landkode !== undefined\n    );\n};\n\nconst mapFormValuesToUtenlandsopphold = (\n    formValues: UtenlandsoppholdFormValues,\n    id: string | undefined\n): Partial<Utenlandsopphold> => {\n    const { barnInnlagtPerioder } = formValues;\n    return {\n        ...formValues,\n        id: id || guid(),\n        fom: ISOStringToDate(formValues.fom),\n        tom: ISOStringToDate(formValues.tom),\n        barnInnlagtPerioder,\n    };\n};\n\nconst mapUtenlandsoppholdToFormValues = ({\n    fom,\n    tom,\n    erBarnetInnlagt,\n    barnInnlagtPerioder,\n    landkode,\n    årsak,\n}: Partial<Utenlandsopphold>): UtenlandsoppholdFormValues => ({\n    fom: dateToISOString(fom),\n    tom: dateToISOString(tom),\n    erBarnetInnlagt,\n    landkode,\n    årsak,\n    barnInnlagtPerioder,\n});\n\nconst utenlandsoppholdUtils = {\n    isValidUtenlandsopphold,\n    mapFormValuesToUtenlandsopphold,\n    mapUtenlandsoppholdToFormValues,\n};\nexport default utenlandsoppholdUtils;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport ExpandableInfo from '@navikt/sif-common-core/lib/components/expandable-content/ExpandableInfo';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { YesOrNo } from '@navikt/sif-common-core/lib/types/YesOrNo';\nimport { DateRange, dateToday } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport datepickerUtils from '@navikt/sif-common-formik/lib/components/formik-datepicker/datepickerUtils';\nimport { FormikDatepickerProps } from '@navikt/sif-common-formik/lib/components/formik-datepicker/FormikDatepicker';\nimport {\n    getDateValidator,\n    getRequiredFieldValidator,\n    getYesOrNoValidator,\n    ValidateDateError,\n    ValidateNumberError,\n    ValidateRequiredFieldError,\n    ValidateYesOrNoError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport dayjs from 'dayjs';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport FormattedHtmlMessage from '../components/formatted-html-message/FormattedHtmlMessage';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport FraværTimerSelect from './FraværTimerSelect';\nimport { isFraværDag, mapFormValuesToFraværDag, mapFraværDagToFormValues, toMaybeNumber } from './fraværUtilities';\nimport {\n    FraværFieldValidationErrors,\n    validateFraværDagCollision,\n    validateLessOrEqualTo,\n    validateNotHelgedag,\n} from './fraværValidationUtils';\nimport { getFraværÅrsakRadios } from './fraværÅrsakRadios';\nimport { FraværDag, FraværDagFormValues } from './types';\nimport ÅrsakInfo from './ÅrsakInfo';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\nexport interface FraværDagFormLabels {\n    tittel: string;\n    dato: string;\n    antallArbeidstimer: string;\n    timerFravær: string;\n    hjemmePgaKorona: string;\n    årsak: string;\n    ok: string;\n    avbryt: string;\n}\n\ninterface Props {\n    fraværDag?: Partial<FraværDag>;\n    dagDescription?: JSX.Element;\n    minDate: Date;\n    maxDate: Date;\n    dateRangesToDisable?: DateRange[];\n    helgedagerIkkeTillatt?: boolean;\n    headerContent?: JSX.Element;\n    maksArbeidstidPerDag?: number;\n    onSubmit: (values: FraværDag) => void;\n    onCancel: () => void;\n}\n\nexport enum FraværDagFormFields {\n    dato = 'dato',\n    timerArbeidsdag = 'timerArbeidsdag',\n    timerFravær = 'timerFravær',\n    hjemmePgaKorona = 'hjemmePgaKorona',\n    årsak = 'årsak',\n}\n\nexport const FraværDagFormErrors = {\n    [FraværDagFormFields.dato]: {\n        [ValidateDateError.dateHasNoValue]: 'fraværDagForm.dato.dateHasNoValue',\n        [ValidateDateError.dateHasInvalidFormat]: 'fraværDagForm.dato.dateHasInvalidFormat',\n        [ValidateDateError.dateIsAfterMax]: 'fraværDagForm.dato.dateIsAfterMax',\n        [ValidateDateError.dateIsBeforeMin]: 'fraværDagForm.dato.dateIsBeforeMin',\n        [FraværFieldValidationErrors.er_helg]: 'fraværDagForm.dato.er_helg',\n        [FraværFieldValidationErrors.dato_kolliderer_med_annet_fravær]:\n            'fraværDagForm.dato.dato_kolliderer_med_annet_fravær',\n    },\n    [FraværDagFormFields.timerArbeidsdag]: {\n        [ValidateNumberError.numberHasNoValue]: 'fraværDagForm.timerArbeidsdag.numberHasNoValue',\n    },\n    [FraværDagFormFields.timerFravær]: {\n        [ValidateNumberError.numberHasNoValue]: 'fraværDagForm.timerFravær.numbverHasNoValue',\n        [FraværFieldValidationErrors.fravær_timer_mer_enn_arbeidstimer]:\n            'fraværDagForm.timerFravær.fravær_timer_mer_enn_arbeidstimer',\n    },\n    [FraværDagFormFields.hjemmePgaKorona]: {\n        [ValidateYesOrNoError.yesOrNoIsUnanswered]: 'fraværDagForm.hjemmePgaKorona.yesOrNoIsUnanswered',\n    },\n    [FraværDagFormFields.årsak]: { [ValidateRequiredFieldError.noValue]: 'fraværDagForm.årsak.noValue' },\n};\n\nexport const FraværDagFormName = 'fraværDagForm';\n\nexport const FraværDagForm = getTypedFormComponents<FraværDagFormFields, FraværDagFormValues, ValidationError>();\n\nconst FraværDagFormView = ({\n    fraværDag = {\n        dato: undefined,\n        timerArbeidsdag: undefined,\n        timerFravær: undefined,\n        årsak: undefined,\n    },\n    dagDescription,\n    maxDate,\n    minDate,\n    dateRangesToDisable,\n    helgedagerIkkeTillatt,\n    maksArbeidstidPerDag,\n    headerContent,\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n    const onFormikSubmit = (formValues: FraværDagFormValues) => {\n        const fraværDagToSubmit = mapFormValuesToFraværDag(formValues, fraværDag.id);\n        if (isFraværDag(fraværDagToSubmit)) {\n            onSubmit(fraværDagToSubmit);\n        } else {\n            throw new Error('FraværDagFOrm: Formvalues is not a valid FraværDag on submit.');\n        }\n    };\n\n    const formLabels: FraværDagFormLabels = {\n        ok: intlHelper(intl, 'fravær.form.felles.ok'),\n        avbryt: intlHelper(intl, 'fravær.form.felles.avbryt'),\n        årsak: intlHelper(intl, 'fravær.form.felles.årsak'),\n        tittel: intlHelper(intl, 'fravær.form.dag.tittel'),\n        dato: intlHelper(intl, 'fravær.form.dag.dato'),\n        antallArbeidstimer: intlHelper(intl, 'fravær.form.dag.antallArbeidstimer'),\n        timerFravær: intlHelper(intl, 'fravær.form.dag.timerFravær'),\n        hjemmePgaKorona: intlHelper(intl, 'fravær.form.felles.hjemmePgaKorona'),\n    };\n    const fraværÅrsakRadios = getFraværÅrsakRadios(intl);\n    const disabledDateRanges = dateRangesToDisable\n        ? dateRangesToDisable.filter((range) => {\n              const { dato } = fraværDag;\n              return !(dato && dayjs(dato).isSame(range.from, 'day') && dayjs(dato).isSame(range.to, 'day'));\n          })\n        : undefined;\n\n    return (\n        <>\n            <FraværDagForm.FormikWrapper\n                initialValues={mapFraværDagToFormValues(fraværDag)}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => {\n                    const { values } = formik;\n                    const valgtDato = datepickerUtils.getDateFromDateString(values.dato);\n                    const datepickerProps: FormikDatepickerProps<FraværDagFormFields, ValidationError> = {\n                        label: formLabels.dato,\n                        name: FraværDagFormFields.dato,\n                        fullscreenOverlay: true,\n                        dayPickerProps: {\n                            initialMonth: dayjs(dateToday).isAfter(maxDate) ? maxDate : dateToday,\n                        },\n                        minDate,\n                        maxDate,\n                        disableWeekend: helgedagerIkkeTillatt || false,\n                        disabledDateRanges,\n                        validate: (value): ValidationError | undefined => {\n                            if (helgedagerIkkeTillatt && validateNotHelgedag(value)) {\n                                return {\n                                    key: FraværDagFormErrors.dato.er_helg,\n                                    keepKeyUnaltered: true,\n                                };\n                            }\n                            if (validateFraværDagCollision(valgtDato, disabledDateRanges)) {\n                                return {\n                                    key: FraværDagFormErrors.dato.dato_kolliderer_med_annet_fravær,\n                                    keepKeyUnaltered: true,\n                                };\n                            }\n                            return getDateValidator({ required: true, min: minDate, max: maxDate })(value);\n                        },\n                        onChange: () => {\n                            setTimeout(() => {\n                                formik.validateField(FraværDagFormFields.dato);\n                            });\n                        },\n                    };\n\n                    return (\n                        <FraværDagForm.Form\n                            onCancel={onCancel}\n                            formErrorHandler={getFormErrorHandler(intl, 'fraværDagForm')}>\n                            <Systemtittel tag=\"h1\">{formLabels.tittel}</Systemtittel>\n                            {headerContent && <Box>{headerContent}</Box>}\n                            <FormBlock>\n                                <FraværDagForm.DatePicker {...datepickerProps} description={dagDescription} />\n                            </FormBlock>\n                            <FormBlock>\n                                <FraværTimerSelect\n                                    name={FraværDagFormFields.timerArbeidsdag}\n                                    validate={getRequiredFieldValidator()}\n                                    label={formLabels.antallArbeidstimer}\n                                    maksTid={maksArbeidstidPerDag}\n                                />\n                            </FormBlock>\n                            <FormBlock>\n                                <FraværTimerSelect\n                                    name={FraværDagFormFields.timerFravær}\n                                    validate={(value) => {\n                                        if (validateLessOrEqualTo(toMaybeNumber(values.timerArbeidsdag))(value)) {\n                                            return FraværDagFormErrors.timerFravær.fravær_timer_mer_enn_arbeidstimer;\n                                        }\n                                        return getRequiredFieldValidator()(value);\n                                    }}\n                                    label={formLabels.timerFravær}\n                                    maksTid={maksArbeidstidPerDag}\n                                />\n                            </FormBlock>\n                            <FormBlock>\n                                <FraværDagForm.YesOrNoQuestion\n                                    legend={formLabels.hjemmePgaKorona}\n                                    name={FraværDagFormFields.hjemmePgaKorona}\n                                    validate={getYesOrNoValidator()}\n                                    description={\n                                        <ExpandableInfo title={intlHelper(intl, 'info.smittevern.tittel')}>\n                                            <FormattedHtmlMessage id=\"info.smittevern.info.html\" />\n                                        </ExpandableInfo>\n                                    }\n                                />\n                            </FormBlock>\n                            {values.hjemmePgaKorona === YesOrNo.YES && (\n                                <FormBlock>\n                                    <FraværDagForm.RadioPanelGroup\n                                        legend={formLabels.årsak}\n                                        name={FraværDagFormFields.årsak}\n                                        validate={getRequiredFieldValidator()}\n                                        radios={fraværÅrsakRadios}\n                                        description={<ÅrsakInfo />}\n                                    />\n                                </FormBlock>\n                            )}\n                        </FraværDagForm.Form>\n                    );\n                }}\n            />\n        </>\n    );\n};\n\nexport default FraværDagFormView;\n","import React from 'react';\nimport { TypedFormInputValidationProps } from '@navikt/sif-common-formik/lib';\nimport { FraværDagForm, FraværDagFormFields } from './FraværDagForm';\nimport { timeText } from './fraværUtilities';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\ninterface Props extends TypedFormInputValidationProps<any, ValidationError> {\n    name: FraværDagFormFields;\n    label?: string;\n    maksTid?: number;\n}\n\nconst getOptionsList: (maksTid: number) => JSX.Element[] = (maksTid: number) => {\n    const newOptionElement = (t: number): JSX.Element => {\n        return (\n            <option key={t} value={t}>\n                {t.toString(10).replace('.', ',')} {timeText(t.toString(10))}\n            </option>\n        );\n    };\n    const go = (jsxList: JSX.Element[], tid: number): JSX.Element[] => {\n        return tid >= maksTid\n            ? [...jsxList, newOptionElement(tid)]\n            : go([...jsxList, newOptionElement(tid)], tid + 0.5);\n    };\n    return go([], 0.5);\n};\n\nconst FraværTimerSelect = ({ name, validate, label, maksTid }: Props) => {\n    return (\n        <FraværDagForm.Select bredde=\"s\" label={label || 'Antall timer'} name={name} validate={validate}>\n            <option />\n            {getOptionsList(maksTid || 7.5)}\n        </FraværDagForm.Select>\n    );\n};\n\nexport default FraværTimerSelect;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList,\n    ModalFormAndListLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport TidsperiodeForm from './TidsperiodeForm';\nimport TidsperiodeList from './TidsperiodeList';\nimport { DateTidsperiode } from './types';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames, ValidationError> {\n    name: FieldNames;\n    formTitle?: string;\n    minDate?: Date;\n    maxDate?: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction TidsperiodeListAndDialog<FieldNames>({\n    name,\n    minDate,\n    maxDate,\n    validate,\n    labels,\n    formTitle,\n}: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, DateTidsperiode, ValidationError>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                sortFunc={sortItemsByFom}\n                formRenderer={({ onSubmit, onCancel, item, allItems }) => (\n                    <TidsperiodeForm\n                        tidsperiode={item}\n                        alleTidsperioder={allItems}\n                        formLabels={formTitle ? { title: formTitle } : undefined}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => {\n                    return <TidsperiodeList tidsperiode={items} onEdit={onEdit} onDelete={onDelete} />;\n                }}\n            />\n        </>\n    );\n}\n\nexport default TidsperiodeListAndDialog;\n","import { formatDateToApiFormat } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { YesOrNo, getCountryName } from '@navikt/sif-common-formik/lib';\nimport { Virksomhet, VirksomhetApiData } from './types';\nimport { erVirksomhetRegnetSomNyoppstartet, harFiskerNæringstype } from './virksomhetUtils';\n\nexport const mapVirksomhetToVirksomhetApiData = (\n    locale: string,\n    virksomhet: Virksomhet,\n    harBesvartFiskerPåBladB?: boolean\n): VirksomhetApiData => {\n    const registrertINorge = virksomhet.registrertINorge === YesOrNo.YES;\n    const harRegnskapsfører = virksomhet.harRegnskapsfører === YesOrNo.YES;\n    const erNyoppstartet = erVirksomhetRegnetSomNyoppstartet(virksomhet.fom);\n\n    const data: VirksomhetApiData = {\n        næringstyper: [...virksomhet.næringstyper],\n        navnPåVirksomheten: virksomhet.navnPåVirksomheten,\n        registrertINorge,\n        ...(registrertINorge\n            ? {\n                  organisasjonsnummer: virksomhet.organisasjonsnummer,\n              }\n            : {\n                  registrertIUtlandet: virksomhet.registrertILand\n                      ? {\n                            landkode: virksomhet.registrertILand,\n                            landnavn: getCountryName(virksomhet.registrertILand, locale),\n                        }\n                      : undefined,\n              }),\n        fraOgMed: formatDateToApiFormat(virksomhet.fom),\n        tilOgMed: virksomhet.erPågående || virksomhet.tom === undefined ? null : formatDateToApiFormat(virksomhet.tom),\n        erNyoppstartet,\n    };\n\n    if (harFiskerNæringstype(virksomhet.næringstyper) && harBesvartFiskerPåBladB !== true) {\n        data.fiskerErPåBladB = virksomhet.fiskerErPåBladB === YesOrNo.YES;\n    }\n\n    /** Bedrift regnet som nyoppstartet  */\n    if (erNyoppstartet === true) {\n        data.næringsinntekt = virksomhet.næringsinntekt;\n        const harBlittAktiv = virksomhet.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene === YesOrNo.YES;\n        if (harBlittAktiv && virksomhet.blittYrkesaktivDato) {\n            data.yrkesaktivSisteTreFerdigliknedeÅrene = {\n                oppstartsdato: formatDateToApiFormat(virksomhet.blittYrkesaktivDato),\n            };\n        }\n    }\n\n    /** Bedrift ikke regnet som nyoppstartet  */\n    if (erNyoppstartet === false) {\n        const harHattVarigEndring = virksomhet.hattVarigEndringAvNæringsinntektSiste4Kalenderår === YesOrNo.YES;\n        const {\n            varigEndringINæringsinntekt_dato,\n            varigEndringINæringsinntekt_forklaring,\n            varigEndringINæringsinntekt_inntektEtterEndring,\n        } = virksomhet;\n        if (\n            harHattVarigEndring &&\n            varigEndringINæringsinntekt_dato &&\n            varigEndringINæringsinntekt_inntektEtterEndring !== undefined &&\n            varigEndringINæringsinntekt_forklaring\n        ) {\n            data.varigEndring = {\n                dato: formatDateToApiFormat(varigEndringINæringsinntekt_dato),\n                forklaring: varigEndringINæringsinntekt_forklaring,\n                inntektEtterEndring: varigEndringINæringsinntekt_inntektEtterEndring,\n            };\n        }\n    }\n\n    if (harRegnskapsfører && virksomhet.regnskapsfører_navn && virksomhet.regnskapsfører_telefon) {\n        data.regnskapsfører = {\n            navn: virksomhet.regnskapsfører_navn,\n            telefon: virksomhet.regnskapsfører_telefon,\n        };\n    }\n\n    return data;\n};\n","import React from 'react';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport TextareaSummary from '@navikt/sif-common-core/lib/components/textarea-summary/TextareaSummary';\nimport { apiStringDateToDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport DatoSvar, { prettifyApiDate } from '../components/summary/DatoSvar';\nimport IntlLabelValue from '../components/summary/IntlLabelValue';\nimport JaNeiSvar from '../components/summary/JaNeiSvar';\nimport Sitat from '../components/summary/Sitat';\nimport SummaryBlock from '../components/summary/SummaryBlock';\nimport TallSvar from '../components/summary/TallSvar';\nimport { Næringstype, VirksomhetApiData } from './types';\nimport { erVirksomhetRegnetSomNyoppstartet } from './virksomhetUtils';\n\ninterface Props {\n    virksomhet: VirksomhetApiData;\n}\n\nconst getFiskerNæringTekst = (intl: IntlShape, erPåBladB: boolean) => {\n    const næringstekst = intlHelper(intl, `sifForms.virksomhet.næringstype_${Næringstype.FISKE}`);\n    const bladBTekst = erPåBladB\n        ? intlHelper(intl, 'sifForms.virksomhet.summary.fisker.påBladB')\n        : intlHelper(intl, 'sifForms.virksomhet.summary.fisker.ikkePåBladB');\n    return `${næringstekst} (${bladBTekst})`;\n};\n\nexport const renderVirksomhetSummary = (virksomhet: VirksomhetApiData, intl: IntlShape) => {\n    const land = virksomhet.registrertIUtlandet ? virksomhet.registrertIUtlandet.landnavn : 'Norge';\n\n    const næringstyper = virksomhet.næringstyper\n        .map((næring) =>\n            næring === Næringstype.FISKE && virksomhet.fiskerErPåBladB !== undefined\n                ? getFiskerNæringTekst(intl, virksomhet.fiskerErPåBladB)\n                : intlHelper(intl, `sifForms.virksomhet.næringstype_${næring}`)\n        )\n        .join(', ');\n\n    const tidsinfo = virksomhet.tilOgMed\n        ? intlHelper(intl, 'sifForms.virksomhet.summary.tidsinfo.avsluttet', {\n              fraOgMed: prettifyApiDate(virksomhet.fraOgMed),\n              tilOgMed: prettifyApiDate(virksomhet.tilOgMed),\n          })\n        : intlHelper(intl, 'sifForms.virksomhet.summary.tidsinfo.pågående', {\n              fraOgMed: prettifyApiDate(virksomhet.fraOgMed),\n          });\n\n    return (\n        <>\n            <IntlLabelValue labelKey=\"sifForms.virksomhet.summary.navn\">\n                {virksomhet.navnPåVirksomheten}.\n            </IntlLabelValue>\n            <IntlLabelValue labelKey=\"sifForms.virksomhet.summary.næringstype\">{næringstyper}. </IntlLabelValue>\n            <div>\n                <FormattedMessage id=\"sifForms.virksomhet.summary.registrertILand\" values={{ land }} />\n                {virksomhet.registrertINorge && (\n                    <FormattedMessage\n                        id=\"sifForms.virksomhet.summary.registrertILand.orgnr\"\n                        values={{ orgnr: virksomhet.organisasjonsnummer }}\n                    />\n                )}\n                . <br />\n                {tidsinfo}\n            </div>\n        </>\n    );\n};\n\nconst VirksomhetSummary: React.FunctionComponent<Props> = ({ virksomhet }) => {\n    const intl = useIntl();\n    const erRegnetSomNyoppstartet = erVirksomhetRegnetSomNyoppstartet(apiStringDateToDate(virksomhet.fraOgMed));\n\n    return (\n        <>\n            {renderVirksomhetSummary(virksomhet, intl)}\n\n            {virksomhet.næringsinntekt !== undefined && (\n                <SummaryBlock header={intlHelper(intl, 'sifForms.virksomhet.næringsinntekt')}>\n                    <FormattedMessage id=\"sifForms.virksomhet.summary.næringsinntekst\" />\n                    {` `}\n                    <TallSvar verdi={virksomhet.næringsinntekt} />\n                </SummaryBlock>\n            )}\n\n            {erRegnetSomNyoppstartet === true && (\n                <>\n                    <SummaryBlock header={intlHelper(intl, 'sifForms.virksomhet.har_blitt_yrkesaktiv')}>\n                        {virksomhet.yrkesaktivSisteTreFerdigliknedeÅrene === undefined && (\n                            <JaNeiSvar harSvartJa={virksomhet.yrkesaktivSisteTreFerdigliknedeÅrene !== undefined} />\n                        )}\n                        {virksomhet.yrkesaktivSisteTreFerdigliknedeÅrene !== undefined && (\n                            <FormattedMessage\n                                id=\"sifForms.virksomhet.summary.yrkesaktiv.jaStartetDato\"\n                                values={{\n                                    dato: prettifyApiDate(\n                                        virksomhet.yrkesaktivSisteTreFerdigliknedeÅrene.oppstartsdato\n                                    ),\n                                }}\n                            />\n                        )}\n                    </SummaryBlock>\n                </>\n            )}\n\n            {erRegnetSomNyoppstartet === false && (\n                <>\n                    <SummaryBlock header={intlHelper(intl, 'sifForms.virksomhet.varig_endring_spm')}>\n                        <JaNeiSvar harSvartJa={virksomhet.varigEndring !== undefined} />\n                    </SummaryBlock>\n                    {virksomhet.varigEndring && (\n                        <>\n                            <SummaryBlock header={intlHelper(intl, 'sifForms.virksomhet.summary.varigEndring.dato')}>\n                                <DatoSvar apiDato={virksomhet.varigEndring.dato} />\n                            </SummaryBlock>\n                            <SummaryBlock\n                                header={intlHelper(intl, 'sifForms.virksomhet.summary.varigEndring.næringsinntekt')}>\n                                <TallSvar verdi={virksomhet.varigEndring.inntektEtterEndring} />\n                            </SummaryBlock>\n                            <SummaryBlock\n                                header={intlHelper(intl, 'sifForms.virksomhet.summary.varigEndring.beskrivelse')}>\n                                <Sitat>\n                                    <TextareaSummary text={virksomhet.varigEndring.forklaring} />\n                                </Sitat>\n                            </SummaryBlock>\n                        </>\n                    )}\n                </>\n            )}\n\n            {/* Regnskapsfører */}\n            {virksomhet.registrertINorge && (\n                <SummaryBlock header={intlHelper(intl, 'sifForms.virksomhet.regnskapsfører_spm')}>\n                    {virksomhet.regnskapsfører === undefined && <JaNeiSvar harSvartJa={false} />}\n                    {virksomhet.regnskapsfører !== undefined && (\n                        <FormattedMessage\n                            id=\"sifForms.virksomhet.summary.regnskapsfører.info\"\n                            values={{\n                                navn: virksomhet.regnskapsfører.navn,\n                                telefon: virksomhet.regnskapsfører.telefon,\n                            }}\n                        />\n                    )}\n                </SummaryBlock>\n            )}\n        </>\n    );\n};\n\nexport default VirksomhetSummary;\n"],"sourceRoot":""}