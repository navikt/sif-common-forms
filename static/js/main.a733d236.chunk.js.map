{"version":3,"sources":["dev/components/header-menu/headerMenu.less","dev/styles/dev.less","forms/bosted-utland/bostedUtlandMessages.ts","forms/ferieuttak/ferieuttakMessages.ts","forms/fravær/fraværMessages.ts","forms/utenlandsopphold/utenlandsoppholdMessages.ts","forms/fosterbarn/fosterbarnMessages.ts","forms/virksomhet/virksomhetMessages.ts","forms/tidsperiode/tidsperiodeMessages.ts","forms/annet-barn/annetBarnMessages.ts","dev/components/app-intl-provider/messages.ts","dev/components/app-intl-provider/AppIntlProvider.tsx","dev/components/svg/NAVLogo.tsx","forms/bosted-utland/BostedUtlandForm.tsx","dev/components/page-intro/PageIntro.tsx","forms/utils/index.ts","forms/bosted-utland/bostedUtlandUtils.ts","forms/bosted-utland/BostedUtlandList.tsx","forms/bosted-utland/BostedUtlandListAndDialog.tsx","dev/components/submit-preview/SubmitPreview.tsx","dev/examples/dialog-forms/BostedUtlandExample.tsx","forms/ferieuttak/FerieuttakForm.tsx","forms/ferieuttak/ferieuttakUtils.ts","forms/ferieuttak/FerieuttakList.tsx","forms/ferieuttak/FerieuttakListAndDialog.tsx","dev/examples/dialog-forms/FerieuttakExample.tsx","forms/fosterbarn/FosterbarnForm.tsx","forms/fosterbarn/types.ts","forms/fosterbarn/FosterbarnList.tsx","forms/fosterbarn/FosterbarnListAndDialog.tsx","dev/examples/dialog-forms/FosterbarnExample.tsx","forms/tidsperiode/TidsperiodeForm.tsx","forms/tidsperiode/tidsperiodeUtils.ts","forms/tidsperiode/TidsperiodeList.tsx","forms/tidsperiode/TidsperiodeListAndDialog.tsx","dev/examples/dialog-forms/TidsperiodeExample.tsx","forms/utenlandsopphold/types.ts","forms/utenlandsopphold/utenlandsoppholdUtils.ts","forms/utenlandsopphold/UtenlandsoppholdForm.tsx","forms/utenlandsopphold/UtenlandsoppholdList.tsx","forms/utenlandsopphold/UtenlandsoppholdListAndDialog.tsx","dev/examples/dialog-forms/UtenlandsoppholdExample.tsx","forms/fravær/fraværValidationUtils.ts","forms/fravær/fraværUtilities.ts","forms/fravær/FraværPeriodeForm.tsx","forms/fravær/FraværPerioderList.tsx","forms/fravær/FraværPerioderListAndDialog.tsx","forms/fravær/FraværDagForm.tsx","forms/fravær/FraværTimerSelect.tsx","forms/fravær/FraværDagerList.tsx","forms/fravær/FraværDagerListAndDialog.tsx","dev/examples/dialog-forms/FraværExample.tsx","forms/annet-barn/AnnetBarnForm.tsx","forms/annet-barn/annetBarnUtils.ts","forms/annet-barn/AnnetBarnList.tsx","forms/annet-barn/AnnetBarnListAndDialog.tsx","dev/examples/dialog-forms/AnnetBarnExample.tsx","forms/virksomhet/types.ts","dev/examples/dialog-forms/DialogForms.tsx","forms/virksomhet/virksomhetUtils.ts","forms/virksomhet/mapVirksomhetToApiData.ts","forms/virksomhet/parts/InfoTilFisker.tsx","forms/virksomhet/VirksomhetForm.tsx","forms/virksomhet/VirksomhetList.tsx","forms/virksomhet/VirksomhetListAndDialog.tsx","dev/examples/virksomhet-example/VirksomhetExample.tsx","dev/Intro.tsx","dev/examples/texts/Texts.tsx","dev/config/routeConfig.tsx","dev/components/header-menu/HeaderMenu.tsx","dev/components/left-menu/LeftMenu.tsx","dev/DevContent.tsx","dev/DevPage.tsx","App.tsx","index.tsx"],"names":["module","exports","bostedUtlandMessages","nb","nn","ferieuttakMessages","fraværMessages","utenlandsoppholdMessages","fosterbarnMessages","virksomhetMessages","tidsperiodeMessages","annetBarnMessages","commonNb","require","commonNn","validationNb","validationNn","appMessages","AppIntlProvider","locale","onError","children","messages","NAVLogo","BostedUtlandFormFields","props","className","width","viewBox","fill","fillRule","d","PageIntro","title","padBottom","margin","tag","mapFomTomToDateRange","from","fom","to","tom","bostedUtlandUtils","isValidBostedUtland","bosted","landkode","undefined","mapBostedUtlandToFormValues","dateToISOString","mapFormValuesToBostedUtland","formValues","id","guid","ISOStringToDate","Form","getTypedFormComponents","BostedUtlandForm","maxDate","minDate","alleBosteder","onSubmit","onCancel","intl","useIntl","FormikWrapper","initialValues","bostedToSubmit","Error","renderForm","formik","values","fomDateLimits","tomDateLimits","andreBosteder","map","filter","b","fieldErrorRenderer","error","commonFieldErrorRenderer","DateRangePicker","legend","intlHelper","fullscreenOverlay","allowRangesToStartAndStopOnSameDate","disabledDateRanges","fromInputProps","name","label","validate","dateString","dateRangeValidation","validateFromDate","toInputProps","validateToDate","CountrySelect","validateRequiredSelect","bem","bemUtils","BostedUtlandList","bosteder","onDelete","onEdit","getItemId","opphold","getItemTitle","getCountryName","labelRenderer","navn","element","onClick","prettifyDateExtended","items","BostedUtlandListAndDialog","labels","dialogWidth","sortFunc","sortItemsByFom","formRenderer","item","allItems","listRenderer","SubmitPreview","FormField","style","borderTop","paddingTop","padding","fontSize","JSON","stringify","FerieuttakFormFields","FormikExample","useState","singleFormValues","setSingleFormValues","listFormValues","setListFormValues","border","includeButtons","submitButtonLabel","date1YearAgo","date1YearFromNow","validateRequiredList","addLabel","listTitle","modalTitle","emptyListText","console","log","showExplanation","ferieuttakUtils","isValidFerieuttak","ferieuttak","mapFerieuttakToFormValues","mapFormValuesToFerieuttak","FerieuttakForm","alleFerieuttak","defaultLabels","fromDate","toDate","intervalTitle","okButton","cancelButton","formLabels","andreFerieuttak","f","ferieuttakToSubmit","onChange","setTimeout","validateField","FerieuttakList","getDateTitleString","uttak","FerieuttakListAndDialog","FosterbarnFormField","ferie","FosterbarnForm","fosterbarn","fornavn","etternavn","fødselsnummer","text","includeName","defaultText","form_etternavn_label","form_fornavn_label","form_fødselsnummer_label","txt","hasValue","isFosterbarn","Input","validateFødselsnummer","inputMode","maxLength","columns","validateRequiredField","FosterbarnList","getBarnTitleString","barn","paddingRight","formatName","FosterbarnListAndDialog","texts","info","liste_legg_til_knapp","liste_tittel","modal_tittel","liste_tom_liste_tekst","TidsperiodeFormFields","FosterbarnExample","tidsperiodeUtils","isValidDateTidsperiode","tidsperiode","mapDateTidsperiodeToFormValues","mapFormValuesToDateTidsperiode","TidsperiodeForm","alleTidsperioder","inlineLabels","dateTidsperiodeToSubmit","t","TidsperiodeList","TidsperiodeListAndDialog","formTitle","UtenlandsoppholdÅrsak","TidsperiodeExample","UtenlandsoppholdFormFields","utenlandsoppholdUtils","isValidUtenlandsopphold","utenlandsopphold","mapFormValuesToUtenlandsopphold","barnInnlagtPerioder","mapUtenlandsoppholdToFormValues","erBarnetInnlagt","årsak","defaultFormValues","YesOrNo","UNANSWERED","UtenlandsoppholdForm","alleOpphold","registrerteTidsperioder","o","utils","utenlandsoppholdToSubmit","countryIsMemberOfEøsOrEfta","hasDateStringValues","includeInnlagtPerioderQuestion","YES","includeInnlagtQuestion","showÅrsakQuestion","length","areAllQuestionsAnswered","YesOrNoQuestion","land","validateYesOrNoIsAnswered","RadioPanelGroup","radios","value","INNLAGT_DEKKET_NORGE","INNLAGT_DEKKET_ANNET_LAND","ANNET","UtenlandsoppholdList","UtenlandsoppholdListAndDialog","FraværFieldValidationErrors","UtenlandsoppholdExample","Weekday","validateAll","validations","reduce","prev","curr","fraværDagToFraværDateRange","fraværDag","dato","validateNoCollisions","fraværDager","fraværPerioder","dates","ranges","some","range","moment","isSameOrAfter","isSameOrBefore","createFieldValidationError","dager_med_fravær_overlapper_perioder","FraværPeriodeFormFields","getWeekdayName","date","getDay","sunday","monday","tuesday","wednesday","thursday","friday","saturday","validateNotHelgedag","maybeDate","dateErHelg","er_helg","timeText","timer","toMaybeNumber","timerArbeidsdag","isString","parseFloat","outDenneHvisInkludert","denneFraværsPerioden","fraværPeriode","FraværPeriodeForm","dateRangesToDisable","helgedagerIkkeTillat","fraværPeriodeToSubmit","mapFormValuesToFraværPeriode","DateIntervalPicker","fromDatepickerProps","disableWeekend","toDatepickerProps","FraværPerioderList","useTrashcan","FraværPerioderListAndDialog","FraværDagFormFields","fraværPeriodeFormLabels","fraværPeriodeA","fraværPeriodeB","FraværTimerSelect","maksTid","FraværDagForm","Select","bredde","newOptionElement","key","toString","replace","go","jsxList","tid","getOptionsList","antallArbeidstimer","timerFravær","dateRange","FraværDagFormView","helgedagerIkkeTillatt","maksArbeidstidPerDag","fraværDagToSubmit","mapFormValuesToFraværDag","maybeMaxValue","datepickerProps","DatePicker","maybeValue","maybeValueFloat","fravær_timer_mer_enn_arbeidstimer","FraværDagerList","getFraværDagListItemTitle","FraværDagerListAndDialog","fraværDagFormLabels","fraværDagA","fraværDagB","AnnetBarnFormFields","perioder","dager","FraværExample","fraværPeriodeSingleFormValues","setFraværPeriodeSingleFormValues","fraværDagSingleFormValues","setFraværDagSingleFormValues","dateToday","annetBarnUtils","mapAnnetBarnToFormValues","annetBarn","fnr","fødselsdato","mapFormValuesToPartialAnnetBarn","isAnnetBarn","AnnetBarnForm","annetBarnToSubmit","placeholder","placeholderNavn","aldersGrenseText","validateDateInRange","showYearSelector","placeholderFnr","AnnetBarnList","prettifyDate","AnnetBarnListAndDialog","Næringstype","VirksomhetFormField","AnnetBarnExample","date4YearsAgo","tabRoutes","path","renderContent","BostedUtlandExample","FerieuttakExample","DialogForms","setPath","activeRoute","find","r","evt","idx","tabs","active","isVirksomhet","virksomhet","harFiskerNæringstype","næringstyper","n","FISKER","mapVirksomhetToFormValues","oppstartsdato","varigEndringINæringsinntekt_dato","mapVirksomhetToVirksomhetApiData","harBesvartFikserPåBladB","registrertINorge","harRegnskapsfører","data","navnPåVirksomheten","organisasjonsnummer","registrertIUtlandet","registrertILand","landnavn","fraOgMed","formatDateToApiFormat","tilOgMed","erPågående","næringsinntekt","hattVarigEndringAvNæringsinntektSiste4Kalenderår","harHatt","varigEndringINæringsinntekt_forklaring","varigEndringINæringsinntekt_inntektEtterEndring","varigEndring","forklaring","inntektEtterEndring","fiskerErPåBladB","harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene","yrkesaktivSisteTreFerdigliknedeÅrene","regnskapsfører_navn","regnskapsfører_telefon","regnskapsfører","telefon","harRevisor","revisor_navn","revisor_telefon","revisor","kanInnhenteOpplysninger","kanInnhenteOpplsyningerFraRevisor","InfoTilFisker","ensureValidNæringsinntekt","fomDate","isAfter","visNæringsinntekt","VirksomhetForm","hideFormFields","getText","hideFiskerPåBladB","hideRevisor","virksomhetToSubmit","setFieldValue","includeValidationSummary","CheckboxPanelGroup","checkboxes","JORDBRUK","DAGMAMMA","ANNEN","NO","useAlpha3Code","maxWidth","validateOrgNumber","disabled","Checkbox","afterOnChange","checked","type","max","validateRequiredNumber","min","description","date3YearsAgo","Textarea","validatePhoneNumber","VirksomhetList","virksomheter","næring","VirksomhetListAndDialog","onAfterChange","Date","VirksomhetExample","hideFisker","setHideFisker","setHideRevisor","currentTarget","Intro","Texts","formMessages","push","paddingBottom","showMissingTextSummary","routes","isActiveRoute","pathname","indexOf","renderMenuItem","route","data-page","withRouter","history","location","onSelection","lenkeBem","classNames","block","modifierConditional","routeConfig","getRouteConfig","minWidth","DevPage","onChangeLocale","toggle","localeFromSessionStorage","getLocaleFromSessionStorage","App","React","setLocale","l","setLocaleInSessionStorage","Modal","setAppElement","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a733d236.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navRod\":\"#c30000\",\"navOransje\":\"#ff9100\",\"navLimeGronn\":\"#a2ad00\",\"navGronn\":\"#06893a\",\"navLilla\":\"#634689\",\"navDypBla\":\"#005b82\",\"navBla\":\"#0067c5\",\"navLysBla\":\"#66cbec\",\"navMorkGra\":\"#3e3832\",\"navGra80\":\"#59514b\",\"navGra60\":\"#78706a\",\"navGra40\":\"#b7b1a9\",\"navGra20\":\"#c6c2bf\",\"navLysGra\":\"#e9e7e7\",\"fokusFarge\":\"#254b6d\",\"orangeFocus\":\"#ffbd66\",\"redError\":\"#ba3a26\",\"white\":\"#fff\",\"grayBackground\":\"#e9e7e7\",\"grayIcon\":\"#b7b1a9\",\"grayModia\":\"#333333\",\"grayInactive\":\"#78706a\",\"pinkErrorBg\":\"#f3e3e3\",\"navGronnLighten20\":\"#38a161\",\"navGronnLighten40\":\"#6ab889\",\"navGronnLighten60\":\"#9bd0b0\",\"navGronnLighten80\":\"#cde7d8\",\"navGronnDarken20\":\"#117938\",\"navGronnDarken40\":\"#1c6937\",\"navGronnDarken60\":\"#285835\",\"navGronnDarken80\":\"#334834\",\"navLimeGronnLighten20\":\"#b5bd33\",\"navLimeGronnLighten40\":\"#c7ce66\",\"navLimeGronnLighten60\":\"#dade99\",\"navLimeGronnLighten80\":\"#ecefcc\",\"navLimeGronnDarken20\":\"#8e960a\",\"navLimeGronnDarken40\":\"#7a7e14\",\"navLimeGronnDarken60\":\"#66671e\",\"navLimeGronnDarken80\":\"#524f28\",\"navLysBlaLighten20\":\"#85d5f0\",\"navLysBlaLighten40\":\"#a3e0f4\",\"navLysBlaLighten60\":\"#c2eaf7\",\"navLysBlaLighten80\":\"#e0f5fb\",\"navLysBlaDarken20\":\"#5eaec7\",\"navLysBlaDarken40\":\"#5690a2\",\"navLysBlaDarken60\":\"#4e737c\",\"navLysBlaDarken80\":\"#465557\",\"navBlaLighten20\":\"#3385d1\",\"navBlaLighten40\":\"#66a4dc\",\"navBlaLighten60\":\"#99c2e8\",\"navBlaLighten80\":\"#cce1f3\",\"navBlaDarken20\":\"#0c5ea8\",\"navBlaDarken40\":\"#19548a\",\"navBlaDarken60\":\"#254b6d\",\"navBlaDarken80\":\"#32414f\",\"navDypBlaLighten20\":\"#337c9b\",\"navDypBlaLighten40\":\"#669db4\",\"navDypBlaLighten60\":\"#99bdcd\",\"navDypBlaLighten80\":\"#ccdee6\",\"navDypBlaDarken20\":\"#0c5472\",\"navDypBlaDarken40\":\"#194d62\",\"navDypBlaDarken60\":\"#254652\",\"navDypBlaDarken80\":\"#323f42\",\"navLillaLighten20\":\"#826ba1\",\"navLillaLighten40\":\"#a190b8\",\"navLillaLighten60\":\"#c1b5d0\",\"navLillaLighten80\":\"#e0dae7\",\"navLillaDarken20\":\"#5c4378\",\"navLillaDarken40\":\"#544066\",\"navLillaDarken60\":\"#4d3e55\",\"navLillaDarken80\":\"#453b43\",\"navRodLighten20\":\"#cf3333\",\"navRodLighten40\":\"#db6666\",\"navRodLighten60\":\"#e79999\",\"navRodLighten80\":\"#f3cccc\",\"navRodDarken20\":\"#a80b0a\",\"navRodDarken40\":\"#8e1614\",\"navRodDarken60\":\"#73221e\",\"navRodDarken80\":\"#592d28\",\"navOransjeLighten20\":\"#ffa733\",\"navOransjeLighten40\":\"#ffbd66\",\"navOransjeLighten60\":\"#ffd399\",\"navOransjeLighten80\":\"#ffe9cc\",\"navOransjeDarken20\":\"#d87f0a\",\"navOransjeDarken40\":\"#b26d14\",\"navOransjeDarken60\":\"#8b5c1e\",\"navOransjeDarken80\":\"#654a28\",\"orangeFocusLighten20\":\"#ffca85\",\"orangeFocusLighten40\":\"#ffd7a3\",\"orangeFocusLighten60\":\"#ffe5c2\",\"orangeFocusLighten80\":\"#fff2e0\",\"orangeFocusDarken20\":\"#d8a25c\",\"orangeFocusDarken40\":\"#b28851\",\"orangeFocusDarken60\":\"#8b6d47\",\"orangeFocusDarken80\":\"#65533c\",\"redErrorLighten20\":\"#c86151\",\"redErrorLighten40\":\"#d6897d\",\"redErrorLighten60\":\"#e3b0a8\",\"redErrorLighten80\":\"#f1d8d4\",\"redErrorDarken20\":\"#a13a28\",\"redErrorDarken40\":\"#88392b\",\"redErrorDarken60\":\"#70392d\",\"redErrorDarken80\":\"#573830\",\"screenSm\":\"768px\",\"screenSmMin\":\"768px\",\"screenTablet\":\"768px\",\"screenMd\":\"992px\",\"screenMdMin\":\"992px\",\"screenDesktop\":\"992px\",\"screenLg\":\"1200px\",\"screenLgMin\":\"1200px\",\"screenLgDesktop\":\"1200px\",\"screenXsMax\":\"767px\",\"screenSmMax\":\"991px\",\"screenMdMax\":\"1199px\",\"containerTablet\":\"736px\",\"containerSm\":\"736px\",\"containerDesktop\":\"956px\",\"containerMd\":\"956px\",\"containerLargeDesktop\":\"1156px\",\"containerLg\":\"1156px\",\"gridColumns\":\"12\",\"gridGutterWidth\":\"16px\",\"gridFloatBreakpoint\":\"768px\",\"gridFloatBreakpointMax\":\"767px\",\"paddingBaseVertical\":\"6px\",\"paddingBaseHorizontal\":\"12px\",\"paddingLargeVertical\":\"10px\",\"paddingLargeHorizontal\":\"16px\",\"paddingSmallVertical\":\"5px\",\"paddingSmallHorizontal\":\"10px\",\"paddingXsVertical\":\"1px\",\"paddingXsHorizontal\":\"5px\",\"lineHeightLarge\":\"1.3333333\",\"lineHeightSmall\":\"1.5\",\"borderRadiusSmall\":\"2px\",\"borderRadiusBase\":\"4px\",\"borderRadiusLarge\":\"6px\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navRod\":\"#c30000\",\"navOransje\":\"#ff9100\",\"navLimeGronn\":\"#a2ad00\",\"navGronn\":\"#06893a\",\"navLilla\":\"#634689\",\"navDypBla\":\"#005b82\",\"navBla\":\"#0067c5\",\"navLysBla\":\"#66cbec\",\"navMorkGra\":\"#3e3832\",\"navGra80\":\"#59514b\",\"navGra60\":\"#78706a\",\"navGra40\":\"#b7b1a9\",\"navGra20\":\"#c6c2bf\",\"navLysGra\":\"#e9e7e7\",\"fokusFarge\":\"#254b6d\",\"orangeFocus\":\"#ffbd66\",\"redError\":\"#ba3a26\",\"white\":\"#fff\",\"grayBackground\":\"#e9e7e7\",\"grayIcon\":\"#b7b1a9\",\"grayModia\":\"#333333\",\"grayInactive\":\"#78706a\",\"pinkErrorBg\":\"#f3e3e3\",\"navGronnLighten20\":\"#38a161\",\"navGronnLighten40\":\"#6ab889\",\"navGronnLighten60\":\"#9bd0b0\",\"navGronnLighten80\":\"#cde7d8\",\"navGronnDarken20\":\"#117938\",\"navGronnDarken40\":\"#1c6937\",\"navGronnDarken60\":\"#285835\",\"navGronnDarken80\":\"#334834\",\"navLimeGronnLighten20\":\"#b5bd33\",\"navLimeGronnLighten40\":\"#c7ce66\",\"navLimeGronnLighten60\":\"#dade99\",\"navLimeGronnLighten80\":\"#ecefcc\",\"navLimeGronnDarken20\":\"#8e960a\",\"navLimeGronnDarken40\":\"#7a7e14\",\"navLimeGronnDarken60\":\"#66671e\",\"navLimeGronnDarken80\":\"#524f28\",\"navLysBlaLighten20\":\"#85d5f0\",\"navLysBlaLighten40\":\"#a3e0f4\",\"navLysBlaLighten60\":\"#c2eaf7\",\"navLysBlaLighten80\":\"#e0f5fb\",\"navLysBlaDarken20\":\"#5eaec7\",\"navLysBlaDarken40\":\"#5690a2\",\"navLysBlaDarken60\":\"#4e737c\",\"navLysBlaDarken80\":\"#465557\",\"navBlaLighten20\":\"#3385d1\",\"navBlaLighten40\":\"#66a4dc\",\"navBlaLighten60\":\"#99c2e8\",\"navBlaLighten80\":\"#cce1f3\",\"navBlaDarken20\":\"#0c5ea8\",\"navBlaDarken40\":\"#19548a\",\"navBlaDarken60\":\"#254b6d\",\"navBlaDarken80\":\"#32414f\",\"navDypBlaLighten20\":\"#337c9b\",\"navDypBlaLighten40\":\"#669db4\",\"navDypBlaLighten60\":\"#99bdcd\",\"navDypBlaLighten80\":\"#ccdee6\",\"navDypBlaDarken20\":\"#0c5472\",\"navDypBlaDarken40\":\"#194d62\",\"navDypBlaDarken60\":\"#254652\",\"navDypBlaDarken80\":\"#323f42\",\"navLillaLighten20\":\"#826ba1\",\"navLillaLighten40\":\"#a190b8\",\"navLillaLighten60\":\"#c1b5d0\",\"navLillaLighten80\":\"#e0dae7\",\"navLillaDarken20\":\"#5c4378\",\"navLillaDarken40\":\"#544066\",\"navLillaDarken60\":\"#4d3e55\",\"navLillaDarken80\":\"#453b43\",\"navRodLighten20\":\"#cf3333\",\"navRodLighten40\":\"#db6666\",\"navRodLighten60\":\"#e79999\",\"navRodLighten80\":\"#f3cccc\",\"navRodDarken20\":\"#a80b0a\",\"navRodDarken40\":\"#8e1614\",\"navRodDarken60\":\"#73221e\",\"navRodDarken80\":\"#592d28\",\"navOransjeLighten20\":\"#ffa733\",\"navOransjeLighten40\":\"#ffbd66\",\"navOransjeLighten60\":\"#ffd399\",\"navOransjeLighten80\":\"#ffe9cc\",\"navOransjeDarken20\":\"#d87f0a\",\"navOransjeDarken40\":\"#b26d14\",\"navOransjeDarken60\":\"#8b5c1e\",\"navOransjeDarken80\":\"#654a28\",\"orangeFocusLighten20\":\"#ffca85\",\"orangeFocusLighten40\":\"#ffd7a3\",\"orangeFocusLighten60\":\"#ffe5c2\",\"orangeFocusLighten80\":\"#fff2e0\",\"orangeFocusDarken20\":\"#d8a25c\",\"orangeFocusDarken40\":\"#b28851\",\"orangeFocusDarken60\":\"#8b6d47\",\"orangeFocusDarken80\":\"#65533c\",\"redErrorLighten20\":\"#c86151\",\"redErrorLighten40\":\"#d6897d\",\"redErrorLighten60\":\"#e3b0a8\",\"redErrorLighten80\":\"#f1d8d4\",\"redErrorDarken20\":\"#a13a28\",\"redErrorDarken40\":\"#88392b\",\"redErrorDarken60\":\"#70392d\",\"redErrorDarken80\":\"#573830\",\"screenSm\":\"768px\",\"screenSmMin\":\"768px\",\"screenTablet\":\"768px\",\"screenMd\":\"992px\",\"screenMdMin\":\"992px\",\"screenDesktop\":\"992px\",\"screenLg\":\"1200px\",\"screenLgMin\":\"1200px\",\"screenLgDesktop\":\"1200px\",\"screenXsMax\":\"767px\",\"screenSmMax\":\"991px\",\"screenMdMax\":\"1199px\",\"containerTablet\":\"736px\",\"containerSm\":\"736px\",\"containerDesktop\":\"956px\",\"containerMd\":\"956px\",\"containerLargeDesktop\":\"1156px\",\"containerLg\":\"1156px\",\"gridColumns\":\"12\",\"gridGutterWidth\":\"16px\",\"gridFloatBreakpoint\":\"768px\",\"gridFloatBreakpointMax\":\"767px\",\"paddingBaseVertical\":\"6px\",\"paddingBaseHorizontal\":\"12px\",\"paddingLargeVertical\":\"10px\",\"paddingLargeHorizontal\":\"16px\",\"paddingSmallVertical\":\"5px\",\"paddingSmallHorizontal\":\"10px\",\"paddingXsVertical\":\"1px\",\"paddingXsHorizontal\":\"5px\",\"lineHeightLarge\":\"1.3333333\",\"lineHeightSmall\":\"1.5\",\"borderRadiusSmall\":\"2px\",\"borderRadiusBase\":\"4px\",\"borderRadiusLarge\":\"6px\"};","const bostedUtlandMessages = {\n    nb: {\n        'bostedUtland.list.add': 'Legg til opphold',\n        'bostedUtland.form.tittel': 'Utenlandsopphold',\n        'bostedUtland.form.tidsperiode.spm': 'Tidsperiode',\n        'bostedUtland.form.tidsperiode.fraDato': 'Fra og med',\n        'bostedUtland.form.tidsperiode.tilDato': 'Til og med',\n        'bostedUtland.form.land.spm': 'Velg land',\n        'bostedUtland.form.ok': 'Legg til',\n        'bostedUtland.form.avbryt': 'Avbryt',\n    },\n    nn: {\n        'bostedUtland.list.add': 'Legg til opphald',\n        'bostedUtland.form.tittel': 'Utenlandsopphald',\n        'bostedUtland.form.tidsperiode.spm': 'Tidsperiode',\n        'bostedUtland.form.tidsperiode.fraDato': 'Frå og med',\n        'bostedUtland.form.tidsperiode.tilDato': 'Til og med',\n        'bostedUtland.form.land.spm': 'Velg land',\n        'bostedUtland.form.ok': 'Legg til',\n        'bostedUtland.form.avbryt': 'Avbryt',\n    },\n};\n\nexport default bostedUtlandMessages;\n","const ferieuttakMessages = {\n    nb: {\n        'ferieuttak.list.title': 'Registrer uttak av ferie',\n        'ferieuttak.list.fromDate': 'Fra og med',\n        'ferieuttak.list.toDate': 'Til og med',\n        'ferieuttak.list.intervalTitle': 'Velg tidsrom',\n        'ferieuttak.list.okButton': 'Ok',\n        'ferieuttak.list.cancelButton': 'Avbryt',\n        'ferieuttak.form.validation.required': 'Feltet er påkrevd',\n        'ferieuttak.form.validation.dateOutsideRange': 'Første gyldige dato er {fom}, og siste gyldige dato er {tom}',\n        'ferieuttak.form.validation.fromDateAfterToDate': 'Fra-dato må være lik eller før til-dato',\n        'ferieuttak.form.validation.toDateBeforeFromDate': 'Til-dato må være lik eller etter fra-dato',\n    },\n    nn: {\n        'ferieuttak.list.title': 'Registrer uttak av ferie',\n        'ferieuttak.list.fromDate': 'Frå og med',\n        'ferieuttak.list.toDate': 'Til og med',\n        'ferieuttak.list.intervalTitle': 'Velg tidsrom',\n        'ferieuttak.list.okButton': 'Ok',\n        'ferieuttak.list.cancelButton': 'Avbryt',\n        'ferieuttak.form.validation.required': 'Feltet er påkrevd',\n        'ferieuttak.form.validation.dateOutsideRange': 'Første gyldige dato er {fom}, og siste gyldige dato er {tom}',\n        'ferieuttak.form.validation.fromDateAfterToDate': 'Frå-dato må vere lik eller før til-dato',\n        'ferieuttak.form.validation.toDateBeforeFromDate': 'Til-dato må vere lik eller etter frå-dato',\n    },\n};\n\nexport default ferieuttakMessages;\n","const fraværMessages = {\n    nb: {\n        'fravær.form.validation.required': 'Feltet er påkrevd',\n        'fravær.form.validation.dateOutsideRange': 'Første gyldige dato er {fom}, og siste gyldige dato er {tom}',\n        'fravær.form.validation.fromDateAfterToDate': 'Fra-dato må være lik eller før til-dato',\n        'fravær.form.validation.toDateBeforeFromDate': 'Til-dato må være lik eller etter fra-dato',\n        'fravær.form.validation.timer_mer_enn_arbeidstimer':\n            'Antall timer med fravær kan ikke være mer enn antall timer du skulle ha jobbet denne dagen',\n        'fieldvalidation.dager_med_fravær_overlapper_perioder':\n            'En eller flere perioder overlapper med registrerte dager med delvis fravær',\n        'fravær.form.validation.er_helg': 'Lørdag og søndag er ikke gyldig.',\n    },\n    nn: {\n        'fravær.form.validation.required': 'Feltet er påkrevd',\n        'fravær.form.validation.dateOutsideRange': 'Første gyldige dato er {fom}, og siste gyldige dato er {tom}',\n        'fravær.form.validation.fromDateAfterToDate': 'Frå-datoen må vere lik eller før til-datoen',\n        'fravær.form.validation.toDateBeforeFromDate': 'Til-datoen må vere lik eller etter frå-datoen',\n        'fravær.form.validation.timer_mer_enn_arbeidstimer':\n            'Talet på timar med fråvær kan ikkje vere meir enn talet på timar du skulle ha jobba denne dagen',\n        'fieldvalidation.dager_med_fravær_overlapper_perioder':\n            'En eller flere perioder overlapper med registrerte dager med delvis fravær',\n        'fravær.form.validation.er_helg': 'Laurdag og søndag er ikkje gyldig.',\n    },\n};\n\nexport default fraværMessages;\n","const utenlandsoppholdMessages = {\n    nb: {\n        'utenlandsopphold.list.add': '+ Legg til opphold',\n        'utenlandsopphold.form.tittel': 'Utenlandsopphold',\n        'utenlandsopphold.form.tidsperiode.spm': 'Velg tidsperiode for oppholdet',\n        'utenlandsopphold.form.tidsperiode.fraDato': 'Fra og med',\n        'utenlandsopphold.form.tidsperiode.tilDato': 'Til og med',\n        'utenlandsopphold.form.land.spm': 'Velg land',\n        'utenlandsopphold.form.erBarnetInnlagt.spm': 'Er, eller skal, barnet være innlagt i helseinstitusjon i {land}?',\n        'utenlandsopphold.form.perioderBarnetErInnlag.formTitle': 'Periode barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.addLabel': 'Legg til periode barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.modalTitle': 'Periode(r) barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.listTitle': 'Periode(r) barnet er innlagt',\n        'utenlandsopphold.form.årsak.spm': 'Hvordan dekkes utgiftene til innleggelsen?',\n        'utenlandsopphold.form.årsak.BARNET_INNLAGT_I_HELSEINSTITUSJON_FOR_NORSK_OFFENTLIG_REGNING':\n            'For norsk offentlig regning',\n        'utenlandsopphold.form.årsak.BARNET_INNLAGT_I_HELSEINSTITUSJON_DEKKET_ETTER_AVTALE_MED_ET_ANNET_LAND_OM_TRYGD':\n            'Etter trygdeavtale med et annet land',\n        'utenlandsopphold.form.årsak.ANNET': 'Jeg dekker utgiftene selv',\n        'utenlandsopphold.oppsummering.årsak.ANNET': 'Jeg dekker utgiftene selv',\n        'utenlandsopphold.form.ok': 'Legg til',\n        'utenlandsopphold.form.avbryt': 'Avbryt',\n    },\n    nn: {\n        'utenlandsopphold.list.add': 'Legg til opphald',\n        'utenlandsopphold.form.tittel': 'Utanlandsopphald',\n        'utenlandsopphold.form.tidsperiode.spm': 'Tidsperiode',\n        'utenlandsopphold.form.tidsperiode.fraDato': 'Frå og med',\n        'utenlandsopphold.form.tidsperiode.tilDato': 'Til og med',\n        'utenlandsopphold.form.land.spm': 'Vel land',\n        'utenlandsopphold.form.erBarnetInnlagt.spm': 'Er, eller skal, barnet bli lagt inn i helseinstitusjon i {land}?',\n        'utenlandsopphold.form.perioderBarnetErInnlag.formTitle': 'Perioden barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.addLabel': 'Legg til perioden barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.modalTitle': 'Perioden/periodane barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.listTitle': 'Perioden/periodane barnet er innlagt',\n        'utenlandsopphold.form.årsak.spm': 'Korleis blir utgiftene til innlegginga dekte?',\n        'utenlandsopphold.form.årsak.BARNET_INNLAGT_I_HELSEINSTITUSJON_FOR_NORSK_OFFENTLIG_REGNING':\n            'For norsk offentleg rekning',\n        'utenlandsopphold.form.årsak.BARNET_INNLAGT_I_HELSEINSTITUSJON_DEKKET_ETTER_AVTALE_MED_ET_ANNET_LAND_OM_TRYGD':\n            'Etter trygdeavtale med eit anna land',\n        'utenlandsopphold.form.årsak.ANNET': 'Eg dekkjer utgiftene sjølv',\n        'utenlandsopphold.oppsummering.årsak.ANNET': 'Eg dekkjer utgiftene sjølv',\n        'utenlandsopphold.form.ok': 'Legg til',\n        'utenlandsopphold.form.avbryt': 'Avbryt',\n    },\n};\n\nexport default utenlandsoppholdMessages;\n","const fosterbarnMessages = {\n    nb: {\n        'fosterbarn.form.etternavn_label': 'Etternavn',\n        'fosterbarn.form.fornavn_label': 'Fornavn',\n        'fosterbarn.form.fødselsnummer_label': 'Fødselsnummer',\n        'fosterbarn.list.legg_til_knapp': 'Legg til fosterbarn',\n        'fosterbarn.list.tittel': 'Registrerte fosterbarn',\n        'fosterbarn.modal.tittel': 'Fosterbarn',\n    },\n    nn: {\n        'fosterbarn.form.etternavn_label': 'Etternavn',\n        'fosterbarn.form.fornavn_label': 'Fornavn',\n        'fosterbarn.form.fødselsnummer_label': 'Fødselsnummer',\n        'fosterbarn.list.legg_til_knapp': 'Legg til fosterbarn',\n        'fosterbarn.list.tittel': 'Registrerte fosterbarn',\n        'fosterbarn.modal.tittel': 'Fosterbarn',\n    },\n};\n\nexport default fosterbarnMessages;\n","const virksomhetMessages = {\n    nb: {\n        'sifForms.virksomhet.næringstype_fisker': 'Fisker',\n        'sifForms.virksomhet.næringstype_jordbruker': 'Jordbruker',\n        'sifForms.virksomhet.næringstype_dagmamma': 'Dagmamma eller familiebarnehage i eget hjem',\n        'sifForms.virksomhet.næringstype_annet': 'Annet',\n        'sifForms.virksomhet.form_title': 'Opplysninger om virksomheten din',\n        'sifForms.virksomhet.hvilken_type_virksomhet': 'Hvilken type virksomhet har du?',\n        'sifForms.virksomhet.hva_heter_virksomheten': 'Hva heter virksomheten?',\n        'sifForms.virksomhet.fisker_blad_b': 'Er du fisker på blad B?',\n        'sifForms.virksomhet.veileder_fisker': `Hvis du ikke har organisasjonsnummer, svarer du nei på spørsmålet \"Er {navnPåVirksomheten} registrert i Norge?\" I nedtrekkslisten velger du at virksomheten er registrert i Norge.`,\n        'sifForms.virksomhet.registert_i_norge': `Er {navnPåVirksomheten} registert i Norge?`,\n        'sifForms.virksomhet.registert_i_hvilket_land': `I hvilket land er {navnPåVirksomheten} din registrert i?`,\n        'sifForms.virksomhet.organisasjonsnummer': 'Hva er organisasjonsnummeret?',\n        'sifForms.virksomhet.startdato': `Når startet du {navnPåVirksomheten}?`,\n        'sifForms.virksomhet.kalender_fom': 'Startdato',\n        'sifForms.virksomhet.kalender_tom': 'Eventuell sluttdato',\n        'sifForms.virksomhet.kalender_pågående': 'Er pågående',\n        'sifForms.virksomhet.næringsinntekt':\n            'Hva har du hatt i næringsresultat før skatt de siste 12 månedene? Hvis virksomheten har vart i kortere tid, kan du bruke denne perioden og regne om til årsinntekt. Oppgi beløpet i hele kroner.',\n        'sifForms.virksomhet.næringsinntekt_info':\n            'Næringsresultatet er inntekter du har i næringen din, minus utgifter og avskrivninger.',\n        'sifForms.virksomhet.næringsinntekt_info_title': 'Hva er næringsresultatet?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv':\n            'Har du begynt i arbeidslivet i løpet av de 3 siste ferdigliknede årene?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_info_title': 'Hva betyr dette?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_info':\n            'Du skal svare ja på spørsmålet hvis du før oppstart av næringsvirksomheten din hadde lav eller ingen inntekt.',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_dato': 'Oppgi dato for når du begynte i arbeidslivet',\n        'sifForms.virksomhet.varig_endring_spm':\n            'Har du hatt en varig endring i arbeidsforholdet ditt, virksomheten eller arbeidssituasjonen din de siste fire årene?',\n        'sifForms.virksomhet.varig_endring_dato': 'Oppgi dato for endringen',\n        'sifForms.virksomhet.varig_endring_inntekt':\n            'Oppgi næringsinntekten din etter endringen. Oppgi årsinntekten i hele kroner.',\n        'sifForms.virksomhet.varig_endring_tekst':\n            'Her kan du skrive kort hva som har endret seg i arbeidsforholdet ditt, virksomheten eller arbeidssituasjonen din',\n        'sifForms.virksomhet.regnskapsfører_spm': 'Har du regnskapsfører?',\n        'sifForms.virksomhet.regnskapsfører_navn': 'Oppgi navnet til regnskapsfører',\n        'sifForms.virksomhet.regnskapsfører_telefon': 'Oppgi telefonnummeret til regnskapsfører',\n        'sifForms.virksomhet.revisor_spm': 'Har du revisor?',\n        'sifForms.virksomhet.revisor_navn': 'Oppgi navnet til revisor',\n        'sifForms.virksomhet.revisor_telefon': 'Oppgi telefonnummeret til revisor',\n        'sifForms.virksomhet.revisor_fullmakt': 'Gir du NAV fullmakt til å innhente opplysninger direkte fra revisor?',\n        'sifForms.virksomhet.veileder_innhenter_info.1':\n            'Vi henter inn opplysninger om virksomheten og inntekten din fra offentlige registre.',\n        'sifForms.virksomhet.veileder_innhenter_info.2': 'Vi tar kontakt med deg hvis vi trenger flere opplysninger.',\n    },\n    nn: {\n        'sifForms.virksomhet.næringstype_fisker': 'Fisker',\n        'sifForms.virksomhet.næringstype_jordbruker': 'Jordbrukar',\n        'sifForms.virksomhet.næringstype_dagmamma': 'Dagmamma eller familiebarnehage i eigen heim',\n        'sifForms.virksomhet.næringstype_annet': 'Anna',\n        'sifForms.virksomhet.form_title': 'Opplysningar om verksemda di',\n        'sifForms.virksomhet.hvilken_type_virksomhet': 'Kva type verksemd har du?',\n        'sifForms.virksomhet.hva_heter_virksomheten': 'Kva heiter verksemda?',\n        'sifForms.virksomhet.fisker_blad_b': 'Er du fiskar på blad B?',\n        'sifForms.virksomhet.veileder_fisker': `Dersom du ikkje har organisasjonsnummer, svarer du nei på spørsmålet \"Er {navnPåVirksomheten} registrert i Noreg?\". I nedtrekkslista vel du at verksemda er registrert i Noreg.`,\n        'sifForms.virksomhet.registert_i_norge': `Er {navnPåVirksomheten} registert i Noreg?`,\n        'sifForms.virksomhet.registert_i_hvilket_land': `I kva land er {navnPåVirksomheten} registrert?`,\n        'sifForms.virksomhet.organisasjonsnummer': 'Kva er organisasjonsnummeret?',\n        'sifForms.virksomhet.startdato': `Når starta du {navnPåVirksomheten}?`,\n        'sifForms.virksomhet.kalender_fom': 'Startdato',\n        'sifForms.virksomhet.kalender_tom': 'Eventuell sluttdato',\n        'sifForms.virksomhet.kalender_pågående': 'Er i gang',\n        'sifForms.virksomhet.næringsinntekt':\n            'Kva har du hatt i næringsresultat før skatt dei siste 12 månadene? Dersom verksemda har vart i kortare tid, kan du bruke denne perioden og rekne om til årsinntekt. Gi opp beløpet i heile kroner.',\n        'sifForms.virksomhet.næringsinntekt_info':\n            'Næringsresultatet er inntekter du har i næringa di, minus utgifter og avskrivingar.',\n        'sifForms.virksomhet.næringsinntekt_info_title': 'Kva er næringsresultatet?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv':\n            'Har du begynt i arbeidslivet i løpet av dei 3 siste ferdiglikna åra?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_info_title': 'Kva betyr dette?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_info':\n            'Du skal svare ja på spørsmålet dersom du før oppstart av næringsverksemda di hadde låg eller inga inntekt.',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_dato': 'Gi opp datoen for når du begynte i arbeidslivet',\n        'sifForms.virksomhet.varig_endring_spm':\n            'Har du hatt ei varig endring i arbeidsforholdet ditt, verksemda di eller arbeidssituasjonen din dei siste fire åra?',\n        'sifForms.virksomhet.varig_endring_dato': 'Gi opp datoen for endringa',\n        'sifForms.virksomhet.varig_endring_inntekt':\n            'Gi opp næringsinntekta di etter endringa. Gi opp årsinntekta i heile kroner.',\n        'sifForms.virksomhet.varig_endring_tekst':\n            'Her kan du skrive kort kva som har endra seg i arbeidsforholdet ditt, verksemda di eller arbeidssituasjonen din.',\n        'sifForms.virksomhet.regnskapsfører_spm': 'Har du rekneskapsførar?',\n        'sifForms.virksomhet.regnskapsfører_navn': 'Gi opp namnet til rekneskapsføraren',\n        'sifForms.virksomhet.regnskapsfører_telefon': 'Gi opp telefonnummeret til rekneskapsføraren',\n        'sifForms.virksomhet.revisor_spm': 'Har du revisor?',\n        'sifForms.virksomhet.revisor_navn': 'Gi opp namnet til revisoren',\n        'sifForms.virksomhet.revisor_telefon': 'Gi opp telefonnummeret til revisoren',\n        'sifForms.virksomhet.revisor_fullmakt':\n            'Gir du NAV fullmakt til å hente inn opplysningar direkte frå revisoren?',\n        'sifForms.virksomhet.veileder_innhenter_info.1':\n            'Vi hentar inn opplysningar om verksemda og inntekta di frå offentlege register.',\n        'sifForms.virksomhet.veileder_innhenter_info.2': 'Vi tek kontakt med deg dersom vi treng fleire opplysningar',\n    },\n};\nexport default virksomhetMessages;\n","const tidsperiodeMessages = {\n    nb: {\n        'tidsperiode.form.title': 'Tidsperiode',\n        'tidsperiode.form.fromDate': 'Fra og med',\n        'tidsperiode.form.toDate': 'Til og med',\n        'tidsperiode.form.okButton': 'Ok',\n        'tidsperiode.form.cancelButton': 'Avbryt',\n        'tidsperiode.form.validation.required': 'Feltet er påkrevd',\n        'tidsperiode.form.validation.dateOutsideRange': 'Første gyldige dato er {fom}, og siste gyldige dato er {tom}',\n        'tidsperiode.form.validation.fromDateAfterToDate': 'Fra-dato må være lik eller før til-dato',\n        'tidsperiode.form.validation.toDateBeforeFromDate': 'Til-dato må være lik eller etter fra-dato',\n    },\n    nn: {\n        'tidsperiode.form.title': 'Tidsperiode',\n        'tidsperiode.form.fromDate': 'Frå og med',\n        'tidsperiode.form.toDate': 'Til og med',\n        'tidsperiode.form.okButton': 'Ok',\n        'tidsperiode.form.cancelButton': 'Avbryt',\n        'tidsperiode.form.validation.required': 'Feltet er påkrevd',\n        'tidsperiode.form.validation.dateOutsideRange': 'Første gyldige dato er {fom}, og siste gyldige dato er {tom}',\n        'tidsperiode.form.validation.fromDateAfterToDate': 'Frå-datoen må vere lik eller før til-datoen',\n        'tidsperiode.form.validation.toDateBeforeFromDate': 'Til-datoen må vere lik eller etter frå-dato',\n    },\n};\n\nexport default tidsperiodeMessages;\n","const annetBarnMessages = {\n    nb: {\n        'annetBarn.form.title': 'Legg til barn',\n        'annetBarn.form.fnr': 'Barnets fødselsnummer/D-nummer',\n        'annetBarn.form.fødselsdato': 'Barnets fødselsdato',\n        'annetBarn.form.navn': 'Barnets navn',\n        'annetBarn.form.okButton': 'Ok',\n        'annetBarn.form.cancelButton': 'Avbryt',\n        'annetBarn.form.validation.required': 'Feltet er påkrevd',\n        'annetBarn.list.født': 'Født',\n    },\n    nn: {\n        'annetBarn.form.title': 'Legg til barn',\n        'annetBarn.form.fnr': 'Barnets fødselsnummer/D-nummer',\n        'annetBarn.form.fødselsdato': 'Barnets fødselsdato',\n        'annetBarn.form.navn': 'Barnets navn',\n        'annetBarn.form.okButton': 'Ok',\n        'annetBarn.form.cancelButton': 'Avbryt',\n        'annetBarn.form.validation.required': 'Feltet er påkrevd',\n        'annetBarn.list.født': 'Født',\n    },\n};\n\nexport default annetBarnMessages;\n","import bostedUtlandMessages from '../../../forms/bosted-utland/bostedUtlandMessages';\nimport ferieuttakMessages from '../../../forms/ferieuttak/ferieuttakMessages';\nimport fraværMessages from '../../../forms/fravær/fraværMessages';\nimport utenlandsoppholdMessages from '../../../forms/utenlandsopphold/utenlandsoppholdMessages';\nimport fosterbarnMessages from '../../../forms/fosterbarn/fosterbarnMessages';\nimport virksomhetMessages from '../../../forms/virksomhet/virksomhetMessages';\nimport tidsperiodeMessages from '../../../forms/tidsperiode/tidsperiodeMessages';\nimport annetBarnMessages from '../../../forms/annet-barn/annetBarnMessages';\n\nconst commonNb = require('@navikt/sif-common-core/lib/i18n/common.nb.json');\nconst commonNn = require('@navikt/sif-common-core/lib/i18n/common.nn.json');\nconst validationNb = require('@navikt/sif-common-core/lib/i18n/validationErrors.nb.json');\nconst validationNn = require('@navikt/sif-common-core/lib/i18n/validationErrors.nn.json');\n\nconst bokmålstekster = {\n    ...commonNb,\n    ...validationNb,\n    ...bostedUtlandMessages.nb,\n    ...fraværMessages.nb,\n    ...ferieuttakMessages.nb,\n    ...fosterbarnMessages.nb,\n    ...utenlandsoppholdMessages.nb,\n    ...tidsperiodeMessages.nb,\n    ...virksomhetMessages.nb,\n    ...annetBarnMessages.nb,\n};\n\nconst nynorsktekster = {\n    ...commonNn,\n    ...validationNn,\n    ...bostedUtlandMessages.nn,\n    ...fraværMessages.nn,\n    ...ferieuttakMessages.nn,\n    ...fosterbarnMessages.nn,\n    ...utenlandsoppholdMessages.nn,\n    ...tidsperiodeMessages.nn,\n    ...virksomhetMessages.nn,\n    ...annetBarnMessages.nn,\n};\n\nexport const appMessages = {\n    nb: bokmålstekster,\n    nn: nynorsktekster,\n};\n","import * as React from 'react';\nimport { IntlProvider } from 'react-intl';\nimport '@formatjs/intl-pluralrules//locale-data/en';\nimport '@formatjs/intl-pluralrules//locale-data/nb';\nimport '@formatjs/intl-pluralrules//locale-data/nn';\nimport '@formatjs/intl-pluralrules/polyfill';\nimport { Locale } from '@navikt/sif-common-core/lib/types/Locale';\nimport { appMessages } from './messages';\n\nexport interface IntlProviderProps {\n    locale: Locale;\n    onError?: (error: any) => void;\n}\n\nconst AppIntlProvider: React.FunctionComponent<IntlProviderProps> = ({ locale, onError, children }) => {\n    const messages = locale === 'nb' ? appMessages.nb : appMessages.nn;\n    return (\n        <IntlProvider locale={locale} messages={messages} onError={onError}>\n            {children}\n        </IntlProvider>\n    );\n};\n\nexport default AppIntlProvider;\n","import React from 'react';\n\nfunction NAVLogo(props) {\n    return (\n        <svg className=\"prefix__navLogo\" width={90} viewBox=\"0 0 269 169\" {...props}>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <path\n                    fill=\"#C30000\"\n                    d=\"M125.31 168.942c-46.642 0-84.46-37.817-84.46-84.465C40.85 37.824 78.667 0 125.31 0c46.657 0 84.48 37.824 84.48 84.477 0 46.648-37.823 84.465-84.48 84.465zM0 121.359l17.265-42.73h16.589l-17.243 42.73zm213.044 0l17.044-42.73h9.044l-17.043 42.73zM246.564 121.359l17.04-42.73h4.803l-17.043 42.731z\"\n                />\n                <path\n                    fill=\"#FEFEFE\"\n                    d=\"M197.36 78.63h-15.016s-1.035 0-1.4.914l-8.31 25.439-8.304-25.44c-.366-.913-1.407-.913-1.407-.913h-28.872c-.625 0-1.149.522-1.149 1.143v8.639c0-6.853-7.292-9.782-11.562-9.782-9.562 0-15.963 6.298-17.956 15.873-.108-6.352-.636-8.628-2.347-10.96-.786-1.141-1.922-2.101-3.159-2.895-2.547-1.492-4.834-2.018-9.749-2.018h-5.77s-1.044 0-1.412.914l-5.25 13.013V79.773c0-.621-.52-1.143-1.145-1.143H61.198s-1.03 0-1.406.914l-5.459 13.53s-.545 1.354.701 1.354h5.133v25.784c0 .64.504 1.147 1.147 1.147h13.238c.624 0 1.144-.507 1.144-1.147V94.428h5.16c2.961 0 3.588.08 4.74.618.694.262 1.32.792 1.66 1.403.698 1.314.873 2.892.873 7.545v16.218c0 .64.514 1.147 1.15 1.147h12.687s1.434 0 2.001-1.416l2.812-6.95c3.74 5.237 9.893 8.366 17.541 8.366h1.671s1.443 0 2.014-1.416l4.897-12.128v12.397c0 .64.524 1.147 1.15 1.147h12.951s1.43 0 2.003-1.416c0 0 5.18-12.861 5.2-12.958h.008c.2-1.07-1.153-1.07-1.153-1.07h-4.623V83.847l14.545 36.096c.568 1.416 2 1.416 2 1.416h15.301s1.44 0 2.008-1.416l16.125-39.93c.558-1.383-1.057-1.383-1.057-1.383zm-64.458 27.285h-8.7c-3.463 0-6.28-2.804-6.28-6.271 0-3.461 2.817-6.283 6.28-6.283h2.433c3.454 0 6.267 2.822 6.267 6.283v6.27z\"\n                />\n            </g>\n        </svg>\n    );\n}\n\nexport default NAVLogo;\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport dateRangeValidation from '@navikt/sif-common-core/lib/validation/dateRangeValidation';\nimport { validateRequiredSelect } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { getTypedFormComponents, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { mapFomTomToDateRange } from '../utils';\nimport bostedUtlandUtils from './bostedUtlandUtils';\nimport { BostedUtland, BostedUtlandFormValues } from './types';\n\nexport interface BostedUtlandFormLabels {\n    tittel: string;\n}\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    bosted?: BostedUtland;\n    alleBosteder?: BostedUtland[];\n    onSubmit: (values: BostedUtland) => void;\n    onCancel: () => void;\n}\n\nenum BostedUtlandFormFields {\n    fom = 'fom',\n    tom = 'tom',\n    landkode = 'landkode',\n}\n\ninterface DateLimits {\n    minDate: Date;\n    maxDate: Date;\n}\nconst Form = getTypedFormComponents<BostedUtlandFormFields, BostedUtlandFormValues>();\n\nconst BostedUtlandForm = ({ maxDate, minDate, bosted, alleBosteder = [], onSubmit, onCancel }: Props) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: BostedUtlandFormValues) => {\n        const bostedToSubmit = bostedUtlandUtils.mapFormValuesToBostedUtland(formValues, bosted?.id);\n        if (bostedUtlandUtils.isValidBostedUtland(bostedToSubmit)) {\n            onSubmit(bostedToSubmit);\n        } else {\n            throw new Error('BostedUtlandForm: Formvalues is not a valid BostedUtland on submit.');\n        }\n    };\n\n    return (\n        <Form.FormikWrapper\n            initialValues={bostedUtlandUtils.mapBostedUtlandToFormValues(bosted || {})}\n            onSubmit={onFormikSubmit}\n            renderForm={(formik) => {\n                const { values } = formik;\n                const fomDateLimits: DateLimits = {\n                    minDate,\n                    maxDate: ISOStringToDate(values.tom) || maxDate,\n                };\n                const tomDateLimits: DateLimits = {\n                    minDate: ISOStringToDate(values.fom) || minDate,\n                    maxDate: maxDate,\n                };\n\n                const andreBosteder =\n                    bosted === undefined\n                        ? alleBosteder.map(mapFomTomToDateRange)\n                        : alleBosteder.filter((b) => b.id !== bosted.id).map(mapFomTomToDateRange);\n\n                return (\n                    <Form.Form\n                        onCancel={onCancel}\n                        fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                        <Systemtittel tag=\"h1\">\n                            <FormattedMessage id=\"bostedUtland.form.tittel\" />\n                        </Systemtittel>\n\n                        <FormBlock>\n                            <Form.DateRangePicker\n                                legend={intlHelper(intl, 'bostedUtland.form.tidsperiode.spm')}\n                                fullscreenOverlay={true}\n                                minDate={minDate}\n                                maxDate={maxDate}\n                                allowRangesToStartAndStopOnSameDate={false}\n                                disabledDateRanges={andreBosteder}\n                                fromInputProps={{\n                                    name: BostedUtlandFormFields.fom,\n                                    label: intlHelper(intl, 'bostedUtland.form.tidsperiode.fraDato'),\n                                    validate: (dateString) =>\n                                        dateRangeValidation.validateFromDate(\n                                            ISOStringToDate(dateString),\n                                            fomDateLimits.minDate,\n                                            fomDateLimits.maxDate,\n                                            ISOStringToDate(values.tom)\n                                        ),\n                                }}\n                                toInputProps={{\n                                    name: BostedUtlandFormFields.tom,\n                                    label: intlHelper(intl, 'bostedUtland.form.tidsperiode.tilDato'),\n                                    validate: (dateString) =>\n                                        dateRangeValidation.validateToDate(\n                                            ISOStringToDate(dateString),\n                                            tomDateLimits.minDate,\n                                            tomDateLimits.maxDate,\n                                            ISOStringToDate(values.fom)\n                                        ),\n                                }}\n                            />\n                        </FormBlock>\n                        <FormBlock>\n                            <Form.CountrySelect\n                                name={BostedUtlandFormFields.landkode}\n                                label={intlHelper(intl, 'bostedUtland.form.land.spm')}\n                                validate={validateRequiredSelect}\n                            />\n                        </FormBlock>\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default BostedUtlandForm;\n","import React from 'react';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { Ingress, Undertittel } from 'nav-frontend-typografi';\n\ninterface Props {\n    title: string;\n    children: React.ReactNode;\n}\n\nconst PageIntro = ({ title, children }: Props) => (\n    <>\n        <Box padBottom=\"xl\" margin=\"m\">\n            <Box padBottom={children ? 'm' : 'none'}>\n                <Undertittel>{title}</Undertittel>\n            </Box>\n            {children && <Ingress tag=\"div\">{children}</Ingress>}\n        </Box>\n    </>\n);\n\nexport default PageIntro;\n","import { DateTidsperiode } from '../tidsperiode';\nimport { DateRange } from '@navikt/sif-common-core/lib/utils/dateUtils';\n\nexport const mapFomTomToDateRange = ({ fom, tom }: DateTidsperiode): DateRange => ({\n    from: fom,\n    to: tom,\n});\n","import { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { guid } from 'nav-frontend-js-utils';\nimport { BostedUtland, BostedUtlandFormValues } from './types';\n\nconst isValidBostedUtland = (bosted: Partial<BostedUtland>): bosted is BostedUtland => {\n    const { fom, landkode, tom } = bosted;\n    return fom !== undefined && landkode !== undefined && tom !== undefined;\n};\n\nconst mapFormValuesToBostedUtland = (\n    formValues: BostedUtlandFormValues,\n    id: string | undefined\n): Partial<BostedUtland> => {\n    return {\n        id: id || guid(),\n        fom: ISOStringToDate(formValues.fom),\n        tom: ISOStringToDate(formValues.tom),\n        landkode: formValues.landkode,\n    };\n};\n\nconst mapBostedUtlandToFormValues = ({ fom, tom, landkode }: Partial<BostedUtland>): BostedUtlandFormValues => {\n    return {\n        fom: dateToISOString(fom),\n        tom: dateToISOString(tom),\n        landkode,\n    };\n};\n\nconst bostedUtlandUtils = {\n    isValidBostedUtland,\n    mapBostedUtlandToFormValues,\n    mapFormValuesToBostedUtland,\n};\n\nexport default bostedUtlandUtils;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { getCountryName } from '@navikt/sif-common-formik';\nimport { BostedUtland } from './types';\nimport './bostedUtlandList.less';\n\ninterface Props {\n    bosteder: BostedUtland[];\n    onEdit?: (opphold: BostedUtland) => void;\n    onDelete?: (opphold: BostedUtland) => void;\n}\n\nconst bem = bemUtils('bostedUtlandList');\n\nconst BostedUtlandList = ({ bosteder, onDelete, onEdit }: Props) => {\n    const intl = useIntl();\n    const renderBostedUtlandLabel = (opphold: BostedUtland): React.ReactNode => {\n        const navn = getCountryName(opphold.landkode, intl.locale);\n        return (\n            <div className={bem.element('label')}>\n                <span className={bem.element('land')}>\n                    {onEdit && <ActionLink onClick={() => onEdit(opphold)}>{navn}</ActionLink>}\n                    {!onEdit && <span>{navn}</span>}\n                </span>\n                <span className={bem.element('dato')}>\n                    {prettifyDateExtended(opphold.fom)} - {prettifyDateExtended(opphold.tom)}\n                </span>\n            </div>\n        );\n    };\n\n    return (\n        <ItemList<BostedUtland>\n            getItemId={(opphold) => opphold.id}\n            getItemTitle={(opphold) => getCountryName(opphold.landkode, intl.locale)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderBostedUtlandLabel}\n            items={bosteder}\n        />\n    );\n};\n\nexport default BostedUtlandList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { FormikModalFormAndList, FormikValidateFunction, ModalFormAndListLabels } from '@navikt/sif-common-formik';\nimport BostedUtlandForm from './BostedUtlandForm';\nimport BostedUtlandListe from './BostedUtlandList';\nimport { BostedUtland } from './types';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    validate?: FormikValidateFunction;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction BostedUtlandListAndDialog<FieldNames>({ name, minDate, maxDate, validate, labels }: Props<FieldNames>) {\n    return (\n        <FormikModalFormAndList<FieldNames, BostedUtland>\n            name={name}\n            labels={labels}\n            validate={validate}\n            dialogWidth=\"narrow\"\n            sortFunc={sortItemsByFom}\n            formRenderer={({ onSubmit, onCancel, item, allItems }) => (\n                <BostedUtlandForm\n                    bosted={item}\n                    alleBosteder={allItems}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    onSubmit={onSubmit}\n                    onCancel={onCancel}\n                />\n            )}\n            listRenderer={({ items, onEdit, onDelete }) => (\n                <BostedUtlandListe bosteder={items} onEdit={onEdit} onDelete={onDelete} />\n            )}\n        />\n    );\n}\n\nexport default BostedUtlandListAndDialog;\n","import React from 'react';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport Panel from 'nav-frontend-paneler';\n\ninterface Props {\n    values?: {};\n}\n\nfunction SubmitPreview({ values }: Props) {\n    return (\n        <Box margin=\"xl\">\n            <div style={{ borderTop: '1px dashed #59514B', paddingTop: '1rem', margin: '0 -1rem' }}>\n                <Box margin=\"m\">\n                    {values && (\n                        <Panel style={{ padding: '1rem' }}>\n                            <pre style={{ margin: 0, fontSize: '.8rem' }}>{JSON.stringify(values, null, 2)}</pre>\n                        </Panel>\n                    )}\n                    {values === undefined && <Panel style={{ padding: '1rem' }}>Ingen data</Panel>}\n                </Box>\n            </div>\n        </Box>\n    );\n}\n\nexport default SubmitPreview;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { date1YearAgo, date1YearFromNow } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { validateRequiredList } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport BostedUtlandForm from '../../../forms/bosted-utland/BostedUtlandForm';\nimport BostedUtlandListAndDialog from '../../../forms/bosted-utland/BostedUtlandListAndDialog';\nimport { BostedUtland } from '../../../forms/bosted-utland/types';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport bostedUtlandMessages from '../../../forms/bosted-utland/bostedUtlandMessages';\n\nenum FormField {\n    'bosted' = 'bosted',\n}\n\ninterface FormValues {\n    [FormField.bosted]: BostedUtland[];\n}\nconst initialValues: FormValues = { bosted: [] };\n\nconst FormikExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<BostedUtland> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                                <BostedUtlandListAndDialog<FormField>\n                                    name={FormField.bosted}\n                                    minDate={date1YearAgo}\n                                    maxDate={date1YearFromNow}\n                                    validate={validateRequiredList}\n                                    labels={{\n                                        addLabel: 'Legg til bosted',\n                                        listTitle: 'Registrerte bosteder',\n                                        modalTitle: 'Bosted',\n                                        emptyListText: 'Ingen bosteder er lagt til',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <DialogFormWrapper>\n                    <Panel border={true}>\n                        <BostedUtlandForm\n                            minDate={date1YearAgo}\n                            maxDate={date1YearFromNow}\n                            onSubmit={setSingleFormValues}\n                            onCancel={() => console.log('cancel me')}\n                        />\n                    </Panel>\n                    <SubmitPreview values={singleFormValues} />\n                </DialogFormWrapper>\n            </Box>\n\n            <MessagesPreview messages={bostedUtlandMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default FormikExample;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { DateRange } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport dateRangeValidation from '@navikt/sif-common-core/lib/validation/dateRangeValidation';\nimport { getTypedFormComponents, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { mapFomTomToDateRange } from '../utils';\nimport ferieuttakUtils from './ferieuttakUtils';\nimport { Ferieuttak, FerieuttakFormValues } from './types';\n\nexport interface FerieuttakFormLabels {\n    title: string;\n    fromDate: string;\n    toDate: string;\n    intervalTitle: string;\n    okButton: string;\n    cancelButton: string;\n}\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    ferieuttak?: Partial<Ferieuttak>;\n    alleFerieuttak?: Ferieuttak[];\n    labels?: Partial<FerieuttakFormLabels>;\n    onSubmit: (values: Ferieuttak) => void;\n    onCancel: () => void;\n}\n\nenum FerieuttakFormFields {\n    tom = 'tom',\n    fom = 'fom',\n}\n\nconst Form = getTypedFormComponents<FerieuttakFormFields, FerieuttakFormValues>();\n\nconst FerieuttakForm = ({ maxDate, minDate, labels, ferieuttak, alleFerieuttak = [], onSubmit, onCancel }: Props) => {\n    const intl = useIntl();\n    const onFormikSubmit = (formValues: FerieuttakFormValues) => {\n        const ferieuttakToSubmit = ferieuttakUtils.mapFormValuesToFerieuttak(formValues, ferieuttak?.id);\n        if (ferieuttakUtils.isValidFerieuttak(ferieuttakToSubmit)) {\n            onSubmit({ ...ferieuttak, ...ferieuttakToSubmit });\n        } else {\n            throw new Error('FerieuttakForm: Formvalues is not a valid Ferieuttak on submit.');\n        }\n    };\n\n    const defaultLabels: FerieuttakFormLabels = {\n        title: intlHelper(intl, 'ferieuttak.list.title'),\n        fromDate: intlHelper(intl, 'ferieuttak.list.fromDate'),\n        toDate: intlHelper(intl, 'ferieuttak.list.toDate'),\n        intervalTitle: intlHelper(intl, 'ferieuttak.list.intervalTitle'),\n        okButton: intlHelper(intl, 'ferieuttak.list.okButton'),\n        cancelButton: intlHelper(intl, 'ferieuttak.list.cancelButton'),\n    };\n\n    const formLabels: FerieuttakFormLabels = { ...defaultLabels, ...labels };\n\n    const andreFerieuttak: DateRange[] | undefined =\n        ferieuttak === undefined\n            ? alleFerieuttak.map(mapFomTomToDateRange)\n            : alleFerieuttak.filter((f) => f.id !== ferieuttak.id).map(mapFomTomToDateRange);\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={ferieuttakUtils.mapFerieuttakToFormValues(ferieuttak || {})}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => (\n                    <Form.Form\n                        onCancel={onCancel}\n                        fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                        <Systemtittel tag=\"h1\">{formLabels.title}</Systemtittel>\n                        <FormBlock>\n                            <Form.DateRangePicker\n                                legend={formLabels.intervalTitle}\n                                fullscreenOverlay={true}\n                                minDate={minDate}\n                                maxDate={maxDate}\n                                allowRangesToStartAndStopOnSameDate={true}\n                                disabledDateRanges={andreFerieuttak}\n                                fromInputProps={{\n                                    label: formLabels.fromDate,\n                                    name: FerieuttakFormFields.fom,\n                                    validate: (dateString) =>\n                                        dateRangeValidation.validateFromDate(\n                                            ISOStringToDate(dateString),\n                                            minDate,\n                                            maxDate,\n                                            ISOStringToDate(formik.values.tom)\n                                        ),\n                                    onChange: () => {\n                                        setTimeout(() => {\n                                            formik.validateField(FerieuttakFormFields.tom);\n                                        });\n                                    },\n                                }}\n                                toInputProps={{\n                                    label: formLabels.toDate,\n                                    name: FerieuttakFormFields.tom,\n                                    validate: (dateString) =>\n                                        dateRangeValidation.validateToDate(\n                                            ISOStringToDate(dateString),\n                                            minDate,\n                                            maxDate,\n                                            ISOStringToDate(formik.values.fom)\n                                        ),\n                                    onChange: () => {\n                                        setTimeout(() => {\n                                            formik.validateField(FerieuttakFormFields.fom);\n                                        });\n                                    },\n                                }}\n                            />\n                        </FormBlock>\n                    </Form.Form>\n                )}\n            />\n        </>\n    );\n};\n\nexport default FerieuttakForm;\n","import { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Ferieuttak, FerieuttakFormValues } from './types';\n\nexport const isValidFerieuttak = (ferieuttak: Partial<Ferieuttak>): ferieuttak is Ferieuttak => {\n    return ferieuttak.fom !== undefined && ferieuttak.tom !== undefined;\n};\n\nconst mapFormValuesToFerieuttak = (formValues: FerieuttakFormValues, id: string | undefined): Partial<Ferieuttak> => {\n    return {\n        id: id || guid(),\n        fom: ISOStringToDate(formValues.fom),\n        tom: ISOStringToDate(formValues.tom),\n    };\n};\n\nconst mapFerieuttakToFormValues = ({ fom, tom }: Partial<Ferieuttak>): FerieuttakFormValues => {\n    return {\n        fom: dateToISOString(fom),\n        tom: dateToISOString(tom),\n    };\n};\n\nconst ferieuttakUtils = {\n    isValidFerieuttak,\n    mapFerieuttakToFormValues,\n    mapFormValuesToFerieuttak,\n};\n\nexport default ferieuttakUtils;\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { Ferieuttak } from './types';\n\ninterface Props {\n    ferieuttak: Ferieuttak[];\n    onEdit?: (opphold: Ferieuttak) => void;\n    onDelete?: (opphold: Ferieuttak) => void;\n}\n\nconst FerieuttakList = ({ ferieuttak = [], onDelete, onEdit }: Props) => {\n    const getDateTitleString = (uttak: Ferieuttak) =>\n        `${prettifyDateExtended(uttak.fom)} - ${prettifyDateExtended(uttak.tom)}`;\n\n    const renderFerieuttakLabel = (uttak: Ferieuttak): React.ReactNode => {\n        const title = getDateTitleString(uttak);\n        return (\n            <>\n                {onEdit && <ActionLink onClick={() => onEdit(uttak)}>{title}</ActionLink>}\n                {!onEdit && <span>{title}</span>}\n            </>\n        );\n    };\n\n    return (\n        <ItemList<Ferieuttak>\n            getItemId={(uttak) => uttak.id}\n            getItemTitle={(uttak) => getDateTitleString(uttak)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderFerieuttakLabel}\n            items={ferieuttak.filter((uttak) => uttak.id !== undefined)}\n        />\n    );\n};\n\nexport default FerieuttakList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { FormikModalFormAndList, FormikValidateFunction, ModalFormAndListLabels } from '@navikt/sif-common-formik';\nimport FerieuttakForm from './FerieuttakForm';\nimport FerieuttakList from './FerieuttakList';\nimport { Ferieuttak } from './types';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    validate?: FormikValidateFunction;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction FerieuttakListAndDialog<FieldNames>({ name, minDate, maxDate, validate, labels }: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, Ferieuttak>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                sortFunc={sortItemsByFom}\n                formRenderer={({ onSubmit, onCancel, item, allItems }) => (\n                    <FerieuttakForm\n                        ferieuttak={item}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                        alleFerieuttak={allItems}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FerieuttakList ferieuttak={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FerieuttakListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { date1YearAgo, date1YearFromNow } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { validateRequiredList } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport FerieuttakForm from '../../../forms/ferieuttak/FerieuttakForm';\nimport FerieuttakListAndDialog from '../../../forms/ferieuttak/FerieuttakListAndDialog';\nimport { Ferieuttak } from '../../../forms/ferieuttak/types';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport ferieuttakMessages from '../../../forms/ferieuttak/ferieuttakMessages';\n\nenum FormField {\n    'ferie' = 'ferie',\n}\n\ninterface FormValues {\n    [FormField.ferie]: Ferieuttak[];\n}\nconst initialValues: FormValues = { ferie: [] };\n\nconst FormikExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<Ferieuttak> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                                <FerieuttakListAndDialog<FormField>\n                                    name={FormField.ferie}\n                                    minDate={date1YearAgo}\n                                    maxDate={date1YearFromNow}\n                                    validate={validateRequiredList}\n                                    labels={{\n                                        addLabel: 'Legg til ferie',\n                                        listTitle: 'Registrerte ferier',\n                                        modalTitle: 'Ferie',\n                                        emptyListText: 'Ingen ferier er lagt til',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <FerieuttakForm\n                        minDate={date1YearAgo}\n                        maxDate={date1YearFromNow}\n                        ferieuttak={{}}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                    />\n                </Panel>\n                <SubmitPreview values={singleFormValues} />\n            </DialogFormWrapper>\n\n            <MessagesPreview messages={ferieuttakMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default FormikExample;\n","/* eslint-disable @typescript-eslint/camelcase */\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport Tiles from '@navikt/sif-common-core/lib/components/tiles/Tiles';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { validateFødselsnummer, validateRequiredField } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { Fosterbarn, isFosterbarn } from './types';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { guid } from 'nav-frontend-js-utils';\n\ninterface FosterbarnFormText {\n    form_fødselsnummer_label: string;\n    form_fornavn_label: string;\n    form_etternavn_label: string;\n}\n\ninterface Props {\n    fosterbarn?: Partial<Fosterbarn>;\n    onSubmit: (values: Fosterbarn) => void;\n    onCancel: () => void;\n    includeName?: boolean;\n    text?: FosterbarnFormText;\n}\n\nenum FosterbarnFormField {\n    fødselsnummer = 'fødselsnummer',\n    fornavn = 'fornavn',\n    etternavn = 'etternavn',\n}\n\ntype FormValues = Partial<Fosterbarn>;\n\nconst Form = getTypedFormComponents<FosterbarnFormField, FormValues>();\n\nconst FosterbarnForm = ({\n    fosterbarn: initialValues = { fornavn: '', etternavn: '', fødselsnummer: '' },\n    text,\n    includeName,\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n    const onFormikSubmit = (formValues: FormValues) => {\n        if (isFosterbarn(formValues, includeName)) {\n            onSubmit({ ...formValues, id: initialValues.id || guid() });\n        } else {\n            throw new Error('Fosterbarn skjema: Formvalues is not a valid Fosterbarn on submit.');\n        }\n    };\n\n    const defaultText: FosterbarnFormText = {\n        form_etternavn_label: intlHelper(intl, 'fosterbarn.form.etternavn_label'),\n        form_fornavn_label: intlHelper(intl, 'fosterbarn.form.fornavn_label'),\n        form_fødselsnummer_label: intlHelper(intl, 'fosterbarn.form.fødselsnummer_label'),\n    };\n\n    const txt = { ...defaultText, ...text };\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={initialValues}\n                onSubmit={onFormikSubmit}\n                renderForm={() => (\n                    <Form.Form\n                        onCancel={onCancel}\n                        fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                        <Systemtittel tag=\"h1\">Fosterbarn</Systemtittel>\n                        <FormBlock>\n                            <Form.Input\n                                name={FosterbarnFormField.fødselsnummer}\n                                label={txt.form_fødselsnummer_label}\n                                validate={validateFødselsnummer}\n                                inputMode=\"numeric\"\n                                maxLength={11}\n                                style={{ width: '11rem' }}\n                            />\n                        </FormBlock>\n                        {includeName && (\n                            <Tiles columns={2}>\n                                <FormBlock>\n                                    <Form.Input\n                                        name={FosterbarnFormField.fornavn}\n                                        label={txt.form_fornavn_label}\n                                        validate={validateRequiredField}\n                                    />\n                                </FormBlock>\n                                <FormBlock>\n                                    <Form.Input\n                                        name={FosterbarnFormField.etternavn}\n                                        label={txt.form_etternavn_label}\n                                        validate={validateRequiredField}\n                                    />\n                                </FormBlock>\n                            </Tiles>\n                        )}\n                    </Form.Form>\n                )}\n            />\n        </>\n    );\n};\n\nexport default FosterbarnForm;\n","import { hasValue } from '@navikt/sif-common-core/lib/validation/hasValue';\n\nexport interface Fosterbarn {\n    id?: string;\n    fødselsnummer: string;\n    fornavn?: string;\n    etternavn?: string;\n}\n\nexport const isFosterbarn = (fosterbarn: Partial<Fosterbarn>, includeName?: boolean): fosterbarn is Fosterbarn => {\n    const { fornavn, etternavn, fødselsnummer } = fosterbarn;\n    if (includeName) {\n        return hasValue(fornavn) && hasValue(etternavn) && hasValue(fødselsnummer);\n    }\n    return hasValue(fødselsnummer);\n};\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { formatName } from '@navikt/sif-common-core/lib/utils/personUtils';\nimport { Fosterbarn } from './types';\n\ninterface Props {\n    fosterbarn: Fosterbarn[];\n    onEdit?: (opphold: Fosterbarn) => void;\n    onDelete?: (opphold: Fosterbarn) => void;\n}\n\nconst FosterbarnList = ({ fosterbarn = [], onDelete, onEdit }: Props) => {\n    const getBarnTitleString = (barn: Fosterbarn) => {\n        return (\n            <>\n                <span style={{ paddingRight: '1rem' }}>{barn.fødselsnummer}</span>{' '}\n                {barn.fornavn && barn.etternavn && <span>{formatName(barn.fornavn, barn.etternavn)}</span>}\n            </>\n        );\n    };\n    const renderFosterbarnLabel = (barn: Fosterbarn): React.ReactNode => {\n        return (\n            <>\n                {onEdit && <ActionLink onClick={() => onEdit(barn)}>{getBarnTitleString(barn)}</ActionLink>}\n                {!onEdit && <span>{getBarnTitleString(barn)}</span>}\n            </>\n        );\n    };\n\n    return (\n        <ItemList<Fosterbarn>\n            getItemId={(barn) => barn.id}\n            getItemTitle={(barn) =>\n                barn.fornavn && barn.etternavn ? formatName(barn.fornavn, barn.etternavn) : barn.fødselsnummer\n            }\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderFosterbarnLabel}\n            items={fosterbarn.filter((barn) => barn.id !== undefined)}\n        />\n    );\n};\n\nexport default FosterbarnList;\n","import React from 'react';\nimport { FormikModalFormAndList, FormikValidateFunction } from '@navikt/sif-common-formik';\nimport FosterbarnForm from './FosterbarnForm';\nimport FosterbarnList from './FosterbarnList';\nimport { Fosterbarn } from './types';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { useIntl } from 'react-intl';\n\nexport interface FosterbarnListAndDialogText {\n    liste_legg_til_knapp: string;\n    liste_tittel?: string;\n    liste_tom_liste_tekst?: string;\n    modal_tittel: string;\n}\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    validate?: FormikValidateFunction;\n    texts?: FosterbarnListAndDialogText;\n    info?: string;\n    includeName?: boolean;\n}\n\nfunction FosterbarnListAndDialog<FieldNames>({ name, validate, texts, info, includeName }: Props<FieldNames>) {\n    const intl = useIntl();\n\n    const defaultText: FosterbarnListAndDialogText = {\n        liste_legg_til_knapp: intlHelper(intl, 'fosterbarn.list.legg_til_knapp'),\n        liste_tittel: intlHelper(intl, 'fosterbarn.list.tittel'),\n        modal_tittel: intlHelper(intl, 'fosterbarn.modal.tittel'),\n    };\n\n    const txt = { ...defaultText, ...texts };\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, Fosterbarn>\n                name={name}\n                labels={{\n                    addLabel: txt.liste_legg_til_knapp,\n                    modalTitle: txt.modal_tittel,\n                    emptyListText: txt.liste_tom_liste_tekst,\n                    listTitle: txt.liste_tittel,\n                    info,\n                }}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                formRenderer={({ onSubmit, onCancel, item }) => (\n                    <FosterbarnForm\n                        fosterbarn={item}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                        includeName={includeName}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FosterbarnList fosterbarn={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FosterbarnListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { validateRequiredList } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { Fosterbarn } from '../../../forms/fosterbarn';\nimport FosterbarnForm from '../../../forms/fosterbarn/FosterbarnForm';\nimport FosterbarnListAndDialog from '../../../forms/fosterbarn/FosterbarnListAndDialog';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport fosterbarnMessages from '../../../forms/fosterbarn/fosterbarnMessages';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\n\nenum FormField {\n    'fosterbarn' = 'fosterbarn',\n}\n\ninterface FormValues {\n    [FormField.fosterbarn]: Fosterbarn[];\n}\nconst initialValues: FormValues = { fosterbarn: [] };\n\nconst FosterbarnExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<Fosterbarn> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                                <FosterbarnListAndDialog<FormField>\n                                    name={FormField.fosterbarn}\n                                    validate={validateRequiredList}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <FosterbarnForm\n                        fosterbarn={{}}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                    />\n                </Panel>\n                <SubmitPreview values={singleFormValues} />\n            </DialogFormWrapper>\n\n            <MessagesPreview messages={fosterbarnMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default FosterbarnExample;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport dateRangeValidation from '@navikt/sif-common-core/lib/validation/dateRangeValidation';\nimport { getTypedFormComponents, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { mapFomTomToDateRange } from '../utils';\nimport tidsperiodeUtils from './tidsperiodeUtils';\nimport { DateTidsperiode, DateTidsperiodeFormValues } from './types';\n\nexport interface TidsperiodeFormLabels {\n    title?: string;\n    fromDate: string;\n    toDate: string;\n    intervalTitle?: string;\n    okButton: string;\n    cancelButton: string;\n}\n\ninterface Props {\n    minDate?: Date;\n    maxDate?: Date;\n    tidsperiode?: Partial<DateTidsperiode>;\n    alleTidsperioder?: DateTidsperiode[];\n    formLabels?: Partial<TidsperiodeFormLabels>;\n    onSubmit: (values: DateTidsperiode) => void;\n    onCancel: () => void;\n}\n\nenum TidsperiodeFormFields {\n    tom = 'tom',\n    fom = 'fom',\n}\n\nconst Form = getTypedFormComponents<TidsperiodeFormFields, DateTidsperiodeFormValues>();\n\nconst TidsperiodeForm = ({\n    maxDate,\n    minDate,\n    formLabels,\n    tidsperiode,\n    alleTidsperioder = [],\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: DateTidsperiodeFormValues) => {\n        const dateTidsperiodeToSubmit = tidsperiodeUtils.mapFormValuesToDateTidsperiode(formValues, tidsperiode?.id);\n        if (tidsperiodeUtils.isValidDateTidsperiode(dateTidsperiodeToSubmit)) {\n            onSubmit(dateTidsperiodeToSubmit);\n        } else {\n            throw new Error('TidsperiodeForm: Formvalues is not a valid Tidsperiode on submit.');\n        }\n    };\n\n    const defaultLabels: TidsperiodeFormLabels = {\n        title: intlHelper(intl, 'tidsperiode.form.title'),\n        fromDate: intlHelper(intl, 'tidsperiode.form.fromDate'),\n        toDate: intlHelper(intl, 'tidsperiode.form.toDate'),\n        okButton: intlHelper(intl, 'tidsperiode.form.okButton'),\n        cancelButton: intlHelper(intl, 'tidsperiode.form.cancelButton'),\n    };\n\n    const inlineLabels: TidsperiodeFormLabels = { ...defaultLabels, ...formLabels };\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={tidsperiodeUtils.mapDateTidsperiodeToFormValues(tidsperiode || {})}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => {\n                    const validateFromDate = (dateString?: string) => {\n                        return dateRangeValidation.validateFromDate(\n                            ISOStringToDate(dateString),\n                            minDate,\n                            maxDate,\n                            ISOStringToDate(formik.values.tom)\n                        );\n                    };\n\n                    const validateToDate = (dateString?: string) => {\n                        return dateRangeValidation.validateToDate(\n                            ISOStringToDate(dateString),\n                            minDate,\n                            maxDate,\n                            ISOStringToDate(formik.values.tom)\n                        );\n                    };\n\n                    const disabledDateRanges =\n                        tidsperiode === undefined\n                            ? alleTidsperioder.map(mapFomTomToDateRange)\n                            : alleTidsperioder.filter((t) => t.id !== tidsperiode.id).map(mapFomTomToDateRange);\n\n                    return (\n                        <Form.Form\n                            onCancel={onCancel}\n                            fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                            <Systemtittel tag=\"h1\">{inlineLabels.title}</Systemtittel>\n                            <FormBlock>\n                                <Form.DateRangePicker\n                                    legend={inlineLabels.intervalTitle}\n                                    fullscreenOverlay={true}\n                                    minDate={minDate}\n                                    maxDate={maxDate}\n                                    disabledDateRanges={disabledDateRanges}\n                                    fromInputProps={{\n                                        label: inlineLabels.fromDate,\n                                        name: TidsperiodeFormFields.fom,\n                                        validate: validateFromDate,\n                                        onChange: () => {\n                                            setTimeout(() => {\n                                                formik.validateField(TidsperiodeFormFields.tom);\n                                            });\n                                        },\n                                    }}\n                                    toInputProps={{\n                                        label: inlineLabels.toDate,\n                                        name: TidsperiodeFormFields.tom,\n                                        validate: validateToDate,\n                                        onChange: () => {\n                                            setTimeout(() => {\n                                                formik.validateField(TidsperiodeFormFields.fom);\n                                            });\n                                        },\n                                    }}\n                                />\n                            </FormBlock>\n                        </Form.Form>\n                    );\n                }}\n            />\n        </>\n    );\n};\n\nexport default TidsperiodeForm;\n","import { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { guid } from 'nav-frontend-js-utils';\nimport { DateTidsperiode, DateTidsperiodeFormValues } from './types';\n\nconst isValidDateTidsperiode = (tidsperiode: Partial<DateTidsperiode>): tidsperiode is DateTidsperiode => {\n    return tidsperiode.fom !== undefined && tidsperiode.tom !== undefined;\n};\n\nconst mapFormValuesToDateTidsperiode = (\n    formValues: DateTidsperiodeFormValues,\n    id: string | undefined\n): Partial<DateTidsperiode> => {\n    return {\n        id: id || guid(),\n        fom: ISOStringToDate(formValues.fom),\n        tom: ISOStringToDate(formValues.tom),\n    };\n};\n\nconst mapDateTidsperiodeToFormValues = ({ fom, tom }: Partial<DateTidsperiode>): DateTidsperiodeFormValues => {\n    return {\n        fom: dateToISOString(fom),\n        tom: dateToISOString(tom),\n    };\n};\n\nconst tidsperiodeUtils = {\n    isValidDateTidsperiode,\n    mapDateTidsperiodeToFormValues,\n    mapFormValuesToDateTidsperiode,\n};\n\nexport default tidsperiodeUtils;\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { DateTidsperiode } from './types';\n\ninterface Props {\n    tidsperiode: DateTidsperiode[];\n    onEdit?: (opphold: DateTidsperiode) => void;\n    onDelete?: (opphold: DateTidsperiode) => void;\n}\n\nconst TidsperiodeList = ({ tidsperiode = [], onDelete, onEdit }: Props) => {\n    const getDateTitleString = (uttak: DateTidsperiode) =>\n        `${prettifyDateExtended(uttak.fom)} - ${prettifyDateExtended(uttak.tom)}`;\n\n    const renderTidsperiodeLabel = (uttak: DateTidsperiode): React.ReactNode => {\n        const title = getDateTitleString(uttak);\n        return (\n            <>\n                {onEdit && <ActionLink onClick={() => onEdit(uttak)}>{title}</ActionLink>}\n                {!onEdit && <span>{title}</span>}\n            </>\n        );\n    };\n\n    return (\n        <ItemList<DateTidsperiode>\n            getItemId={(uttak) => uttak.id}\n            getItemTitle={(uttak) => getDateTitleString(uttak)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderTidsperiodeLabel}\n            items={tidsperiode.filter((uttak) => uttak.id !== undefined)}\n        />\n    );\n};\n\nexport default TidsperiodeList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { FormikModalFormAndList, FormikValidateFunction, ModalFormAndListLabels } from '@navikt/sif-common-formik';\nimport TidsperiodeForm from './TidsperiodeForm';\nimport TidsperiodeList from './TidsperiodeList';\nimport { DateTidsperiode } from './types';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    validate?: FormikValidateFunction;\n    formTitle?: string;\n    minDate?: Date;\n    maxDate?: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction TidsperiodeListAndDialog<FieldNames>({\n    name,\n    minDate,\n    maxDate,\n    validate,\n    labels,\n    formTitle,\n}: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, DateTidsperiode>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                sortFunc={sortItemsByFom}\n                formRenderer={({ onSubmit, onCancel, item, allItems }) => (\n                    <TidsperiodeForm\n                        tidsperiode={item}\n                        alleTidsperioder={allItems}\n                        formLabels={formTitle ? { title: formTitle } : undefined}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => {\n                    console.log(items);\n\n                    return <TidsperiodeList tidsperiode={items} onEdit={onEdit} onDelete={onDelete} />;\n                }}\n            />\n        </>\n    );\n}\n\nexport default TidsperiodeListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { date1YearAgo, date1YearFromNow } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { validateRequiredList } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport { DateTidsperiode } from '../../../forms/tidsperiode';\nimport TidsperiodeListAndDialog from '../../../forms/tidsperiode/TidsperiodeListAndDialog';\nimport TidsperiodeForm from '../../../forms/tidsperiode/TidsperiodeForm';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport tidsperiodeMessages from '../../../forms/tidsperiode/tidsperiodeMessages';\n\nenum FormField {\n    'tidsperiode' = 'tidsperiode',\n}\n\ninterface FormValues {\n    [FormField.tidsperiode]: DateTidsperiode[];\n}\nconst initialValues: FormValues = { tidsperiode: [] };\n\nconst TidsperiodeExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<DateTidsperiode> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                                <TidsperiodeListAndDialog<FormField>\n                                    name={FormField.tidsperiode}\n                                    minDate={date1YearAgo}\n                                    maxDate={date1YearFromNow}\n                                    validate={validateRequiredList}\n                                    labels={{\n                                        addLabel: 'Legg til periode',\n                                        listTitle: 'Registrerte periode',\n                                        modalTitle: 'Periode',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <TidsperiodeForm\n                        minDate={date1YearAgo}\n                        maxDate={date1YearFromNow}\n                        tidsperiode={{}}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                    />\n                </Panel>\n                <SubmitPreview values={singleFormValues} />\n            </DialogFormWrapper>\n\n            <MessagesPreview messages={tidsperiodeMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default TidsperiodeExample;\n","import { YesOrNo } from '@navikt/sif-common-formik/lib';\n\nexport enum UtenlandsoppholdÅrsak {\n    'INNLAGT_DEKKET_NORGE' = 'BARNET_INNLAGT_I_HELSEINSTITUSJON_FOR_NORSK_OFFENTLIG_REGNING',\n    'INNLAGT_DEKKET_ANNET_LAND' = 'BARNET_INNLAGT_I_HELSEINSTITUSJON_DEKKET_ETTER_AVTALE_MED_ET_ANNET_LAND_OM_TRYGD',\n    'ANNET' = 'ANNET',\n}\n\nexport interface UtenlandsoppholdInnlagtPeriode {\n    fom: Date;\n    tom: Date;\n}\n\nexport interface Utenlandsopphold {\n    id?: string;\n    fom: Date;\n    tom: Date;\n    landkode: string;\n    erBarnetInnlagt?: YesOrNo;\n    barnInnlagtPerioder?: UtenlandsoppholdInnlagtPeriode[];\n    årsak?: UtenlandsoppholdÅrsak;\n}\n\nexport type UtenlandsoppholdFormValues = Partial<\n    Omit<Utenlandsopphold, 'id' | 'fom' | 'tom' | 'barnInnlagtPerioder'> & {\n        fom?: string;\n        tom?: string;\n        barnInnlagtPerioder?: UtenlandsoppholdInnlagtPeriode[];\n    }\n>;\n","import { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Utenlandsopphold, UtenlandsoppholdFormValues } from './types';\n\nconst isValidUtenlandsopphold = (utenlandsopphold: Partial<Utenlandsopphold>): utenlandsopphold is Utenlandsopphold => {\n    return (\n        utenlandsopphold.fom !== undefined &&\n        utenlandsopphold.tom !== undefined &&\n        utenlandsopphold.landkode !== undefined\n    );\n};\n\nconst mapFormValuesToUtenlandsopphold = (\n    formValues: UtenlandsoppholdFormValues,\n    id: string | undefined\n): Partial<Utenlandsopphold> => {\n    const { barnInnlagtPerioder } = formValues;\n    return {\n        ...formValues,\n        id: id || guid(),\n        fom: ISOStringToDate(formValues.fom),\n        tom: ISOStringToDate(formValues.tom),\n        barnInnlagtPerioder,\n    };\n};\n\nconst mapUtenlandsoppholdToFormValues = ({\n    fom,\n    tom,\n    erBarnetInnlagt,\n    barnInnlagtPerioder,\n    landkode,\n    årsak,\n}: Partial<Utenlandsopphold>): UtenlandsoppholdFormValues => ({\n    fom: dateToISOString(fom),\n    tom: dateToISOString(tom),\n    erBarnetInnlagt,\n    landkode,\n    årsak,\n    barnInnlagtPerioder,\n});\n\nconst utenlandsoppholdUtils = {\n    isValidUtenlandsopphold,\n    mapFormValuesToUtenlandsopphold,\n    mapUtenlandsoppholdToFormValues,\n};\nexport default utenlandsoppholdUtils;\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { countryIsMemberOfEøsOrEfta } from '@navikt/sif-common-core/lib/utils/countryUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport dateRangeValidation from '@navikt/sif-common-core/lib/validation/dateRangeValidation';\nimport {\n    validateRequiredField,\n    validateRequiredList,\n    validateRequiredSelect,\n    validateYesOrNoIsAnswered,\n} from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { hasValue } from '@navikt/sif-common-core/lib/validation/hasValue';\nimport { DateRange, getCountryName, ISOStringToDate, YesOrNo } from '@navikt/sif-common-formik';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport TidsperiodeListAndDialog from '../tidsperiode/TidsperiodeListAndDialog';\nimport { mapFomTomToDateRange } from '../utils';\nimport { Utenlandsopphold, UtenlandsoppholdFormValues, UtenlandsoppholdÅrsak } from './types';\nimport utils from './utenlandsoppholdUtils';\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    opphold?: Utenlandsopphold;\n    alleOpphold?: Utenlandsopphold[];\n    onSubmit: (values: Utenlandsopphold) => void;\n    onCancel: () => void;\n}\n\nenum UtenlandsoppholdFormFields {\n    fom = 'fom',\n    tom = 'tom',\n    landkode = 'landkode',\n    årsak = 'årsak',\n    erBarnetInnlagt = 'erBarnetInnlagt',\n    barnInnlagtPerioder = 'barnInnlagtPerioder',\n}\n\nconst defaultFormValues: UtenlandsoppholdFormValues = {\n    fom: undefined,\n    tom: undefined,\n    landkode: undefined,\n    erBarnetInnlagt: YesOrNo.UNANSWERED,\n    barnInnlagtPerioder: [],\n    årsak: undefined,\n};\n\nconst Form = getTypedFormComponents<UtenlandsoppholdFormFields, UtenlandsoppholdFormValues>();\n\nconst UtenlandsoppholdForm = ({ maxDate, minDate, opphold, alleOpphold = [], onSubmit, onCancel }: Props) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: Partial<UtenlandsoppholdFormValues>) => {\n        const utenlandsoppholdToSubmit = utils.mapFormValuesToUtenlandsopphold(formValues, opphold?.id);\n        if (utils.isValidUtenlandsopphold(utenlandsoppholdToSubmit)) {\n            onSubmit({\n                ...utenlandsoppholdToSubmit,\n                årsak: countryIsMemberOfEøsOrEfta(utenlandsoppholdToSubmit.landkode) ? undefined : formValues.årsak,\n            });\n        } else {\n            throw new Error('UtenlandsoppholdForm: Formvalues is not a valid Utenlandsopphold on submit.');\n        }\n    };\n\n    const registrerteTidsperioder: DateRange[] | undefined =\n        opphold === undefined\n            ? alleOpphold.map(mapFomTomToDateRange)\n            : alleOpphold.filter((o) => o.id !== opphold.id).map(mapFomTomToDateRange);\n\n    const initialValues = opphold ? utils.mapUtenlandsoppholdToFormValues(opphold) : defaultFormValues;\n    return (\n        <Form.FormikWrapper\n            initialValues={initialValues}\n            onSubmit={onFormikSubmit}\n            renderForm={(formik) => {\n                const {\n                    values: { fom, tom, landkode, erBarnetInnlagt, barnInnlagtPerioder = [], årsak },\n                } = formik;\n\n                const hasDateStringValues = hasValue(fom) && hasValue(tom);\n\n                const includeInnlagtPerioderQuestion =\n                    hasDateStringValues && landkode !== undefined && erBarnetInnlagt === YesOrNo.YES;\n\n                const includeInnlagtQuestion: boolean =\n                    landkode !== undefined && hasValue(landkode) && !countryIsMemberOfEøsOrEfta(landkode);\n\n                const showÅrsakQuestion = barnInnlagtPerioder.length > 0;\n\n                const areAllQuestionsAnswered: boolean =\n                    hasDateStringValues && landkode !== undefined && includeInnlagtQuestion === false\n                        ? true\n                        : erBarnetInnlagt !== YesOrNo.UNANSWERED &&\n                          (erBarnetInnlagt === YesOrNo.YES\n                              ? barnInnlagtPerioder.length > 0 && årsak !== undefined\n                              : true);\n\n                return (\n                    <Form.Form\n                        includeButtons={areAllQuestionsAnswered}\n                        onCancel={onCancel}\n                        fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                        <Systemtittel tag=\"h1\">\n                            <FormattedMessage id=\"utenlandsopphold.form.tittel\" />\n                        </Systemtittel>\n                        <FormBlock>\n                            <Form.DateRangePicker\n                                legend={intlHelper(intl, 'utenlandsopphold.form.tidsperiode.spm')}\n                                fullscreenOverlay={true}\n                                disabledDateRanges={registrerteTidsperioder}\n                                minDate={minDate}\n                                maxDate={maxDate}\n                                fromInputProps={{\n                                    name: UtenlandsoppholdFormFields.fom,\n                                    label: intlHelper(intl, 'utenlandsopphold.form.tidsperiode.fraDato'),\n                                    validate: (dateString) =>\n                                        dateRangeValidation.validateFromDate(\n                                            ISOStringToDate(dateString),\n                                            minDate,\n                                            maxDate,\n                                            ISOStringToDate(tom)\n                                        ),\n                                }}\n                                toInputProps={{\n                                    name: UtenlandsoppholdFormFields.tom,\n                                    label: intlHelper(intl, 'utenlandsopphold.form.tidsperiode.tilDato'),\n                                    validate: (dateString) =>\n                                        dateRangeValidation.validateToDate(\n                                            ISOStringToDate(dateString),\n                                            minDate,\n                                            maxDate,\n                                            ISOStringToDate(fom)\n                                        ),\n                                }}\n                            />\n                        </FormBlock>\n                        {hasDateStringValues && (\n                            <FormBlock>\n                                <Form.CountrySelect\n                                    name={UtenlandsoppholdFormFields.landkode}\n                                    label={intlHelper(intl, 'utenlandsopphold.form.land.spm')}\n                                    validate={validateRequiredSelect}\n                                />\n                            </FormBlock>\n                        )}\n\n                        {includeInnlagtQuestion && landkode && hasDateStringValues && (\n                            <>\n                                <FormBlock>\n                                    <Form.YesOrNoQuestion\n                                        name={UtenlandsoppholdFormFields.erBarnetInnlagt}\n                                        legend={intlHelper(intl, 'utenlandsopphold.form.erBarnetInnlagt.spm', {\n                                            land: getCountryName(landkode, intl.locale),\n                                        })}\n                                        validate={validateYesOrNoIsAnswered}\n                                    />\n                                </FormBlock>\n                                {includeInnlagtPerioderQuestion && (\n                                    <FormBlock margin=\"l\">\n                                        <TidsperiodeListAndDialog\n                                            name={UtenlandsoppholdFormFields.barnInnlagtPerioder}\n                                            minDate={ISOStringToDate(fom)}\n                                            maxDate={ISOStringToDate(tom)}\n                                            validate={validateRequiredList}\n                                            formTitle={intlHelper(\n                                                intl,\n                                                'utenlandsopphold.form.perioderBarnetErInnlag.formTitle'\n                                            )}\n                                            labels={{\n                                                addLabel: intlHelper(\n                                                    intl,\n                                                    'utenlandsopphold.form.perioderBarnetErInnlag.addLabel'\n                                                ),\n                                                modalTitle: intlHelper(\n                                                    intl,\n                                                    'utenlandsopphold.form.perioderBarnetErInnlag.modalTitle'\n                                                ),\n                                                listTitle: intlHelper(\n                                                    intl,\n                                                    'utenlandsopphold.form.perioderBarnetErInnlag.listTitle'\n                                                ),\n                                            }}\n                                        />\n                                    </FormBlock>\n                                )}\n                                {showÅrsakQuestion && (\n                                    <>\n                                        <FormBlock>\n                                            <Form.RadioPanelGroup\n                                                legend={intlHelper(intl, 'utenlandsopphold.form.årsak.spm', {\n                                                    land: getCountryName(landkode, intl.locale),\n                                                })}\n                                                name={UtenlandsoppholdFormFields.årsak}\n                                                validate={validateRequiredField}\n                                                radios={[\n                                                    {\n                                                        value: UtenlandsoppholdÅrsak.INNLAGT_DEKKET_NORGE,\n                                                        label: intlHelper(\n                                                            intl,\n                                                            `utenlandsopphold.form.årsak.${UtenlandsoppholdÅrsak.INNLAGT_DEKKET_NORGE}`\n                                                        ),\n                                                    },\n                                                    {\n                                                        value: UtenlandsoppholdÅrsak.INNLAGT_DEKKET_ANNET_LAND,\n                                                        label: intlHelper(\n                                                            intl,\n                                                            `utenlandsopphold.form.årsak.${UtenlandsoppholdÅrsak.INNLAGT_DEKKET_ANNET_LAND}`,\n                                                            { land: getCountryName(landkode, intl.locale) }\n                                                        ),\n                                                    },\n                                                    {\n                                                        value: UtenlandsoppholdÅrsak.ANNET,\n                                                        label: intlHelper(\n                                                            intl,\n                                                            `utenlandsopphold.form.årsak.${UtenlandsoppholdÅrsak.ANNET}`\n                                                        ),\n                                                    },\n                                                ]}\n                                            />\n                                        </FormBlock>\n                                    </>\n                                )}\n                            </>\n                        )}\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default UtenlandsoppholdForm;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { getCountryName } from '@navikt/sif-common-formik';\nimport { Utenlandsopphold } from './types';\nimport './utenlandsoppholdList.less';\n\ninterface Props {\n    utenlandsopphold: Utenlandsopphold[];\n    onEdit?: (opphold: Utenlandsopphold) => void;\n    onDelete?: (opphold: Utenlandsopphold) => void;\n}\n\nconst bem = bemUtils('utenlandsoppholdList');\n\nconst UtenlandsoppholdList = ({ utenlandsopphold, onDelete, onEdit }: Props) => {\n    const intl = useIntl();\n    const renderUtenlandsoppholdLabel = (opphold: Utenlandsopphold): React.ReactNode => {\n        const navn = getCountryName(opphold.landkode, intl.locale);\n        return (\n            <div className={bem.element('label')}>\n                <span className={bem.element('land')}>\n                    {onEdit && <ActionLink onClick={() => onEdit(opphold)}>{navn}</ActionLink>}\n                    {!onEdit && <span>{navn}</span>}\n                </span>\n                <span className={bem.element('dato')}>\n                    {prettifyDateExtended(opphold.fom)} - {prettifyDateExtended(opphold.tom)}\n                </span>\n            </div>\n        );\n    };\n\n    return (\n        <ItemList<Utenlandsopphold>\n            getItemId={(opphold) => opphold.id}\n            getItemTitle={(opphold) => getCountryName(opphold.landkode, intl.locale)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderUtenlandsoppholdLabel}\n            items={utenlandsopphold}\n        />\n    );\n};\n\nexport default UtenlandsoppholdList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { FormikModalFormAndList, FormikValidateFunction, ModalFormAndListLabels } from '@navikt/sif-common-formik';\nimport { Utenlandsopphold } from './types';\nimport UtenlandsoppholdForm from './UtenlandsoppholdForm';\nimport UtenlandsoppholdListe from './UtenlandsoppholdList';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    validate?: FormikValidateFunction;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction UtenlandsoppholdListAndDialog<FieldNames>({ name, minDate, maxDate, validate, labels }: Props<FieldNames>) {\n    return (\n        <FormikModalFormAndList<FieldNames, Utenlandsopphold>\n            name={name}\n            labels={labels}\n            validate={validate}\n            dialogWidth=\"narrow\"\n            sortFunc={sortItemsByFom}\n            formRenderer={({ onSubmit, onCancel, item, allItems }) => (\n                <UtenlandsoppholdForm\n                    opphold={item}\n                    alleOpphold={allItems}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    onSubmit={onSubmit}\n                    onCancel={onCancel}\n                />\n            )}\n            listRenderer={({ items, onEdit, onDelete }) => (\n                <UtenlandsoppholdListe utenlandsopphold={items} onEdit={onEdit} onDelete={onDelete} />\n            )}\n        />\n    );\n}\n\nexport default UtenlandsoppholdListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { date1YearAgo, date1YearFromNow } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { validateRequiredList } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport Panel from 'nav-frontend-paneler';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { Utenlandsopphold } from '../../../forms/utenlandsopphold/types';\nimport UtenlandsoppholdForm from '../../../forms/utenlandsopphold/UtenlandsoppholdForm';\nimport UtenlandsoppholdListAndDialog from '../../../forms/utenlandsopphold/UtenlandsoppholdListAndDialog';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport utenlandsoppholdMessages from '../../../forms/utenlandsopphold/utenlandsoppholdMessages';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\n\nenum FormField {\n    'utenlandsopphold' = 'utenlandsopphold',\n}\n\ninterface FormValues {\n    [FormField.utenlandsopphold]: Utenlandsopphold[];\n}\nconst initialValues: FormValues = {\n    utenlandsopphold: [],\n};\n\nconst UtenlandsoppholdExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<Utenlandsopphold> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                                <UtenlandsoppholdListAndDialog\n                                    minDate={date1YearAgo}\n                                    maxDate={date1YearFromNow}\n                                    name={FormField.utenlandsopphold}\n                                    validate={validateRequiredList}\n                                    labels={{\n                                        addLabel: 'Legg til utenlandsopphold',\n                                        listTitle: 'Registrerte utenlandsopphold',\n                                        modalTitle: 'Utenlandsopphold',\n                                        emptyListText: 'Ingen utenlandsopphold er lagt til',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <UtenlandsoppholdForm\n                        opphold={initialValues.utenlandsopphold[0]}\n                        minDate={date1YearAgo}\n                        maxDate={date1YearFromNow}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                    />\n                    <SubmitPreview values={singleFormValues} />\n                </Panel>\n            </DialogFormWrapper>\n\n            <MessagesPreview messages={utenlandsoppholdMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default UtenlandsoppholdExample;\n","import { FieldValidationResult } from '@navikt/sif-common-core/lib/validation/types';\nimport { FormikValidateFunction } from '@navikt/sif-common-formik/lib';\nimport { createFieldValidationError } from '@navikt/sif-common-core/lib/validation/fieldValidations';\n\nexport enum FraværFieldValidationErrors {\n    'påkrevd' = 'fieldvalidation.påkrevd',\n    'fraværsperioder_mangler' = 'fieldvalidation.fraværsperioder_mangler',\n    'fraværsperioder_overlapper' = 'fieldvalidation.fraværsperioder_overlapper',\n    'fraværsperioder_utenfor_periode' = 'fieldvalidation.fraværsperioder_utenfor_periode',\n    'fraværsperioder_overlapper_med_fraværsdager' = 'fieldvalidation.fraværsperioder_overlapper_med_fraværsdager',\n    'dager_med_fravær_ugyldig_dag' = 'fieldvalidation.dager_med_fravær_ugyldig_dag',\n    'dager_med_fravær_mangler' = 'fieldvalidation.dager_med_fravær_mangler',\n    'dager_med_fravær_like' = 'fieldvalidation.dager_med_fravær_like',\n    'dager_med_fravær_utenfor_periode' = 'fieldvalidation.dager_med_fravær_utenfor_periode',\n    'dager_med_for_mange_timer' = 'fieldvalidation.dager_med_for_mange_timer',\n    'dager_med_fravær_overlapper_perioder' = 'fieldvalidation.dager_med_fravær_overlapper_perioder',\n    'timer_ikke_tall' = 'fieldvalidation.timer_ikke_tall',\n    'timer_for_mange_timer' = 'fieldvalidation.timer_for_mange_timer',\n    'dato_utenfor_gyldig_tidsrom' = 'fieldvalidation.dato_utenfor_gyldig_tidsrom',\n    'tom_er_før_fom' = 'fieldvalidation.tom_er_før_fom',\n    'ingen_dokumenter' = 'fieldvalidation.ingen_dokumenter',\n    'for_mange_dokumenter' = 'fieldvalidation.for_mange_dokumenter',\n    'fravær_timer_mer_enn_arbeidstimer' = 'fravær.form.validation.timer_mer_enn_arbeidstimer',\n    'er_helg' = 'fravær.form.validation.er_helg',\n}\n\nexport type FieldValidationArray<ValueType> = (\n    validations: FormikValidateFunction<ValueType>[]\n) => (value: ValueType) => FieldValidationResult;\n\nexport const validateAll = <ValueType>(validations: FormikValidateFunction<ValueType>[]): FormikValidateFunction => (\n    value: ValueType\n): FieldValidationResult =>\n    validations\n        .map((validate: FormikValidateFunction<ValueType>) => validate(value))\n        .reduce((prev: FieldValidationResult, curr: FieldValidationResult) => prev || curr, undefined);\n\nexport const validateLessOrEqualTo = (maybeMaxValue: number | undefined): FormikValidateFunction => (\n    maybeValue: string | undefined\n) => {\n    const maybeValueFloat: number | undefined = maybeValue ? parseFloat(maybeValue) : undefined;\n    if (maybeMaxValue && maybeValueFloat) {\n        return maybeValueFloat <= maybeMaxValue\n            ? undefined\n            : createFieldValidationError(FraværFieldValidationErrors.fravær_timer_mer_enn_arbeidstimer);\n    }\n    return undefined;\n};\n","import { DateRange } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { createFieldValidationError } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { FieldValidationResult } from '@navikt/sif-common-core/lib/validation/types';\nimport { dateToISOString, FormikValidateFunction, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { isString } from 'formik';\nimport moment from 'moment';\nimport { FraværFieldValidationErrors } from './fraværValidationUtils';\nimport { FraværDag, FraværDagFormValues, FraværPeriode, FraværPeriodeFormValues } from './types';\nimport { guid } from 'nav-frontend-js-utils';\n\nexport const isFraværDag = (fraværDag: Partial<FraværDag>): fraværDag is FraværDag => {\n    return (\n        fraværDag.dato !== undefined && fraværDag.timerArbeidsdag !== undefined && fraværDag.timerFravær !== undefined\n    );\n};\n\nexport const isFraværPeriode = (fraværPeriode: Partial<FraværPeriode>): fraværPeriode is FraværPeriode => {\n    return fraværPeriode.from !== undefined && fraværPeriode.to !== undefined;\n};\n\nexport const fraværDagToFraværDateRange = (fraværDag: FraværDag): DateRange => ({\n    from: fraværDag.dato,\n    to: fraværDag.dato,\n});\n\nexport const datesCollideWithDateRanges = (dates: Date[], ranges: DateRange[]): boolean => {\n    if (ranges.length > 0 && dates.length > 0) {\n        return dates.some((d) => {\n            return ranges.some((range) => moment(d).isSameOrAfter(range.from) && moment(d).isSameOrBefore(range.to));\n        });\n    }\n    return false;\n};\n\nexport const validateNoCollisions = (\n    fraværDager: FraværDag[],\n    fraværPerioder: FraværPeriode[]\n): FormikValidateFunction => (): FieldValidationResult =>\n    datesCollideWithDateRanges(\n        fraværDager.map((d) => d.dato),\n        fraværPerioder\n    )\n        ? createFieldValidationError(FraværFieldValidationErrors.dager_med_fravær_overlapper_perioder)\n        : undefined;\n\nexport enum Weekday {\n    monday = 'monday',\n    tuesday = 'tuesday',\n    wednesday = 'wednesday',\n    thursday = 'thursday',\n    friday = 'friday',\n    saturday = 'saturday',\n    sunday = 'sunday',\n}\n\nexport const getWeekdayName = (date: Date): Weekday | undefined => {\n    switch (date.getDay()) {\n        case 0:\n            return Weekday.sunday;\n        case 1:\n            return Weekday.monday;\n        case 2:\n            return Weekday.tuesday;\n        case 3:\n            return Weekday.wednesday;\n        case 4:\n            return Weekday.thursday;\n        case 5:\n            return Weekday.friday;\n        case 6:\n            return Weekday.saturday;\n        default:\n            return undefined;\n    }\n};\n\nexport const dateErHelg = (date: Date) =>\n    getWeekdayName(date) === Weekday.saturday || getWeekdayName(date) === Weekday.sunday;\n\nexport const validateNotHelgedag = (maybeDate: string | undefined): FieldValidationResult => {\n    const date = ISOStringToDate(maybeDate);\n    return date && dateErHelg(date) ? createFieldValidationError(FraværFieldValidationErrors.er_helg) : undefined;\n};\n\nexport const timeText = (timer: string): string =>\n    timer === '0' || timer === '0.5' || timer === '1' ? 'time' : 'timer';\n\nexport const dateRangeToFomTom = (dateRange: DateRange): { fom: Date; tom: Date } => ({\n    fom: dateRange.from,\n    tom: dateRange.to,\n});\nexport const toMaybeNumber = (timerArbeidsdag: string | undefined): number | undefined => {\n    if (timerArbeidsdag && isString(timerArbeidsdag)) {\n        return parseFloat(timerArbeidsdag);\n    }\n    return undefined;\n};\n\nexport const mapFormValuesToFraværDag = (\n    formValues: FraværDagFormValues,\n    id: string | undefined\n): Partial<FraværDag> => {\n    return {\n        ...formValues,\n        id: id || guid(),\n        dato: ISOStringToDate(formValues.dato),\n    };\n};\n\nexport const mapFraværDagToFormValues = (fraværDag: Partial<FraværDag>): FraværDagFormValues => {\n    return {\n        ...fraværDag,\n        dato: fraværDag.dato ? dateToISOString(fraværDag.dato) : '',\n    };\n};\n\nexport const mapFormValuesToFraværPeriode = (\n    formValues: FraværPeriodeFormValues,\n    id: string | undefined\n): Partial<FraværPeriode> => {\n    return {\n        ...formValues,\n        id: id || guid(),\n        from: ISOStringToDate(formValues.from),\n        to: ISOStringToDate(formValues.to),\n    };\n};\n\nexport const mapFraværPeriodeToFormValues = (fraværPeriode: Partial<FraværPeriode>): FraværPeriodeFormValues => {\n    return {\n        ...fraværPeriode,\n        from: fraværPeriode.from ? dateToISOString(fraværPeriode.from) : '',\n        to: fraværPeriode.to ? dateToISOString(fraværPeriode.to) : '',\n    };\n};\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { DateRange } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport dateRangeValidation from '@navikt/sif-common-core/lib/validation/dateRangeValidation';\nimport { getTypedFormComponents, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport {\n    isFraværPeriode,\n    mapFormValuesToFraværPeriode,\n    mapFraværPeriodeToFormValues,\n    validateNotHelgedag,\n} from './fraværUtilities';\nimport { validateAll } from './fraværValidationUtils';\nimport { FraværPeriode, FraværPeriodeFormValues } from './types';\n\nexport interface FraværPeriodeFormLabels {\n    title: string;\n    intervalTitle: string;\n    fromDate: string;\n    toDate: string;\n    okButton: string;\n    cancelButton: string;\n}\n\ninterface Props {\n    fraværPeriode?: Partial<FraværPeriode>;\n    minDate: Date;\n    maxDate: Date;\n    dateRangesToDisable?: DateRange[];\n    helgedagerIkkeTillat?: boolean;\n    labels?: Partial<FraværPeriodeFormLabels>;\n    onSubmit: (values: FraværPeriode) => void;\n    onCancel: () => void;\n}\n\nconst defaultLabels: FraværPeriodeFormLabels = {\n    title: 'Periode med fravær',\n    intervalTitle: 'Velg tidsrom',\n    fromDate: 'Fra og med',\n    toDate: 'Til og med',\n    okButton: 'Ok',\n    cancelButton: 'Avbryt',\n};\n\nenum FraværPeriodeFormFields {\n    from = 'from',\n    to = 'to',\n}\n\nconst Form = getTypedFormComponents<FraværPeriodeFormFields, FraværPeriodeFormValues>();\n\nconst outDenneHvisInkludert = (denneFraværsPerioden: Partial<FraværPeriode>): ((dateRange: DateRange) => boolean) => (\n    fraværPeriode: FraværPeriode\n) => !(fraværPeriode?.from === denneFraværsPerioden.from && fraværPeriode?.to === denneFraværsPerioden.to);\n\nconst FraværPeriodeForm: React.FunctionComponent<Props> = ({\n    fraværPeriode: initialValues = { from: undefined, to: undefined },\n    maxDate,\n    minDate,\n    dateRangesToDisable,\n    helgedagerIkkeTillat,\n    labels,\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n    const onFormikSubmit = (formValues: FraværPeriodeFormValues) => {\n        const fraværPeriodeToSubmit = mapFormValuesToFraværPeriode(formValues, initialValues.id);\n        if (isFraværPeriode(fraværPeriodeToSubmit)) {\n            onSubmit(fraværPeriodeToSubmit);\n        } else {\n            throw new Error('FraværPeriodeForm: Formvalues is not a valid FraværPeriode on submit.');\n        }\n    };\n\n    const formLabels: FraværPeriodeFormLabels = { ...defaultLabels, ...labels };\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={mapFraværPeriodeToFormValues(initialValues)}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => (\n                    <Form.Form\n                        onCancel={onCancel}\n                        fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                        <Systemtittel tag=\"h1\">{formLabels.title}</Systemtittel>\n                        <FormBlock>\n                            <Form.DateIntervalPicker\n                                legend={formLabels.intervalTitle}\n                                fromDatepickerProps={{\n                                    label: formLabels.fromDate,\n                                    name: FraværPeriodeFormFields.from,\n                                    fullscreenOverlay: true,\n                                    minDate: minDate,\n                                    maxDate: ISOStringToDate(formik.values.to) || maxDate,\n                                    disableWeekend: helgedagerIkkeTillat || false,\n                                    disabledDateRanges: dateRangesToDisable\n                                        ? dateRangesToDisable.filter(outDenneHvisInkludert(initialValues))\n                                        : undefined,\n                                    validate: validateAll<string>([\n                                        ...(helgedagerIkkeTillat ? [validateNotHelgedag] : []),\n                                        (dateString) =>\n                                            dateRangeValidation.validateFromDate(\n                                                ISOStringToDate(dateString),\n                                                minDate,\n                                                maxDate,\n                                                ISOStringToDate(formik.values.to)\n                                            ),\n                                    ]),\n                                    onChange: () => {\n                                        setTimeout(() => {\n                                            formik.validateField(FraværPeriodeFormFields.from);\n                                        });\n                                    },\n                                }}\n                                toDatepickerProps={{\n                                    label: formLabels.toDate,\n                                    name: FraværPeriodeFormFields.to,\n                                    fullscreenOverlay: true,\n                                    minDate: ISOStringToDate(formik.values.from) || minDate,\n                                    maxDate,\n                                    disableWeekend: helgedagerIkkeTillat || false,\n                                    disabledDateRanges: dateRangesToDisable\n                                        ? dateRangesToDisable.filter(outDenneHvisInkludert(initialValues))\n                                        : undefined,\n\n                                    validate: validateAll<string>([\n                                        ...(helgedagerIkkeTillat ? [validateNotHelgedag] : []),\n                                        (dateString) =>\n                                            dateRangeValidation.validateToDate(\n                                                ISOStringToDate(dateString),\n                                                minDate,\n                                                maxDate,\n                                                ISOStringToDate(formik.values.from)\n                                            ),\n                                    ]),\n                                    onChange: () => {\n                                        setTimeout(() => {\n                                            formik.validateField(FraværPeriodeFormFields.to);\n                                        });\n                                    },\n                                }}\n                            />\n                        </FormBlock>\n                    </Form.Form>\n                )}\n            />\n        </>\n    );\n};\n\nexport default FraværPeriodeForm;\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { FraværPeriode } from './types';\n\ninterface Props {\n    fraværPerioder: FraværPeriode[];\n    onEdit?: (fraværPeriode: FraværPeriode) => void;\n    onDelete?: (fraværPeriode: FraværPeriode) => void;\n    useTrashcan?: boolean;\n}\n\nconst FraværPerioderList: React.FunctionComponent<Props> = ({ fraværPerioder = [], onDelete, onEdit, useTrashcan }) => {\n    const getDateTitleString = (fraværPeriode: FraværPeriode) =>\n        `${prettifyDateExtended(fraværPeriode.from)} - ${prettifyDateExtended(fraværPeriode.to)}`;\n\n    const renderFraværPeriodeLabel = (fraværPeriode: FraværPeriode): React.ReactNode => {\n        const title = getDateTitleString(fraværPeriode);\n        return (\n            <>\n                {onEdit && <ActionLink onClick={() => onEdit(fraværPeriode)}>{title}</ActionLink>}\n                {!onEdit && <span>{title}</span>}\n            </>\n        );\n    };\n\n    return (\n        <ItemList<FraværPeriode>\n            getItemId={(fraværPeriode) => fraværPeriode.id}\n            getItemTitle={(fraværPeriode) => getDateTitleString(fraværPeriode)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderFraværPeriodeLabel}\n            items={fraværPerioder.filter((fraværPeriode) => fraværPeriode.id !== undefined)}\n            useTrashcan={useTrashcan || false}\n        />\n    );\n};\n\nexport default FraværPerioderList;\n","import React from 'react';\nimport { DateRange, sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { FormikModalFormAndList, FormikValidateFunction, ModalFormAndListLabels } from '@navikt/sif-common-formik';\nimport { FraværPeriode } from './types';\nimport FraværPeriodeForm, { FraværPeriodeFormLabels } from './FraværPeriodeForm';\nimport FraværPerioderList from './FraværPerioderList';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n    validate?: FormikValidateFunction;\n    dateRangesToDisable?: DateRange[];\n    helgedagerIkkeTillat?: boolean;\n    fraværPeriodeFormLabels?: Partial<FraværPeriodeFormLabels>;\n}\n\nfunction FraværPerioderListAndDialog<FieldNames>({\n    name,\n    minDate,\n    maxDate,\n    dateRangesToDisable,\n    validate,\n    labels,\n    helgedagerIkkeTillat,\n    fraværPeriodeFormLabels,\n}: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, FraværPeriode>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                sortFunc={(fraværPeriodeA: FraværPeriode, fraværPeriodeB: FraværPeriode) =>\n                    sortItemsByFom({ fom: fraværPeriodeA.from }, { fom: fraværPeriodeB.from })\n                }\n                formRenderer={({ onSubmit, onCancel, item }) => (\n                    <FraværPeriodeForm\n                        fraværPeriode={item}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        dateRangesToDisable={dateRangesToDisable}\n                        helgedagerIkkeTillat={helgedagerIkkeTillat}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                        labels={fraværPeriodeFormLabels}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FraværPerioderList fraværPerioder={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FraværPerioderListAndDialog;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { DateRange } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { validateRequiredField } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport { FormikDatepickerProps } from '@navikt/sif-common-formik/lib/components/formik-datepicker/FormikDatepicker';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport FraværTimerSelect from './FraværTimerSelect';\nimport {\n    isFraværDag,\n    mapFormValuesToFraværDag,\n    mapFraværDagToFormValues,\n    toMaybeNumber,\n    validateNotHelgedag,\n} from './fraværUtilities';\nimport { validateAll, validateLessOrEqualTo } from './fraværValidationUtils';\nimport { FraværDag, FraværDagFormValues } from './types';\n\nexport interface FraværDagFormLabels {\n    title: string;\n    date: string;\n    antallArbeidstimer: string;\n    timerFravær: string;\n    okButton: string;\n    cancelButton: string;\n}\n\ninterface Props {\n    fraværDag?: Partial<FraværDag>;\n    minDate: Date;\n    maxDate: Date;\n    dateRangesToDisable?: DateRange[];\n    helgedagerIkkeTillatt?: boolean;\n    labels?: Partial<FraværDagFormLabels>;\n    maksArbeidstidPerDag?: number;\n    onSubmit: (values: FraværDag) => void;\n    onCancel: () => void;\n}\n\nconst defaultLabels: FraværDagFormLabels = {\n    title: 'Dag med delvis fravær',\n    date: 'Dato',\n    antallArbeidstimer: 'Antall timer du skulle ha jobbet denne dagen',\n    timerFravær: 'Antall timer du var borte fra jobb denne dagen',\n    okButton: 'Ok',\n    cancelButton: 'Avbryt',\n};\n\nexport enum FraværDagFormFields {\n    dato = 'dato',\n    timerArbeidsdag = 'timerArbeidsdag',\n    timerFravær = 'timerFravær',\n}\n\nexport const outDenneHvisInkludert = (initialValues: Partial<FraværDag>): ((dateRange: DateRange) => boolean) => (\n    dateRange: DateRange\n) => !(dateRange.from === initialValues.dato && dateRange.to === initialValues.dato);\n\nexport const FraværDagForm = getTypedFormComponents<FraværDagFormFields, FraværDagFormValues>();\n\nconst FraværDagFormView: React.FunctionComponent<Props> = ({\n    fraværDag: initialValues = {\n        dato: undefined,\n        timerArbeidsdag: undefined,\n        timerFravær: undefined,\n    },\n    maxDate,\n    minDate,\n    dateRangesToDisable,\n    helgedagerIkkeTillatt,\n    labels,\n    maksArbeidstidPerDag,\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n    const onFormikSubmit = (formValues: FraværDagFormValues) => {\n        const fraværDagToSubmit = mapFormValuesToFraværDag(formValues, initialValues.id);\n        if (isFraværDag(fraværDagToSubmit)) {\n            onSubmit(fraværDagToSubmit);\n        } else {\n            throw new Error('FraværDagFOrm: Formvalues is not a valid FraværDag on submit.');\n        }\n    };\n\n    const formLabels: FraværDagFormLabels = { ...defaultLabels, ...labels };\n\n    return (\n        <>\n            <FraværDagForm.FormikWrapper\n                initialValues={mapFraværDagToFormValues(initialValues)}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => {\n                    const { values } = formik;\n                    const datepickerProps: FormikDatepickerProps<FraværDagFormFields> = {\n                        label: formLabels.date,\n                        name: FraværDagFormFields.dato,\n                        fullscreenOverlay: true,\n\n                        minDate,\n                        maxDate,\n                        disableWeekend: helgedagerIkkeTillatt || false,\n                        disabledDateRanges: dateRangesToDisable\n                            ? dateRangesToDisable.filter(outDenneHvisInkludert(initialValues))\n                            : undefined,\n                        validate: helgedagerIkkeTillatt\n                            ? validateAll<string>([validateRequiredField, validateNotHelgedag])\n                            : validateRequiredField,\n                        onChange: () => {\n                            setTimeout(() => {\n                                formik.validateField(FraværDagFormFields.dato);\n                            });\n                        },\n                    };\n\n                    return (\n                        <FraværDagForm.Form\n                            onCancel={onCancel}\n                            fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                            <Systemtittel tag=\"h1\">{formLabels.title}</Systemtittel>\n                            <FormBlock>\n                                <FraværDagForm.DatePicker {...datepickerProps} />\n                            </FormBlock>\n                            <FormBlock>\n                                <FraværTimerSelect\n                                    name={FraværDagFormFields.timerArbeidsdag}\n                                    validate={validateRequiredField}\n                                    label={formLabels.antallArbeidstimer}\n                                    maksTid={maksArbeidstidPerDag}\n                                />\n                            </FormBlock>\n                            <FormBlock>\n                                <FraværTimerSelect\n                                    name={FraværDagFormFields.timerFravær}\n                                    validate={validateAll([\n                                        validateRequiredField,\n                                        validateLessOrEqualTo(toMaybeNumber(values.timerArbeidsdag)),\n                                    ])}\n                                    label={formLabels.timerFravær}\n                                    maksTid={maksArbeidstidPerDag}\n                                />\n                            </FormBlock>\n                        </FraværDagForm.Form>\n                    );\n                }}\n            />\n        </>\n    );\n};\n\nexport default FraværDagFormView;\n","import React from 'react';\nimport { FraværDagForm, FraværDagFormFields } from './FraværDagForm';\nimport { FormikValidateFunction } from '@navikt/sif-common-formik/lib';\nimport { timeText } from './fraværUtilities';\n\ninterface Props {\n    name: FraværDagFormFields;\n    validate: FormikValidateFunction;\n    label?: string;\n    maksTid?: number;\n}\n\nconst getOptionsList: (maksTid: number) => JSX.Element[] = (maksTid: number) => {\n    const newOptionElement = (t: number): JSX.Element => {\n        return (\n            <option key={t} value={t}>\n                {t.toString(10).replace('.', ',')} {timeText(t.toString(10))}\n            </option>\n        );\n    };\n    const go = (jsxList: JSX.Element[], tid: number): JSX.Element[] => {\n        return tid >= maksTid\n            ? [...jsxList, newOptionElement(tid)]\n            : go([...jsxList, newOptionElement(tid)], tid + 0.5);\n    };\n    return go([], 0.5);\n};\n\nconst FraværTimerSelect: React.FunctionComponent<Props> = ({ name, validate, label, maksTid }) => {\n    return (\n        <FraværDagForm.Select bredde=\"s\" label={label || 'Antall timer'} name={name} validate={validate}>\n            <option />\n            {getOptionsList(maksTid || 7.5)}\n        </FraværDagForm.Select>\n    );\n};\n\nexport default FraværTimerSelect;\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { FraværDag } from './types';\nimport { timeText } from './fraværUtilities';\n\ninterface Props {\n    fraværDager: FraværDag[];\n    onEdit?: (fraværDag: FraværDag) => void;\n    onDelete?: (fraværDag: FraværDag) => void;\n}\n\nconst FraværDagerList: React.FC<Props> = ({ fraværDager = [], onDelete, onEdit }) => {\n    const getFraværDagListItemTitle = (fraværDag: FraværDag) =>\n        `${prettifyDateExtended(fraværDag.dato)}: \n        Skulle jobbet ${fraværDag.timerArbeidsdag} ${timeText(fraværDag.timerArbeidsdag)}. \n        Borte fra jobb ${fraværDag.timerFravær}  ${timeText(fraværDag.timerFravær)}.`;\n\n    const renderFraværDagLabel = (fraværDag: FraværDag): React.ReactNode => {\n        const title = getFraværDagListItemTitle(fraværDag);\n        return (\n            <>\n                {onEdit && <ActionLink onClick={() => onEdit(fraværDag)}>{title}</ActionLink>}\n                {!onEdit && <span>{title}</span>}\n            </>\n        );\n    };\n\n    return (\n        <ItemList<FraværDag>\n            getItemId={(fraværDag) => fraværDag.id}\n            getItemTitle={(fraværDag) => getFraværDagListItemTitle(fraværDag)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderFraværDagLabel}\n            items={fraværDager.filter((fraværDag) => fraværDag.id !== undefined)}\n        />\n    );\n};\n\nexport default FraværDagerList;\n","import React from 'react';\nimport { DateRange, sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { FormikModalFormAndList, FormikValidateFunction, ModalFormAndListLabels } from '@navikt/sif-common-formik';\nimport { FraværDag } from './types';\nimport FraværDagFormView, { FraværDagFormLabels } from './FraværDagForm';\nimport FraværDagerList from './FraværDagerList';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    validate?: FormikValidateFunction;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n    dateRangesToDisable?: DateRange[];\n    helgedagerIkkeTillatt?: boolean;\n    fraværDagFormLabels?: Partial<FraværDagFormLabels>;\n    maksArbeidstidPerDag?: number;\n}\n\nfunction FraværDagerListAndDialog<FieldNames>({\n    name,\n    minDate,\n    maxDate,\n    validate,\n    labels,\n    dateRangesToDisable,\n    helgedagerIkkeTillatt,\n    fraværDagFormLabels,\n    maksArbeidstidPerDag,\n}: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, FraværDag>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                sortFunc={(fraværDagA: FraværDag, fraværDagB: FraværDag) =>\n                    sortItemsByFom({ fom: fraværDagA.dato }, { fom: fraværDagB.dato })\n                }\n                formRenderer={({ onSubmit, onCancel, item }) => (\n                    <FraværDagFormView\n                        fraværDag={item}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        dateRangesToDisable={dateRangesToDisable}\n                        helgedagerIkkeTillatt={helgedagerIkkeTillatt}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                        labels={fraværDagFormLabels}\n                        maksArbeidstidPerDag={maksArbeidstidPerDag}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FraværDagerList fraværDager={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FraværDagerListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { date1YearAgo, date1YearFromNow, dateToday } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { validateRequiredList } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport { FraværDag, FraværPeriode } from '../../../forms/fravær';\nimport FraværPerioderListAndDialog from '../../../forms/fravær/FraværPerioderListAndDialog';\nimport FraværDagerListAndDialog from '../../../forms/fravær/FraværDagerListAndDialog';\nimport FraværPeriodeForm from '../../../forms/fravær/FraværPeriodeForm';\nimport FraværDagFormView from '../../../forms/fravær/FraværDagForm';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { fraværDagToFraværDateRange, validateNoCollisions } from '../../../forms/fravær/fraværUtilities';\nimport { validateAll } from '../../../forms/fravær/fraværValidationUtils';\nimport Panel from 'nav-frontend-paneler';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport fraværMessages from '../../../forms/fravær/fraværMessages';\n\nenum FormField {\n    perioder = 'perioder',\n    dager = 'dager',\n}\n\ninterface FormValues {\n    [FormField.perioder]: FraværPeriode[];\n    [FormField.dager]: FraværDag[];\n}\n\nconst initialValues: FormValues = { [FormField.perioder]: [], [FormField.dager]: [] };\n\nconst FraværExample: React.FunctionComponent = () => {\n    const [fraværPeriodeSingleFormValues, setFraværPeriodeSingleFormValues] = useState<\n        Partial<FraværPeriode> | undefined\n    >(undefined);\n    const [fraværDagSingleFormValues, setFraværDagSingleFormValues] = useState<Partial<FraværDag> | undefined>(\n        undefined\n    );\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={(formik) => {\n                        const { values } = formik;\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                                <FormBlock>\n                                    <FraværPerioderListAndDialog<FormField>\n                                        name={FormField.perioder}\n                                        minDate={date1YearAgo}\n                                        maxDate={dateToday}\n                                        validate={validateAll([\n                                            validateRequiredList,\n                                            validateNoCollisions(values[FormField.dager], values[FormField.perioder]),\n                                        ])}\n                                        labels={{\n                                            addLabel: 'Legg til periode',\n                                            modalTitle: 'Fravær hele dager',\n                                        }}\n                                        dateRangesToDisable={[\n                                            ...values.perioder,\n                                            ...values.dager.map(fraværDagToFraværDateRange),\n                                        ]}\n                                        helgedagerIkkeTillat={true}\n                                    />\n                                </FormBlock>\n                                <FormBlock>\n                                    <FraværDagerListAndDialog<FormField>\n                                        name={FormField.dager}\n                                        minDate={date1YearAgo}\n                                        maxDate={dateToday}\n                                        validate={validateAll([\n                                            validateRequiredList,\n                                            validateNoCollisions(values[FormField.dager], values[FormField.perioder]),\n                                        ])}\n                                        labels={{\n                                            addLabel: 'Legg til dag med delvis fravær',\n                                            listTitle: 'Dager med delvis fravær',\n                                            modalTitle: 'Fravær deler av dag',\n                                            emptyListText: 'Ingen dager er lagt til',\n                                        }}\n                                        dateRangesToDisable={[\n                                            ...values.perioder,\n                                            ...values.dager.map(fraværDagToFraværDateRange),\n                                        ]}\n                                        helgedagerIkkeTillatt={true}\n                                        fraværDagFormLabels={{\n                                            title: 'Dag med delvis fravær',\n                                            date: 'Dato',\n                                            antallArbeidstimer: 'Antall timer du skulle ha jobbet denne dagen',\n                                            timerFravær: 'Antall timer du var borte fra jobb denne dagen',\n                                        }}\n                                        maksArbeidstidPerDag={24}\n                                    />\n                                </FormBlock>\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialoger</Undertittel>\n            </Box>\n\n            <FormBlock>\n                <DialogFormWrapper>\n                    <Panel border={true}>\n                        <FraværPeriodeForm\n                            minDate={date1YearAgo}\n                            maxDate={date1YearFromNow}\n                            fraværPeriode={{}}\n                            onSubmit={setFraværPeriodeSingleFormValues}\n                            onCancel={() => {\n                                // tslint:disable-next-line:no-console\n                                return console.log('cancel me');\n                            }}\n                        />\n                    </Panel>\n                    <SubmitPreview values={fraværPeriodeSingleFormValues} />\n                </DialogFormWrapper>\n            </FormBlock>\n\n            <FormBlock>\n                <DialogFormWrapper>\n                    <Panel border={true}>\n                        <FraværDagFormView\n                            minDate={date1YearAgo}\n                            maxDate={date1YearFromNow}\n                            fraværDag={{}}\n                            onSubmit={setFraværDagSingleFormValues}\n                            onCancel={() => {\n                                // tslint:disable-next-line:no-console\n                                return console.log('cancel me');\n                            }}\n                        />\n                    </Panel>\n                    <SubmitPreview values={fraværDagSingleFormValues} />\n                </DialogFormWrapper>\n            </FormBlock>\n\n            <MessagesPreview messages={fraværMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default FraværExample;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport {\n    validateAll,\n    validateDateInRange,\n    validateFødselsnummer,\n    validateRequiredField,\n} from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport annetBarnUtils from './annetBarnUtils';\nimport { AnnetBarn, AnnetBarnFormValues } from './types';\n\nexport interface AnnetBarnFormLabels {\n    title: string;\n    fnr: string;\n    placeholderFnr?: string;\n    fødselsdato: string;\n    navn: string;\n    placeholderNavn?: string;\n    okButton: string;\n    cancelButton: string;\n    aldersGrenseText?: string;\n}\n\ninterface Props {\n    annetBarn?: Partial<AnnetBarn>;\n    labels?: Partial<AnnetBarnFormLabels>;\n    minDate: Date;\n    maxDate: Date;\n    onSubmit: (values: AnnetBarn) => void;\n    onCancel: () => void;\n}\n\nenum AnnetBarnFormFields {\n    fnr = 'fnr',\n    fødselsdato = 'fødselsdato',\n    navn = 'navn',\n}\n\nconst Form = getTypedFormComponents<AnnetBarnFormFields, AnnetBarnFormValues>();\n\nconst AnnetBarnForm = ({\n    annetBarn = { fnr: '', navn: '', fødselsdato: undefined, id: undefined },\n    labels,\n    minDate,\n    maxDate,\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: AnnetBarnFormValues) => {\n        const annetBarnToSubmit = annetBarnUtils.mapFormValuesToPartialAnnetBarn(formValues, annetBarn.id);\n        if (annetBarnUtils.isAnnetBarn(annetBarnToSubmit)) {\n            onSubmit(annetBarnToSubmit);\n        } else {\n            throw new Error('AnnetBarnForm: Formvalues is not a valid AnnetBarn on submit.');\n        }\n    };\n\n    const defaultLabels: AnnetBarnFormLabels = {\n        title: intlHelper(intl, 'annetBarn.form.title'),\n        fnr: intlHelper(intl, 'annetBarn.form.fnr'),\n        fødselsdato: intlHelper(intl, 'annetBarn.form.fødselsdato'),\n        navn: intlHelper(intl, 'annetBarn.form.navn'),\n        okButton: intlHelper(intl, 'annetBarn.form.okButton'),\n        cancelButton: intlHelper(intl, 'annetBarn.form.cancelButton'),\n    };\n\n    const formLabels: AnnetBarnFormLabels = { ...defaultLabels, ...labels };\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={annetBarnUtils.mapAnnetBarnToFormValues(annetBarn)}\n                onSubmit={onFormikSubmit}\n                renderForm={() => (\n                    <Form.Form\n                        onCancel={onCancel}\n                        fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                        <Systemtittel tag=\"h1\">{formLabels.title}</Systemtittel>\n                        <FormBlock>\n                            <Form.Input\n                                name={AnnetBarnFormFields.navn}\n                                label={formLabels.navn}\n                                validate={validateRequiredField}\n                                placeholder={formLabels.placeholderNavn}\n                            />\n                        </FormBlock>\n                        <FormBlock>\n                            <Form.DatePicker\n                                name={AnnetBarnFormFields.fødselsdato}\n                                label={\n                                    formLabels.aldersGrenseText\n                                        ? `${formLabels.fødselsdato} ${formLabels.aldersGrenseText}`\n                                        : `${formLabels.fødselsdato}`\n                                }\n                                validate={validateAll([\n                                    validateRequiredField,\n                                    validateDateInRange({ from: minDate, to: maxDate }),\n                                ])}\n                                maxDate={maxDate}\n                                minDate={minDate}\n                                showYearSelector={true}\n                            />\n                        </FormBlock>\n                        <FormBlock>\n                            <Form.Input\n                                name={AnnetBarnFormFields.fnr}\n                                label={formLabels.fnr}\n                                validate={validateAll([validateRequiredField, validateFødselsnummer])}\n                                inputMode=\"numeric\"\n                                maxLength={11}\n                                placeholder={formLabels.placeholderFnr}\n                            />\n                        </FormBlock>\n                    </Form.Form>\n                )}\n            />\n        </>\n    );\n};\n\nexport default AnnetBarnForm;\n","import { hasValue } from '@navikt/sif-common-core/lib/validation/hasValue';\nimport { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { guid } from 'nav-frontend-js-utils';\nimport { AnnetBarn, AnnetBarnFormValues } from './types';\n\nconst isAnnetBarn = (annetBarn: Partial<AnnetBarn>): annetBarn is AnnetBarn => {\n    const { fnr, navn, fødselsdato } = annetBarn;\n    return hasValue(fnr) && hasValue(navn) && hasValue(fødselsdato);\n};\n\nconst mapFormValuesToPartialAnnetBarn = (\n    formValues: AnnetBarnFormValues,\n    id: string | undefined\n): Partial<AnnetBarn> => {\n    return {\n        ...formValues,\n        id: id || guid(),\n        fødselsdato: formValues.fødselsdato ? ISOStringToDate(formValues.fødselsdato) : undefined,\n    };\n};\n\nconst mapAnnetBarnToFormValues = (annetBarn: Partial<AnnetBarn>): AnnetBarnFormValues => {\n    return {\n        fnr: annetBarn.fnr,\n        navn: annetBarn.navn,\n        fødselsdato: annetBarn.fødselsdato ? dateToISOString(annetBarn.fødselsdato) : '',\n    };\n};\n\nconst annetBarnUtils = {\n    mapAnnetBarnToFormValues,\n    mapFormValuesToPartialAnnetBarn,\n    isAnnetBarn,\n};\n\nexport default annetBarnUtils;\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { useIntl } from 'react-intl';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { AnnetBarn } from './types';\nimport './annetBarnList.less';\n\ninterface Props {\n    annetBarn: AnnetBarn[];\n    onEdit?: (annetBarn: AnnetBarn) => void;\n    onDelete?: (annetBarn: AnnetBarn) => void;\n}\n\nconst bem = bemUtils('annetBarnList');\n\nconst AnnetBarnList = ({ annetBarn = [], onDelete, onEdit }: Props) => {\n    const intl = useIntl();\n    const renderAnnetBarnLabel = (annetBarn: AnnetBarn): React.ReactNode => {\n        return (\n            <div className={bem.element('label')}>\n                <span className={bem.element('dato')}>\n                    {intlHelper(intl, 'annetBarn.list.født')} {prettifyDate(annetBarn.fødselsdato)}\n                </span>\n                <span className={bem.element('land')}>\n                    {onEdit && <ActionLink onClick={() => onEdit(annetBarn)}>{annetBarn.navn}</ActionLink>}\n                    {!onEdit && <span>{annetBarn.navn}</span>}\n                </span>\n            </div>\n        );\n    };\n\n    return (\n        <ItemList<AnnetBarn>\n            getItemId={(annetBarn) => annetBarn.id}\n            getItemTitle={(annetBarn) => annetBarn.navn}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderAnnetBarnLabel}\n            items={annetBarn.filter((annetBarn) => annetBarn.id !== undefined)}\n        />\n    );\n};\n\nexport default AnnetBarnList;\n","import React from 'react';\nimport { FormikModalFormAndList, FormikValidateFunction, ModalFormAndListLabels } from '@navikt/sif-common-formik';\nimport AnnetBarnForm from './AnnetBarnForm';\nimport AnnetBarnList from './AnnetBarnList';\nimport { AnnetBarn } from './types';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    validate?: FormikValidateFunction;\n    labels: ModalFormAndListLabels;\n    minDate: Date;\n    maxDate: Date;\n    aldersGrenseText?: string;\n    placeholderFnr?: string;\n    placeholderNavn?: string;\n}\n\nfunction AnnetBarnListAndDialog<FieldNames>({\n    name,\n    validate,\n    labels,\n    minDate,\n    maxDate,\n    aldersGrenseText,\n    placeholderFnr,\n    placeholderNavn,\n}: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, AnnetBarn>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                formRenderer={({ onSubmit, onCancel, item }) => (\n                    <AnnetBarnForm\n                        annetBarn={item}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        labels={{\n                            aldersGrenseText: aldersGrenseText,\n                            placeholderFnr: placeholderFnr,\n                            placeholderNavn: placeholderNavn,\n                        }}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <AnnetBarnList annetBarn={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default AnnetBarnListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { validateRequiredList } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport AnnetBarnForm from '../../../forms/annet-barn/AnnetBarnForm';\nimport { AnnetBarn } from '../../../forms/annet-barn/types';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport annetBarnMessages from '../../../forms/annet-barn/annetBarnMessages';\nimport AnnetBarnListAndDialog from '../../../forms/annet-barn/AnnetBarnListAndDialog';\nimport { dateToday, date4YearsAgo } from '@navikt/sif-common-core/lib/utils/dateUtils';\n\nenum FormField {\n    'annetBarn' = 'annetBarn',\n}\n\ninterface FormValues {\n    [FormField.annetBarn]: AnnetBarn[];\n}\nconst initialValues: FormValues = { annetBarn: [] };\n\nconst AnnetBarnExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<AnnetBarn> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                                <AnnetBarnListAndDialog<FormField>\n                                    name={FormField.annetBarn}\n                                    validate={validateRequiredList}\n                                    labels={{\n                                        addLabel: 'Legg til barn',\n                                        listTitle: 'Registrerte barn',\n                                        modalTitle: 'Legg til barn',\n                                        emptyListText: 'Ingen barn er lagt til',\n                                    }}\n                                    minDate={date4YearsAgo}\n                                    maxDate={dateToday}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <AnnetBarnForm\n                        annetBarn={{}}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                        minDate={date4YearsAgo}\n                        maxDate={dateToday}\n                    />\n                </Panel>\n                <SubmitPreview values={singleFormValues} />\n            </DialogFormWrapper>\n\n            <MessagesPreview messages={annetBarnMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default AnnetBarnExample;\n","import { ApiStringDate } from '@navikt/sif-common-core/lib/types/ApiStringDate';\nimport { YesOrNo } from '@navikt/sif-common-core/lib/types/YesOrNo';\n\nexport enum Næringstype {\n    'FISKER' = 'FISKE',\n    'JORDBRUK' = 'JORDBRUK_SKOGBRUK',\n    'DAGMAMMA' = 'DAGMAMMA',\n    'ANNEN' = 'ANNEN',\n}\n\nexport enum VirksomhetFormField {\n    'næringstyper' = 'næringstyper',\n    'fiskerErPåBladB' = 'fiskerErPåBladB',\n    'fom' = 'fom',\n    'tom' = 'tom',\n    'næringsinntekt' = 'næringsinntekt',\n    'erPågående' = 'erPågående',\n    'navnPåVirksomheten' = 'navnPåVirksomheten',\n    'organisasjonsnummer' = 'organisasjonsnummer',\n    'registrertINorge' = 'registrertINorge',\n    'registrertILand' = 'registrertILand',\n    'harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene' = 'harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene',\n    'oppstartsdato' = 'oppstartsdato',\n    'hattVarigEndringAvNæringsinntektSiste4Kalenderår' = 'hattVarigEndringAvNæringsinntektSiste4Kalenderår',\n    'varigEndringINæringsinntekt_dato' = 'varigEndringINæringsinntekt_dato',\n    'varigEndringINæringsinntekt_inntektEtterEndring' = 'varigEndringINæringsinntekt_inntektEtterEndring',\n    'varigEndringINæringsinntekt_forklaring' = 'varigEndringINæringsinntekt_forklaring',\n    'endretNæringsinntektInformasjon' = 'endretNæringsinntektInformasjon',\n    'harRegnskapsfører' = 'harRegnskapsfører',\n    'regnskapsfører' = 'regnskapsfører',\n    'regnskapsfører_navn' = 'regnskapsfører_navn',\n    'regnskapsfører_telefon' = 'regnskapsfører_telefon',\n    'harRevisor' = 'harRevisor',\n    'revisor_navn' = 'revisor_navn',\n    'revisor_telefon' = 'revisor_telefon',\n    'kanInnhenteOpplsyningerFraRevisor' = 'kanInnhenteOpplsyningerFraRevisor',\n}\n\nexport interface VirksomhetHideFields {\n    [VirksomhetFormField.fiskerErPåBladB]?: boolean;\n    [VirksomhetFormField.harRevisor]?: boolean;\n}\n\nexport interface Virksomhet {\n    id?: string;\n    [VirksomhetFormField.næringstyper]: Næringstype[];\n    [VirksomhetFormField.fiskerErPåBladB]?: YesOrNo;\n    [VirksomhetFormField.fom]: Date;\n    [VirksomhetFormField.tom]?: Date;\n    [VirksomhetFormField.næringsinntekt]?: number;\n    [VirksomhetFormField.erPågående]?: boolean;\n    [VirksomhetFormField.navnPåVirksomheten]: string;\n    [VirksomhetFormField.organisasjonsnummer]?: string;\n    [VirksomhetFormField.registrertINorge]: YesOrNo;\n    [VirksomhetFormField.registrertILand]?: string;\n    [VirksomhetFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene]?: YesOrNo;\n    [VirksomhetFormField.oppstartsdato]?: Date;\n    [VirksomhetFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår]?: YesOrNo;\n    [VirksomhetFormField.varigEndringINæringsinntekt_dato]?: Date;\n    [VirksomhetFormField.varigEndringINæringsinntekt_inntektEtterEndring]?: number;\n    [VirksomhetFormField.varigEndringINæringsinntekt_forklaring]?: string;\n    [VirksomhetFormField.harRegnskapsfører]: YesOrNo;\n    [VirksomhetFormField.regnskapsfører_navn]?: string;\n    [VirksomhetFormField.regnskapsfører_telefon]?: string;\n    [VirksomhetFormField.harRevisor]?: YesOrNo;\n    [VirksomhetFormField.revisor_navn]?: string;\n    [VirksomhetFormField.revisor_telefon]?: string;\n    [VirksomhetFormField.kanInnhenteOpplsyningerFraRevisor]?: YesOrNo;\n}\nexport type VirksomhetFormValues = Partial<\n    Omit<Virksomhet, 'fom' | 'tom' | 'oppstartsdato' | 'varigEndringINæringsinntekt_dato'> & {\n        [VirksomhetFormField.fom]: string;\n        [VirksomhetFormField.tom]?: string;\n        [VirksomhetFormField.oppstartsdato]?: string;\n        [VirksomhetFormField.varigEndringINæringsinntekt_dato]?: string;\n    }\n>;\n\nexport const isVirksomhet = (virksomhet: Partial<Virksomhet>): virksomhet is Virksomhet => {\n    return virksomhet !== undefined;\n};\n\nexport interface VirksomhetApiData {\n    næringstyper: Næringstype[];\n    fiskerErPåBladB?: boolean;\n    fraOgMed: ApiStringDate;\n    tilOgMed?: ApiStringDate | null;\n    næringsinntekt?: number;\n    navnPåVirksomheten: string;\n    organisasjonsnummer?: string;\n    registrertINorge: boolean;\n    registrertIUtlandet?: {\n        landkode: string;\n        landnavn: string;\n    };\n    yrkesaktivSisteTreFerdigliknedeÅrene?: {\n        oppstartsdato: ApiStringDate;\n    };\n    varigEndring?: {\n        dato: ApiStringDate;\n        inntektEtterEndring: number;\n        forklaring: string;\n    };\n    regnskapsfører?: {\n        navn: string;\n        telefon: string;\n    };\n    revisor?: {\n        navn: string;\n        telefon: string;\n        kanInnhenteOpplysninger?: boolean;\n    };\n}\n","/* eslint-disable react/display-name */\nimport React, { useState } from 'react';\nimport Tabs from 'nav-frontend-tabs';\nimport 'nav-frontend-tabs-style';\nimport PageIntro from '../../components/page-intro/PageIntro';\nimport { RouteConfig } from '../../config/routeConfig';\nimport BostedUtlandExample from './BostedUtlandExample';\nimport FerieuttakExample from './FerieuttakExample';\nimport FosterbarnExample from './FosterbarnExample';\nimport TidsperiodeExample from './TidsperiodeExample';\nimport UtenlandsoppholdIPeriodenExample from './UtenlandsoppholdExample';\nimport FraværExample from './FraværExample';\nimport AnnetBarnExample from './AnnetBarnExample';\n\nconst tabRoutes: RouteConfig[] = [\n    {\n        path: 'tidsrom',\n        renderContent: () => <TidsperiodeExample />,\n        title: 'Tidsperiode',\n    },\n    {\n        path: 'utenlandsopphold',\n        renderContent: () => <UtenlandsoppholdIPeriodenExample />,\n        title: 'Utenlandsopphold i perioden',\n    },\n    {\n        path: 'bosted-utland',\n        renderContent: () => <BostedUtlandExample />,\n        title: 'Bosted utland',\n    },\n    {\n        path: 'ferieuttak',\n        renderContent: () => <FerieuttakExample />,\n        title: 'Ferieuttak i perioden',\n    },\n    {\n        path: 'fosterbarn',\n        renderContent: () => <FosterbarnExample />,\n        title: 'Fosterbarn',\n    },\n    {\n        path: 'fravær',\n        renderContent: () => <FraværExample />,\n        title: 'Fravær',\n    },\n    {\n        path: 'annetbarn',\n        renderContent: () => <AnnetBarnExample />,\n        title: 'Annet Barn',\n    },\n];\n\nconst DialogForms = () => {\n    const [path, setPath] = useState(tabRoutes[0].path);\n    const activeRoute = tabRoutes.find((r) => {\n        return r.path === path;\n    });\n    return (\n        <>\n            <PageIntro title=\"Dialogskjema\">\n                Skjema for ferieuttak i perioden, utenlandsopphold i perioden og bosted i utlandet.\n            </PageIntro>\n            <Tabs\n                onChange={(evt, idx) => setPath(tabRoutes[idx].path)}\n                tabs={tabRoutes.map((r) => ({\n                    label: r.title,\n                    active: r.path === path ? 'true' : 'false',\n                }))}\n            />\n            {activeRoute && activeRoute.renderContent()}\n        </>\n    );\n};\n\nexport default DialogForms;\n","/* eslint-disable @typescript-eslint/camelcase */\nimport { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Næringstype, Virksomhet, VirksomhetFormValues } from './types';\n\nexport const harFiskerNæringstype = (næringstyper: Næringstype[]): boolean =>\n    næringstyper.find((n) => n === Næringstype.FISKER) !== undefined;\n\nexport const mapFormValuesToVirksomhet = (\n    formValues: VirksomhetFormValues,\n    id: string | undefined\n): Partial<Virksomhet> => {\n    return {\n        ...formValues,\n        id: id || guid(),\n        fom: ISOStringToDate(formValues.fom),\n        tom: ISOStringToDate(formValues.tom),\n        oppstartsdato: ISOStringToDate(formValues.oppstartsdato),\n        varigEndringINæringsinntekt_dato: ISOStringToDate(formValues.varigEndringINæringsinntekt_dato),\n    };\n};\n\nexport const mapVirksomhetToFormValues = (virksomhet: Virksomhet): VirksomhetFormValues => {\n    return {\n        ...virksomhet,\n        fom: dateToISOString(virksomhet.fom),\n        tom: dateToISOString(virksomhet.tom),\n        oppstartsdato: dateToISOString(virksomhet.oppstartsdato),\n        varigEndringINæringsinntekt_dato: dateToISOString(virksomhet.varigEndringINæringsinntekt_dato),\n    };\n};\n","/* eslint-disable @typescript-eslint/camelcase */\nimport { formatDateToApiFormat } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { YesOrNo, getCountryName } from '@navikt/sif-common-formik/lib';\nimport { Virksomhet, VirksomhetApiData } from './types';\nimport { harFiskerNæringstype } from './virksomhetUtils';\n\nexport const mapVirksomhetToVirksomhetApiData = (\n    locale: string,\n    virksomhet: Virksomhet,\n    harBesvartFikserPåBladB?: boolean\n): VirksomhetApiData => {\n    const registrertINorge = virksomhet.registrertINorge === YesOrNo.YES;\n    const harRegnskapsfører = virksomhet.harRegnskapsfører === YesOrNo.YES;\n\n    const data: VirksomhetApiData = {\n        næringstyper: [...virksomhet.næringstyper],\n        navnPåVirksomheten: virksomhet.navnPåVirksomheten,\n        registrertINorge,\n        ...(registrertINorge\n            ? {\n                  organisasjonsnummer: virksomhet.organisasjonsnummer,\n              }\n            : {\n                  registrertIUtlandet: virksomhet.registrertILand\n                      ? {\n                            landkode: virksomhet.registrertILand,\n                            landnavn: getCountryName(virksomhet.registrertILand, locale),\n                        }\n                      : undefined,\n              }),\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        fraOgMed: formatDateToApiFormat(virksomhet.fom),\n        tilOgMed: virksomhet.erPågående || virksomhet.tom === undefined ? null : formatDateToApiFormat(virksomhet.tom),\n        næringsinntekt: virksomhet.næringsinntekt,\n    };\n\n    if (virksomhet.hattVarigEndringAvNæringsinntektSiste4Kalenderår) {\n        const harHatt = virksomhet.hattVarigEndringAvNæringsinntektSiste4Kalenderår === YesOrNo.YES;\n        const {\n            varigEndringINæringsinntekt_dato,\n            varigEndringINæringsinntekt_forklaring,\n            varigEndringINæringsinntekt_inntektEtterEndring,\n        } = virksomhet;\n        if (\n            harHatt &&\n            varigEndringINæringsinntekt_dato &&\n            varigEndringINæringsinntekt_inntektEtterEndring !== undefined &&\n            varigEndringINæringsinntekt_forklaring\n        ) {\n            data.varigEndring = {\n                dato: formatDateToApiFormat(varigEndringINæringsinntekt_dato),\n                forklaring: varigEndringINæringsinntekt_forklaring,\n                inntektEtterEndring: varigEndringINæringsinntekt_inntektEtterEndring,\n            };\n        }\n    }\n\n    if (harFiskerNæringstype(virksomhet.næringstyper) && harBesvartFikserPåBladB !== true) {\n        data.fiskerErPåBladB = virksomhet.fiskerErPåBladB === YesOrNo.YES;\n    }\n\n    if (virksomhet.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene) {\n        const harBlittAktiv = virksomhet.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene === YesOrNo.YES;\n        if (harBlittAktiv && virksomhet.oppstartsdato) {\n            data.yrkesaktivSisteTreFerdigliknedeÅrene = {\n                oppstartsdato: formatDateToApiFormat(virksomhet.oppstartsdato),\n            };\n        }\n    }\n\n    if (harRegnskapsfører && virksomhet.regnskapsfører_navn && virksomhet.regnskapsfører_telefon) {\n        data.regnskapsfører = {\n            navn: virksomhet.regnskapsfører_navn,\n            telefon: virksomhet.regnskapsfører_telefon,\n        };\n    }\n\n    if (!harRegnskapsfører) {\n        if (virksomhet.harRevisor === YesOrNo.YES && virksomhet.revisor_navn && virksomhet.revisor_telefon) {\n            data.revisor = {\n                navn: virksomhet.revisor_navn,\n                telefon: virksomhet.revisor_telefon,\n                kanInnhenteOpplysninger: virksomhet.kanInnhenteOpplsyningerFraRevisor === YesOrNo.YES,\n            };\n        }\n    }\n\n    return data;\n};\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport CounsellorPanel from '@navikt/sif-common-core/lib/components/counsellor-panel/CounsellorPanel';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\n\ninterface Props {\n    navnPåVirksomheten: string;\n}\n\nconst InfoTilFisker = ({ navnPåVirksomheten }: Props) => {\n    const intl = useIntl();\n    return (\n        <CounsellorPanel>\n            {intlHelper(intl, 'sifForms.virksomhet.veileder_fisker', { navnPåVirksomheten })}\n        </CounsellorPanel>\n    );\n};\n\nexport default InfoTilFisker;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport CounsellorPanel from '@navikt/sif-common-core/lib/components/counsellor-panel/CounsellorPanel';\nimport ExpandableInfo from '@navikt/sif-common-core/lib/components/expandable-content/ExpandableInfo';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport ResponsivePanel from '@navikt/sif-common-core/lib/components/responsive-panel/ResponsivePanel';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { date3YearsAgo, date4YearsAgo, dateToday } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport {\n    validateOrgNumber,\n    validatePhoneNumber,\n    validateRequiredField,\n    validateRequiredList,\n    validateRequiredNumber,\n    validateYesOrNoIsAnswered,\n} from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { hasValue } from '@navikt/sif-common-core/lib/validation/hasValue';\nimport { FormikYesOrNoQuestion, getTypedFormComponents, ISOStringToDate, YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { FormikProps } from 'formik';\nimport moment from 'moment';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport InfoTilFisker from './parts/InfoTilFisker';\nimport {\n    isVirksomhet,\n    Næringstype,\n    Virksomhet,\n    VirksomhetFormField,\n    VirksomhetFormValues,\n    VirksomhetHideFields,\n} from './types';\nimport { harFiskerNæringstype, mapFormValuesToVirksomhet, mapVirksomhetToFormValues } from './virksomhetUtils';\n\ninterface Props {\n    virksomhet?: Virksomhet;\n    hideFormFields?: VirksomhetHideFields;\n    onSubmit: (oppdrag: Virksomhet) => void;\n    onCancel: () => void;\n}\n\nconst MAKS_INNTEKT = 999999999;\n\nconst Form = getTypedFormComponents<VirksomhetFormField, VirksomhetFormValues>();\n\nconst visNæringsinntekt = (values: VirksomhetFormValues): boolean => {\n    const fomDate = ISOStringToDate(values.fom);\n    return fomDate !== undefined && moment(fomDate).isAfter(date4YearsAgo);\n};\n\nconst ensureValidNæringsinntekt = (values: VirksomhetFormValues): number | undefined => {\n    if (visNæringsinntekt(values)) {\n        return values.næringsinntekt;\n    }\n    return undefined;\n};\n\nconst VirksomhetForm = ({ onCancel, virksomhet, onSubmit, hideFormFields }: Props) => {\n    const onFormikSubmit = (values: VirksomhetFormValues) => {\n        const virksomhetToSubmit = mapFormValuesToVirksomhet(values, virksomhet?.id);\n        if (isVirksomhet(virksomhetToSubmit)) {\n            onSubmit({\n                ...virksomhetToSubmit,\n                næringsinntekt: ensureValidNæringsinntekt(values),\n            });\n        } else {\n            throw new Error('VirksomhetForm: Formvalues is not a valid Virksomhet on submit.');\n        }\n    };\n\n    const intl = useIntl();\n    const getText = (key: string, value?: any): string => intlHelper(intl, `sifForms.virksomhet.${key}`, value);\n    const hideFiskerPåBladB = hideFormFields?.[VirksomhetFormField.fiskerErPåBladB] === true;\n    const hideRevisor = hideFormFields?.harRevisor === true;\n\n    return (\n        <Form.FormikWrapper\n            initialValues={virksomhet ? mapVirksomhetToFormValues(virksomhet) : { næringstyper: [] }}\n            onSubmit={onFormikSubmit}\n            renderForm={(formik: FormikProps<VirksomhetFormValues>) => {\n                const { values, setFieldValue } = formik;\n                const { navnPåVirksomheten = 'virksomheten' } = values;\n                const fomDate = ISOStringToDate(values.fom);\n                return (\n                    <Form.Form\n                        includeValidationSummary={true}\n                        onCancel={onCancel}\n                        fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                        <Box padBottom=\"l\">\n                            <Systemtittel tag=\"h1\">{getText('form_title')}</Systemtittel>\n                        </Box>\n                        <Form.CheckboxPanelGroup\n                            name={VirksomhetFormField.næringstyper}\n                            legend={getText('hvilken_type_virksomhet')}\n                            checkboxes={[\n                                {\n                                    value: Næringstype.FISKER,\n                                    label: getText('næringstype_fisker'),\n                                },\n                                {\n                                    value: Næringstype.JORDBRUK,\n                                    label: getText('næringstype_jordbruker'),\n                                },\n                                {\n                                    value: Næringstype.DAGMAMMA,\n                                    label: getText('næringstype_dagmamma'),\n                                },\n                                {\n                                    value: Næringstype.ANNEN,\n                                    label: getText('næringstype_annet'),\n                                },\n                            ]}\n                            validate={validateRequiredList}\n                        />\n\n                        {harFiskerNæringstype(values.næringstyper || []) && hideFiskerPåBladB !== true && (\n                            <Box margin=\"xl\">\n                                <FormikYesOrNoQuestion<VirksomhetFormField>\n                                    name={VirksomhetFormField.fiskerErPåBladB}\n                                    legend={getText('fisker_blad_b')}\n                                    validate={validateYesOrNoIsAnswered}\n                                />\n                            </Box>\n                        )}\n\n                        <Box margin=\"xl\">\n                            <Form.Input\n                                name={VirksomhetFormField.navnPåVirksomheten}\n                                label={getText('hva_heter_virksomheten')}\n                                validate={validateRequiredField}\n                                maxLength={50}\n                            />\n                        </Box>\n\n                        {harFiskerNæringstype(values.næringstyper || []) &&\n                            values.navnPåVirksomheten !== undefined &&\n                            hasValue(navnPåVirksomheten) && (\n                                <Box margin=\"xl\">\n                                    <InfoTilFisker navnPåVirksomheten={values.navnPåVirksomheten} />\n                                </Box>\n                            )}\n\n                        <Box margin=\"xl\">\n                            <Form.YesOrNoQuestion\n                                name={VirksomhetFormField.registrertINorge}\n                                legend={getText('registert_i_norge', { navnPåVirksomheten })}\n                                validate={validateYesOrNoIsAnswered}\n                            />\n                        </Box>\n\n                        {values.registrertINorge === YesOrNo.NO && (\n                            <Box margin=\"xl\">\n                                <Form.CountrySelect\n                                    name={VirksomhetFormField.registrertILand}\n                                    label={getText('registert_i_hvilket_land', { navnPåVirksomheten })}\n                                    validate={validateRequiredField}\n                                    useAlpha3Code={true}\n                                />\n                            </Box>\n                        )}\n\n                        {values.registrertINorge === YesOrNo.YES && (\n                            <Box margin=\"xl\">\n                                <Form.Input\n                                    name={VirksomhetFormField.organisasjonsnummer}\n                                    label={getText('organisasjonsnummer')}\n                                    style={{ maxWidth: '10rem' }}\n                                    maxLength={9}\n                                    validate={(value) =>\n                                        validateOrgNumber(value, values.registrertINorge === YesOrNo.YES)\n                                    }\n                                />\n                            </Box>\n                        )}\n\n                        {(values.registrertINorge === YesOrNo.YES || values.registrertINorge === YesOrNo.NO) && (\n                            <Box margin=\"xl\">\n                                <Form.DateRangePicker\n                                    legend={getText('startdato', { navnPåVirksomheten })}\n                                    showYearSelector={true}\n                                    maxDate={dateToday}\n                                    fromInputProps={{\n                                        label: getText('kalender_fom'),\n                                        name: VirksomhetFormField.fom,\n                                        validate: validateRequiredField,\n                                    }}\n                                    toInputProps={{\n                                        label: getText('kalender_tom'),\n                                        name: VirksomhetFormField.tom,\n                                        disabled: values.erPågående === true,\n                                    }}\n                                />\n                                <Form.Checkbox\n                                    label={getText('kalender_pågående')}\n                                    name={VirksomhetFormField.erPågående}\n                                    afterOnChange={(checked) => {\n                                        if (checked) {\n                                            setFieldValue(VirksomhetFormField.tom, undefined);\n                                        }\n                                    }}\n                                />\n                            </Box>\n                        )}\n\n                        {fomDate && moment(fomDate).isAfter(date4YearsAgo) && (\n                            <>\n                                <Box margin=\"xl\">\n                                    <Form.Input\n                                        name={VirksomhetFormField.næringsinntekt}\n                                        label={getText('næringsinntekt')}\n                                        type=\"number\"\n                                        maxLength={10}\n                                        max={MAKS_INNTEKT}\n                                        style={{ maxWidth: '10rem' }}\n                                        validate={validateRequiredNumber({ min: 0, max: MAKS_INNTEKT })}\n                                        description={\n                                            <ExpandableInfo title={getText('næringsinntekt_info_title')}>\n                                                {getText('næringsinntekt_info')}\n                                            </ExpandableInfo>\n                                        }\n                                    />\n                                </Box>\n                                <Box margin=\"xl\">\n                                    <Form.YesOrNoQuestion\n                                        name={\n                                            VirksomhetFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene\n                                        }\n                                        legend={getText('har_blitt_yrkesaktiv')}\n                                        validate={validateYesOrNoIsAnswered}\n                                        description={\n                                            <ExpandableInfo title={getText('har_blitt_yrkesaktiv_info_title')}>\n                                                {getText('har_blitt_yrkesaktiv_info')}\n                                            </ExpandableInfo>\n                                        }\n                                    />\n                                </Box>\n                                {values.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene === YesOrNo.YES && (\n                                    <FormBlock margin=\"m\">\n                                        <ResponsivePanel>\n                                            <Form.DatePicker\n                                                name={VirksomhetFormField.oppstartsdato}\n                                                label={getText('har_blitt_yrkesaktiv_dato')}\n                                                showYearSelector={true}\n                                                minDate={date3YearsAgo}\n                                                maxDate={dateToday}\n                                                validate={validateRequiredField}\n                                            />\n                                        </ResponsivePanel>\n                                    </FormBlock>\n                                )}\n                            </>\n                        )}\n                        {fomDate && moment(fomDate).isAfter(date4YearsAgo) === false && (\n                            <>\n                                <Box margin=\"xl\">\n                                    <Form.YesOrNoQuestion\n                                        name={VirksomhetFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår}\n                                        legend={getText('varig_endring_spm')}\n                                        validate={validateYesOrNoIsAnswered}\n                                    />\n                                </Box>\n                                {values.hattVarigEndringAvNæringsinntektSiste4Kalenderår === YesOrNo.YES && (\n                                    <>\n                                        <Box margin=\"xl\">\n                                            <Form.DatePicker\n                                                name={VirksomhetFormField.varigEndringINæringsinntekt_dato}\n                                                label={getText('varig_endring_dato')}\n                                                validate={validateRequiredField}\n                                                minDate={date4YearsAgo}\n                                                maxDate={dateToday}\n                                            />\n                                        </Box>\n                                        <Box margin=\"xl\">\n                                            <Form.Input\n                                                name={\n                                                    VirksomhetFormField.varigEndringINæringsinntekt_inntektEtterEndring\n                                                }\n                                                label={getText('varig_endring_inntekt')}\n                                                type=\"number\"\n                                                maxLength={10}\n                                                max={MAKS_INNTEKT}\n                                                style={{ maxWidth: '10rem' }}\n                                                validate={validateRequiredNumber({ min: 0, max: MAKS_INNTEKT })}\n                                            />\n                                        </Box>\n                                        <Box margin=\"xl\">\n                                            <Form.Textarea\n                                                name={VirksomhetFormField.varigEndringINæringsinntekt_forklaring}\n                                                label={getText('varig_endring_tekst')}\n                                                validate={validateRequiredField}\n                                                maxLength={1000}\n                                            />\n                                        </Box>\n                                    </>\n                                )}\n                            </>\n                        )}\n\n                        {(values.fom || values.registrertINorge === YesOrNo.YES) && (\n                            <>\n                                <Box margin=\"xl\">\n                                    <Form.YesOrNoQuestion\n                                        name={VirksomhetFormField.harRegnskapsfører}\n                                        legend={getText('regnskapsfører_spm')}\n                                        validate={validateYesOrNoIsAnswered}\n                                    />\n                                </Box>\n\n                                {values.harRegnskapsfører === YesOrNo.YES && (\n                                    <FormBlock margin=\"m\">\n                                        <ResponsivePanel>\n                                            <Form.Input\n                                                name={VirksomhetFormField.regnskapsfører_navn}\n                                                label={getText('regnskapsfører_navn')}\n                                                validate={validateRequiredField}\n                                                maxLength={50}\n                                            />\n                                            <Box margin=\"xl\">\n                                                <Form.Input\n                                                    name={VirksomhetFormField.regnskapsfører_telefon}\n                                                    label={getText('regnskapsfører_telefon')}\n                                                    validate={validatePhoneNumber}\n                                                    maxLength={15}\n                                                />\n                                            </Box>\n                                        </ResponsivePanel>\n                                    </FormBlock>\n                                )}\n\n                                {values.harRegnskapsfører === YesOrNo.NO && hideRevisor === false && (\n                                    <>\n                                        <Box margin=\"xl\">\n                                            <Form.YesOrNoQuestion\n                                                name={VirksomhetFormField.harRevisor}\n                                                legend={getText('revisor_spm')}\n                                                validate={validateYesOrNoIsAnswered}\n                                            />\n                                        </Box>\n\n                                        {values.harRevisor === YesOrNo.YES && (\n                                            <FormBlock margin=\"m\">\n                                                <ResponsivePanel>\n                                                    <Form.Input\n                                                        name={VirksomhetFormField.revisor_navn}\n                                                        label={getText('revisor_navn')}\n                                                        validate={validateRequiredField}\n                                                        maxLength={50}\n                                                    />\n                                                    <Box margin=\"xl\">\n                                                        <Form.Input\n                                                            name={VirksomhetFormField.revisor_telefon}\n                                                            label={getText('revisor_telefon')}\n                                                            validate={validatePhoneNumber}\n                                                            maxLength={15}\n                                                        />\n                                                    </Box>\n                                                    <Box margin=\"xl\">\n                                                        <Form.YesOrNoQuestion\n                                                            name={VirksomhetFormField.kanInnhenteOpplsyningerFraRevisor}\n                                                            legend={getText('revisor_fullmakt')}\n                                                            validate={validateYesOrNoIsAnswered}\n                                                        />\n                                                    </Box>\n                                                </ResponsivePanel>\n                                            </FormBlock>\n                                        )}\n                                    </>\n                                )}\n                            </>\n                        )}\n                        {(values.harRegnskapsfører === YesOrNo.YES ||\n                            (values.harRevisor && values.harRevisor !== YesOrNo.UNANSWERED)) && (\n                            <Box margin=\"xl\">\n                                <CounsellorPanel>\n                                    {getText('veileder_innhenter_info.1')}\n                                    <br />\n                                    {getText('veileder_innhenter_info.2')}\n                                </CounsellorPanel>\n                            </Box>\n                        )}\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default VirksomhetForm;\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { Virksomhet } from './types';\nimport './virksomhetList.less';\n\ninterface Props {\n    virksomheter: Virksomhet[];\n    onEdit?: (virksomhet: Virksomhet) => void;\n    onDelete?: (virksomhet: Virksomhet) => void;\n}\n\nconst bem = bemUtils('virksomhetList');\n\nconst VirksomhetList = ({ virksomheter = [], onDelete, onEdit }: Props) => {\n    const næringLabel = (næring: Virksomhet): React.ReactNode => {\n        return (\n            <div className={bem.element('label')}>\n                <span className={bem.element('navn')}>\n                    {onEdit && <ActionLink onClick={() => onEdit(næring)}>{næring.navnPåVirksomheten}</ActionLink>}\n                    {!onEdit && <span>{næring.navnPåVirksomheten}</span>}\n                </span>\n            </div>\n        );\n    };\n\n    return (\n        <ItemList<Virksomhet>\n            getItemId={(næring) => næring.organisasjonsnummer}\n            getItemTitle={(næring) => næring.navnPåVirksomheten}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={næringLabel}\n            items={virksomheter.filter((næring) => næring.id !== undefined)}\n        />\n    );\n};\n\nexport default VirksomhetList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { FormikModalFormAndList, FormikValidateFunction, ModalFormAndListLabels } from '@navikt/sif-common-formik';\nimport { Virksomhet, VirksomhetHideFields } from './types';\nimport VirksomhetForm from './VirksomhetForm';\nimport VirksomhetListe from './VirksomhetList';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    validate?: FormikValidateFunction;\n    labels: ModalFormAndListLabels;\n    hideFormFields?: VirksomhetHideFields;\n    onAfterChange?: (virksomheter: Virksomhet[]) => void;\n}\n\nfunction VirksomhetListAndDialog<FieldNames>({\n    name,\n    validate,\n    labels,\n    hideFormFields,\n    onAfterChange,\n}: Props<FieldNames>) {\n    return (\n        <FormikModalFormAndList<FieldNames, Virksomhet>\n            name={name}\n            labels={labels}\n            validate={validate}\n            dialogWidth=\"narrow\"\n            sortFunc={sortItemsByFom}\n            formRenderer={({ onSubmit, onCancel, item }) => (\n                <VirksomhetForm\n                    virksomhet={item}\n                    onSubmit={onSubmit}\n                    onCancel={onCancel}\n                    hideFormFields={hideFormFields}\n                />\n            )}\n            listRenderer={({ items, onEdit, onDelete }) => (\n                <VirksomhetListe virksomheter={items} onEdit={onEdit} onDelete={onDelete} />\n            )}\n            onAfterChange={onAfterChange}\n        />\n    );\n}\n\nexport default VirksomhetListAndDialog;\n","/* eslint-disable @typescript-eslint/camelcase */\nimport React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { validateRequiredList } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { TypedFormikForm, TypedFormikWrapper, YesOrNo } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport Panel from 'nav-frontend-paneler';\nimport { Checkbox } from 'nav-frontend-skjema';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { mapVirksomhetToVirksomhetApiData } from '../../../forms/virksomhet/mapVirksomhetToApiData';\nimport { isVirksomhet, Næringstype, Virksomhet } from '../../../forms/virksomhet/types';\nimport VirksomhetForm from '../../../forms/virksomhet/VirksomhetForm';\nimport VirksomhetListAndDialog from '../../../forms/virksomhet/VirksomhetListAndDialog';\nimport PageIntro from '../../components/page-intro/PageIntro';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\n\nenum FormField {\n    'virksomheter' = 'virksomheter',\n}\n\nexport const mockVirksomhet: Virksomhet = {\n    id: '024782550-1402-01448-04932-71872390929312',\n    næringstyper: [Næringstype.ANNEN, Næringstype.DAGMAMMA],\n    navnPåVirksomheten: 'Gamle greier',\n    registrertINorge: YesOrNo.YES,\n    organisasjonsnummer: '123123123',\n    fom: new Date('2007-02-01T00:00:00.000Z'),\n    erPågående: true,\n    hattVarigEndringAvNæringsinntektSiste4Kalenderår: YesOrNo.YES,\n    varigEndringINæringsinntekt_dato: new Date('2019-12-09T00:00:00.000Z'),\n    varigEndringINæringsinntekt_inntektEtterEndring: 200000,\n    varigEndringINæringsinntekt_forklaring: 'Jeg fikk flere barn',\n    harRegnskapsfører: YesOrNo.YES,\n    harRevisor: YesOrNo.YES,\n    regnskapsfører_navn: 'Regnskapsefører Truls',\n    regnskapsfører_telefon: '98219409',\n};\n\ninterface FormValues {\n    [FormField.virksomheter]: Virksomhet[];\n}\nconst initialValues: FormValues = { virksomheter: [] };\n\nconst VirksomhetExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<Virksomhet> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const [hideFisker, setHideFisker] = useState<boolean>(false);\n    const [hideRevisor, setHideRevisor] = useState<boolean>(false);\n    const intl = useIntl();\n    return (\n        <>\n            <PageIntro title=\"Næringsvirksomhet\">Skjema som brukes for på registrere en næringsvirksomhet.</PageIntro>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                                <VirksomhetListAndDialog<FormField>\n                                    name={FormField.virksomheter}\n                                    validate={validateRequiredList}\n                                    hideFormFields={{ fiskerErPåBladB: hideFisker, harRevisor: hideRevisor }}\n                                    labels={{\n                                        addLabel: 'Legg til',\n                                        listTitle: 'Virksomhet',\n                                        modalTitle: 'Virksomhet',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n            <DialogFormWrapper width=\"wide\">\n                <Panel border={true}>\n                    <VirksomhetForm\n                        hideFormFields={{ fiskerErPåBladB: hideFisker, harRevisor: hideRevisor }}\n                        onCancel={() => setSingleFormValues({})}\n                        onSubmit={(values) => setSingleFormValues(values)}\n                    />\n                    <Box margin=\"l\">\n                        <hr />\n                        <Panel style={{ padding: '1rem' }}>\n                            <Box padBottom=\"m\">Spørsmål som kan skjules:</Box>\n                            <Box margin=\"m\">\n                                <Checkbox\n                                    label=\"Fisker på Blad B\"\n                                    checked={hideFisker}\n                                    onChange={(evt) => setHideFisker(evt.currentTarget.checked)}\n                                />\n                            </Box>\n                            <Box margin=\"m\">\n                                <Checkbox\n                                    label=\"Revisor\"\n                                    checked={hideRevisor}\n                                    onChange={(evt) => setHideRevisor(evt.currentTarget.checked)}\n                                />\n                            </Box>\n                        </Panel>\n                    </Box>\n                    <Box margin=\"l\">\n                        <SubmitPreview values={singleFormValues} />\n                    </Box>\n                    <Box margin=\"xl\">\n                        <Undertittel>API-data</Undertittel>\n                        <SubmitPreview\n                            values={\n                                singleFormValues && isVirksomhet(singleFormValues)\n                                    ? mapVirksomhetToVirksomhetApiData(intl.locale, singleFormValues)\n                                    : undefined\n                            }\n                        />\n                    </Box>\n                </Panel>\n            </DialogFormWrapper>\n        </>\n    );\n};\n\nexport default VirksomhetExample;\n","import React from 'react';\nimport PageIntro from './components/page-intro/PageIntro';\n\nconst Intro = () => (\n    <>\n        <PageIntro title=\"SIF-common guide\">\n            Dette er starten på en enkel guide til komponenter og konsepter i SIF-common, og som kan brukes i\n            søknadsapplikasjonene til kapittel 9. Vi legger det vi trenger, etter hvert som vi ser at vi trenger det :)\n        </PageIntro>\n    </>\n);\n\nexport default Intro;\n","import React from 'react';\nimport { MessageFileFormat } from '@navikt/sif-common-core/lib/dev-utils/intl/devIntlUtils';\nimport bostedUtlandMessages from '../../../forms/bosted-utland/bostedUtlandMessages';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport MessagePreviewExplanation from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagePreviewExplanation';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport ferieuttakMessages from '../../../forms/ferieuttak/ferieuttakMessages';\nimport fosterbarnMessages from '../../../forms/fosterbarn/fosterbarnMessages';\nimport fraværMessages from '../../../forms/fravær/fraværMessages';\nimport tidsperiodeMessages from '../../../forms/tidsperiode/tidsperiodeMessages';\nimport utenlandsoppholdMessages from '../../../forms/utenlandsopphold/utenlandsoppholdMessages';\nimport virksomhetMessages from '../../../forms/virksomhet/virksomhetMessages';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport annetBarnMessages from '../../../forms/annet-barn/annetBarnMessages';\n\nconst Texts = () => {\n    const formMessages: { title: string; messages: MessageFileFormat }[] = [];\n    formMessages.push({ title: 'Bosted utland', messages: bostedUtlandMessages });\n    formMessages.push({ title: 'Ferieuttak', messages: ferieuttakMessages });\n    formMessages.push({ title: 'Fosterbarn', messages: fosterbarnMessages });\n    formMessages.push({ title: 'Fravær', messages: fraværMessages });\n    formMessages.push({ title: 'Tidsperiode', messages: tidsperiodeMessages });\n    formMessages.push({ title: 'Utenlandsopphold', messages: utenlandsoppholdMessages });\n    formMessages.push({ title: 'Næringsvirksomhet (selvstendig næringsdrivende)', messages: virksomhetMessages });\n    formMessages.push({ title: 'Annet barn', messages: annetBarnMessages });\n    return (\n        <div>\n            <Box>\n                <MessagePreviewExplanation />\n            </Box>\n            {formMessages.map(({ title, messages }) => {\n                return (\n                    <div key={title}>\n                        <FormBlock margin=\"none\" paddingBottom=\"xl\">\n                            <MessagesPreview\n                                messages={messages}\n                                title={title}\n                                showExplanation={false}\n                                showMissingTextSummary={true}\n                            />\n                        </FormBlock>\n                    </div>\n                );\n            })}\n        </div>\n    );\n};\n\nexport default Texts;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport DialogForms from '../examples/dialog-forms/DialogForms';\nimport VirksomhetExample from '../examples/virksomhet-example/VirksomhetExample';\nimport Intro from '../Intro';\nimport Texts from '../examples/texts/Texts';\n\nexport interface RouteConfig {\n    path: string;\n    title: string;\n    renderContent: () => React.ReactNode;\n}\n\nexport const routes: RouteConfig[] = [\n    {\n        path: 'frontpage',\n        title: 'Forside',\n        renderContent: () => <Intro />,\n    },\n    {\n        path: 'dialog-forms',\n        title: 'Dialogskjema',\n        renderContent: () => <DialogForms />,\n    },\n    {\n        path: 'næring',\n        title: 'Næringsvirksomhet',\n        renderContent: () => <VirksomhetExample />,\n    },\n    {\n        path: 'texts',\n        title: 'Tekster',\n        renderContent: () => <Texts />,\n    },\n];\n\nexport const isActiveRoute = (path: string, pathname: string): boolean => {\n    return pathname.indexOf(path) >= 0;\n};\n\nexport const getRouteConfig = (pathname: string): RouteConfig | undefined => {\n    return routes.find((f) => isActiveRoute(f.path, pathname));\n};\n","import * as React from 'react';\nimport { Button, Menu, MenuItem, Wrapper } from 'react-aria-menubutton';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { NedChevron } from 'nav-frontend-chevron';\nimport { isActiveRoute, RouteConfig, routes } from '../../config/routeConfig';\nimport './headerMenu.less';\n\nconst renderMenuItem = (route: RouteConfig) => {\n    return (\n        <li key={route.path}>\n            <MenuItem className=\"headerMenu__menu__item\">\n                <div data-page={route.path}>{route.title}</div>\n            </MenuItem>\n        </li>\n    );\n};\n\ntype Props = RouteComponentProps;\n\nconst HeaderMenu = ({ history }: Props) => {\n    const {\n        location: { pathname },\n    } = history;\n\n    const toggle = (element: any) => {\n        const r = element.props ? element.props['data-page'] : undefined;\n        if (r) {\n            history.push(r);\n        }\n    };\n    const route = routes.find((r) => isActiveRoute(r.path, pathname)) || routes[0];\n    return (\n        <div className=\"headerMenu\">\n            <Wrapper className=\"headerMenu__wrapper\" onSelection={toggle}>\n                <Button className=\"headerMenu__button\">\n                    <div className=\"headerMenu__button__label\">{route ? route.title : 'Velg'}</div>\n                    <div className=\"headerMenu__button__chevron\">\n                        <NedChevron />\n                    </div>\n                </Button>\n                <Menu className=\"headerMenu__menu\">\n                    <ul>{routes.map(renderMenuItem)}</ul>\n                </Menu>\n            </Wrapper>\n        </div>\n    );\n};\nexport default withRouter(HeaderMenu);\n","import React from 'react';\nimport { Link, withRouter, RouteComponentProps } from 'react-router-dom';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport 'nav-frontend-lenker-style';\nimport { isActiveRoute, routes } from '../../config/routeConfig';\n\nconst lenkeBem = bemUtils('lenke');\n\nconst LeftMenu = ({\n    history: {\n        location: { pathname },\n    },\n}: RouteComponentProps) => {\n    return (\n        <div className=\"leftMenu\">\n            {routes.map((route) => (\n                <Link\n                    key={route.path}\n                    to={route.path}\n                    className={lenkeBem.classNames(\n                        lenkeBem.block,\n                        lenkeBem.modifierConditional('active', isActiveRoute(route.path, pathname))\n                    )}>\n                    {route.title}\n                </Link>\n            ))}\n        </div>\n    );\n};\n\nexport default withRouter(LeftMenu);\n","import React from 'react';\nimport MediaQuery from 'react-responsive';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport HeaderMenu from './components/header-menu/HeaderMenu';\nimport LeftMenu from './components/left-menu/LeftMenu';\nimport { getRouteConfig } from './config/routeConfig';\nimport Intro from './Intro';\n\ntype Props = RouteComponentProps;\n\nconst DevContent = ({\n    history: {\n        location: { pathname },\n    },\n}: Props) => {\n    const routeConfig = getRouteConfig(pathname);\n    return (\n        <>\n            <MediaQuery minWidth={1072}>\n                <aside className=\"asideContent\">\n                    <LeftMenu />\n                </aside>\n                <article style={{ maxWidth: '1000px' }} className=\"mainContent\">\n                    {routeConfig ? routeConfig.renderContent() : <Intro />}\n                </article>\n            </MediaQuery>\n            <MediaQuery maxWidth={1071}>\n                <aside className=\"asideContentTop\">\n                    <HeaderMenu />\n                </aside>\n                <article style={{ maxWidth: '1000px' }} className=\"mainContent\">\n                    {routeConfig ? routeConfig.renderContent() : <Intro />}\n                </article>\n            </MediaQuery>\n        </>\n    );\n};\n\nexport default withRouter(DevContent);\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { HashRouter } from 'react-router-dom';\nimport LanguageToggle from '@navikt/sif-common-core/lib/components/language-toggle/LanguageToggle';\nimport { Locale } from '@navikt/sif-common-core/lib/types/Locale';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport NAVLogo from './components/svg/NAVLogo';\nimport DevContent from './DevContent';\nimport './styles/dev.less';\n\ninterface Props {\n    onChangeLocale: (locale: Locale) => void;\n}\n\nconst DevPage = ({ onChangeLocale }: Props) => {\n    const intl = useIntl();\n    return (\n        <main className=\"devPage\">\n            <header className=\"header\">\n                <span className=\"navLogo\">\n                    <NAVLogo />\n                </span>\n                <span className=\"header__title\">\n                    <Systemtittel>Sykdom i familien - sif-common-forms</Systemtittel>\n                </span>\n                <span className=\"languageToggler\">\n                    <LanguageToggle toggle={onChangeLocale} locale={intl.locale as Locale} />\n                </span>\n            </header>\n            <div className=\"contentWrapper\">\n                <HashRouter>\n                    <DevContent />\n                </HashRouter>\n            </div>\n        </main>\n    );\n};\n\nexport default DevPage;\n","import * as React from 'react';\nimport '@formatjs/intl-pluralrules//locale-data/nb';\nimport '@formatjs/intl-pluralrules//locale-data/nn';\nimport '@formatjs/intl-pluralrules/polyfill';\nimport { Locale } from '@navikt/sif-common-core/lib/types/Locale';\nimport { getLocaleFromSessionStorage, setLocaleInSessionStorage } from '@navikt/sif-common-core/lib/utils/localeUtils';\nimport 'nav-frontend-skjema-style';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport AppIntlProvider from './dev/components/app-intl-provider/AppIntlProvider';\nimport DevPage from './dev/DevPage';\nimport '@navikt/sif-common-core/lib/styles/globalStyles.less';\n\nimport 'moment/locale/nb';\nimport 'moment/locale/nn';\n\nconst localeFromSessionStorage = getLocaleFromSessionStorage();\n\nconst App: React.FC = () => {\n    const [locale, setLocale] = React.useState(localeFromSessionStorage || 'nb');\n    return (\n        <Normaltekst tag=\"div\">\n            <AppIntlProvider locale={locale as Locale}>\n                <DevPage\n                    onChangeLocale={(l: Locale) => {\n                        setLocaleInSessionStorage(l);\n                        setLocale(l);\n                    }}\n                />\n            </AppIntlProvider>\n        </Normaltekst>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Modal from 'react-modal';\nimport App from './App';\n\nModal.setAppElement('#root');\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}