{"version":3,"sources":["forms/bosted-utland/bostedUtlandMessages.ts","forms/ferieuttak/ferieuttakMessages.ts","forms/fravær/fraværMessages.ts","forms/utenlandsopphold/utenlandsoppholdMessages.ts","forms/fosterbarn/fosterbarnMessages.ts","forms/virksomhet/virksomhetMessages.ts","forms/tidsperiode/tidsperiodeMessages.ts","forms/annet-barn/annetBarnMessages.ts","dev/components/app-intl-provider/messages.ts","dev/components/app-intl-provider/AppIntlProvider.tsx","dev/components/svg/NAVLogo.tsx","forms/bosted-utland/BostedUtlandForm.tsx","dev/components/page-intro/PageIntro.tsx","forms/utils/index.ts","forms/bosted-utland/bostedUtlandUtils.ts","forms/bosted-utland/BostedUtlandList.tsx","forms/bosted-utland/BostedUtlandListAndDialog.tsx","dev/components/submit-preview/SubmitPreview.tsx","dev/examples/dialog-forms/BostedUtlandExample.tsx","forms/ferieuttak/FerieuttakForm.tsx","forms/ferieuttak/ferieuttakUtils.ts","forms/ferieuttak/FerieuttakList.tsx","forms/ferieuttak/FerieuttakListAndDialog.tsx","dev/examples/dialog-forms/FerieuttakExample.tsx","forms/fosterbarn/FosterbarnForm.tsx","forms/fosterbarn/types.ts","forms/fosterbarn/FosterbarnList.tsx","forms/fosterbarn/FosterbarnListAndDialog.tsx","dev/examples/dialog-forms/FosterbarnExample.tsx","forms/tidsperiode/TidsperiodeForm.tsx","forms/tidsperiode/tidsperiodeUtils.ts","forms/tidsperiode/TidsperiodeList.tsx","forms/tidsperiode/TidsperiodeListAndDialog.tsx","dev/examples/dialog-forms/TidsperiodeExample.tsx","forms/utenlandsopphold/types.ts","forms/utenlandsopphold/utenlandsoppholdUtils.ts","forms/utenlandsopphold/UtenlandsoppholdForm.tsx","forms/utenlandsopphold/UtenlandsoppholdList.tsx","forms/utenlandsopphold/UtenlandsoppholdListAndDialog.tsx","dev/examples/dialog-forms/UtenlandsoppholdExample.tsx","forms/fravær/types.ts","forms/components/formatted-html-message/FormattedHtmlMessage.tsx","forms/fravær/fraværUtilities.ts","forms/fravær/fraværValidationUtils.ts","forms/fravær/FraværTimerSelect.tsx","forms/fravær/FraværDagForm.tsx","forms/fravær/fraværÅrsakRadios.ts","forms/fravær/ÅrsakInfo.tsx","forms/fravær/FraværListItem.tsx","forms/fravær/FraværDagerList.tsx","forms/fravær/FraværDagerListAndDialog.tsx","forms/fravær/FraværPeriodeForm.tsx","forms/fravær/FraværPerioderList.tsx","forms/fravær/FraværPerioderListAndDialog.tsx","dev/examples/dialog-forms/FraværExample.tsx","forms/annet-barn/AnnetBarnForm.tsx","forms/annet-barn/annetBarnUtils.ts","forms/annet-barn/AnnetBarnList.tsx","forms/annet-barn/AnnetBarnListAndDialog.tsx","dev/examples/dialog-forms/AnnetBarnExample.tsx","forms/virksomhet/types.ts","dev/examples/dialog-forms/DialogForms.tsx","forms/virksomhet/virksomhetUtils.ts","forms/virksomhet/mapVirksomhetToApiData.ts","forms/virksomhet/parts/InfoTilFisker.tsx","forms/virksomhet/VirksomhetForm.tsx","forms/virksomhet/VirksomhetList.tsx","forms/virksomhet/VirksomhetListAndDialog.tsx","dev/examples/virksomhet-example/VirksomhetExample.tsx","forms/selvstendig-næringsdrivende/types.ts","dev/Intro.tsx","dev/examples/texts/Texts.tsx","forms/selvstendig-næringsdrivende/parts/InfoTilFisker.tsx","forms/selvstendig-næringsdrivende/utils.ts","forms/selvstendig-næringsdrivende/SelvstendigNæringsdrivendeForm.tsx","forms/selvstendig-næringsdrivende/SelvstendigNæringsdrivendeInfoAndDialog.tsx","dev/examples/selvstendig-næringsdrivende-example/SelvstendigNæringsdrivendeExample.tsx","forms/selvstendig-næringsdrivende/mapFormDataToApiData.ts","dev/config/routeConfig.tsx","dev/components/header-menu/HeaderMenu.tsx","dev/components/left-menu/LeftMenu.tsx","dev/DevContent.tsx","dev/DevPage.tsx","App.tsx","index.tsx"],"names":["bostedUtlandMessages","nb","nn","ferieuttakMessages","getFraværÅrsakTekstKort","årsak","intl","intlHelper","fraværMessages","utenlandsoppholdMessages","fosterbarnMessages","virksomhetMessages","tidsperiodeMessages","annetBarnMessages","commonNb","require","commonNn","validationNb","validationNn","appMessages","AppIntlProvider","locale","onError","children","messages","dayjs","NAVLogo","BostedUtlandFormFields","props","className","width","viewBox","fill","fillRule","d","PageIntro","title","padBottom","margin","tag","mapFomTomToDateRange","from","fom","to","tom","bostedUtlandUtils","isValidBostedUtland","bosted","landkode","undefined","mapBostedUtlandToFormValues","dateToISOString","mapFormValuesToBostedUtland","formValues","id","guid","ISOStringToDate","Form","getTypedFormComponents","BostedUtlandForm","maxDate","minDate","alleBosteder","onSubmit","onCancel","useIntl","FormikWrapper","initialValues","bostedToSubmit","Error","renderForm","formik","values","fomDateLimits","tomDateLimits","andreBosteder","map","filter","b","fieldErrorRenderer","error","commonFieldErrorRenderer","DateRangePicker","legend","fullscreenOverlay","allowRangesToStartAndStopOnSameDate","disabledDateRanges","fromInputProps","name","label","validate","dateString","dateRangeValidation","validateFromDate","toInputProps","validateToDate","CountrySelect","validateRequiredSelect","bem","bemUtils","BostedUtlandList","bosteder","onDelete","onEdit","getItemId","opphold","getItemTitle","getCountryName","labelRenderer","navn","element","onClick","prettifyDateExtended","items","BostedUtlandListAndDialog","labels","dialogWidth","sortFunc","sortItemsByFom","formRenderer","item","allItems","listRenderer","SubmitPreview","FormField","style","borderTop","paddingTop","padding","fontSize","JSON","stringify","FerieuttakFormFields","FormikExample","useState","singleFormValues","setSingleFormValues","listFormValues","setListFormValues","border","includeButtons","submitButtonLabel","date1YearAgo","date1YearFromNow","validateRequiredList","addLabel","listTitle","modalTitle","emptyListText","console","log","showExplanation","ferieuttakUtils","isValidFerieuttak","ferieuttak","mapFerieuttakToFormValues","mapFormValuesToFerieuttak","FerieuttakForm","alleFerieuttak","defaultLabels","fromDate","toDate","intervalTitle","okButton","cancelButton","formLabels","andreFerieuttak","f","ferieuttakToSubmit","onChange","setTimeout","validateField","FerieuttakList","getDateTitleString","uttak","FerieuttakListAndDialog","FosterbarnFormField","ferie","FosterbarnForm","fosterbarn","fornavn","etternavn","fødselsnummer","text","includeName","defaultText","form_etternavn_label","form_fornavn_label","form_fødselsnummer_label","txt","hasValue","isFosterbarn","Input","validateFødselsnummer","inputMode","maxLength","columns","validateRequiredField","FosterbarnList","getBarnTitleString","barn","paddingRight","formatName","FosterbarnListAndDialog","texts","liste_legg_til_knapp","liste_tittel","modal_tittel","liste_tom_liste_tekst","TidsperiodeFormFields","FosterbarnExample","tidsperiodeUtils","isValidDateTidsperiode","tidsperiode","mapDateTidsperiodeToFormValues","mapFormValuesToDateTidsperiode","TidsperiodeForm","alleTidsperioder","inlineLabels","dateTidsperiodeToSubmit","t","TidsperiodeList","TidsperiodeListAndDialog","formTitle","UtenlandsoppholdÅrsak","TidsperiodeExample","UtenlandsoppholdFormFields","utenlandsoppholdUtils","isValidUtenlandsopphold","utenlandsopphold","mapFormValuesToUtenlandsopphold","barnInnlagtPerioder","mapUtenlandsoppholdToFormValues","erBarnetInnlagt","defaultFormValues","YesOrNo","UNANSWERED","UtenlandsoppholdForm","alleOpphold","registrerteTidsperioder","o","utils","utenlandsoppholdToSubmit","countryIsMemberOfEøsOrEfta","hasDateStringValues","fomDate","tomDate","includeInnlagtPerioderQuestion","YES","includeInnlagtQuestion","showÅrsakQuestion","length","areAllQuestionsAnswered","dayPickerProps","initialMonth","dateToday","YesOrNoQuestion","land","validateYesOrNoIsAnswered","RadioPanelGroup","radios","value","INNLAGT_DEKKET_NORGE","INNLAGT_DEKKET_ANNET_LAND","ANNET","UtenlandsoppholdList","UtenlandsoppholdListAndDialog","FraværÅrsak","UtenlandsoppholdExample","basicHtmlTagRenderers","li","strong","p","em","FormattedHtmlMessage","extend","isSameOrAfter","isSameOrBefore","Weekday","fraværDagToFraværDateRange","fraværDag","dato","fraværPeriodeToDateRange","fraOgMed","tilOgMed","FraværFieldValidationErrors","getWeekdayName","date","getDay","sunday","monday","tuesday","wednesday","thursday","friday","saturday","rangeCollideWithRanges","range","ranges","some","periode","fromDay","toDay","isBefore","isAfter","dateCollideWithRanges","timeText","timer","toMaybeNumber","timerArbeidsdag","isString","parseFloat","getHjemmePgaKoronaFormValueFromFraværÅrsak","smittevernhensyn","stengtSkoleBhg","NO","getÅrsakFromFraværFormValues","hjemmePgaKorona","ordinært","mapFraværDagToFormValues","timerFravær","mapFraværPeriodeToFormValues","fraværPeriode","getOptionsList","maksTid","newOptionElement","toString","replace","go","jsxList","tid","FraværTimerSelect","FraværDagForm","Select","bredde","FraværDagFormFields","validateAll","validations","reduce","prev","curr","validateErSammeÅr","maybeDateFrom","maybeDateTo","getFullYear","createFieldValidationError","fra_og_til_er_ulike_år","validateNotHelgedag","maybeDate","dateErHelg","er_helg","validateNoCollisions","fraværDager","fraværPerioder","allFraværDagDateRanges","allFraværPeriodeDateRanges","hasDateCollision","dag","rangesWithoutCurrentDag","hasRangeCollision","rangesWithoutCurrentPeriode","dager_overlapper_med_andre_dager","getFraværÅrsakRadios","ÅrsakInfo","marginTop","FraværDagFormView","dagDescription","dateRangesToDisable","helgedagerIkkeTillatt","maksArbeidstidPerDag","headerContent","ok","avbryt","tittel","antallArbeidstimer","fraværÅrsakRadios","isSame","fraværDagToSubmit","mapFormValuesToFraværDag","isFraværDag","maybeMaxValue","valgtDato","datepickerUtils","getDateFromDateString","datepickerProps","disableWeekend","validateDateInRange","dato_kolliderer_med_annet_fravær","validateFraværDagCollision","DatePicker","description","maybeValue","maybeValueFloat","fravær_timer_mer_enn_arbeidstimer","FraværListItem","FraværDagerList","getFraværDagListItemTitle","FraværDagerListAndDialog","FraværPeriodeFormFields","formHeaderContent","fraværDagA","fraværDagB","FraværPeriodeForm","periodeDescription","helgedagerIkkeTillat","begrensTilSammeÅr","tidsrom","fraværPeriodeToSubmit","mapFormValuesToFraværPeriode","isFraværPeriode","DateIntervalPicker","validateFraværPeriodeCollision","fromDatepickerProps","fra_dato_kolliderer_med_annet_fravær","validateFraOgMedForCollision","toDatepickerProps","til_dato_kolliderer_med_annet_fravær","validateTilOgMedForCollision","FraværPerioderList","useTrashcan","FraværPerioderListAndDialog","fraværPeriodeA","fraværPeriodeB","AnnetBarnFormFields","perioder","dager","FraværExample","fraværPeriodeSingleFormValues","setFraværPeriodeSingleFormValues","fraværDagSingleFormValues","setFraværDagSingleFormValues","annetBarnUtils","mapAnnetBarnToFormValues","annetBarn","includeFødselsdatoSpørsmål","fnr","fødselsdato","mapFormValuesToPartialAnnetBarn","isAnnetBarn","AnnetBarnForm","annetBarnToSubmit","placeholder","placeholderNavn","aldersGrenseText","showYearSelector","placeholderFnr","AnnetBarnList","includeFødselsdato","prettifyDate","AnnetBarnListAndDialog","Næringstype","VirksomhetFormField","AnnetBarnExample","inkluderFødselsdatoSpørsmål","setInkluderFødselsdatoSpørsmål","checked","evt","target","date4YearsAgo","tabRoutes","path","renderContent","BostedUtlandExample","FerieuttakExample","DialogForms","setPath","activeRoute","find","r","idx","tabs","active","isVirksomhet","virksomhet","harFiskerNæringstype","næringstyper","n","FISKER","erVirksomhetRegnetSomNyoppstartet","oppstartsdato","startOf","mapVirksomhetToFormValues","varigEndringINæringsinntekt_dato","mapVirksomhetToVirksomhetApiData","harBesvartFikserPåBladB","registrertINorge","harRegnskapsfører","data","navnPåVirksomheten","organisasjonsnummer","registrertIUtlandet","registrertILand","landnavn","formatDateToApiFormat","erPågående","næringsinntekt","erNyoppstartet","hattVarigEndringAvNæringsinntektSiste4Kalenderår","harHatt","varigEndringINæringsinntekt_forklaring","varigEndringINæringsinntekt_inntektEtterEndring","varigEndring","forklaring","inntektEtterEndring","fiskerErPåBladB","harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene","yrkesaktivSisteTreFerdigliknedeÅrene","regnskapsfører_navn","regnskapsfører_telefon","regnskapsfører","telefon","harRevisor","revisor_navn","revisor_telefon","revisor","kanInnhenteOpplysninger","kanInnhenteOpplsyningerFraRevisor","InfoTilFisker","MAKS_INNTEKT","ensureValidNæringsinntekt","visNæringsinntekt","VirksomhetForm","hideFormFields","skipOrgNumValidation","getText","key","hideFiskerPåBladB","hideRevisor","virksomhetToSubmit","setFieldValue","includeValidationSummary","CheckboxPanelGroup","checkboxes","JORDBRUK","DAGMAMMA","ANNEN","useAlpha3Code","maxWidth","validateOrgNumber","disabled","Checkbox","afterOnChange","type","max","validateRequiredNumber","min","date3YearsAgo","Textarea","validatePhoneNumber","VirksomhetList","virksomheter","næring","VirksomhetListAndDialog","onAfterChange","Date","SelvstendigNæringsdrivendeFormField","VirksomhetExample","hideFisker","setHideFisker","setHideRevisor","currentTarget","Intro","Texts","formMessages","push","paddingBottom","showMissingTextSummary","isSelvstendigNæringsdrivende","info","mapSelvstendigNæringsdrivendeToFormValues","SelvstendigNæringsdrivendeForm","SelvstendigNæringsdrivendeInfoAndDialog","mapFormDataToApiData","SelvstendigNæringsdrivendeExample","routes","isActiveRoute","pathname","indexOf","renderMenuItem","route","data-page","withRouter","history","location","onSelection","lenkeBem","classNames","block","modifierConditional","routeConfig","getRouteConfig","minWidth","DevPage","onChangeLocale","toggle","localeFromSessionStorage","getLocaleFromSessionStorage","App","React","setLocale","l","setLocaleInSessionStorage","Modal","setAppElement","ReactDOM","render","document","getElementById"],"mappings":"qZAuBeA,EAvBc,CACzBC,GAAI,CACA,wBAAyB,mBACzB,2BAA4B,mBAC5B,oCAAqC,cACrC,wCAAyC,aACzC,wCAAyC,aACzC,6BAA8B,YAC9B,uBAAwB,WACxB,2BAA4B,UAEhCC,GAAI,CACA,wBAAyB,mBACzB,2BAA4B,mBAC5B,oCAAqC,cACrC,wCAAyC,gBACzC,wCAAyC,aACzC,6BAA8B,YAC9B,uBAAwB,WACxB,2BAA4B,WCQrBC,EA3BY,CACvBF,GAAI,CACA,wBAAyB,2BACzB,2BAA4B,aAC5B,yBAA0B,aAC1B,gCAAiC,eACjC,2BAA4B,KAC5B,+BAAgC,SAChC,sCAAuC,uBACvC,8CAA+C,kEAC/C,iDAAkD,mDAClD,kDAAmD,mDAEvDC,GAAI,CACA,wBAAyB,2BACzB,2BAA4B,gBAC5B,yBAA0B,aAC1B,gCAAiC,eACjC,2BAA4B,KAC5B,+BAAgC,SAChC,sCAAuC,uBACvC,8CAA+C,kEAC/C,iDAAkD,mDAClD,kDAAmD,oD,gBCkE9CE,EAA0B,SAACC,EAAoBC,GACxD,OAAOC,IAAWD,EAAD,6BAAuBD,EAAvB,WAGNG,EAzFQ,CACnBP,GAAI,CACA,kDAA6C,iEAC7C,sCACI,gHACJ,uDAAkD,yBAClD,2CAAsC,8BAEtC,0BAAqB,4BACrB,qCAAmC,uBACnC,6CAA2C,kEAC3C,gDAA8C,mDAC9C,iDAA+C,kDAC/C,sDAAiD,8CACjD,uDACI,mGACJ,oCAAkC,yCAClC,mDACI,kFACJ,0DACI,qEACJ,0DACI,qEACJ,sDAAoD,0DACpD,yBAA0B,6CAC1B,4BACI,0VACJ,uBAAqB,gEACrB,uBAAoB,6QACpB,uBAAoB,YACpB,uBAAoB,mPAEpB,wCACI,2IACJ,iCAA4B,kFAC5B,2BAAyB,KACzB,+BAA6B,SAC7B,gCAA8B,iCAC9B,iCAA+B,eAC/B,6BAA2B,aAC3B,6BAA2B,aAC3B,4BAA0B,oCAC1B,0BAAwB,OACxB,wCAAsC,+CACtC,oCAA+B,kDAEnCC,GAAI,CACA,0BAAqB,4BACrB,qCAAmC,uBACnC,6CAA2C,kEAC3C,gDAA8C,uDAC9C,iDAA+C,sDAC/C,sDAAiD,0CACjD,mDACI,mFACJ,0DACI,2EACJ,0DACI,wEACJ,sDAAoD,6DACpD,uDACI,8GACJ,oCAAkC,wCAElC,kDAA6C,gEAC7C,sCACI,gHACJ,2CAAgC,wBAChC,uDAAkD,yBAClD,2CAAsC,8BACtC,gDAAqC,wBACrC,yBAA0B,6CAC1B,4BACI,0VACJ,uBAAqB,gEACrB,uBAAoB,6QACpB,uBAAoB,YACpB,uBAAoB,qPClCbO,EA/CkB,CAC7BR,GAAI,CACA,4BAA6B,qBAC7B,+BAAgC,mBAChC,wCAAyC,iCACzC,4CAA6C,aAC7C,4CAA6C,aAC7C,iCAAkC,YAClC,4CAA6C,sEAC7C,yDAA0D,4BAC1D,wDAAyD,qCACzD,0DAA2D,+BAC3D,yDAA0D,+BAC1D,qCAAmC,6CACnC,+FACI,8BACJ,kHACI,uCACJ,uCAAqC,4BACrC,+CAA6C,4BAC7C,2BAA4B,WAC5B,+BAAgC,UAEpCC,GAAI,CACA,4BAA6B,mBAC7B,+BAAgC,mBAChC,wCAAyC,cACzC,4CAA6C,gBAC7C,4CAA6C,aAC7C,iCAAkC,WAClC,4CAA6C,mEAC7C,yDAA0D,6BAC1D,wDAAyD,sCACzD,0DAA2D,uCAC3D,yDAA0D,uCAC1D,qCAAmC,gDACnC,+FACI,8BACJ,kHACI,uCACJ,uCAAqC,gCACrC,+CAA6C,gCAC7C,2BAA4B,WAC5B,+BAAgC,WCxBzBQ,EAnBY,CACvBT,GAAI,CACA,kCAAmC,YACnC,gCAAiC,UACjC,yCAAuC,mBACvC,iCAAkC,sBAClC,yBAA0B,yBAC1B,0BAA2B,cAE/BC,GAAI,CACA,kCAAmC,YACnC,gCAAiC,UACjC,yCAAuC,mBACvC,iCAAkC,sBAClC,yBAA0B,yBAC1B,0BAA2B,eCgFpBS,EA/FY,CACvBV,GAAI,CACA,4CAA0C,SAC1C,gDAA8C,aAC9C,8CAA4C,8CAC5C,2CAAyC,QACzC,iCAAkC,mCAClC,8CAA+C,kCAC/C,6CAA8C,0BAC9C,oCAAqC,6BACrC,sCAAsC,iMACtC,wCAAwC,gDACxC,+CAA+C,8DAC/C,0CAA2C,gCAC3C,gCAAgC,6CAChC,mCAAoC,YACpC,mCAAoC,sBACpC,8CAAyC,oBACzC,wCACI,kNACJ,6CACI,+FACJ,mDAAiD,+BACjD,2CACI,gFACJ,sDAAuD,mBACvD,gDACI,+HACJ,gDAAiD,kDACjD,wCACI,0HACJ,yCAA0C,2BAC1C,4CACI,sFACJ,0CACI,mHACJ,4CAA0C,4BAC1C,6CAA2C,qCAC3C,gDAA8C,8CAC9C,kCAAmC,kBACnC,mCAAoC,2BACpC,sCAAuC,oCACvC,uCAAwC,0EACxC,gDACI,uFACJ,gDAAiD,8DAErDC,GAAI,CACA,4CAA0C,SAC1C,gDAA8C,aAC9C,8CAA4C,+CAC5C,2CAAyC,OACzC,iCAAkC,+BAClC,8CAA+C,4BAC/C,6CAA8C,wBAC9C,oCAAqC,6BACrC,sCAAsC,8LACtC,wCAAwC,gDACxC,+CAA+C,oDAC/C,0CAA2C,gCAC3C,gCAAgC,4CAChC,mCAAoC,YACpC,mCAAoC,sBACpC,8CAAyC,YACzC,wCACI,oNACJ,6CACI,4FACJ,mDAAiD,+BACjD,2CACI,6EACJ,sDAAuD,mBACvD,gDACI,+HACJ,gDAAiD,qDACjD,wCACI,yHACJ,yCAA0C,6BAC1C,4CACI,qFACJ,0CACI,mHACJ,4CAA0C,6BAC1C,6CAA2C,yCAC3C,gDAA8C,kDAC9C,kCAAmC,kBACnC,mCAAoC,8BACpC,sCAAuC,uCACvC,uCACI,gFACJ,gDACI,qFACJ,gDAAiD,+DCnE1CU,EAzBa,CACxBX,GAAI,CACA,yBAA0B,cAC1B,4BAA6B,aAC7B,0BAA2B,aAC3B,4BAA6B,KAC7B,gCAAiC,SACjC,uCAAwC,uBACxC,+CAAgD,kEAChD,kDAAmD,mDACnD,mDAAoD,mDAExDC,GAAI,CACA,yBAA0B,cAC1B,4BAA6B,gBAC7B,0BAA2B,aAC3B,4BAA6B,KAC7B,gCAAiC,SACjC,uCAAwC,uBACxC,+CAAgD,kEAChD,kDAAmD,uDACnD,mDAAoD,sDCE7CW,EAvBW,CACtBZ,GAAI,CACA,uBAAwB,gBACxB,qBAAsB,oCACtB,gCAA8B,yBAC9B,sBAAuB,eACvB,0BAA2B,KAC3B,8BAA+B,SAC/B,qCAAsC,uBACtC,yBAAuB,WAE3BC,GAAI,CACA,uBAAwB,gBACxB,qBAAsB,oCACtB,gCAA8B,yBAC9B,sBAAuB,eACvB,0BAA2B,KAC3B,8BAA+B,SAC/B,qCAAsC,uBACtC,yBAAuB,YCVzBY,EAAWC,EAAQ,KACnBC,EAAWD,EAAQ,KACnBE,EAAeF,EAAQ,KACvBG,EAAeH,EAAQ,KA4BhBI,EAAc,CACvBlB,GA3BgB,2HACba,GACAG,GACAjB,EAAqBC,IACrBO,EAAeP,IACfE,EAAmBF,IACnBS,EAAmBT,IACnBQ,EAAyBR,IACzBW,EAAoBX,IACpBU,EAAmBV,IACnBY,EAAkBZ,IAkBrBC,GAfgB,2HACbc,GACAE,GACAlB,EAAqBE,IACrBM,EAAeN,IACfC,EAAmBD,IACnBQ,EAAmBR,IACnBO,EAAyBP,IACzBU,EAAoBV,IACpBS,EAAmBT,IACnBW,EAAkBX,K,wBC5BzBa,EAAQ,KACRA,EAAQ,KAQR,IAUeK,EAVS,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,OAAQC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,SAClCC,EAAsB,OAAXH,EAAkBF,EAAYlB,GAAKkB,EAAYjB,GAEhE,OADAuB,IAAMJ,OAAkB,OAAXA,EAAkB,KAAO,MAElC,cAAC,IAAD,CAAcA,OAAQA,EAAQG,SAAUA,EAAUF,QAASA,EAA3D,SACKC,K,kCCJEG,ICOVC,EDPUD,EAjBf,SAAiBE,GACb,OACI,6CAAKC,UAAU,kBAAkBC,MAAO,GAAIC,QAAQ,eAAkBH,GAAtE,aACI,oBAAGI,KAAK,OAAOC,SAAS,UAAxB,UACI,sBACID,KAAK,UACLE,EAAE,0SAEN,sBACIF,KAAK,UACLE,EAAE,soC,oFEQPC,EAXG,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOb,EAAV,EAAUA,SAAV,OACd,mCACI,eAAC,IAAD,CAAKc,UAAU,KAAKC,OAAO,IAA3B,UACI,cAAC,IAAD,CAAKD,UAAWd,EAAW,IAAM,OAAjC,SACI,cAAC,cAAD,UAAca,MAEjBb,GAAY,cAAC,UAAD,CAASgB,IAAI,MAAb,SAAoBhB,U,yICZhCiB,GAAuB,SAAC,GAAD,MAA+C,CAC/EC,KADgC,EAAGC,IAEnCC,GAFgC,EAAQC,M,SCgC7BC,GANW,CACtBC,oBA1BwB,SAACC,GAA2D,IAC5EL,EAAuBK,EAAvBL,IAAKM,EAAkBD,EAAlBC,SAAUJ,EAAQG,EAARH,IACvB,YAAeK,IAARP,QAAkCO,IAAbD,QAAkCC,IAARL,GAyBtDM,4BAVgC,SAAC,GAA2E,IAAzER,EAAwE,EAAxEA,IAAKE,EAAmE,EAAnEA,IAAKI,EAA8D,EAA9DA,SAC7C,MAAO,CACHN,IAAKS,2BAAgBT,GACrBE,IAAKO,2BAAgBP,GACrBI,aAOJI,4BAvBgC,SAChCC,EACAC,GAEA,MAAO,CACHA,GAAIA,GAAMC,kBACVb,IAAKc,2BAAgBH,EAAWX,KAChCE,IAAKY,2BAAgBH,EAAWT,KAChCI,SAAUK,EAAWL,a,SHSxBrB,K,UAAAA,E,UAAAA,E,qBAAAA,M,KAUL,IAAM8B,GAAOC,oCAwFEC,GAtFU,SAAC,GAAgF,IAA9EC,EAA6E,EAA7EA,QAASC,EAAoE,EAApEA,QAASd,EAA2D,EAA3DA,OAA2D,IAAnDe,oBAAmD,MAApC,GAAoC,EAAhCC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,SACzE1D,EAAO2D,cAWb,OACI,cAACR,GAAKS,cAAN,CACIC,cAAetB,GAAkBK,4BAA4BH,GAAU,IACvEgB,SAZe,SAACV,GACpB,IAAMe,EAAiBvB,GAAkBO,4BAA4BC,EAA9C,OAA0DN,QAA1D,IAA0DA,OAA1D,EAA0DA,EAAQO,IACzF,IAAIT,GAAkBC,oBAAoBsB,GAGtC,MAAM,IAAIC,MAAM,uEAFhBN,EAASK,IAUTE,WAAY,SAACC,GAAY,IACbC,EAAWD,EAAXC,OACFC,EAA4B,CAC9BZ,UACAD,QAASJ,2BAAgBgB,EAAO5B,MAAQgB,GAEtCc,EAA4B,CAC9Bb,QAASL,2BAAgBgB,EAAO9B,MAAQmB,EACxCD,QAASA,GAGPe,OACS1B,IAAXF,EACMe,EAAac,IAAIpC,IACjBsB,EAAae,QAAO,SAACC,GAAD,OAAOA,EAAExB,KAAOP,EAAOO,MAAIsB,IAAIpC,IAE7D,OACI,eAACiB,GAAKA,KAAN,CACIO,SAAUA,EACVe,mBAAoB,SAACC,GAAD,OAAWC,mCAAyB3E,EAAM0E,IAFlE,UAGI,cAAC,eAAD,CAAczC,IAAI,KAAlB,SACI,cAAC,KAAD,CAAkBe,GAAG,+BAGzB,cAAC,KAAD,UACI,cAACG,GAAKyB,gBAAN,CACIC,OAAQ5E,IAAWD,EAAM,qCACzB8E,mBAAmB,EACnBvB,QAASA,EACTD,QAASA,EACTyB,qCAAqC,EACrCC,mBAAoBX,EACpBY,eAAgB,CACZC,KAAM7D,EAAuBe,IAC7B+C,MAAOlF,IAAWD,EAAM,yCACxBoF,SAAU,SAACC,GAAD,OACNC,KAAoBC,iBAChBrC,2BAAgBmC,GAChBlB,EAAcZ,QACdY,EAAcb,QACdJ,2BAAgBgB,EAAO5B,QAGnCkD,aAAc,CACVN,KAAM7D,EAAuBiB,IAC7B6C,MAAOlF,IAAWD,EAAM,yCACxBoF,SAAU,SAACC,GAAD,OACNC,KAAoBG,eAChBvC,2BAAgBmC,GAChBjB,EAAcb,QACda,EAAcd,QACdJ,2BAAgBgB,EAAO9B,YAK3C,cAAC,KAAD,UACI,cAACe,GAAKuC,cAAN,CACIR,KAAM7D,EAAuBqB,SAC7ByC,MAAOlF,IAAWD,EAAM,8BACxBoF,SAAUO,oC,4DIlGpCC,I,OAAMC,KAAS,qBA+BNC,GA7BU,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,SAAUC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,OACtCjG,EAAO2D,cAgBb,OACI,cAAC,KAAD,CACIuC,UAAW,SAACC,GAAD,OAAaA,EAAQnD,IAChCoD,aAAc,SAACD,GAAD,OAAaE,0BAAeF,EAAQzD,SAAU1C,EAAKe,SACjEiF,SAAUA,EACVC,OAAQA,EACRK,cArBwB,SAACH,GAC7B,IAAMI,EAAOF,0BAAeF,EAAQzD,SAAU1C,EAAKe,QACnD,OACI,sBAAKQ,UAAWqE,GAAIY,QAAQ,SAA5B,UACI,uBAAMjF,UAAWqE,GAAIY,QAAQ,QAA7B,UACKP,GAAU,cAAC,KAAD,CAAYQ,QAAS,kBAAMR,EAAOE,IAAlC,SAA6CI,KACtDN,GAAU,+BAAOM,OAEvB,uBAAMhF,UAAWqE,GAAIY,QAAQ,QAA7B,UACKE,+BAAqBP,EAAQ/D,KADlC,MAC2CsE,+BAAqBP,EAAQ7D,YAa5EqE,MAAOZ,KCFJa,OAzBf,YAAiH,IAAhE1B,EAA+D,EAA/DA,KAAM3B,EAAyD,EAAzDA,QAASD,EAAgD,EAAhDA,QAAS8B,EAAuC,EAAvCA,SAAUyB,EAA6B,EAA7BA,OAC/E,OACI,cAAC,0BAAD,CACI3B,KAAMA,EACN2B,OAAQA,EACRzB,SAAUA,EACV0B,YAAY,SACZC,SAAUC,iBACVC,aAAc,gBAAGxD,EAAH,EAAGA,SAAUC,EAAb,EAAaA,SAAUwD,EAAvB,EAAuBA,KAAMC,EAA7B,EAA6BA,SAA7B,OACV,cAAC,GAAD,CACI1E,OAAQyE,EACR1D,aAAc2D,EACd5D,QAASA,EACTD,QAASA,EACTG,SAAUA,EACVC,SAAUA,KAGlB0D,aAAc,gBAAGT,EAAH,EAAGA,MAAOV,EAAV,EAAUA,OAAQD,EAAlB,EAAkBA,SAAlB,OACV,cAAC,GAAD,CAAmBD,SAAUY,EAAOV,OAAQA,EAAQD,SAAUA,QCT/DqB,ICPVC,GDOUD,GAjBf,YAA2C,IAAlBnD,EAAiB,EAAjBA,OACrB,OACI,cAAC,IAAD,CAAKlC,OAAO,KAAZ,SACI,qBAAKuF,MAAO,CAAEC,UAAW,qBAAsBC,WAAY,OAAQzF,OAAQ,WAA3E,SACI,eAAC,IAAD,CAAKA,OAAO,IAAZ,UACKkC,GACG,cAAC,KAAD,CAAOqD,MAAO,CAAEG,QAAS,QAAzB,SACI,qBAAKH,MAAO,CAAEvF,OAAQ,EAAG2F,SAAU,SAAnC,SAA+CC,KAAKC,UAAU3D,EAAQ,KAAM,YAGxEvB,IAAXuB,GAAwB,cAAC,KAAD,CAAOqD,MAAO,CAAEG,QAAS,QAAzB,iC,SCAxCJ,K,iBAAAA,Q,KAOL,ICOKQ,GDPCjE,GAA4B,CAAEpB,OAAQ,IA+D7BsF,GA7DO,WAAO,IAAD,EACwBC,wBAA4CrF,GADpE,mBACjBsF,EADiB,KACCC,EADD,OAEoBF,wBAA0CrF,GAF9D,mBAEjBwF,EAFiB,KAEDC,EAFC,KAGlBpI,EAAO2D,cACb,OACI,qCACI,cAAC,IAAD,CAAK5B,UAAU,IAAf,SACI,cAAC,cAAD,gCAEJ,eAAC,KAAD,CAAOsG,QAAQ,EAAf,UACI,cAAC,sBAAD,CACIxE,cAAeA,GACfJ,SAAU2E,EACVpE,WAAY,WACR,OACI,cAAC,mBAAD,CACIsE,gBAAgB,EAChBC,kBAAkB,iBAClB9D,mBAAoB,SAACC,GAAD,OAAWC,mCAAyB3E,EAAM0E,IAHlE,SAII,cAAC,GAAD,CACIQ,KAAMoC,GAAU7E,OAChBc,QAASiF,eACTlF,QAASmF,mBACTrD,SAAUsD,uBACV7B,OAAQ,CACJ8B,SAAU,kBACVC,UAAW,uBACXC,WAAY,SACZC,cAAe,qCAOvC,cAAC,GAAD,CAAe5E,OAAQiE,OAG3B,cAAC,IAAD,CAAKnG,OAAO,MAAMD,UAAU,IAA5B,SACI,cAAC,cAAD,2BAGJ,cAAC,IAAD,CAAKC,OAAO,MAAMD,UAAU,IAA5B,SACI,eAAC,KAAD,WACI,cAAC,KAAD,CAAOsG,QAAQ,EAAf,SACI,cAAC,GAAD,CACI9E,QAASiF,eACTlF,QAASmF,mBACThF,SAAUyE,EACVxE,SAAU,kBAAMqF,QAAQC,IAAI,kBAGpC,cAAC,GAAD,CAAe9E,OAAQ+D,SAI/B,cAAC,IAAD,CAAiB/G,SAAUxB,EAAsBuJ,iBAAiB,QEtD/DC,GANS,CACpBC,kBApB6B,SAACC,GAC9B,YAA0BzG,IAAnByG,EAAWhH,UAAwCO,IAAnByG,EAAW9G,KAoBlD+G,0BAT8B,SAAC,GAA6D,IAA3DjH,EAA0D,EAA1DA,IAAKE,EAAqD,EAArDA,IACtC,MAAO,CACHF,IAAKS,2BAAgBT,GACrBE,IAAKO,2BAAgBP,KAOzBgH,0BAlB8B,SAACvG,EAAkCC,GACjE,MAAO,CACHA,GAAIA,GAAMC,kBACVb,IAAKc,2BAAgBH,EAAWX,KAChCE,IAAKY,2BAAgBH,EAAWT,S,SDoBnCwF,K,UAAAA,E,WAAAA,Q,KAKL,IAAM3E,GAAOC,oCAwFEmG,GAtFQ,SAAC,GAA8F,IAA5FjG,EAA2F,EAA3FA,QAASC,EAAkF,EAAlFA,QAASsD,EAAyE,EAAzEA,OAAQuC,EAAiE,EAAjEA,WAAiE,IAArDI,sBAAqD,MAApC,GAAoC,EAAhC/F,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,SACrF1D,EAAO2D,cAUP8F,EAAsC,CACxC3H,MAAO7B,IAAWD,EAAM,yBACxB0J,SAAUzJ,IAAWD,EAAM,4BAC3B2J,OAAQ1J,IAAWD,EAAM,0BACzB4J,cAAe3J,IAAWD,EAAM,iCAChC6J,SAAU5J,IAAWD,EAAM,4BAC3B8J,aAAc7J,IAAWD,EAAM,iCAG7B+J,EAAgC,2BAAQN,GAAkB5C,GAE1DmD,OACarH,IAAfyG,EACMI,EAAelF,IAAIpC,IACnBsH,EAAejF,QAAO,SAAC0F,GAAD,OAAOA,EAAEjH,KAAOoG,EAAWpG,MAAIsB,IAAIpC,IAEnE,OACI,mCACI,cAAC,GAAK0B,cAAN,CACIC,cAAeqF,GAAgBG,0BAA0BD,GAAc,IACvE3F,SA7BW,SAACV,GACpB,IAAMmH,EAAqBhB,GAAgBI,0BAA0BvG,EAA1C,OAAsDqG,QAAtD,IAAsDA,OAAtD,EAAsDA,EAAYpG,IAC7F,IAAIkG,GAAgBC,kBAAkBe,GAGlC,MAAM,IAAInG,MAAM,mEAFhBN,EAAS,2BAAK2F,GAAec,KA2BzBlG,WAAY,SAACC,GAAD,OACR,eAAC,GAAKd,KAAN,CACIO,SAAUA,EACVe,mBAAoB,SAACC,GAAD,OAAWC,mCAAyB3E,EAAM0E,IAFlE,UAGI,cAAC,eAAD,CAAczC,IAAI,KAAlB,SAAwB8H,EAAWjI,QACnC,cAAC,KAAD,UACI,cAAC,GAAK8C,gBAAN,CACIC,OAAQkF,EAAWH,cACnB9E,mBAAmB,EACnBvB,QAASA,EACTD,QAASA,EACTyB,qCAAqC,EACrCC,mBAAoBgF,EACpB/E,eAAgB,CACZE,MAAO4E,EAAWL,SAClBxE,KAAM4C,GAAqB1F,IAC3BgD,SAAU,SAACC,GAAD,OACNC,KAAoBC,iBAChBrC,2BAAgBmC,GAChB9B,EACAD,EACAJ,2BAAgBe,EAAOC,OAAO5B,OAEtC6H,SAAU,WACNC,YAAW,WACPnG,EAAOoG,cAAcvC,GAAqBxF,UAItDkD,aAAc,CACVL,MAAO4E,EAAWJ,OAClBzE,KAAM4C,GAAqBxF,IAC3B8C,SAAU,SAACC,GAAD,OACNC,KAAoBG,eAChBvC,2BAAgBmC,GAChB9B,EACAD,EACAJ,2BAAgBe,EAAOC,OAAO9B,OAEtC+H,SAAU,WACNC,YAAW,WACPnG,EAAOoG,cAAcvC,GAAqB1F,uBE1EvEkI,GA1BQ,SAAC,GAAkD,IAAD,IAA/ClB,kBAA+C,MAAlC,GAAkC,EAA9BpD,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,OAC3CsE,EAAqB,SAACC,GAAD,gBACpB9D,+BAAqB8D,EAAMpI,KADP,cACiBsE,+BAAqB8D,EAAMlI,OAYvE,OACI,cAAC,KAAD,CACI4D,UAAW,SAACsE,GAAD,OAAWA,EAAMxH,IAC5BoD,aAAc,SAACoE,GAAD,OAAWD,EAAmBC,IAC5CxE,SAAUA,EACVC,OAAQA,EACRK,cAhBsB,SAACkE,GAC3B,IAAM1I,EAAQyI,EAAmBC,GACjC,OACI,qCACKvE,GAAU,cAAC,KAAD,CAAYQ,QAAS,kBAAMR,EAAOuE,IAAlC,SAA2C1I,KACpDmE,GAAU,+BAAOnE,QAYvB6E,MAAOyC,EAAW7E,QAAO,SAACiG,GAAD,YAAwB7H,IAAb6H,EAAMxH,SCSvCyH,ICxBVnD,GDwBUmD,GA3Bf,YAA+G,IAAhEvF,EAA+D,EAA/DA,KAAM3B,EAAyD,EAAzDA,QAASD,EAAgD,EAAhDA,QAAS8B,EAAuC,EAAvCA,SAAUyB,EAA6B,EAA7BA,OAC7E,OACI,mCACI,cAAC,0BAAD,CACI3B,KAAMA,EACN2B,OAAQA,EACRC,YAAY,SACZ1B,SAAUA,EACV2B,SAAUC,iBACVC,aAAc,gBAAGxD,EAAH,EAAGA,SAAUC,EAAb,EAAaA,SAAUwD,EAAvB,EAAuBA,KAAMC,EAA7B,EAA6BA,SAA7B,OACV,cAAC,GAAD,CACIiC,WAAYlC,EACZ3D,QAASA,EACTD,QAASA,EACTG,SAAUA,EACVC,SAAUA,EACV8F,eAAgBrC,KAGxBC,aAAc,gBAAGT,EAAH,EAAGA,MAAOV,EAAV,EAAUA,OAAQD,EAAlB,EAAkBA,SAAlB,OACV,cAAC,GAAD,CAAgBoD,WAAYzC,EAAOV,OAAQA,EAAQD,SAAUA,W,SCjB5EsB,K,eAAAA,Q,KAOL,ICCKoD,GDDC7G,GAA4B,CAAE8G,MAAO,IA8D5B5C,GA5DO,WAAO,IAAD,EACwBC,wBAA0CrF,GADlE,mBACjBsF,EADiB,KACCC,EADD,OAEoBF,wBAA0CrF,GAF9D,mBAEjBwF,EAFiB,KAEDC,EAFC,KAGlBpI,EAAO2D,cACb,OACI,qCACI,cAAC,IAAD,CAAK5B,UAAU,IAAf,SACI,cAAC,cAAD,gCAEJ,eAAC,KAAD,CAAOsG,QAAQ,EAAf,UACI,cAAC,sBAAD,CACIxE,cAAeA,GACfJ,SAAU2E,EACVpE,WAAY,WACR,OACI,cAAC,mBAAD,CACIsE,gBAAgB,EAChBC,kBAAkB,iBAClB9D,mBAAoB,SAACC,GAAD,OAAWC,mCAAyB3E,EAAM0E,IAHlE,SAII,cAAC,GAAD,CACIQ,KAAMoC,GAAUqD,MAChBpH,QAASiF,eACTlF,QAASmF,mBACTrD,SAAUsD,uBACV7B,OAAQ,CACJ8B,SAAU,iBACVC,UAAW,qBACXC,WAAY,QACZC,cAAe,mCAOvC,cAAC,GAAD,CAAe5E,OAAQiE,OAG3B,cAAC,IAAD,CAAKnG,OAAO,MAAMD,UAAU,IAA5B,SACI,cAAC,cAAD,2BAGJ,eAAC,KAAD,WACI,cAAC,KAAD,CAAOsG,QAAQ,EAAf,SACI,cAAC,GAAD,CACI9E,QAASiF,eACTlF,QAASmF,mBACTW,WAAY,GACZ3F,SAAUyE,EACVxE,SAAU,kBAAMqF,QAAQC,IAAI,kBAGpC,cAAC,GAAD,CAAe9E,OAAQ+D,OAG3B,cAAC,IAAD,CAAiB/G,SAAUrB,EAAoBoJ,iBAAiB,Q,wCCxDvEyB,K,uCAAAA,E,kBAAAA,E,uBAAAA,Q,KAQL,IAAMvH,GAAOC,oCAuEEwH,GArEQ,SAAC,GAMV,IAAD,IALTC,WAAYhH,OAKH,MALmB,CAAEiH,QAAS,GAAIC,UAAW,GAAIC,mBAAe,IAKhE,EAJTC,EAIS,EAJTA,KACAC,EAGS,EAHTA,YACAzH,EAES,EAFTA,SACAC,EACS,EADTA,SAEM1D,EAAO2D,cASPwH,EAAkC,CACpCC,qBAAsBnL,IAAWD,EAAM,mCACvCqL,mBAAoBpL,IAAWD,EAAM,iCACrCsL,8BAA0BrL,IAAWD,EAAM,2CAGzCuL,EAAG,2BAAQJ,GAAgBF,GAEjC,OACI,mCACI,cAAC,GAAKrH,cAAN,CACIC,cAAeA,EACfJ,SApBW,SAACV,GACpB,ICpCoB,SAAC8H,EAAiCK,GAAqD,IACvGJ,EAAsCD,EAAtCC,QAASC,EAA6BF,EAA7BE,UAAWC,EAAkBH,EAAlBG,mBAC5B,OAAIE,EACOM,oBAASV,IAAYU,oBAAST,IAAcS,oBAASR,GAEzDQ,oBAASR,GD+BRS,CAAa1I,EAAYmI,GAGzB,MAAM,IAAInH,MAAM,sEAFhBN,EAAS,2BAAKV,GAAN,IAAkBC,GAAIa,EAAcb,IAAMC,sBAmB9Ce,WAAY,kBACR,eAAC,GAAKb,KAAN,CACIO,SAAUA,EACVe,mBAAoB,SAACC,GAAD,OAAWC,mCAAyB3E,EAAM0E,IAFlE,UAGI,cAAC,eAAD,CAAczC,IAAI,KAAlB,wBACA,cAAC,KAAD,UACI,cAAC,GAAKyJ,MAAN,CACIxG,KAAMwF,GAAoBM,mBAC1B7F,MAAOoG,EAAID,8BACXlG,SAAUuG,8BACVC,UAAU,UACVC,UAAW,GACXtE,MAAO,CAAE/F,MAAO,aAGvB0J,GACG,eAAC,KAAD,CAAOY,QAAS,EAAhB,UACI,cAAC,KAAD,UACI,cAAC,GAAKJ,MAAN,CACIxG,KAAMwF,GAAoBI,QAC1B3F,MAAOoG,EAAIF,mBACXjG,SAAU2G,4BAGlB,cAAC,KAAD,UACI,cAAC,GAAKL,MAAN,CACIxG,KAAMwF,GAAoBK,UAC1B5F,MAAOoG,EAAIH,qBACXhG,SAAU2G,wC,UEjDnCC,GAhCQ,SAAC,GAAkD,IAAD,IAA/CnB,kBAA+C,MAAlC,GAAkC,EAA9B7E,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,OAC3CgG,EAAqB,SAACC,GACxB,OACI,qCACI,sBAAM3E,MAAO,CAAE4E,aAAc,QAA7B,SAAwCD,EAAKlB,qBAAsB,IAClEkB,EAAKpB,SAAWoB,EAAKnB,WAAa,+BAAOqB,sBAAWF,EAAKpB,QAASoB,EAAKnB,iBAapF,OACI,cAAC,KAAD,CACI7E,UAAW,SAACgG,GAAD,OAAUA,EAAKlJ,IAC1BoD,aAAc,SAAC8F,GAAD,OACVA,EAAKpB,SAAWoB,EAAKnB,UAAYqB,sBAAWF,EAAKpB,QAASoB,EAAKnB,WAAamB,EAAKlB,oBAErFhF,SAAUA,EACVC,OAAQA,EACRK,cAjBsB,SAAC4F,GAC3B,OACI,qCACKjG,GAAU,cAAC,KAAD,CAAYQ,QAAS,kBAAMR,EAAOiG,IAAlC,SAA0CD,EAAmBC,MACtEjG,GAAU,+BAAOgG,EAAmBC,SAc1CvF,MAAOkE,EAAWtG,QAAO,SAAC2H,GAAD,YAAsBvJ,IAAZuJ,EAAKlJ,SCqBrCqJ,IC3CV/E,GD2CU+E,GAtCf,YAAyG,IAA1DnH,EAAyD,EAAzDA,KAAME,EAAmD,EAAnDA,SAAUkH,EAAyC,EAAzCA,MAAOpB,EAAkC,EAAlCA,YAC5DlL,EAAO2D,cAEPwH,EAA2C,CAC7CoB,qBAAsBtM,IAAWD,EAAM,kCACvCwM,aAAcvM,IAAWD,EAAM,0BAC/ByM,aAAcxM,IAAWD,EAAM,4BAG7BuL,EAAG,2BAAQJ,GAAgBmB,GACjC,OACI,mCACI,cAAC,0BAAD,CACIpH,KAAMA,EACN2B,OAAQ,CACJ8B,SAAU4C,EAAIgB,qBACd1D,WAAY0C,EAAIkB,aAChB3D,cAAeyC,EAAImB,sBACnB9D,UAAW2C,EAAIiB,cAEnB1F,YAAY,SACZ1B,SAAUA,EACV6B,aAAc,gBAAGxD,EAAH,EAAGA,SAAUC,EAAb,EAAaA,SAAUwD,EAAvB,EAAuBA,KAAvB,OACV,cAAC,GAAD,CACI2D,WAAY3D,EACZzD,SAAUA,EACVC,SAAUA,EACVwH,YAAaA,KAGrB9D,aAAc,gBAAGT,EAAH,EAAGA,MAAOV,EAAV,EAAUA,OAAQD,EAAlB,EAAkBA,SAAlB,OACV,cAAC,GAAD,CAAgB6E,WAAYlE,EAAOV,OAAQA,EAAQD,SAAUA,W,SCpC5EsB,K,yBAAAA,Q,KAOL,ICOKqF,GDPC9I,GAA4B,CAAEgH,WAAY,IAoDjC+B,GAlDW,WAAO,IAAD,EACoB5E,wBAA0CrF,GAD9D,mBACrBsF,EADqB,KACHC,EADG,OAEgBF,wBAA0CrF,GAF1D,mBAErBwF,EAFqB,KAELC,EAFK,KAGtBpI,EAAO2D,cACb,OACI,qCACI,cAAC,IAAD,CAAK5B,UAAU,IAAf,SACI,cAAC,cAAD,gCAEJ,eAAC,KAAD,CAAOsG,QAAQ,EAAf,UACI,cAAC,sBAAD,CACIxE,cAAeA,GACfJ,SAAU2E,EACVpE,WAAY,WACR,OACI,cAAC,mBAAD,CACIsE,gBAAgB,EAChBC,kBAAkB,iBAClB9D,mBAAoB,SAACC,GAAD,OAAWC,mCAAyB3E,EAAM0E,IAHlE,SAII,cAAC,GAAD,CACIQ,KAAMoC,GAAUuD,WAChBzF,SAAUsD,8BAM9B,cAAC,GAAD,CAAexE,OAAQiE,OAG3B,cAAC,IAAD,CAAKnG,OAAO,MAAMD,UAAU,IAA5B,SACI,cAAC,cAAD,2BAGJ,eAAC,KAAD,WACI,cAAC,KAAD,CAAOsG,QAAQ,EAAf,SACI,cAAC,GAAD,CACIwC,WAAY,GACZpH,SAAUyE,EACVxE,SAAU,kBAAMqF,QAAQC,IAAI,kBAGpC,cAAC,GAAD,CAAe9E,OAAQ+D,OAG3B,cAAC,IAAD,CAAiB/G,SAAUd,EAAoB6I,iBAAiB,QEvC7D4D,GANU,CACrBC,uBAvB2B,SAACC,GAC5B,YAA2BpK,IAApBoK,EAAY3K,UAAyCO,IAApBoK,EAAYzK,KAuBpD0K,+BATmC,SAAC,GAAuE,IAArE5K,EAAoE,EAApEA,IAAKE,EAA+D,EAA/DA,IAC3C,MAAO,CACHF,IAAKS,2BAAgBT,GACrBE,IAAKO,2BAAgBP,KAOzB2K,+BArBmC,SACnClK,EACAC,GAEA,MAAO,CACHA,GAAIA,GAAMC,kBACVb,IAAKc,2BAAgBH,EAAWX,KAChCE,IAAKY,2BAAgBH,EAAWT,S,SDgBnCqK,K,UAAAA,E,WAAAA,Q,KAKL,IAAMxJ,GAAOC,oCAuGE8J,GArGS,SAAC,GAQX,IAPV5J,EAOS,EAPTA,QACAC,EAMS,EANTA,QACAwG,EAKS,EALTA,WACAgD,EAIS,EAJTA,YAIS,IAHTI,wBAGS,MAHU,GAGV,EAFT1J,EAES,EAFTA,SACAC,EACS,EADTA,SAEM1D,EAAO2D,cAWP8F,EAAuC,CACzC3H,MAAO7B,IAAWD,EAAM,0BACxB0J,SAAUzJ,IAAWD,EAAM,6BAC3B2J,OAAQ1J,IAAWD,EAAM,2BACzB6J,SAAU5J,IAAWD,EAAM,6BAC3B8J,aAAc7J,IAAWD,EAAM,kCAG7BoN,EAAmC,2BAAQ3D,GAAkBM,GAEnE,OACI,mCACI,cAAC,GAAKnG,cAAN,CACIC,cAAegJ,GAAiBG,+BAA+BD,GAAe,IAC9EtJ,SAvBW,SAACV,GACpB,IAAMsK,EAA0BR,GAAiBI,+BAA+BlK,EAAhD,OAA4DgK,QAA5D,IAA4DA,OAA5D,EAA4DA,EAAa/J,IACzG,IAAI6J,GAAiBC,uBAAuBO,GAGxC,MAAM,IAAItJ,MAAM,qEAFhBN,EAAS4J,IAqBLrJ,WAAY,SAACC,GACT,IAkBMe,OACcrC,IAAhBoK,EACMI,EAAiB7I,IAAIpC,IACrBiL,EAAiB5I,QAAO,SAAC+I,GAAD,OAAOA,EAAEtK,KAAO+J,EAAY/J,MAAIsB,IAAIpC,IAEtE,OACI,eAAC,GAAKiB,KAAN,CACIO,SAAUA,EACVe,mBAAoB,SAACC,GAAD,OAAWC,mCAAyB3E,EAAM0E,IAFlE,UAGI,cAAC,eAAD,CAAczC,IAAI,KAAlB,SAAwBmL,EAAatL,QACrC,cAAC,KAAD,UACI,cAAC,GAAK8C,gBAAN,CACIC,OAAQuI,EAAaxD,cACrB9E,mBAAmB,EACnBvB,QAASA,EACTD,QAASA,EACT0B,mBAAoBA,EACpBC,eAAgB,CACZE,MAAOiI,EAAa1D,SACpBxE,KAAMyH,GAAsBvK,IAC5BgD,SAtCK,SAACC,GACtB,OAAOC,KAAoBC,iBACvBrC,2BAAgBmC,GAChB9B,EACAD,EACAJ,2BAAgBe,EAAOC,OAAO5B,OAkClB6H,SAAU,WACNC,YAAW,WACPnG,EAAOoG,cAAcsC,GAAsBrK,UAIvDkD,aAAc,CACVL,MAAOiI,EAAazD,OACpBzE,KAAMyH,GAAsBrK,IAC5B8C,SAvCG,SAACC,GACpB,OAAOC,KAAoBG,eACvBvC,2BAAgBmC,GAChB9B,EACAD,EACAJ,2BAAgBe,EAAOC,OAAO5B,OAmClB6H,SAAU,WACNC,YAAW,WACPnG,EAAOoG,cAAcsC,GAAsBvK,uBEvF5EmL,GA1BS,SAAC,GAAmD,IAAD,IAAhDR,mBAAgD,MAAlC,GAAkC,EAA9B/G,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,OAC7CsE,EAAqB,SAACC,GAAD,gBACpB9D,+BAAqB8D,EAAMpI,KADP,cACiBsE,+BAAqB8D,EAAMlI,OAYvE,OACI,cAAC,KAAD,CACI4D,UAAW,SAACsE,GAAD,OAAWA,EAAMxH,IAC5BoD,aAAc,SAACoE,GAAD,OAAWD,EAAmBC,IAC5CxE,SAAUA,EACVC,OAAQA,EACRK,cAhBuB,SAACkE,GAC5B,IAAM1I,EAAQyI,EAAmBC,GACjC,OACI,qCACKvE,GAAU,cAAC,KAAD,CAAYQ,QAAS,kBAAMR,EAAOuE,IAAlC,SAA2C1I,KACpDmE,GAAU,+BAAOnE,QAYvB6E,MAAOoG,EAAYxI,QAAO,SAACiG,GAAD,YAAwB7H,IAAb6H,EAAMxH,SCoBxCwK,ICnCVlG,GDmCUkG,GArCf,YAOuB,IANnBtI,EAMkB,EANlBA,KACA3B,EAKkB,EALlBA,QACAD,EAIkB,EAJlBA,QACA8B,EAGkB,EAHlBA,SACAyB,EAEkB,EAFlBA,OACA4G,EACkB,EADlBA,UAEA,OACI,mCACI,cAAC,0BAAD,CACIvI,KAAMA,EACN2B,OAAQA,EACRC,YAAY,SACZ1B,SAAUA,EACV2B,SAAUC,iBACVC,aAAc,gBAAGxD,EAAH,EAAGA,SAAUC,EAAb,EAAaA,SAAUwD,EAAvB,EAAuBA,KAAMC,EAA7B,EAA6BA,SAA7B,OACV,cAAC,GAAD,CACI4F,YAAa7F,EACbiG,iBAAkBhG,EAClB4C,WAAY0D,EAAY,CAAE3L,MAAO2L,QAAc9K,EAC/CY,QAASA,EACTD,QAASA,EACTG,SAAUA,EACVC,SAAUA,KAGlB0D,aAAc,YAAkC,IAA/BT,EAA8B,EAA9BA,MAAOV,EAAuB,EAAvBA,OAAQD,EAAe,EAAfA,SAG5B,OAFA+C,QAAQC,IAAIrC,GAEL,cAAC,GAAD,CAAiBoG,YAAapG,EAAOV,OAAQA,EAAQD,SAAUA,W,SC5BrFsB,K,2BAAAA,Q,KAOL,ICvBYoG,GDuBN7J,GAA4B,CAAEkJ,YAAa,IA6DlCY,GA3DY,WAAO,IAAD,EACmB3F,wBAA+CrF,GADlE,mBACtBsF,EADsB,KACJC,EADI,OAEeF,wBAA0CrF,GAFzD,mBAEtBwF,EAFsB,KAENC,EAFM,KAGvBpI,EAAO2D,cACb,OACI,qCACI,cAAC,IAAD,CAAK5B,UAAU,IAAf,SACI,cAAC,cAAD,gCAEJ,eAAC,KAAD,CAAOsG,QAAQ,EAAf,UACI,cAAC,sBAAD,CACIxE,cAAeA,GACfJ,SAAU2E,EACVpE,WAAY,WACR,OACI,cAAC,mBAAD,CACIsE,gBAAgB,EAChBC,kBAAkB,iBAClB9D,mBAAoB,SAACC,GAAD,OAAWC,mCAAyB3E,EAAM0E,IAHlE,SAII,cAAC,GAAD,CACIQ,KAAMoC,GAAUyF,YAChBxJ,QAASiF,eACTlF,QAASmF,mBACTrD,SAAUsD,uBACV7B,OAAQ,CACJ8B,SAAU,mBACVC,UAAW,sBACXC,WAAY,kBAOpC,cAAC,GAAD,CAAe3E,OAAQiE,OAG3B,cAAC,IAAD,CAAKnG,OAAO,MAAMD,UAAU,IAA5B,SACI,cAAC,cAAD,2BAGJ,eAAC,KAAD,WACI,cAAC,KAAD,CAAOsG,QAAQ,EAAf,SACI,cAAC,GAAD,CACI9E,QAASiF,eACTlF,QAASmF,mBACTsE,YAAa,GACbtJ,SAAUyE,EACVxE,SAAU,kBAAMqF,QAAQC,IAAI,kBAGpC,cAAC,GAAD,CAAe9E,OAAQ+D,OAG3B,cAAC,IAAD,CAAiB/G,SAAUZ,EAAqB2I,iBAAiB,Q,oBC/EjEyE,K,qFAAAA,E,6GAAAA,E,eAAAA,Q,KCEZ,IC4BKE,GDeUC,GALe,CAC1BC,wBAvC4B,SAACC,GAC7B,YAC6BpL,IAAzBoL,EAAiB3L,UACQO,IAAzBoL,EAAiBzL,UACaK,IAA9BoL,EAAiBrL,UAoCrBsL,gCAhCoC,SACpCjL,EACAC,GAC6B,IACrBiL,EAAwBlL,EAAxBkL,oBACR,OAAO,2BACAlL,GADP,IAEIC,GAAIA,GAAMC,kBACVb,IAAKc,2BAAgBH,EAAWX,KAChCE,IAAKY,2BAAgBH,EAAWT,KAChC2L,yBAuBJC,gCAnBoC,SAAC,GAAD,IACpC9L,EADoC,EACpCA,IACAE,EAFoC,EAEpCA,IACA6L,EAHoC,EAGpCA,gBACAF,EAJoC,EAIpCA,oBACAvL,EALoC,EAKpCA,SACA3C,EANoC,EAMpCA,WANoC,MAOsB,CAC1DqC,IAAKS,2BAAgBT,GACrBE,IAAKO,2BAAgBP,GACrB6L,kBACAzL,WACA3C,aACAkO,0B,SCPCL,K,UAAAA,E,UAAAA,E,oBAAAA,E,uBAAAA,E,kCAAAA,E,2CAAAA,Q,KASL,IAAMQ,GAAgD,CAClDhM,SAAKO,EACLL,SAAKK,EACLD,cAAUC,EACVwL,gBAAiBE,WAAQC,WACzBL,oBAAqB,GACrBlO,gBAAO4C,GAGLQ,GAAOC,oCAgMEmL,GA9Lc,SAAC,GAAgF,IAA9EjL,EAA6E,EAA7EA,QAASC,EAAoE,EAApEA,QAAS4C,EAA2D,EAA3DA,QAA2D,IAAlDqI,mBAAkD,MAApC,GAAoC,EAAhC/K,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,SAC7E1D,EAAO2D,cAcP8K,OACU9L,IAAZwD,EACMqI,EAAYlK,IAAIpC,IAChBsM,EAAYjK,QAAO,SAACmK,GAAD,OAAOA,EAAE1L,KAAOmD,EAAQnD,MAAIsB,IAAIpC,IAEvD2B,EAAgBsC,EAAUwI,GAAMT,gCAAgC/H,GAAWiI,GACjF,OACI,cAAC,GAAKxK,cAAN,CACIC,cAAeA,EACfJ,SArBe,SAACV,GACpB,IAAM6L,EAA2BD,GAAMX,gCAAgCjL,EAAtC,OAAkDoD,QAAlD,IAAkDA,OAAlD,EAAkDA,EAASnD,IAC5F,IAAI2L,GAAMb,wBAAwBc,GAM9B,MAAM,IAAI7K,MAAM,+EALhBN,EAAS,2BACFmL,GADC,IAEJ7O,WAAO8O,4CAA2BD,EAAyBlM,eAAYC,EAAYI,EAAWhD,eAiBlGiE,WAAY,SAACC,GAAY,IAAD,EAGhBA,EADAC,OAAU9B,EAFM,EAENA,IAAKE,EAFC,EAEDA,IAAKI,EAFJ,EAEIA,SAAUyL,EAFd,EAEcA,gBAFd,IAE+BF,2BAF/B,MAEqD,GAFrD,EAEyDlO,EAFzD,EAEyDA,WAGvE+O,EAAsBtD,oBAASpJ,IAAQoJ,oBAASlJ,GAChDyM,EAAU7L,2BAAgBd,GAC1B4M,EAAU9L,2BAAgBZ,GAE1B2M,EACFH,QAAoCnM,IAAbD,GAA0ByL,IAAoBE,WAAQa,IAE3EC,OACWxM,IAAbD,GAA0B8I,oBAAS9I,KAAcmM,4CAA2BnM,GAE1E0M,EAAoBnB,EAAoBoB,OAAS,EAEjDC,KACFR,QAAoCnM,IAAbD,IAAqD,IAA3ByM,IAE3ChB,IAAoBE,WAAQC,aAC3BH,IAAoBE,WAAQa,KACvBjB,EAAoBoB,OAAS,QAAe1M,IAAV5C,GAGlD,OACI,eAAC,GAAKoD,KAAN,CACImF,eAAgBgH,EAChB5L,SAAUA,EACVe,mBAAoB,SAACC,GAAD,OAAWC,mCAAyB3E,EAAM0E,IAHlE,UAII,cAAC,eAAD,CAAczC,IAAI,KAAlB,SACI,cAAC,KAAD,CAAkBe,GAAG,mCAEzB,cAAC,KAAD,UACI,cAAC,GAAK4B,gBAAN,CACIC,OAAQ5E,IAAWD,EAAM,yCACzB8E,mBAAmB,EACnBE,mBAAoByJ,EACpBlL,QAASA,EACTD,QAASA,EACT2B,eAAgB,CACZC,KAAM0I,GAA2BxL,IACjC+C,MAAOlF,IAAWD,EAAM,6CACxBuP,eAAgB,CACZC,aAAcT,GAAWxL,GAAWkM,aAExCrK,SAAU,SAACC,GAAD,OACNC,KAAoBC,iBAChBrC,2BAAgBmC,GAChB9B,EACAD,EACAJ,2BAAgBZ,MAG5BkD,aAAc,CACVN,KAAM0I,GAA2BtL,IACjC6C,MAAOlF,IAAWD,EAAM,6CACxBuP,eAAgB,CACZC,aAAcR,GAAWD,GAAWU,aAExCrK,SAAU,SAACC,GAAD,OACNC,KAAoBG,eAChBvC,2BAAgBmC,GAChB9B,EACAD,EACAJ,2BAAgBd,UAKnC0M,GACG,cAAC,KAAD,UACI,cAAC,GAAKpJ,cAAN,CACIR,KAAM0I,GAA2BlL,SACjCyC,MAAOlF,IAAWD,EAAM,kCACxBoF,SAAUO,6BAKrBwJ,GAA0BzM,GAAYoM,GACnC,qCACI,cAAC,KAAD,UACI,cAAC,GAAKY,gBAAN,CACIxK,KAAM0I,GAA2BO,gBACjCtJ,OAAQ5E,IAAWD,EAAM,4CAA6C,CAClE2P,KAAMtJ,0BAAe3D,EAAU1C,EAAKe,UAExCqE,SAAUwK,gCAGjBX,GACG,cAAC,KAAD,CAAWjN,OAAO,IAAlB,SACI,cAAC,GAAD,CACIkD,KAAM0I,GAA2BK,oBACjC1K,QAASL,2BAAgBd,GACzBkB,QAASJ,2BAAgBZ,GACzB8C,SAAUsD,uBACV+E,UAAWxN,IACPD,EACA,0DAEJ6G,OAAQ,CACJ8B,SAAU1I,IACND,EACA,yDAEJ6I,WAAY5I,IACRD,EACA,2DAEJ4I,UAAW3I,IACPD,EACA,+DAMnBoP,GACG,mCACI,cAAC,KAAD,UACI,cAAC,GAAKS,gBAAN,CACIhL,OAAQ5E,IAAWD,EAAM,qCAAmC,CACxD2P,KAAMtJ,0BAAe3D,EAAU1C,EAAKe,UAExCmE,KAAM0I,GAA2B7N,WACjCqF,SAAU2G,wBACV+D,OAAQ,CACJ,CACIC,MAAOrC,GAAsBsC,qBAC7B7K,MAAOlF,IACHD,EADa,yCAEkB0N,GAAsBsC,wBAG7D,CACID,MAAOrC,GAAsBuC,0BAC7B9K,MAAOlF,IACHD,EADa,yCAEkB0N,GAAsBuC,2BACrD,CAAEN,KAAMtJ,0BAAe3D,EAAU1C,EAAKe,WAG9C,CACIgP,MAAOrC,GAAsBwC,MAC7B/K,MAAOlF,IACHD,EADa,yCAEkB0N,GAAsBwC,0BCjN3GtK,I,OAAMC,KAAS,yBA+BNsK,GA7Bc,SAAC,GAAmD,IAAjDpC,EAAgD,EAAhDA,iBAAkB/H,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,OAClDjG,EAAO2D,cAgBb,OACI,cAAC,KAAD,CACIuC,UAAW,SAACC,GAAD,OAAaA,EAAQnD,IAChCoD,aAAc,SAACD,GAAD,OAAaE,0BAAeF,EAAQzD,SAAU1C,EAAKe,SACjEiF,SAAUA,EACVC,OAAQA,EACRK,cArB4B,SAACH,GACjC,IAAMI,EAAOF,0BAAeF,EAAQzD,SAAU1C,EAAKe,QACnD,OACI,sBAAKQ,UAAWqE,GAAIY,QAAQ,SAA5B,UACI,uBAAMjF,UAAWqE,GAAIY,QAAQ,QAA7B,UACKP,GAAU,cAAC,KAAD,CAAYQ,QAAS,kBAAMR,EAAOE,IAAlC,SAA6CI,KACtDN,GAAU,+BAAOM,OAEvB,uBAAMhF,UAAWqE,GAAIY,QAAQ,QAA7B,UACKE,+BAAqBP,EAAQ/D,KADlC,MAC2CsE,+BAAqBP,EAAQ7D,YAa5EqE,MAAOoH,KCFJqC,ICvBV9I,GDuBU8I,GAzBf,YAAqH,IAAhElL,EAA+D,EAA/DA,KAAM3B,EAAyD,EAAzDA,QAASD,EAAgD,EAAhDA,QAAS8B,EAAuC,EAAvCA,SAAUyB,EAA6B,EAA7BA,OACnF,OACI,cAAC,0BAAD,CACI3B,KAAMA,EACN2B,OAAQA,EACRzB,SAAUA,EACV0B,YAAY,SACZC,SAAUC,iBACVC,aAAc,gBAAGxD,EAAH,EAAGA,SAAUC,EAAb,EAAaA,SAAUwD,EAAvB,EAAuBA,KAAMC,EAA7B,EAA6BA,SAA7B,OACV,cAAC,GAAD,CACIhB,QAASe,EACTsH,YAAarH,EACb5D,QAASA,EACTD,QAASA,EACTG,SAAUA,EACVC,SAAUA,KAGlB0D,aAAc,gBAAGT,EAAH,EAAGA,MAAOV,EAAV,EAAUA,OAAQD,EAAlB,EAAkBA,SAAlB,OACV,cAAC,GAAD,CAAuB+H,iBAAkBpH,EAAOV,OAAQA,EAAQD,SAAUA,S,SCjBrFsB,K,qCAAAA,Q,KAOL,ICtBY+I,GDsBNxM,GAA4B,CAC9BkK,iBAAkB,IA+DPuC,GA5DiB,WAAO,IAAD,EACctI,wBAAgDrF,GAD9D,mBAC3BsF,EAD2B,KACTC,EADS,OAEUF,wBAA0CrF,GAFpD,mBAE3BwF,EAF2B,KAEXC,EAFW,KAG5BpI,EAAO2D,cACb,OACI,qCACI,cAAC,IAAD,CAAK5B,UAAU,IAAf,SACI,cAAC,cAAD,gCAEJ,eAAC,KAAD,CAAOsG,QAAQ,EAAf,UACI,cAAC,sBAAD,CACIxE,cAAeA,GACfJ,SAAU2E,EACVpE,WAAY,WACR,OACI,cAAC,mBAAD,CACIsE,gBAAgB,EAChBC,kBAAkB,iBAClB9D,mBAAoB,SAACC,GAAD,OAAWC,mCAAyB3E,EAAM0E,IAHlE,SAII,cAAC,GAAD,CACInB,QAASiF,eACTlF,QAASmF,mBACTvD,KAAMoC,GAAUyG,iBAChB3I,SAAUsD,uBACV7B,OAAQ,CACJ8B,SAAU,4BACVC,UAAW,+BACXC,WAAY,mBACZC,cAAe,6CAOvC,cAAC,GAAD,CAAe5E,OAAQiE,OAG3B,cAAC,IAAD,CAAKnG,OAAO,MAAMD,UAAU,IAA5B,SACI,cAAC,cAAD,2BAGJ,cAAC,KAAD,UACI,eAAC,KAAD,CAAOsG,QAAQ,EAAf,UACI,cAAC,GAAD,CACIlC,QAAStC,GAAckK,iBAAiB,GACxCxK,QAASiF,eACTlF,QAASmF,mBACThF,SAAUyE,EACVxE,SAAU,kBAAMqF,QAAQC,IAAI,gBAEhC,cAAC,GAAD,CAAe9E,OAAQ+D,SAI/B,cAAC,IAAD,CAAiB/G,SAAUf,EAA0B8I,iBAAiB,Q,mEE1E5EsH,GAAwB,CAC1BC,GAAI,SAACT,GAAD,OAAmB,6BAAKA,KAC5BU,OAAQ,SAACV,GAAD,OAAmB,iCAASA,KACpCW,EAAG,SAACX,GAAD,OAAmB,4BAAIA,KAC1BY,GAAI,SAACZ,GAAD,OAAmB,6BAAKA,MAOjBa,GAJc,SAAC,GAAD,IAAG5N,EAAH,EAAGA,GAAI+M,EAAP,EAAOA,MAAP,OACzB,cAAC,KAAD,CAAkB/M,GAAIA,EAAIkB,OAAM,2BAAO6L,GAAUQ,O,4DDfzCF,K,8CAAAA,E,oCAAAA,E,wCAAAA,Q,KEQZlP,IAAM0P,OAAOC,MACb3P,IAAM0P,OAAOE,MAEN,IA2BKC,GAVCC,GAA6B,SAACC,GAAD,MAAsC,CAC5E/O,KAAM+O,EAAUC,KAChB9O,GAAI6O,EAAUC,OAGLC,GAA2B,SAACF,GAAD,MAA0C,CAC9E/O,KAAM+O,EAAUG,SAChBhP,GAAI6O,EAAUI,Y,SAGNN,K,gBAAAA,E,kBAAAA,E,sBAAAA,E,oBAAAA,E,gBAAAA,E,oBAAAA,E,iBAAAA,Q,KAUL,ICrCKO,GDqCCC,GAAiB,SAACC,GAC3B,OAAQA,EAAKC,UACT,KAAK,EACD,OAAOV,GAAQW,OACnB,KAAK,EACD,OAAOX,GAAQY,OACnB,KAAK,EACD,OAAOZ,GAAQa,QACnB,KAAK,EACD,OAAOb,GAAQc,UACnB,KAAK,EACD,OAAOd,GAAQe,SACnB,KAAK,EACD,OAAOf,GAAQgB,OACnB,KAAK,EACD,OAAOhB,GAAQiB,SACnB,QACI,SAOCC,GAAyB,SAACC,GAAyD,IAAvCC,EAAsC,uDAAhB,GAC3E,SAAKD,GAAUA,EAAMhQ,MAASgQ,EAAM9P,IAAwB,IAAlB+P,EAAO/C,SAG1C+C,EAAOC,MAAK,SAACC,GAChB,IAAMC,EAAUpR,IAAMgR,EAAMhQ,MACtBqQ,EAAQrR,IAAMgR,EAAM9P,IAClBF,EAAamQ,EAAbnQ,KAAME,EAAOiQ,EAAPjQ,GACd,SAAIkQ,EAAQE,SAAStQ,KAASqQ,EAAME,QAAQrQ,SACxCkQ,EAAQzB,cAAc3O,EAAM,SAAUoQ,EAAQxB,eAAe1O,EAAI,aACjEmQ,EAAM1B,cAAc3O,EAAM,SAAUqQ,EAAMzB,eAAe1O,EAAI,cAAjE,QAIKsQ,GAAwB,SAAClB,GAA+D,IAAvCW,EAAsC,uDAAhB,GAChF,SAAKX,GAA0B,IAAlBW,EAAO/C,SAGb+C,EAAOC,MAAK,SAACF,GAChB,OAAOhR,IAAMsQ,GAAMX,cAAcqB,EAAMhQ,KAAM,QAAUhB,IAAMsQ,GAAMV,eAAeoB,EAAM9P,GAAI,WAIvFuQ,GAAW,SAACC,GAAD,MACV,MAAVA,GAA2B,QAAVA,GAA6B,MAAVA,EAAgB,OAAS,SAMpDC,GAAgB,SAACC,GAC1B,GAAIA,GAAmBC,oBAASD,GAC5B,OAAOE,WAAWF,IAKbG,GAA6C,SAACnT,GACvD,YAAc4C,IAAV5C,EACOsO,WAAQC,WAEZvO,IAAUsQ,GAAY8C,kBAAoBpT,IAAUsQ,GAAY+C,eAAiB/E,WAAQa,IAAMb,WAAQgF,IAGrGC,GAA+B,SAACvQ,GAAD,OACxCA,EAAWwQ,kBAAoBlF,WAAQa,KAAOnM,EAAWhD,WAAQgD,EAAWhD,WAAQsQ,GAAYmD,eAevFC,GAA2B,SAACvC,GACrC,MAAO,CACH6B,gBAAiB7B,EAAU6B,gBAC3BW,iBAAaxC,EAAUwC,iBACvBvC,KAAMD,EAAUC,KAAOtO,2BAAgBqO,EAAUC,MAAQ,GACzDoC,gBAAiBL,GAA2ChC,EAAUnR,YACtEA,WAAOmR,EAAUnR,aAgBZ4T,GAA+B,SAACC,GACzC,MAAO,CACHvC,SAAUuC,EAAcvC,SAAWxO,2BAAgB+Q,EAAcvC,UAAY,GAC7EC,SAAUsC,EAActC,SAAWzO,2BAAgB+Q,EAActC,UAAY,GAC7EiC,gBAAiBL,GAA2CU,EAAc7T,YAC1EA,WAAO6T,EAAc7T,aErJvB8T,GAAqD,SAACC,GACxD,IAAMC,EAAmB,SAACzG,GACtB,OACI,yBAAgByC,MAAOzC,EAAvB,UACKA,EAAE0G,SAAS,IAAIC,QAAQ,IAAK,KADjC,IACwCrB,GAAStF,EAAE0G,SAAS,OAD/C1G,IAUrB,OALW,SAAL4G,EAAMC,EAAwBC,GAChC,OAAOA,GAAON,EAAP,uBACGK,GADH,CACYJ,EAAiBK,KAC9BF,EAAG,GAAD,oBAAKC,GAAL,CAAcJ,EAAiBK,KAAOA,EAAM,IAEjDF,CAAG,GAAI,KAYHG,GATW,SAAC,GAA+C,IAA7CnP,EAA4C,EAA5CA,KAAME,EAAsC,EAAtCA,SAAUD,EAA4B,EAA5BA,MAAO2O,EAAqB,EAArBA,QAChD,OACI,eAACQ,GAAcC,OAAf,CAAsBC,OAAO,IAAIrP,MAAOA,GAAS,eAAgBD,KAAMA,EAAME,SAAUA,EAAvF,UACI,2BACCyO,GAAeC,GAAW,U,SDnB3BvC,K,2CAAAA,E,2EAAAA,E,iFAAAA,E,2FAAAA,E,qFAAAA,E,6EAAAA,E,uEAAAA,E,6FAAAA,E,sEAAAA,E,oFAAAA,E,qGAAAA,E,qGAAAA,E,6FAAAA,E,kDAAAA,E,8DAAAA,E,0EAAAA,E,yDAAAA,E,oDAAAA,E,4DAAAA,E,+FAAAA,E,4CAAAA,E,mFAAAA,E,sGAAAA,E,mGAAAA,Q,KA+BL,IEYKkD,GFZCC,GAAc,SAAYC,GAAZ,OAAyF,SAChH5E,GADgH,OAGhH4E,EACKrQ,KAAI,SAACc,GAAD,OAAiDA,EAAS2K,MAC9D6E,QAAO,SAACC,EAA6BC,GAA9B,OAA8DD,GAAQC,SAAMnS,KAc/EoS,GAAoB,SAACC,EAAmCC,GACjE,IAAMvL,EAAWxG,2BAAgB8R,GAC3BrL,EAASzG,2BAAgB+R,GAC/B,GAAIvL,GAAYC,GAAUD,EAASwL,gBAAkBvL,EAAOuL,cACxD,OAAOC,qCAA2B5D,GAA4B6D,8BAKzDC,GAAsB,SAACC,GAChC,IAAM7D,EAAOvO,2BAAgBoS,GAC7B,OAAO7D,GDHe,SAACA,GAAD,OACtBD,GAAeC,KAAUT,GAAQiB,UAAYT,GAAeC,KAAUT,GAAQW,OCE/D4D,CAAW9D,GAAQ0D,qCAA2B5D,GAA4BiE,cAAW7S,GAoD3F8S,GAAuB,SAChCC,EACAC,GAFgC,OAG/B,WACD,GAA8B,IAA1BA,EAAetG,QAAuC,IAAvBqG,EAAYrG,OAA/C,CAIA,IAAMuG,EAAyBF,EAAYpR,IAAI2M,IACzC4E,EAA6BF,EAAerR,IAAI8M,IAEhD0E,EAAmBJ,EAAYrD,MAAK,SAAC0D,GACvC,IAAMC,EAAuB,uBACtBN,EAAYnR,QAAO,SAAC3C,GAAD,OAAOA,IAAMmU,KAAKzR,IAAI2M,KADnB,aAEtB4E,IAEP,OAAOlD,GAAsBoD,EAAI5E,KAAM6E,MAGrCC,EAAoBN,EAAetD,MAAK,SAACC,GAC3C,IAAM4D,EAA2B,uBAC1BN,GAD0B,aAE1BD,EAAepR,QAAO,SAACmM,GAAD,OAAOA,IAAM4B,KAAShO,IAAI8M,MAEvD,OAAOc,GAAuBd,GAAyBkB,GAAU4D,MAErE,OAAOJ,GAAoBG,EACrBd,qCAA2B5D,GAA4B4E,uCACvDxT,KGrJGyT,GAAuB,SAACpW,GAAD,MAAwC,CACxE,CACImF,MAAOlF,IAAWD,EAAD,6BAAuBqQ,GAAY+C,iBACpDrD,MAAOM,GAAY+C,gBAEvB,CACIjO,MAAOlF,IAAWD,EAAD,6BAAuBqQ,GAAY8C,mBACpDpD,MAAOM,GAAY8C,oBCUZkD,GAf4B,WACvC,IAAMrW,EAAO2D,cACb,OACI,eAAC,KAAD,CAAgB7B,MAAO7B,IAAWD,EAAM,wBAAxC,UACI,mBAAGuH,MAAO,CAAE+O,UAAW,KAAvB,SACI,cAAC,GAAD,CAAsBtT,GAAG,2BAE7B,cAAC,UAAD,CAASf,IAAI,KAAb,SACI,cAAC,GAAD,CAAsBe,GAAG,2BAE7B,cAAC,GAAD,CAAsBA,GAAG,8B,SFuCzByR,K,YAAAA,E,kCAAAA,E,mCAAAA,E,kCAAAA,E,wBAAAA,Q,KAQL,IAAMH,GAAgBlR,oCA4IdmT,GA1IW,SAAC,GAgBb,IAAD,IAfTrF,sBAeS,MAfG,CACRC,UAAMxO,EACNoQ,qBAAiBpQ,EACjB+Q,sBAAa/Q,EACb5C,gBAAO4C,GAWF,EATT6T,EASS,EATTA,eACAlT,EAQS,EARTA,QACAC,EAOS,EAPTA,QACAkT,EAMS,EANTA,oBACAC,EAKS,EALTA,sBACAC,EAIS,EAJTA,qBACAC,EAGS,EAHTA,cACAnT,EAES,EAFTA,SACAC,EACS,EADTA,SAEM1D,EAAO2D,cAUPoG,EAAkC,CACpC8M,GAAI5W,IAAWD,EAAM,4BACrB8W,OAAQ7W,IAAWD,EAAM,gCACzBD,WAAOE,IAAWD,EAAM,kCACxB+W,OAAQ9W,IAAWD,EAAM,6BACzBmR,KAAMlR,IAAWD,EAAM,2BACvBgX,mBAAoB/W,IAAWD,EAAM,yCACrC0T,iBAAazT,IAAWD,EAAM,qCAC9BuT,gBAAiBtT,IAAWD,EAAM,0CAEhCiX,EAAoBb,GAAqBpW,GACzCgF,EAAqByR,EACrBA,EAAoBlS,QAAO,SAAC4N,GAAW,IAC3BhB,EAASD,EAATC,KACR,QAASA,GAAQhQ,IAAMgQ,GAAM+F,OAAO/E,EAAMhQ,KAAM,QAAUhB,IAAMgQ,GAAM+F,OAAO/E,EAAM9P,GAAI,gBAE3FM,EAEN,OACI,mCACI,cAAC2R,GAAc1Q,cAAf,CACIC,cAAe4P,GAAyBvC,GACxCzN,SA/BW,SAACV,GACpB,IAAMoU,EHoC0B,SACpCpU,EACAC,GAEA,MAAO,CACHA,GAAIA,GAAMC,kBACV8P,gBAAiBhQ,EAAWgQ,gBAC5BW,iBAAa3Q,EAAW2Q,iBACxBvC,KAAMjO,2BAAgBH,EAAWoO,MACjCpR,WAAOuT,GAA6BvQ,IG7CVqU,CAAyBrU,EAAYmO,EAAUlO,IACzE,IHzEmB,SAACkO,GACxB,YACuBvO,IAAnBuO,EAAUC,WACoBxO,IAA9BuO,EAAU6B,sBACgBpQ,IAA1BuO,EAAUwC,uBACU/Q,IAApBuO,EAAUnR,WGoENsX,CAAYF,GAGZ,MAAM,IAAIpT,MAAM,uEAFhBN,EAAS0T,IA6BLnT,WAAY,SAACC,GAAY,IFjEHqT,EEkEVpT,EAAWD,EAAXC,OACFqT,EAAYC,KAAgBC,sBAAsBvT,EAAOiN,MACzDuG,EAA8D,CAChEvS,MAAO4E,EAAWoH,KAClBjM,KAAMuP,GAAoBtD,KAC1BrM,mBAAmB,EACnByK,eAAgB,CACZC,aAAcrO,IAAMsO,aAAWiD,QAAQpP,GAAWA,EAAUmM,aAEhElM,UACAD,UACAqU,eAAgBjB,IAAyB,EACzC1R,qBACAI,SACMsP,GADIgC,EACQ,CACR3K,wBACA6L,8BAAoB,CAAEzV,KAAMoB,EAASlB,GAAIiB,IACzC+R,GACA,kBFrBQ,SACtC5D,EACAW,GAEA,GAAKX,GAAkC,KAAzBW,GAAU,IAAI/C,OAG5B,OAAOsD,GAAsBlB,EAAMW,GAC7B+C,qCAA2B5D,GAA4BsG,4CACvDlV,EEY8BmV,CAA2BP,EAAWvS,KAEpC,CAAC+G,wBAAuB6L,8BAAoB,CAAEzV,KAAMoB,EAASlB,GAAIiB,MACnF6G,SAAU,WACNC,YAAW,WACPnG,EAAOoG,cAAcoK,GAAoBtD,WAKrD,OACI,eAACmD,GAAcnR,KAAf,CACIO,SAAUA,EACVe,mBAAoB,SAACC,GAAD,OAAWC,mCAAyB3E,EAAM0E,IAFlE,UAGI,cAAC,eAAD,CAAczC,IAAI,KAAlB,SAAwB8H,EAAWgN,SAClCH,GAAiB,cAAC,IAAD,UAAMA,IACxB,cAAC,KAAD,UACI,cAACtC,GAAcyD,WAAf,2BAA8BL,GAA9B,IAA+CM,YAAaxB,OAEhE,cAAC,KAAD,UACI,cAAC,GAAD,CACItR,KAAMuP,GAAoB1B,gBAC1B3N,SAAU2G,wBACV5G,MAAO4E,EAAWiN,mBAClBlD,QAAS6C,MAGjB,cAAC,KAAD,UACI,cAAC,GAAD,CACIzR,KAAMuP,GAAoBf,iBAC1BtO,SAAUsP,GAAY,CAClB3I,yBFnHFuL,EEoHwBxE,GAAc5O,EAAO6O,iBFpHiB,SAChGkF,GAEA,IAAMC,EAAsCD,EAAahF,WAAWgF,QAActV,EAClF,GAAI2U,GAAiBY,EACjB,OAAOA,GAAmBZ,OACpB3U,EACAwS,qCAA2B5D,GAA4B4G,4CE+GjChT,MAAO4E,EAAW2J,iBAClBI,QAAS6C,MAGjB,cAAC,KAAD,UACI,cAACrC,GAAc5E,gBAAf,CACI7K,OAAQkF,EAAWwJ,gBACnBrO,KAAMuP,GAAoBlB,gBAC1BnO,SAAUwK,4BACVoI,YACI,cAAC,KAAD,CAAgBlW,MAAO7B,IAAWD,EAAM,0BAAxC,SACI,cAAC,GAAD,CAAsBgD,GAAG,oCAKxCkB,EAAOqP,kBAAoBlF,WAAQa,KAChC,cAAC,KAAD,UACI,cAACoF,GAAczE,gBAAf,CACIhL,OAAQkF,EAAWhK,WACnBmF,KAAMuP,GAAoB1U,WAC1BqF,SAAU2G,wBACV+D,OAAQmH,EACRe,YAAa,cAAC,GAAD,iBGnKtCI,GAjBwC,SAAC,GAAqC,IAAnCtW,EAAkC,EAAlCA,MAAO/B,EAA2B,EAA3BA,WAAOkG,EAAoB,EAApBA,OAC9DjG,EAAO2D,cACb,OACI,sBAAK4D,MAAO,CAAEG,QAAS,WAAvB,UACI,8BAAMzB,EAAS,cAAC,KAAD,CAAYQ,QAAS,kBAAMR,KAA3B,SAAsCnE,IAAsB,CAAEA,WAC5E/B,GAASA,IAAUsQ,GAAYmD,eAC5B,qBAAKjM,MAAO,CAAE+O,UAAW,UAAzB,SACI,cAAC,KAAD,CACItT,GAAE,0BACFkB,OAAQ,CAAEnE,WAAOD,EAAwBC,EAAOC,YCqBzDqY,GA7BS,SAAC,GAAmD,IAAD,IAAhD3C,wBAAgD,MAAlC,GAAkC,EAA9B1P,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,OAC7CqS,EAA4B,SAACpH,GAAD,gBAC3BxK,+BAAqBwK,EAAUC,MADJ,oCAEdD,EAAU6B,gBAFI,YAEeH,GAAS1B,EAAU6B,iBAFlC,qCAGb7B,EAAUwC,iBAHG,aAGad,GAAS1B,EAAUwC,kBAHhC,MAgBlC,OACI,cAAC,KAAD,CACIxN,UAAW,SAACgL,GAAD,OAAeA,EAAUlO,IACpCoD,aAAc,SAAC8K,GAAD,OAAeoH,EAA0BpH,IACvDlL,SAAUA,EACVC,OAAQA,EACRK,cAjBqB,SAAC4K,GAC1B,IAAMpP,EAAQwW,EAA0BpH,GACxC,OACI,cAAC,GAAD,CACIpP,MAAOA,EACP/B,WAAOmR,EAAUnR,WACjBkG,OAAQA,EAAS,kBAAMA,EAAOiL,SAAavO,KAY/CgE,MAAO+O,EAAYnR,QAAO,SAAC2M,GAAD,YAAgCvO,IAAjBuO,EAAUlO,SC2BhDuV,ICTVC,GDSUD,GA5Cf,YAWuB,IAVnBrT,EAUkB,EAVlBA,KACA3B,EASkB,EATlBA,QACAD,EAQkB,EARlBA,QACA8B,EAOkB,EAPlBA,SACAoR,EAMkB,EANlBA,eACA3P,EAKkB,EALlBA,OACA4R,EAIkB,EAJlBA,kBACAhC,EAGkB,EAHlBA,oBACAC,EAEkB,EAFlBA,sBACAC,EACkB,EADlBA,qBAEA,OACI,mCACI,cAAC,0BAAD,CACIzR,KAAMA,EACN2B,OAAQA,EACRC,YAAY,SACZ1B,SAAUA,EACV2B,SAAU,SAAC2R,EAAuBC,GAAxB,OACN3R,yBAAe,CAAE5E,IAAKsW,EAAWvH,MAAQ,CAAE/O,IAAKuW,EAAWxH,QAE/DlK,aAAc,gBAAGxD,EAAH,EAAGA,SAAUC,EAAb,EAAaA,SAAUwD,EAAvB,EAAuBA,KAAvB,OACV,cAAC,GAAD,CACIgK,eAAWhK,EACX3D,QAASA,EACTD,QAASA,EACTsT,cAAe6B,EACfjC,eAAgBA,EAChBC,oBAAqBA,EACrBC,sBAAuBA,EACvBjT,SAAUA,EACVC,SAAUA,EACViT,qBAAsBA,KAG9BvP,aAAc,gBAAGT,EAAH,EAAGA,MAAOV,EAAV,EAAUA,OAAQD,EAAlB,EAAkBA,SAAlB,OACV,cAAC,GAAD,CAAiB0P,iBAAa/O,EAAOV,OAAQA,EAAQD,SAAUA,W,SCF9EwS,K,oBAAAA,E,oBAAAA,E,uBAAAA,E,mCAAAA,Q,KAOL,IAAMrV,GAAOC,oCA+KEwV,GA7KW,SAAC,GAWb,IAAD,IAVThF,0BAUS,MAVO,GAUP,EATTiF,EASS,EATTA,mBACAvV,EAQS,EARTA,QACAC,EAOS,EAPTA,QACAkT,EAMS,EANTA,oBACAqC,EAKS,EALTA,qBACAlC,EAIS,EAJTA,cACAmC,EAGS,EAHTA,uBACAtV,EAES,EAFTA,SACAC,EACS,EADTA,SAEM1D,EAAO2D,cAWPoG,EAAsC,CACxC8M,GAAI5W,IAAWD,EAAM,4BACrB8W,OAAQ7W,IAAWD,EAAM,gCACzBD,WAAOE,IAAWD,EAAM,kCACxB+W,OAAQ9W,IAAWD,EAAM,iCACzBgZ,QAAS/Y,IAAWD,EAAM,kCAC1BuT,gBAAiBtT,IAAWD,EAAM,yCAClCoC,IAAKnC,IAAWD,EAAM,8BACtBsC,IAAKrC,IAAWD,EAAM,+BAEpBiX,EAAoBb,GAAqBpW,GAEzCgF,EAAqByR,EACrBA,EAAoBlS,QAAO,SAAC4N,GAAW,IAC3Bd,EAAuBuC,EAAvBvC,SAAUC,EAAasC,EAAbtC,SAClB,QACID,GACAC,GACAnQ,IAAMkQ,GAAU6F,OAAO/E,EAAMhQ,KAAM,QACnChB,IAAMmQ,GAAU4F,OAAO/E,EAAM9P,GAAI,gBAGzCM,EAEN,OACI,mCACI,cAAC,GAAKiB,cAAN,CACIC,cAAe8P,GAA6BC,GAC5CnQ,SArCW,SAACV,GACpB,IAAMkW,ETiE8B,SACxClW,EACAC,GAEA,MAAO,CACHA,GAAIA,GAAMC,kBACVoO,SAAUnO,2BAAgBH,EAAWsO,UACrCC,SAAUpO,2BAAgBH,EAAWuO,UACrCvR,WAAOuT,GAA6BvQ,ISzENmW,CAA6BnW,EAAY6Q,EAAc5Q,IACrF,IT1DuB,SAAC4Q,GAC5B,YAC+BjR,IAA3BiR,EAAcvC,eACa1O,IAA3BiR,EAActC,eACU3O,IAAxBiR,EAAc7T,WSsDVoZ,CAAgBF,GAGhB,MAAM,IAAIlV,MAAM,+EAFhBN,EAASwV,IAmCLjV,WAAY,SAACC,GAAY,IAAD,EACWA,EAAOC,OAA9BmN,EADY,EACZA,SAAUC,EADE,EACFA,SACZ5H,EAA6BxG,2BAAgBmO,GAC7C1H,EAA2BzG,2BAAgBoO,GACjD,OACI,eAAC,GAAKnO,KAAN,CACIO,SAAUA,EACVe,mBAAoB,SAACC,GAAD,OAAWC,mCAAyB3E,EAAM0E,IAFlE,UAGI,cAAC,eAAD,CAAczC,IAAI,KAAlB,SAAwB8H,EAAWgN,SAClCH,GAAiB,cAAC,IAAD,CAAK5U,OAAO,IAAZ,SAAiB4U,IACnC,cAAC,KAAD,UACI,cAAC,GAAKwC,mBAAN,CACIvU,OAAQkF,EAAWiP,QACnBhB,YAAaa,EACbzT,SAAU,WACN,ORtDM,SAC1CjD,EACAE,EACA+P,GAEA,GAAKjQ,GAASE,GAAgC,KAAzB+P,GAAU,IAAI/C,OAGnC,OAAO6C,GAAuB,CAAE/P,OAAME,MAAM+P,GACtC+C,qCAA2B5D,GAA4B4E,uCACvDxT,EQ4CqC0W,CAA+B3P,EAAUC,EAAQ3E,IAE5DsU,oBAAqB,CACjBnU,MAAO4E,EAAW3H,IAClB8C,KAAMsT,GAAwBnH,SAC9BvM,mBAAmB,EACnBvB,QAASA,EACTD,QAASqG,GAAUrG,EACnBqU,eAAgBmB,IAAwB,EACxC9T,qBACAuK,eAAgB,CACZC,aACI9F,GAAYC,GAAUxI,IAAMsO,aAAWiD,QAAQpP,GACzCA,EACAmM,aAEdrK,SAAUsP,GAAW,uBACboE,EAAuB,CAACzD,IAAuB,IADlC,aAEb0D,EACE,CAAC,SAAC1T,GAAD,OAAgB0P,GAAkB1P,EAAYiM,KAC/C,IAJW,CAKjB,kBR9DA,SACxCG,EACAW,GAEA,GAAKX,GAAkC,KAAzBW,GAAU,IAAI/C,OAG5B,OAAOsD,GAAsBlB,EAAMW,GAC7B+C,qCAA2B5D,GAA4BgI,gDACvD5W,EQqDwC6W,CAA6B9P,EAAU1E,IAC7C,SAACK,GAAD,OACIC,KAAoBC,iBAChBrC,2BAAgBmC,GAChB9B,EACAD,EACAqG,OAGZQ,SAAU,WACNC,YAAW,WACPnG,EAAOoG,cAAcmO,GAAwBnH,UAC7CpN,EAAOoG,cAAcmO,GAAwBlH,eAIzDmI,kBAAmB,CACftU,MAAO4E,EAAWzH,IAClB4C,KAAMsT,GAAwBlH,SAC9BxM,mBAAmB,EACnBvB,QAASmG,GAAYnG,EACrBD,UACAqU,eAAgBmB,IAAwB,EACxC9T,qBACAuK,eAAgB,CACZC,aACI7F,GAAUD,GAAYvI,IAAMsO,aAAWiD,QAAQpP,GACzCA,EACAmM,aAEdrK,SAAUsP,GAAW,uBACboE,EAAuB,CAACzD,IAAuB,IADlC,aAEb0D,EACE,CAAC,SAAC1T,GAAD,OAAgB0P,GAAkB1D,EAAUhM,KAC7C,IAJW,CAKjB,kBRrFA,SACxCoM,EACAW,GAEA,GAAKX,GAAkC,KAAzBW,GAAU,IAAI/C,OAG5B,OAAOsD,GAAsBlB,EAAMW,GAC7B+C,qCAA2B5D,GAA4BmI,gDACvD/W,EQ4EwCgX,CAA6BhQ,EAAQ3E,IAC3C,SAACK,GAAD,OACIC,KAAoBG,eAChBvC,2BAAgBmC,GAChB9B,EACAD,EACAoG,OAGZS,SAAU,WACNC,YAAW,WACPnG,EAAOoG,cAAcmO,GAAwBnH,UAC7CpN,EAAOoG,cAAcmO,GAAwBlH,mBAMjE,cAAC,KAAD,UACI,cAAC,GAAK5B,gBAAN,CACI7K,OAAQkF,EAAWwJ,gBACnBrO,KAAMsT,GAAwBjF,gBAC9BnO,SAAUwK,4BACVoI,YACI,cAAC,KAAD,CAAgBlW,MAAO7B,IAAWD,EAAM,0BAAxC,SACI,cAAC,GAAD,CAAsBgD,GAAG,oCAMxCiB,EAAOC,OAAOqP,kBAAoBlF,WAAQa,KACvC,cAAC,KAAD,UACI,cAAC,GAAKW,gBAAN,CACIhL,OAAQkF,EAAWhK,WACnBmF,KAAMsT,GAAwBzY,WAC9BqF,SAAU2G,wBACV+D,OAAQmH,EACRe,YAAa,cAAC,GAAD,iBCxLtC4B,GA5BY,SAAC,GAAmE,IAAD,IAAhEjE,2BAAgE,MAA/C,GAA+C,EAA3C3P,EAA2C,EAA3CA,SAAUC,EAAiC,EAAjCA,OAAQ4T,EAAyB,EAAzBA,YAC3DtP,EAAqB,SAACqJ,GAAD,gBACpBlN,+BAAqBkN,EAAcvC,UADf,cAC8B3K,+BAAqBkN,EAActC,YAa5F,OACI,cAAC,KAAD,CACIpL,UAAW,SAAC0N,GAAD,OAAmBA,EAAc5Q,IAC5CoD,aAAc,SAACwN,GAAD,OAAmBrJ,EAAmBqJ,IACpD5N,SAAUA,EACVC,OAAQA,EACRK,cAjByB,SAACsN,GAC9B,IAAM9R,EAAQyI,EAAmBqJ,GACjC,OACI,cAAC,GAAD,CACI9R,MAAOA,EACP/B,WAAO6T,EAAc7T,WACrBkG,OAAQA,EAAS,kBAAMA,EAAO2N,SAAiBjR,KAYnDgE,MAAOgP,EAAepR,QAAO,SAACqP,GAAD,YAAwCjR,IAArBiR,EAAc5Q,MAC9D6W,YAAaA,IAAe,KC4BzBC,I,GCzCVxS,GDyCUwS,GA5Cf,YAWuB,IAVnB5U,EAUkB,EAVlBA,KACA3B,EASkB,EATlBA,QACAD,EAQkB,EARlBA,QACAmT,EAOkB,EAPlBA,oBACAoC,EAMkB,EANlBA,mBACAJ,EAKkB,EALlBA,kBAKkB,IAJlBM,8BAIkB,SAHlB3T,EAGkB,EAHlBA,SACAyB,EAEkB,EAFlBA,OACAiS,EACkB,EADlBA,qBAEA,OACI,mCACI,cAAC,0BAAD,CACI5T,KAAMA,EACN2B,OAAQA,EACRC,YAAY,SACZ1B,SAAUA,EACV2B,SAAU,SAACgT,EAA+BC,GAAhC,OACNhT,yBAAe,CAAE5E,IAAK2X,EAAe1I,UAAY,CAAEjP,IAAK4X,EAAe1I,YAE3ErK,aAAc,gBAAGxD,EAAH,EAAGA,SAAUC,EAAb,EAAaA,SAAUwD,EAAvB,EAAuBA,KAAvB,OACV,cAAC,GAAD,CACI0M,mBAAe1M,EACf2R,mBAAoBA,EACpBtV,QAASA,EACTD,QAASA,EACTsT,cAAe6B,EACfhC,oBAAqBA,EACrBqC,qBAAsBA,EACtBC,uBAAmBA,EACnBtV,SAAUA,EACVC,SAAUA,KAGlB0D,aAAc,gBAAGT,EAAH,EAAGA,MAAOV,EAAV,EAAUA,OAAQD,EAAlB,EAAkBA,SAAlB,OACV,cAAC,GAAD,CAAoB2P,oBAAgBhP,EAAOV,OAAQA,EAAQD,SAAUA,W,SClCpFsB,K,oBAAAA,E,eAAAA,Q,KAUL,ICKK2S,GDLCpW,IAAyB,sBAAMyD,GAAU4S,SAAW,IAA3B,gBAAgC5S,GAAU6S,MAAQ,IAAlD,IA8HhBC,GA5HgC,WAAO,IAAD,EACyBpS,wBAExErF,GAH+C,mBAC1C0X,EAD0C,KACXC,EADW,OAIiBtS,wBAC9DrF,GAL6C,mBAI1C4X,EAJ0C,KAIfC,EAJe,OAOLxS,wBAA0CrF,GAPrC,mBAO1CwF,EAP0C,KAO1BC,EAP0B,KAQ3CpI,EAAO2D,cACb,OACI,qCACI,cAAC,IAAD,CAAK5B,UAAU,IAAf,SACI,cAAC,cAAD,gCAEJ,eAAC,KAAD,CAAOsG,QAAQ,EAAf,UACI,cAAC,sBAAD,CACIxE,cAAeA,GACfJ,SAAU2E,EACVpE,WAAY,SAACC,GAAY,IACbC,EAAWD,EAAXC,OACFuS,EAAmB,uBAClBvS,EAAOgW,SAAS5V,IAAI8M,KADF,aAElBlN,EAAOiW,MAAM7V,IAAI2M,MAExB,OACI,eAAC,mBAAD,CACI3I,gBAAgB,EAChBC,kBAAkB,iBAClB9D,mBAAoB,SAACC,GAAD,OAAWC,mCAAyB3E,EAAM0E,IAHlE,UAII,cAAC,KAAD,UACI,cAAC,GAAD,CACIQ,KAAMoC,GAAU4S,SAChB3W,QAASiF,eACTlF,QAASmM,YACToJ,mBACI,mBAAGtR,MAAO,CAAE+O,UAAW,SAAvB,yJAKJlR,SAAUsP,GAAY,CAClBhM,uBACA+M,GAAqBvR,EAAOiW,MAAOjW,EAAOgW,YAE9CrT,OAAQ,CACJ8B,SAAU,mBACVE,WAAY,wBAEhB4N,oBAAqBA,EACrBqC,sBAAsB,MAG9B,cAAC,KAAD,UACI,cAAC,GAAD,CACI5T,KAAMoC,GAAU6S,MAChB5W,QAASiF,eACTlF,QAASmM,YACTrK,SAAUsP,GAAY,CAClBhM,uBACA+M,GAAqBvR,EAAOiW,MAAOjW,EAAOgW,YAE9CrT,OAAQ,CACJ8B,SAAU,oCACVC,UAAW,6BACXC,WAAY,yBACZC,cAAe,2BAEnB2N,oBAAqBA,EACrBC,uBAAuB,EACvBC,qBAAsB,aAO9C,cAAC,GAAD,CAAezS,OAAQiE,OAG3B,cAAC,IAAD,CAAKnG,OAAO,MAAMD,UAAU,IAA5B,SACI,cAAC,cAAD,6BAGJ,cAAC,KAAD,UACI,eAAC,KAAD,WACI,cAAC,KAAD,CAAOsG,QAAQ,EAAf,SACI,cAAC,GAAD,CACI9E,QAASiF,eACTlF,QAASmF,mBACTmL,mBAAe,GACfnQ,SAAU6W,EACV5W,SAAU,WAEN,OAAOqF,QAAQC,IAAI,kBAI/B,cAAC,GAAD,CAAe9E,OAAQmW,SAI/B,cAAC,KAAD,UACI,eAAC,KAAD,WACI,cAAC,KAAD,CAAOhS,QAAQ,EAAf,SACI,cAAC,GAAD,CACI9E,QAASiF,eACTlF,QAASmF,mBACTyI,eAAW,GACXzN,SAAU+W,EACV9W,SAAU,WAEN,OAAOqF,QAAQC,IAAI,kBAI/B,cAAC,GAAD,CAAe9E,OAAQqW,SAI/B,cAAC,IAAD,CAAiBrZ,SAAUhB,EAAgB+I,iBAAiB,QE9GzDwR,GANQ,CACnBC,yBAhB6B,SAC7BC,EACAC,GAEA,MAAO,CACHC,IAAKF,EAAUE,IACftU,KAAMoU,EAAUpU,KAChBuU,iBAAaF,EACPD,EAAUG,iBACNjY,2BAAgB8X,EAAUG,kBAC1B,QACJnY,IAMVoY,gCA9BoC,SACpChY,EACAC,EACA4X,GAEA,OAAO,2BACA7X,GADP,IAEIC,GAAIA,GAAMC,kBACV6X,iBACIF,GAA8B7X,EAAW+X,iBAAc5X,2BAAgBH,EAAW+X,uBAAenY,KAsBzGqY,YApCgB,SAACL,GAA8F,IAA/DC,IAA8D,yDACtGC,EAA2BF,EAA3BE,IAAKtU,EAAsBoU,EAAtBpU,KAAMuU,EAAgBH,EAAhBG,iBACnB,OAAOtP,oBAASqP,IAAQrP,oBAASjF,MAAyC,IAA/BqU,GAAwCpP,oBAASsP,O,SD+B3Fb,K,UAAAA,E,mCAAAA,E,aAAAA,Q,KAML,IAAM9W,GAAOC,oCA2FE6X,GAzFO,SAAC,GAQT,IAAD,IAPTN,iBAOS,MAPG,CAAEE,IAAK,GAAItU,KAAM,GAAIuU,sBAAanY,EAAWK,QAAIL,GAOpD,EANTiY,EAMS,EANTA,0CACA/T,EAKS,EALTA,OACAtD,EAIS,EAJTA,QACAD,EAGS,EAHTA,QACAG,EAES,EAFTA,SACAC,EACS,EADTA,SAEM1D,EAAO2D,cAeP8F,EAAqC,CACvC3H,MAAO7B,IAAWD,EAAM,wBACxB6a,IAAK5a,IAAWD,EAAM,sBACtB8a,iBAAa7a,IAAWD,EAAM,iCAC9BuG,KAAMtG,IAAWD,EAAM,uBACvB6J,SAAU5J,IAAWD,EAAM,2BAC3B8J,aAAc7J,IAAWD,EAAM,gCAG7B+J,EAA+B,2BAAQN,GAAkB5C,GAE/D,OACI,mCACI,cAAC,GAAKjD,cAAN,CACIC,cAAe4W,GAAeC,yBAAyBC,EAAWC,GAClEnX,SA5BW,SAACV,GACpB,IAAMmY,EAAoBT,GAAeM,gCACrChY,EACA4X,EAAU3X,GACV4X,GAEJ,IAAIH,GAAeO,YAAYE,EAAmBN,GAG9C,MAAM,IAAI7W,MAAM,iEAFhBN,EAASyX,IAsBLlX,WAAY,kBACR,eAAC,GAAKb,KAAN,CACIO,SAAUA,EACVe,mBAAoB,SAACC,GAAD,OAAWC,mCAAyB3E,EAAM0E,IAFlE,UAGI,cAAC,eAAD,CAAczC,IAAI,KAAlB,SAAwB8H,EAAWjI,QACnC,cAAC,KAAD,UACI,cAAC,GAAK4J,MAAN,CACIxG,KAAM+U,GAAoB1T,KAC1BpB,MAAO4E,EAAWxD,KAClBnB,SAAU2G,wBACVoP,YAAapR,EAAWqR,oBAG/BR,GACG,cAAC,KAAD,UACI,cAAC,GAAK7C,WAAN,CACI7S,KAAM+U,GAAoBa,iBAC1B3V,MACI4E,EAAWsR,iBAAX,UACStR,EAAW+Q,iBADpB,YACmC/Q,EAAWsR,kBAD9C,UAEStR,EAAW+Q,kBAExB1V,SAAUsP,sBAAY,CAClB3I,wBACA6L,8BAAoB,CAAEzV,KAAMoB,EAASlB,GAAIiB,MAE7CA,QAASA,EACTC,QAASA,EACT+X,kBAAkB,MAI9B,cAAC,KAAD,UACI,cAAC,GAAK5P,MAAN,CACIxG,KAAM+U,GAAoBY,IAC1B1V,MAAO4E,EAAW8Q,IAClBzV,SAAUsP,sBAAY,CAAC3I,wBAAuBJ,gCAC9CC,UAAU,UACVC,UAAW,GACXsP,YAAapR,EAAWwR,4BE9GlD3V,I,OAAMC,KAAS,kBA6BN2V,GA3BO,SAAC,GAAqE,IAAD,IAAlEb,iBAAkE,MAAtD,GAAsD,EAAlDc,EAAkD,EAAlDA,wBAAoBzV,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,OAenE,OACI,cAAC,KAAD,CACIC,UAAW,SAACyU,GAAD,OAAeA,EAAU3X,IACpCoD,aAAc,SAACuU,GAAD,OAAeA,EAAUpU,MACvCP,SAAUA,EACVC,OAAQA,EACRK,cApBqB,SAACqU,GAC1B,OACI,sBAAKpZ,UAAWqE,GAAIY,QAAQ,SAA5B,UACKiV,GAAsBd,EAAUG,kBAC7B,sBAAMvZ,UAAWqE,GAAIY,QAAQ,QAA7B,SAAuCkV,uBAAaf,EAAUG,oBAElE,uBAAMvZ,UAAWqE,GAAIY,QAAQ,QAA7B,UACKP,GAAU,cAAC,KAAD,CAAYQ,QAAS,kBAAMR,EAAO0U,IAAlC,SAA+CA,EAAUpU,QAClEN,GAAU,+BAAO0U,EAAUpU,cAarCI,MAAOgU,EAAUpW,QAAO,SAACoW,GAAD,YAAgChY,IAAjBgY,EAAU3X,SCyB9C2Y,IC7CVrU,GD6CUqU,GA9Cf,YAUuB,IATnBzW,EASkB,EATlBA,KACAE,EAQkB,EARlBA,SACAyB,EAOkB,EAPlBA,OACAtD,EAMkB,EANlBA,QACAD,EAKkB,EALlBA,QACA+X,EAIkB,EAJlBA,iBAIkB,IAHlBT,iDAGkB,SAFlBW,EAEkB,EAFlBA,eACAH,EACkB,EADlBA,gBAEA,OACI,mCACI,cAAC,0BAAD,CACIlW,KAAMA,EACN2B,OAAQA,EACRC,YAAY,SACZ1B,SAAUA,EACV6B,aAAc,gBAAGxD,EAAH,EAAGA,SAAUC,EAAb,EAAaA,SAAUwD,EAAvB,EAAuBA,KAAvB,OACV,cAAC,GAAD,CACIyT,UAAWzT,EACX0T,sCAA4BA,EAC5BnX,SAAUA,EACVC,SAAUA,EACVH,QAASA,EACTD,QAASA,EACTuD,OAAQ,CACJwU,iBAAkBA,EAClBE,eAAgBA,EAChBH,gBAAiBA,MAI7BhU,aAAc,gBAAGT,EAAH,EAAGA,MAAOV,EAAV,EAAUA,OAAQD,EAAlB,EAAkBA,SAAlB,OACV,cAAC,GAAD,CACI2U,UAAWhU,EACX8U,wBAAoBb,EACpB3U,OAAQA,EACRD,SAAUA,U,mBCrC7BsB,K,uBAAAA,Q,KAOL,ICvBYsU,GAOAC,GDgBNhY,GAA4B,CAAE8W,UAAW,IAwEhCmB,GAtEU,WAAO,IAAD,EACqB9T,wBAAyCrF,GAD9D,mBACpBsF,EADoB,KACFC,EADE,OAEiBF,wBAA0CrF,GAF3D,mBAEpBwF,EAFoB,KAEJC,EAFI,OAG2CJ,oBAAkB,GAH7D,mBAGpB+T,EAHoB,KAGSC,EAHT,KAIrBhc,EAAO2D,cACb,OACI,qCACI,eAAC,IAAD,CAAK5B,UAAU,IAAf,UACI,cAAC,cAAD,8BACA,eAAC,IAAD,CAAKC,OAAO,IAAZ,UACI,+GACA,cAAC,YAAD,CACImD,MAAM,+EACN8W,QAASF,EACT5R,SAAU,SAAC+R,GAAD,OAASF,GAAsD,IAAvBE,EAAIC,OAAOF,kBAIzE,eAAC,KAAD,CAAO5T,QAAQ,EAAf,UACI,cAAC,sBAAD,CACIxE,cAAeA,GACfJ,SAAU2E,EACVpE,WAAY,WACR,OACI,cAAC,mBAAD,CACIsE,gBAAgB,EAChBC,kBAAkB,iBAClB9D,mBAAoB,SAACC,GAAD,OAAWC,mCAAyB3E,EAAM0E,IAHlE,SAII,cAAC,GAAD,CACIQ,KAAMoC,GAAUqT,UAChBC,sCAA4BmB,EAC5B3W,SAAUsD,uBACV7B,OAAQ,CACJ8B,SAAU,gBACVC,UAAW,mBACXC,WAAY,gBACZC,cAAe,0BAEnBvF,QAAS6Y,gBACT9Y,QAASmM,mBAM7B,cAAC,GAAD,CAAevL,OAAQiE,OAE3B,cAAC,IAAD,CAAKnG,OAAO,MAAMD,UAAU,IAA5B,SACI,cAAC,cAAD,2BAGJ,eAAC,KAAD,WACI,cAAC,KAAD,CAAOsG,QAAQ,EAAf,SACI,cAAC,GAAD,CACIsS,UAAW,GACXC,sCAA4BmB,EAC5BtY,SAAUyE,EACVxE,SAAU,kBAAMqF,QAAQC,IAAI,cAC5BzF,QAAS6Y,gBACT9Y,QAASmM,gBAGjB,cAAC,GAAD,CAAevL,OAAQ+D,OAG3B,cAAC,IAAD,CAAiB/G,SAAUX,EAAmB0I,iBAAiB,QE/ErEoT,GAA2B,CAC7B,CACIC,KAAM,YACNC,cAAe,kBAAM,cAAC,GAAD,KACrBza,MAAO,aAEX,CACIwa,KAAM,UACNC,cAAe,kBAAM,cAAC,GAAD,KACrBza,MAAO,eAEX,CACIwa,KAAM,mBACNC,cAAe,kBAAM,cAAC,GAAD,KACrBza,MAAO,+BAEX,CACIwa,KAAM,gBACNC,cAAe,kBAAM,cAACC,GAAD,KACrB1a,MAAO,iBAEX,CACIwa,KAAM,aACNC,cAAe,kBAAM,cAACE,GAAD,KACrB3a,MAAO,yBAEX,CACIwa,KAAM,aACNC,cAAe,kBAAM,cAAC,GAAD,KACrBza,MAAO,cAEX,CACIwa,KAAM,YACNC,cAAe,kBAAM,cAAC,GAAD,KACrBza,MAAO,eA0BA4a,GAtBK,WAAO,IAAD,EACE1U,mBAASqU,GAAU,GAAGC,MADxB,mBACfA,EADe,KACTK,EADS,KAEhBC,EAAcP,GAAUQ,MAAK,SAACC,GAChC,OAAOA,EAAER,OAASA,KAEtB,OACI,qCACI,cAAC,EAAD,CAAWxa,MAAM,eAAjB,iGAGA,cAAC,IAAD,CACIqI,SAAU,SAAC+R,EAAKa,GAAN,OAAcJ,EAAQN,GAAUU,GAAKT,OAC/CU,KAAMX,GAAU/X,KAAI,SAACwY,GAAD,MAAQ,CACxB3X,MAAO2X,EAAEhb,MACTmb,OAAQH,EAAER,OAASA,EAAO,OAAS,cAG1CM,GAAeA,EAAYL,qB,SDlE5BX,K,eAAAA,E,6BAAAA,E,oBAAAA,E,eAAAA,Q,cAOAC,K,qCAAAA,E,2CAAAA,E,UAAAA,E,UAAAA,E,yCAAAA,E,uCAAAA,E,iDAAAA,E,0CAAAA,E,oCAAAA,E,kCAAAA,E,+HAAAA,E,8BAAAA,E,mHAAAA,E,6EAAAA,E,2GAAAA,E,yFAAAA,E,2EAAAA,E,+CAAAA,E,yCAAAA,E,mDAAAA,E,yDAAAA,E,wBAAAA,E,4BAAAA,E,kCAAAA,E,uEAAAA,Q,KAoEL,IAAMqB,GAAe,SAACC,GACzB,YAAsBxa,IAAfwa,GEzEEC,GAAuB,SAACC,GAAD,YACuB1a,IAAvD0a,EAAaR,MAAK,SAACS,GAAD,OAAOA,IAAM1B,GAAY2B,WAElCC,GAAoC,SAACC,GAC9C,OAAOtc,IAAMsc,GAAeC,QAAQ,OAAOhL,QAAQ0J,kBAiB1CuB,GAA4B,SAACR,GACtC,OAAO,2BACAA,GADP,IAEI/a,IAAKS,2BAAgBsa,EAAW/a,KAChCE,IAAKO,2BAAgBsa,EAAW7a,KAChCmb,cAAe5a,2BAAgBsa,EAAWM,eAC1CG,sCAAkC/a,2BAAgBsa,EAAWS,0CC5BxDC,GAAmC,SAC5C9c,EACAoc,EACAW,GAEA,IAAMC,EAAmBZ,EAAWY,mBAAqB1P,WAAQa,IAC3D8O,EAAoBb,EAAWa,yBAAsB3P,WAAQa,IAE7D+O,EAAuB,yBACzBZ,kBAAa,aAAKF,EAAWE,mBAC7Ba,wBAAoBf,EAAWe,wBAC/BH,oBACIA,EACE,CACII,oBAAqBhB,EAAWgB,qBAEpC,CACIC,oBAAqBjB,EAAWkB,gBAC1B,CACI3b,SAAUya,EAAWkB,gBACrBC,SAAUjY,0BAAe8W,EAAWkB,gBAAiBtd,SAEzD4B,IAdS,IAiBzB0O,SAAUkN,gCAAsBpB,EAAW/a,KAC3CkP,SAAU6L,EAAWqB,2BAAiC7b,IAAnBwa,EAAW7a,IAAoB,KAAOic,gCAAsBpB,EAAW7a,KAC1Gmc,oBAAgBtB,EAAWsB,oBAC3BC,eAAgBlB,GAAkCL,EAAW/a,OAGjE,GAAI+a,EAAWwB,2DAAkD,CAC7D,IAAMC,EAAUzB,EAAWwB,6DAAqDtQ,WAAQa,IAEpF0O,EAGAT,EAHAS,sCACAiB,EAEA1B,EAFA0B,4CACAC,EACA3B,EADA2B,qDAGAF,GACAhB,QACoDjb,IAApDmc,GACAD,IAEAZ,EAAKc,aAAe,CAChB5N,KAAMoN,gCAAsBX,GAC5BoB,WAAYH,EACZI,oBAAqBH,KAK7B1B,GAAqBD,EAAWE,qBAA6C,IAA5BS,IACjDG,EAAKiB,qBAAkB/B,EAAW+B,uBAAoB7Q,WAAQa,KAG9DiO,EAAWgC,oEACWhC,EAAWgC,mEAA2D9Q,WAAQa,KAC/EiO,EAAWM,gBAC5BQ,EAAKmB,0CAAuC,CACxC3B,cAAec,gCAAsBpB,EAAWM,kBAsB5D,OAjBIO,GAAqBb,EAAWkC,0BAAuBlC,EAAWmC,8BAClErB,EAAKsB,oBAAiB,CAClBhZ,KAAM4W,EAAWkC,yBACjBG,QAASrC,EAAWmC,8BAIvBtB,GACGb,EAAWsC,aAAepR,WAAQa,KAAOiO,EAAWuC,cAAgBvC,EAAWwC,kBAC/E1B,EAAK2B,QAAU,CACXrZ,KAAM4W,EAAWuC,aACjBF,QAASrC,EAAWwC,gBACpBE,wBAAyB1C,EAAW2C,oCAAsCzR,WAAQa,MAKvF+O,G,wCCrEI8B,GATO,SAAC,GAAmC,IAAjC7B,EAAgC,EAAhCA,wBACfle,EAAO2D,cACb,OACI,cAAC,KAAD,UACK1D,IAAWD,EAAM,sCAAuC,CAAEke,+BCiCjE8B,GAAe,UAEf7c,GAAOC,oCAOP6c,GAA4B,SAAC/b,GAC/B,GANsB,SAACA,GACvB,IAAM6K,EAAU7L,2BAAgBgB,EAAO9B,KACvC,YAAmBO,IAAZoM,GAAyByO,GAAkCzO,GAI9DmR,CAAkBhc,GAClB,OAAOA,EAAOua,qBAkVP0B,GA7UQ,SAAC,GAAqF,IAAnFzc,EAAkF,EAAlFA,SAAUyZ,EAAwE,EAAxEA,WAAY1Z,EAA4D,EAA5DA,SAAU2c,EAAkD,EAAlDA,eAAgBC,EAAkC,EAAlCA,qBAahErgB,EAAO2D,cACP2c,EAAU,SAACC,EAAaxQ,GAAd,OAAsC9P,IAAWD,EAAD,8BAA8BugB,GAAOxQ,IAC/FyQ,GAA8E,KAA5C,OAAdJ,QAAc,IAAdA,OAAA,EAAAA,EAAiBvE,GAAoBqD,uBACzDuB,GAA6C,KAAjB,OAAdL,QAAc,IAAdA,OAAA,EAAAA,EAAgBX,YAEpC,OACI,cAAC,GAAK7b,cAAN,CACIC,cAAesZ,EAAaQ,GAA0BR,GAAc,CAAEE,kBAAc,IACpF5Z,SApBe,SAACS,GACpB,IHlDJnB,EACAC,EGiDU0d,GHlDV3d,EGkDyDmB,EHjDzDlB,EGiDwD,OAASma,QAAT,IAASA,OAAT,EAASA,EAAYna,GH/CtE,2BACAD,GADP,IAEIC,GAAIA,GAAMC,kBACVb,IAAKc,2BAAgBH,EAAWX,KAChCE,IAAKY,2BAAgBH,EAAWT,KAChCmb,cAAeva,2BAAgBH,EAAW0a,eAC1CG,sCAAkC1a,2BAAgBH,EAAW6a,0CG0C7D,IAAIV,GAAawD,GAMb,MAAM,IAAI3c,MAAM,mEALhBN,EAAS,2BACFid,GADC,IAEJjC,oBAAgBwB,GAA0B/b,OAgB9CF,WAAY,SAACC,GAA+C,IAChDC,EAA0BD,EAA1BC,OAAQyc,EAAkB1c,EAAlB0c,cADuC,EAEPzc,EAAxCga,+BAF+C,MAE1B,eAF0B,EAGjDnP,EAAU7L,2BAAgBgB,EAAO9B,KACvC,OACI,eAAC,GAAKe,KAAN,CACIyd,0BAA0B,EAC1Bld,SAAUA,EACVe,mBAAoB,SAACC,GAAD,OAAWC,mCAAyB3E,EAAM0E,IAHlE,UAII,cAAC,IAAD,CAAK3C,UAAU,IAAf,SACI,cAAC,eAAD,CAAcE,IAAI,KAAlB,SAAwBqe,EAAQ,kBAEpC,cAAC,GAAKO,mBAAN,CACI3b,KAAM2W,GAAoBwB,kBAC1BxY,OAAQyb,EAAQ,2BAChBQ,WAAY,CACR,CACI/Q,MAAO6L,GAAY2B,OACnBpY,MAAOmb,EAAQ,0BAEnB,CACIvQ,MAAO6L,GAAYmF,SACnB5b,MAAOmb,EAAQ,8BAEnB,CACIvQ,MAAO6L,GAAYoF,SACnB7b,MAAOmb,EAAQ,4BAEnB,CACIvQ,MAAO6L,GAAYqF,MACnB9b,MAAOmb,EAAQ,0BAGvBlb,SAAUsD,yBAGb0U,GAAqBlZ,EAAOmZ,mBAAgB,MAA6B,IAAtBmD,GAChD,cAAC,IAAD,CAAKxe,OAAO,KAAZ,SACI,cAAC,yBAAD,CACIkD,KAAM2W,GAAoBqD,qBAC1Bra,OAAQyb,EAAQ,iBAChBlb,SAAUwK,gCAKtB,cAAC,IAAD,CAAK5N,OAAO,KAAZ,SACI,cAAC,GAAK0J,MAAN,CACIxG,KAAM2W,GAAoBqC,wBAC1B/Y,MAAOmb,EAAQ,0BACflb,SAAU2G,wBACVF,UAAW,OAIlBuR,GAAqBlZ,EAAOmZ,mBAAgB,UACX1a,IAA9BuB,EAAOga,yBACP1S,oBAAS0S,IACL,cAAC,IAAD,CAAKlc,OAAO,KAAZ,SACI,cAAC,GAAD,CAAekc,wBAAoBha,EAAOga,4BAItD,cAAC,IAAD,CAAKlc,OAAO,KAAZ,SACI,cAAC,GAAK0N,gBAAN,CACIxK,KAAM2W,GAAoBkC,iBAC1BlZ,OAAQyb,EAAQ,oBAAqB,CAAEpC,4BACvC9Y,SAAUwK,gCAIjB1L,EAAO6Z,mBAAqB1P,WAAQgF,IACjC,cAAC,IAAD,CAAKrR,OAAO,KAAZ,SACI,cAAC,GAAK0D,cAAN,CACIR,KAAM2W,GAAoBwC,gBAC1BlZ,MAAOmb,EAAQ,2BAA4B,CAAEpC,4BAC7C9Y,SAAU2G,wBACVmV,eAAe,MAK1Bhd,EAAO6Z,mBAAqB1P,WAAQa,KACjC,cAAC,IAAD,CAAKlN,OAAO,KAAZ,SACI,cAAC,GAAK0J,MAAN,CACIxG,KAAM2W,GAAoBsC,oBAC1BhZ,MAAOmb,EAAQ,uBACf/Y,MAAO,CAAE4Z,SAAU,SACnBtV,UAAW,EACXzG,SACIib,OACM1d,EACA,SAACoN,GAAD,OACIqR,4BAAkBrR,EAAO7L,EAAO6Z,mBAAqB1P,WAAQa,WAMrFhL,EAAO6Z,mBAAqB1P,WAAQa,KAAOhL,EAAO6Z,mBAAqB1P,WAAQgF,KAC7E,eAAC,IAAD,CAAKrR,OAAO,KAAZ,UACI,cAAC,GAAK4C,gBAAN,CACIC,OAAQyb,EAAQ,YAAa,CAAEpC,4BAC/B5C,kBAAkB,EAClBhY,QAASmM,YACTxK,eAAgB,CACZE,MAAOmb,EAAQ,gBACfpb,KAAM2W,GAAoBzZ,IAC1BgD,SAAU2G,yBAEdvG,aAAc,CACVL,MAAOmb,EAAQ,gBACfpb,KAAM2W,GAAoBvZ,IAC1B+e,UAAgC,IAAtBnd,EAAOsa,wBAGzB,cAAC,GAAK8C,SAAN,CACInc,MAAOmb,EAAQ,2BACfpb,KAAM2W,GAAoB2C,qBAC1B+C,cAAe,SAACtF,GACRA,GACA0E,EAAc9E,GAAoBvZ,SAAKK,SAO1DoM,GAAWyO,GAAkCzO,IAC1C,qCACI,cAAC,IAAD,CAAK/M,OAAO,KAAZ,SACI,cAAC,GAAK0J,MAAN,CACIxG,KAAM2W,GAAoB4C,oBAC1BtZ,MAAOmb,EAAQ,qBACfkB,KAAK,SACL3V,UAAW,GACX4V,IAAKzB,GACLzY,MAAO,CAAE4Z,SAAU,SACnB/b,SAAUsc,iCAAuB,CAAEC,IAAK,EAAGF,IAAKzB,KAChDhI,YACI,cAAC,KAAD,CAAgBlW,MAAOwe,EAAQ,gCAA/B,SACKA,EAAQ,gCAKzB,cAAC,IAAD,CAAKte,OAAO,KAAZ,SACI,cAAC,GAAK0N,gBAAN,CACIxK,KACI2W,GAAoBsD,iEAExBta,OAAQyb,EAAQ,wBAChBlb,SAAUwK,4BACVoI,YACI,cAAC,KAAD,CAAgBlW,MAAOwe,EAAQ,mCAA/B,SACKA,EAAQ,mCAKxBpc,EAAOib,mEAA2D9Q,WAAQa,KACvE,cAAC,KAAD,CAAWlN,OAAO,IAAlB,SACI,cAAC,KAAD,UACI,cAAC,GAAK+V,WAAN,CACI7S,KAAM2W,GAAoB4B,cAC1BtY,MAAOmb,EAAQ,6BACfhF,kBAAkB,EAClB/X,QAASqe,gBACTte,QAASmM,YACTrK,SAAU2G,iCAOjCgD,IAA0D,IAA/CyO,GAAkCzO,IAC1C,qCACI,cAAC,IAAD,CAAK/M,OAAO,KAAZ,SACI,cAAC,GAAK0N,gBAAN,CACIxK,KAAM2W,GAAoB8C,2DAC1B9Z,OAAQyb,EAAQ,qBAChBlb,SAAUwK,gCAGjB1L,EAAOya,6DAAqDtQ,WAAQa,KACjE,qCACI,cAAC,IAAD,CAAKlN,OAAO,KAAZ,SACI,cAAC,GAAK+V,WAAN,CACI7S,KAAM2W,GAAoB+B,sCAC1BzY,MAAOmb,EAAQ,sBACflb,SAAU2G,wBACVxI,QAAS6Y,gBACT9Y,QAASmM,gBAGjB,cAAC,IAAD,CAAKzN,OAAO,KAAZ,SACI,cAAC,GAAK0J,MAAN,CACIxG,KACI2W,GAAoBiD,qDAExB3Z,MAAOmb,EAAQ,yBACfkB,KAAK,SACL3V,UAAW,GACX4V,IAAKzB,GACLzY,MAAO,CAAE4Z,SAAU,SACnB/b,SAAUsc,iCAAuB,CAAEC,IAAK,EAAGF,IAAKzB,SAGxD,cAAC,IAAD,CAAKhe,OAAO,KAAZ,SACI,cAAC,GAAK6f,SAAN,CACI3c,KAAM2W,GAAoBgD,4CAC1B1Z,MAAOmb,EAAQ,uBACflb,SAAU2G,wBACVF,UAAW,eAQjC3H,EAAO9B,KAAO8B,EAAO6Z,mBAAqB1P,WAAQa,MAChD,qCACI,cAAC,IAAD,CAAKlN,OAAO,KAAZ,SACI,cAAC,GAAK0N,gBAAN,CACIxK,KAAM2W,GAAoBmC,uBAC1BnZ,OAAQyb,EAAQ,yBAChBlb,SAAUwK,gCAIjB1L,EAAO8Z,yBAAsB3P,WAAQa,KAClC,cAAC,KAAD,CAAWlN,OAAO,IAAlB,SACI,eAAC,KAAD,WACI,cAAC,GAAK0J,MAAN,CACIxG,KAAM2W,GAAoBwD,yBAC1Bla,MAAOmb,EAAQ,0BACflb,SAAU2G,wBACVF,UAAW,KAEf,cAAC,IAAD,CAAK7J,OAAO,KAAZ,SACI,cAAC,GAAK0J,MAAN,CACIxG,KAAM2W,GAAoByD,4BAC1Bna,MAAOmb,EAAQ,6BACflb,SAAU0c,sBACVjW,UAAW,YAO9B3H,EAAO8Z,yBAAsB3P,WAAQgF,KAAsB,IAAhBoN,GACxC,qCACI,cAAC,IAAD,CAAKze,OAAO,KAAZ,SACI,cAAC,GAAK0N,gBAAN,CACIxK,KAAM2W,GAAoB4D,WAC1B5a,OAAQyb,EAAQ,eAChBlb,SAAUwK,gCAIjB1L,EAAOub,aAAepR,WAAQa,KAC3B,cAAC,KAAD,CAAWlN,OAAO,IAAlB,SACI,eAAC,KAAD,WACI,cAAC,GAAK0J,MAAN,CACIxG,KAAM2W,GAAoB6D,aAC1Bva,MAAOmb,EAAQ,gBACflb,SAAU2G,wBACVF,UAAW,KAEf,cAAC,IAAD,CAAK7J,OAAO,KAAZ,SACI,cAAC,GAAK0J,MAAN,CACIxG,KAAM2W,GAAoB8D,gBAC1Bxa,MAAOmb,EAAQ,mBACflb,SAAU0c,sBACVjW,UAAW,OAGnB,cAAC,IAAD,CAAK7J,OAAO,KAAZ,SACI,cAAC,GAAK0N,gBAAN,CACIxK,KAAM2W,GAAoBiE,kCAC1Bjb,OAAQyb,EAAQ,oBAChBlb,SAAUwK,4CAU5C1L,EAAO8Z,yBAAsB3P,WAAQa,KAClChL,EAAOub,YAAcvb,EAAOub,aAAepR,WAAQC,aACpD,cAAC,IAAD,CAAKtM,OAAO,KAAZ,SACI,eAAC,KAAD,WACKse,EAAQ,6BACT,uBACCA,EAAQ,yCCnXvC1a,I,OAAMC,KAAS,mBA0BNkc,GAxBQ,SAAC,GAAoD,IAAD,IAAjDC,oBAAiD,MAAlC,GAAkC,EAA9Bhc,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,OAYnD,OACI,cAAC,KAAD,CACIC,UAAW,SAAC+b,GAAD,OAAYA,EAAO9D,qBAC9B/X,aAAc,SAAC6b,GAAD,OAAYA,EAAO/D,yBACjClY,SAAUA,EACVC,OAAQA,EACRK,cAjBY,SAAC2b,GACjB,OACI,qBAAK1gB,UAAWqE,GAAIY,QAAQ,SAA5B,SACI,uBAAMjF,UAAWqE,GAAIY,QAAQ,QAA7B,UACKP,GAAU,cAAC,KAAD,CAAYQ,QAAS,kBAAMR,EAAOgc,IAAlC,SAA4CA,EAAO/D,2BAC5DjY,GAAU,+BAAOgc,EAAO/D,gCAalCvX,MAAOqb,EAAazd,QAAO,SAAC0d,GAAD,YAA0Btf,IAAdsf,EAAOjf,SCc3Ckf,IC/BV5a,GD+BU4a,GAhCf,YAOuB,IANnBhd,EAMkB,EANlBA,KACAE,EAKkB,EALlBA,SACAyB,EAIkB,EAJlBA,OACAuZ,EAGkB,EAHlBA,eACAC,EAEkB,EAFlBA,qBACA8B,EACkB,EADlBA,cAEA,OACI,cAAC,0BAAD,CACIjd,KAAMA,EACN2B,OAAQA,EACRzB,SAAUA,EACV0B,YAAY,SACZC,SAAUC,iBACVC,aAAc,gBAAGxD,EAAH,EAAGA,SAAUC,EAAb,EAAaA,SAAUwD,EAAvB,EAAuBA,KAAvB,OACV,cAAC,GAAD,CACIiW,WAAYjW,EACZzD,SAAUA,EACVC,SAAUA,EACV2c,qBAAsBA,EACtBD,eAAgBA,KAGxBhZ,aAAc,gBAAGT,EAAH,EAAGA,MAAOV,EAAV,EAAUA,OAAQD,EAAlB,EAAkBA,SAAlB,OACV,cAAC,GAAD,CAAiBgc,aAAcrb,EAAOV,OAAQA,EAAQD,SAAUA,KAEpEmc,cAAeA,M,SC1BtB7a,K,6BAAAA,Q,KAMcsU,GAAYqF,MAAOrF,GAAYoF,SAE5B3S,WAAQa,IAErB,IAAIkT,KAAK,4BAEoC/T,WAAQa,IACxB,IAAIkT,KAAK,4BAGxB/T,WAAQa,IACfb,WAAQa,IAbjB,IClBK0M,GAOAyG,GDgCNxe,GAA4B,CAAEme,aAAc,IA0FnCM,GAxFW,WAAO,IAAD,EACoBta,wBAA0CrF,GAD9D,mBACrBsF,EADqB,KACHC,EADG,OAEgBF,wBAA0CrF,GAF1D,mBAErBwF,EAFqB,KAELC,EAFK,OAGQJ,oBAAkB,GAH1B,mBAGrBua,EAHqB,KAGTC,EAHS,OAIUxa,oBAAkB,GAJ5B,mBAIrByY,EAJqB,KAIRgC,EAJQ,KAKtBziB,EAAO2D,cACb,OACI,qCACI,cAAC,EAAD,CAAW7B,MAAM,uBAAjB,6EACA,cAAC,IAAD,CAAKC,UAAU,IAAf,SACI,cAAC,cAAD,gCAEJ,eAAC,KAAD,CAAOsG,QAAQ,EAAf,UACI,cAAC,sBAAD,CACIxE,cAAeA,GACfJ,SAAU2E,EACVpE,WAAY,WACR,OACI,cAAC,mBAAD,CACIsE,gBAAgB,EAChBC,kBAAkB,iBAClB9D,mBAAoB,SAACC,GAAD,OAAWC,mCAAyB3E,EAAM0E,IAHlE,SAII,cAAC,GAAD,CACIQ,KAAMoC,GAAU0a,aAChB5c,SAAUsD,uBACV0X,eAAgB,CAAElB,qBAAiBqD,EAAY9C,WAAYgB,GAC3D5Z,OAAQ,CACJ8B,SAAU,WACVC,UAAW,aACXC,WAAY,qBAOpC,cAAC,GAAD,CAAe3E,OAAQiE,OAG3B,cAAC,IAAD,CAAKnG,OAAO,MAAMD,UAAU,IAA5B,SACI,cAAC,cAAD,2BAEJ,cAAC,KAAD,CAAmBP,MAAM,OAAzB,SACI,eAAC,KAAD,CAAO6G,QAAQ,EAAf,UACI,cAAC,GAAD,CACI+X,eAAgB,CAAElB,qBAAiBqD,EAAY9C,WAAYgB,GAC3D/c,SAAU,kBAAMwE,EAAoB,KACpCzE,SAAU,SAACS,GAAD,OAAYgE,EAAoBhE,MAE9C,eAAC,IAAD,CAAKlC,OAAO,IAAZ,UACI,uBACA,eAAC,KAAD,CAAOuF,MAAO,CAAEG,QAAS,QAAzB,UACI,cAAC,IAAD,CAAK3F,UAAU,IAAf,6CACA,cAAC,IAAD,CAAKC,OAAO,IAAZ,SACI,cAAC,YAAD,CACImD,MAAM,sBACN8W,QAASsG,EACTpY,SAAU,SAAC+R,GAAD,OAASsG,EAActG,EAAIwG,cAAczG,cAG3D,cAAC,IAAD,CAAKja,OAAO,IAAZ,SACI,cAAC,YAAD,CACImD,MAAM,UACN8W,QAASwE,EACTtW,SAAU,SAAC+R,GAAD,OAASuG,EAAevG,EAAIwG,cAAczG,oBAKpE,cAAC,IAAD,CAAKja,OAAO,IAAZ,SACI,cAAC,GAAD,CAAekC,OAAQ+D,MAE3B,eAAC,IAAD,CAAKjG,OAAO,KAAZ,UACI,cAAC,cAAD,uBACA,cAAC,GAAD,CACIkC,OACI+D,GAAoBiV,GAAajV,GAC3B4V,GAAiC7d,EAAKe,OAAQkH,QAC9CtF,gBE9GvBggB,GATD,kBACV,mCACI,cAAC,EAAD,CAAW7gB,MAAM,mBAAjB,oO,qBC2CO8gB,GAjCD,WACV,IAAMC,EAAiE,GASvE,OARAA,EAAaC,KAAK,CAAEhhB,MAAO,gBAAiBZ,SAAUxB,IACtDmjB,EAAaC,KAAK,CAAEhhB,MAAO,aAAcZ,SAAUrB,IACnDgjB,EAAaC,KAAK,CAAEhhB,MAAO,aAAcZ,SAAUd,IACnDyiB,EAAaC,KAAK,CAAEhhB,MAAO,YAAUZ,SAAUhB,IAC/C2iB,EAAaC,KAAK,CAAEhhB,MAAO,cAAeZ,SAAUZ,IACpDuiB,EAAaC,KAAK,CAAEhhB,MAAO,mBAAoBZ,SAAUf,IACzD0iB,EAAaC,KAAK,CAAEhhB,MAAO,wDAAmDZ,SAAUb,IACxFwiB,EAAaC,KAAK,CAAEhhB,MAAO,aAAcZ,SAAUX,IAE/C,gCACI,cAAC,IAAD,UACI,cAAC,KAAD,MAEHsiB,EAAave,KAAI,YAA0B,IAAvBxC,EAAsB,EAAtBA,MAAOZ,EAAe,EAAfA,SACxB,OACI,8BACI,cAAC,KAAD,CAAWc,OAAO,OAAO+gB,cAAc,KAAvC,SACI,cAAC,IAAD,CACI7hB,SAAUA,EACVY,MAAOA,EACPmH,iBAAiB,EACjB+Z,wBAAwB,OAN1BlhB,UCdfie,GATO,SAAC,GAAmC,IAAjC7B,EAAgC,EAAhCA,wBACfle,EAAO2D,cACb,OACI,cAAC,KAAD,UACK1D,IAAWD,EAAM,yDAAuD,CAAEke,gC,SHV3EtC,K,eAAAA,E,6BAAAA,E,oBAAAA,E,eAAAA,Q,cAOAyG,K,qCAAAA,E,2CAAAA,E,UAAAA,E,UAAAA,E,yCAAAA,E,uCAAAA,E,iDAAAA,E,0CAAAA,E,oCAAAA,E,kCAAAA,E,+HAAAA,E,8BAAAA,E,mHAAAA,E,6EAAAA,E,2GAAAA,E,yFAAAA,E,2EAAAA,E,+CAAAA,E,yCAAAA,E,mDAAAA,E,yDAAAA,E,wBAAAA,E,4BAAAA,E,kCAAAA,E,uEAAAA,Q,KA2DL,IAAMY,GAA+B,SACxCC,GAEA,YAAgBvgB,IAATugB,GIlEE9F,GAAuB,SAACC,GAAD,YACuB1a,IAAvD0a,EAAaR,MAAK,SAACS,GAAD,OAAOA,IAAM1B,GAAY2B,WAElCC,GAAoC,SAACC,GAC9C,OAAOtc,IAAMsc,GAAeC,QAAQ,OAAOhL,QAAQ0J,kBAiB1C+G,GAA4C,SACrDD,GAEA,OAAO,2BACAA,GADP,IAEI9gB,IAAKS,2BAAgBqgB,EAAK9gB,KAC1BE,IAAKO,2BAAgBqgB,EAAK5gB,KAC1Bmb,cAAe5a,2BAAgBqgB,EAAKzF,eACpCG,sCAAkC/a,2BAAgBqgB,EAAKtF,0CCQzDoC,GAAe,UAEf7c,GAAOC,oCAOP6c,GAA4B,SAAC/b,GAC/B,GANsB,SAACA,GACvB,IAAM6K,EAAU7L,2BAAgBgB,EAAO9B,KACvC,YAAmBO,IAAZoM,GAAyByO,GAAkCzO,GAI9DmR,CAAkBhc,GAClB,OAAOA,EAAOua,qBA2SP2E,GAtSwB,SAAC,GAAyC,IAAvC1f,EAAsC,EAAtCA,SAAUwf,EAA4B,EAA5BA,KAAMzf,EAAsB,EAAtBA,SAahDzD,EAAO2D,cACP2c,EAAU,SAACC,EAAaxQ,GAAd,OACZ9P,IAAWD,EAAD,iDAA8CugB,GAAOxQ,IAEnE,OACI,cAAC,GAAKnM,cAAN,CACIC,cAAeqf,EAAOC,GAA0CD,GAAQ,CAAE7F,kBAAc,IACxF5Z,SAnBe,SAACS,GACpB,ID/CJnB,EACAC,EC8CU0d,GD/CV3d,EC+CyEmB,ED9CzElB,EC8CwE,OAASkgB,QAAT,IAASA,OAAT,EAASA,EAAMlgB,GD5ChF,2BACAD,GADP,IAEIC,GAAIA,GAAMC,kBACVb,IAAKc,2BAAgBH,EAAWX,KAChCE,IAAKY,2BAAgBH,EAAWT,KAChCmb,cAAeva,2BAAgBH,EAAW0a,eAC1CG,sCAAkC1a,2BAAgBH,EAAW6a,0CCuC7D,IAAIqF,GAA6BvC,GAM7B,MAAM,IAAI3c,MAAM,sFALhBN,EAAS,2BACFid,GADC,IAEJjC,oBAAgBwB,GAA0B/b,OAe9CF,WAAY,SAACC,GAA+D,IAChEC,EAA0BD,EAA1BC,OAAQyc,EAAkB1c,EAAlB0c,cADuD,EAEvBzc,EAAxCga,+BAF+D,MAE1C,eAF0C,EAGjEnP,EAAU7L,2BAAgBgB,EAAO9B,KACvC,OACI,eAAC,GAAKe,KAAN,CACIyd,0BAA0B,EAC1Bld,SAAUA,EACVe,mBAAoB,SAACC,GAAD,OAAWC,mCAAyB3E,EAAM0E,IAHlE,UAII,cAAC,IAAD,CAAK3C,UAAU,IAAf,SACI,cAAC,eAAD,CAAcE,IAAI,KAAlB,SAAwBqe,EAAQ,kBAEpC,cAAC,GAAKO,mBAAN,CACI3b,KAAMmd,GAAoChF,kBAC1CxY,OAAQyb,EAAQ,2BAChBQ,WAAY,CACR,CACI/Q,MAAO6L,GAAY2B,OACnBpY,MAAOmb,EAAQ,0BAEnB,CACIvQ,MAAO6L,GAAYmF,SACnB5b,MAAOmb,EAAQ,8BAEnB,CACIvQ,MAAO6L,GAAYoF,SACnB7b,MAAOmb,EAAQ,4BAEnB,CACIvQ,MAAO6L,GAAYqF,MACnB9b,MAAOmb,EAAQ,0BAGvBlb,SAAUsD,yBAGb0U,GAAqBlZ,EAAOmZ,mBAAgB,KACzC,cAAC,IAAD,CAAKrb,OAAO,KAAZ,SACI,cAAC,yBAAD,CACIkD,KAAMmd,GAAoCnD,qBAC1Cra,OAAQyb,EAAQ,iBAChBlb,SAAUwK,gCAKtB,cAAC,IAAD,CAAK5N,OAAO,KAAZ,SACI,cAAC,GAAK0J,MAAN,CACIxG,KAAMmd,GAAoCnE,wBAC1C/Y,MAAOmb,EAAQ,0BACflb,SAAU2G,wBACVF,UAAW,OAIlBuR,GAAqBlZ,EAAOmZ,mBAAgB,UACX1a,IAA9BuB,EAAOga,yBACP1S,oBAAS0S,IACL,cAAC,IAAD,CAAKlc,OAAO,KAAZ,SACI,cAAC,GAAD,CAAekc,wBAAoBha,EAAOga,4BAItD,cAAC,IAAD,CAAKlc,OAAO,KAAZ,SACI,cAAC,GAAK0N,gBAAN,CACIxK,KAAMmd,GAAoCtE,iBAC1ClZ,OAAQyb,EAAQ,oBAAqB,CAAEpC,4BACvC9Y,SAAUwK,gCAIjB1L,EAAO6Z,mBAAqB1P,WAAQgF,IACjC,cAAC,IAAD,CAAKrR,OAAO,KAAZ,SACI,cAAC,GAAK0D,cAAN,CACIR,KAAMmd,GAAoChE,gBAC1ClZ,MAAOmb,EAAQ,2BAA4B,CAAEpC,4BAC7C9Y,SAAU2G,wBACVmV,eAAe,MAK1Bhd,EAAO6Z,mBAAqB1P,WAAQa,KACjC,cAAC,IAAD,CAAKlN,OAAO,KAAZ,SACI,cAAC,GAAK0J,MAAN,CACIxG,KAAMmd,GAAoClE,oBAC1ChZ,MAAOmb,EAAQ,uBACf/Y,MAAO,CAAE4Z,SAAU,SACnBtV,UAAW,EACXzG,SAAU,SAAC2K,GAAD,OACNqR,4BAAkBrR,EAAO7L,EAAO6Z,mBAAqB1P,WAAQa,WAM3EhL,EAAO6Z,mBAAqB1P,WAAQa,KAAOhL,EAAO6Z,mBAAqB1P,WAAQgF,KAC7E,eAAC,IAAD,CAAKrR,OAAO,KAAZ,UACI,cAAC,GAAK4C,gBAAN,CACIC,OAAQyb,EAAQ,YAAa,CAAEpC,4BAC/B5C,kBAAkB,EAClBhY,QAASmM,YACTxK,eAAgB,CACZE,MAAOmb,EAAQ,gBACfpb,KAAMmd,GAAoCjgB,IAC1CgD,SAAU2G,yBAEdvG,aAAc,CACVL,MAAOmb,EAAQ,gBACfpb,KAAMmd,GAAoC/f,IAC1C+e,UAAgC,IAAtBnd,EAAOsa,wBAGzB,cAAC,GAAK8C,SAAN,CACInc,MAAOmb,EAAQ,2BACfpb,KAAMmd,GAAoC7D,qBAC1C+C,cAAe,SAACtF,GACRA,GACA0E,EAAc0B,GAAoC/f,SAAKK,SAO1EoM,GAAWyO,GAAkCzO,IAC1C,qCACI,cAAC,IAAD,CAAK/M,OAAO,KAAZ,SACI,cAAC,GAAK0J,MAAN,CACIxG,KAAMmd,GAAoC5D,oBAC1CtZ,MAAOmb,EAAQ,qBACfkB,KAAK,SACL3V,UAAW,GACX4V,IAAKzB,GACLzY,MAAO,CAAE4Z,SAAU,SACnB/b,SAAUsc,iCAAuB,CAAEC,IAAK,EAAGF,IAAKzB,KAChDhI,YACI,cAAC,KAAD,CAAgBlW,MAAOwe,EAAQ,gCAA/B,SACKA,EAAQ,gCAKzB,cAAC,IAAD,CAAKte,OAAO,KAAZ,SACI,cAAC,GAAK0N,gBAAN,CACIxK,KACImd,GAAoClD,iEAExCta,OAAQyb,EAAQ,wBAChBlb,SAAUwK,4BACVoI,YACI,cAAC,KAAD,CAAgBlW,MAAOwe,EAAQ,mCAA/B,SACKA,EAAQ,mCAKxBpc,EAAOib,mEAA2D9Q,WAAQa,KACvE,cAAC,KAAD,CAAWlN,OAAO,IAAlB,SACI,cAAC,KAAD,UACI,cAAC,GAAK+V,WAAN,CACI7S,KAAMmd,GAAoC5E,cAC1CtY,MAAOmb,EAAQ,6BACfhF,kBAAkB,EAClB/X,QAASqe,gBACTte,QAASmM,YACTrK,SAAU2G,iCAOjCgD,IAA0D,IAA/CyO,GAAkCzO,IAC1C,qCACI,cAAC,IAAD,CAAK/M,OAAO,KAAZ,SACI,cAAC,GAAK0N,gBAAN,CACIxK,KACImd,GAAoC1D,2DAExC9Z,OAAQyb,EAAQ,qBAChBlb,SAAUwK,gCAGjB1L,EAAOya,6DAAqDtQ,WAAQa,KACjE,qCACI,cAAC,IAAD,CAAKlN,OAAO,KAAZ,SACI,cAAC,GAAK+V,WAAN,CACI7S,KACImd,GAAoCzE,sCAExCzY,MAAOmb,EAAQ,sBACflb,SAAU2G,wBACVxI,QAAS6Y,gBACT9Y,QAASmM,gBAGjB,cAAC,IAAD,CAAKzN,OAAO,KAAZ,SACI,cAAC,GAAK0J,MAAN,CACIxG,KACImd,GAAoCvD,qDAExC3Z,MAAOmb,EAAQ,yBACfkB,KAAK,SACL3V,UAAW,GACX4V,IAAKzB,GACLzY,MAAO,CAAE4Z,SAAU,SACnB/b,SAAUsc,iCAAuB,CAAEC,IAAK,EAAGF,IAAKzB,SAGxD,cAAC,IAAD,CAAKhe,OAAO,KAAZ,SACI,cAAC,GAAK6f,SAAN,CACI3c,KACImd,GAAoCxD,4CAExC1Z,MAAOmb,EAAQ,uBACflb,SAAU2G,wBACVF,UAAW,eAQjC3H,EAAO9B,KAAO8B,EAAO6Z,mBAAqB1P,WAAQa,MAChD,qCACI,cAAC,IAAD,CAAKlN,OAAO,KAAZ,SACI,cAAC,GAAK0N,gBAAN,CACIxK,KAAMmd,GAAoCrE,uBAC1CnZ,OAAQyb,EAAQ,yBAChBlb,SAAUwK,gCAIjB1L,EAAO8Z,yBAAsB3P,WAAQa,KAClC,cAAC,KAAD,CAAWlN,OAAO,IAAlB,SACI,eAAC,KAAD,WACI,cAAC,GAAK0J,MAAN,CACIxG,KAAMmd,GAAoChD,yBAC1Cla,MAAOmb,EAAQ,0BACflb,SAAU2G,wBACVF,UAAW,KAEf,cAAC,IAAD,CAAK7J,OAAO,KAAZ,SACI,cAAC,GAAK0J,MAAN,CACIxG,KAAMmd,GAAoC/C,4BAC1Cna,MAAOmb,EAAQ,6BACflb,SAAU0c,sBACVjW,UAAW,eAQtC3H,EAAO8Z,yBAAsB3P,WAAQa,KAClC,cAAC,IAAD,CAAKlN,OAAO,KAAZ,SACI,eAAC,KAAD,WACKse,EAAQ,6BACT,uBACCA,EAAQ,yCCnT9B+C,ICdV/b,GDcU+b,GAtBf,YAKoB,IAJhBne,EAIe,EAJfA,KACAE,EAGe,EAHfA,SACAyB,EAEe,EAFfA,OAGA,OACI,cAAC,0BAAD,CACI3B,KAAMA,EACN2B,OAAQA,EACRzB,SAAUA,EACV0B,YAAY,SACZC,SAAUC,iBACVC,aAAc,gBAAGxD,EAAH,EAAGA,SAAUC,EAAb,EAAaA,SAAUwD,EAAvB,EAAuBA,KAAvB,OACV,cAAC,GAAD,CAAMgc,KAAMhc,EAAMzD,SAAUA,EAAUC,SAAUA,KAEpD0D,aAAc,kBAAM,6CExBnBkc,GAAuB,SAChCviB,EACAmiB,EACApF,GAEA,IAAMC,EAAmBmF,EAAKnF,mBAAqB1P,WAAQa,IACrD8O,EAAoBkF,EAAKlF,yBAAsB3P,WAAQa,IAEvD+O,EAAuC,yBACzCZ,kBAAa,aAAK6F,EAAK7F,mBACvBa,wBAAoBgF,EAAKhF,wBACzBH,oBACIA,EACE,CACII,oBAAqB+E,EAAK/E,qBAE9B,CACIC,oBAAqB8E,EAAK7E,gBACpB,CACI3b,SAAUwgB,EAAK7E,gBACfC,SAAUjY,0BAAe6c,EAAK7E,gBAAiBtd,SAEnD4B,IAdyB,IAiBzC0O,SAAUkN,gCAAsB2E,EAAK9gB,KACrCkP,SAAU4R,EAAK1E,2BAA2B7b,IAAbugB,EAAK5gB,IAAoB,KAAOic,gCAAsB2E,EAAK5gB,KACxFmc,oBAAgByE,EAAKzE,oBACrBC,eAAgBlB,GAAkC0F,EAAK9gB,OAG3D,GAAI8gB,EAAKvE,2DAAkD,CACvD,IAAMC,EAAUsE,EAAKvE,6DAAqDtQ,WAAQa,IAE9E0O,EAGAsF,EAHAtF,sCACAiB,EAEAqE,EAFArE,4CACAC,EACAoE,EADApE,qDAGAF,GACAhB,QACoDjb,IAApDmc,GACAD,IAEAZ,EAAKc,aAAe,CAChB5N,KAAMoN,gCAAsBX,GAC5BoB,WAAYH,EACZI,oBAAqBH,KAK7B1B,GAAqB8F,EAAK7F,qBAA6C,IAA5BS,IAC3CG,EAAKiB,qBAAkBgE,EAAKhE,uBAAoB7Q,WAAQa,KAGxDgU,EAAK/D,oEACiB+D,EAAK/D,mEAA2D9Q,WAAQa,KACzEgU,EAAKzF,gBACtBQ,EAAKmB,0CAAuC,CACxC3B,cAAec,gCAAsB2E,EAAKzF,kBAYtD,OAPIO,GAAqBkF,EAAK7D,0BAAuB6D,EAAK5D,8BACtDrB,EAAKsB,oBAAiB,CAClBhZ,KAAM2c,EAAK7D,yBACXG,QAAS0D,EAAK5D,8BAIfrB,I,SDxDN3W,K,aAAAA,Q,KAMcsU,GAAYqF,MAAOrF,GAAYoF,SAE5B3S,WAAQa,IAErB,IAAIkT,KAAK,4BAEoC/T,WAAQa,IACxB,IAAIkT,KAAK,4BAGxB/T,WAAQa,IAZxB,IAoBDrL,GAA4B,CAAEqf,UAAMvgB,GA6F3B4gB,GA3F2B,WAAO,IAAD,EACIvb,wBAC5CrF,GAFwC,mBACrCsF,EADqC,KACnBC,EADmB,OAIAF,wBAA0CrF,GAJ1C,mBAIrCwF,EAJqC,KAIrBC,EAJqB,OAKRJ,oBAAkB,GALV,mBAKrCua,EALqC,KAKzBC,EALyB,OAMNxa,oBAAkB,GANZ,mBAMrCyY,EANqC,KAMxBgC,EANwB,KAOtCziB,EAAO2D,cACb,OACI,qCACI,cAAC,EAAD,CAAW7B,MAAM,iCAAjB,mGAGA,cAAC,IAAD,CAAKC,UAAU,IAAf,SACI,cAAC,cAAD,gCAEJ,eAAC,KAAD,CAAOsG,QAAQ,EAAf,UACI,cAAC,sBAAD,CACIxE,cAAeA,GACfJ,SAAU2E,EACVpE,WAAY,WACR,OACI,cAAC,mBAAD,CACIsE,gBAAgB,EAChBC,kBAAkB,iBAClB9D,mBAAoB,SAACC,GAAD,OAAWC,mCAAyB3E,EAAM0E,IAHlE,SAII,cAAC,GAAD,CACIQ,KAAMoC,GAAU4b,KAChB9d,SAAUsD,uBACV7B,OAAQ,CACJ8B,SAAU,WACVC,UAAW,aACXC,WAAY,qBAOpC,cAAC,GAAD,CAAe3E,OAAQiE,OAG3B,cAAC,IAAD,CAAKnG,OAAO,MAAMD,UAAU,IAA5B,SACI,cAAC,cAAD,2BAGJ,cAAC,KAAD,CAAmBP,MAAM,OAAzB,SACI,eAAC,KAAD,CAAO6G,QAAQ,EAAf,UACI,cAAC,GAAD,CACI3E,SAAU,kBAAMwE,EAAoB,KACpCzE,SAAU,SAACS,GAAD,OAAYgE,EAAoBhE,MAE9C,eAAC,IAAD,CAAKlC,OAAO,IAAZ,UACI,uBACA,eAAC,KAAD,CAAOuF,MAAO,CAAEG,QAAS,QAAzB,UACI,cAAC,IAAD,CAAK3F,UAAU,IAAf,6CACA,cAAC,IAAD,CAAKC,OAAO,IAAZ,SACI,cAAC,YAAD,CACImD,MAAM,sBACN8W,QAASsG,EACTpY,SAAU,SAAC+R,GAAD,OAASsG,EAActG,EAAIwG,cAAczG,cAG3D,cAAC,IAAD,CAAKja,OAAO,IAAZ,SACI,cAAC,YAAD,CACImD,MAAM,UACN8W,QAASwE,EACTtW,SAAU,SAAC+R,GAAD,OAASuG,EAAevG,EAAIwG,cAAczG,oBAKpE,cAAC,IAAD,CAAKja,OAAO,IAAZ,SACI,cAAC,GAAD,CAAekC,OAAQ+D,MAE3B,eAAC,IAAD,CAAKjG,OAAO,KAAZ,UACI,cAAC,cAAD,uBACA,cAAC,GAAD,CACIkC,OACI+D,GAAoBgb,GAA6Bhb,GAC3Cqb,GAAqBtjB,EAAKe,OAAQkH,QAClCtF,gBElHzB6gB,GAAwB,CACjC,CACIlH,KAAM,YACNxa,MAAO,UACPya,cAAe,kBAAM,cAAC,GAAD,MAEzB,CACID,KAAM,eACNxa,MAAO,eACPya,cAAe,kBAAM,cAAC,GAAD,MAEzB,CACID,KAAM,cACNxa,MAAO,iCACPya,cAAe,kBAAM,cAAC,GAAD,MAEzB,CACID,KAAM,YACNxa,MAAO,uBACPya,cAAe,kBAAM,cAAC,GAAD,MAEzB,CACID,KAAM,QACNxa,MAAO,UACPya,cAAe,kBAAM,cAAC,GAAD,OAIhBkH,GAAgB,SAACnH,EAAcoH,GACxC,OAAOA,EAASC,QAAQrH,IAAS,GCpC/BsH,I,OAAiB,SAACC,GACpB,OACI,6BACI,cAAC,WAAD,CAAUtiB,UAAU,yBAApB,SACI,qBAAKuiB,YAAWD,EAAMvH,KAAtB,SAA6BuH,EAAM/hB,WAFlC+hB,EAAMvH,QAsCRyH,gBA5BI,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,QAEFN,EACZM,EADAC,SAAYP,SASVG,EAAQL,GAAO3G,MAAK,SAACC,GAAD,OAAO2G,GAAc3G,EAAER,KAAMoH,OAAcF,GAAO,GAC5E,OACI,qBAAKjiB,UAAU,aAAf,SACI,eAAC,UAAD,CAASA,UAAU,sBAAsB2iB,YATlC,SAAC1d,GACZ,IAAMsW,EAAItW,EAAQlF,MAAQkF,EAAQlF,MAAM,kBAAeqB,EACnDma,GACAkH,EAAQlB,KAAKhG,IAMb,UACI,eAAC,SAAD,CAAQvb,UAAU,qBAAlB,UACI,qBAAKA,UAAU,4BAAf,SAA4CsiB,EAAQA,EAAM/hB,MAAQ,SAClE,qBAAKP,UAAU,8BAAf,SACI,cAAC,aAAD,SAGR,cAAC,OAAD,CAAMA,UAAU,mBAAhB,SACI,6BAAKiiB,GAAOlf,IAAIsf,gBCnC9BO,I,MAAWte,KAAS,UAwBXke,gBAtBE,SAAC,GAIU,IAFRL,EAEO,EAHvBM,QACIC,SAAYP,SAGhB,OACI,qBAAKniB,UAAU,WAAf,SACKiiB,GAAOlf,KAAI,SAACuf,GAAD,OACR,cAAC,IAAD,CAEIxhB,GAAIwhB,EAAMvH,KACV/a,UAAW4iB,GAASC,WAChBD,GAASE,MACTF,GAASG,oBAAoB,SAAUb,GAAcI,EAAMvH,KAAMoH,KALzE,SAOKG,EAAM/hB,OANF+hB,EAAMvH,cCqBhByH,gBA5BI,SAAC,GAIN,IACJQ,EH+BoB,SAACb,GAC3B,OAAOF,GAAO3G,MAAK,SAAC5S,GAAD,OAAOwZ,GAAcxZ,EAAEqS,KAAMoH,MGhC5Bc,CADX,EAHTR,QACIC,SAAYP,UAIhB,OACI,qCACI,eAAC,IAAD,CAAYe,SAAU,KAAtB,UACI,uBAAOljB,UAAU,eAAjB,SACI,cAAC,GAAD,MAEJ,yBAASgG,MAAO,CAAE4Z,SAAU,UAAY5f,UAAU,cAAlD,SACKgjB,EAAcA,EAAYhI,gBAAkB,cAAC,GAAD,SAGrD,eAAC,IAAD,CAAY4E,SAAU,KAAtB,UACI,uBAAO5f,UAAU,kBAAjB,SACI,cAAC,GAAD,MAEJ,yBAASgG,MAAO,CAAE4Z,SAAU,UAAY5f,UAAU,cAAlD,SACKgjB,EAAcA,EAAYhI,gBAAkB,cAAC,GAAD,eCOlDmI,I,OAxBC,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,eACT3kB,EAAO2D,cACb,OACI,uBAAMpC,UAAU,UAAhB,UACI,yBAAQA,UAAU,SAAlB,UACI,sBAAMA,UAAU,UAAhB,SACI,cAAC,EAAD,MAEJ,sBAAMA,UAAU,gBAAhB,SACI,cAAC,eAAD,qDAEJ,sBAAMA,UAAU,kBAAhB,SACI,cAAC,IAAD,CAAgBqjB,OAAQD,EAAgB5jB,OAAQf,EAAKe,cAG7D,qBAAKQ,UAAU,iBAAf,SACI,cAAC,IAAD,UACI,cAAC,GAAD,aCnBdsjB,I,OAA2BC,yCAkBlBC,GAhBH,WAAO,IAAD,EACcC,WAAeH,IAA4B,MADzD,mBACP9jB,EADO,KACCkkB,EADD,KAEd,OACI,cAAC,cAAD,CAAahjB,IAAI,MAAjB,SACI,cAAC,EAAD,CAAiBlB,OAAQA,EAAzB,SACI,cAAC,GAAD,CACI4jB,eAAgB,SAACO,GACbC,oCAA0BD,GAC1BD,EAAUC,WCjBlCE,IAAMC,cAAc,SACpBC,IAASC,OAAO,cAAC,GAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.9db74a4c.chunk.js","sourcesContent":["const bostedUtlandMessages = {\n    nb: {\n        'bostedUtland.list.add': 'Legg til opphold',\n        'bostedUtland.form.tittel': 'Utenlandsopphold',\n        'bostedUtland.form.tidsperiode.spm': 'Tidsperiode',\n        'bostedUtland.form.tidsperiode.fraDato': 'Fra og med',\n        'bostedUtland.form.tidsperiode.tilDato': 'Til og med',\n        'bostedUtland.form.land.spm': 'Velg land',\n        'bostedUtland.form.ok': 'Legg til',\n        'bostedUtland.form.avbryt': 'Avbryt',\n    },\n    nn: {\n        'bostedUtland.list.add': 'Legg til opphald',\n        'bostedUtland.form.tittel': 'Utenlandsopphald',\n        'bostedUtland.form.tidsperiode.spm': 'Tidsperiode',\n        'bostedUtland.form.tidsperiode.fraDato': 'Frå og med',\n        'bostedUtland.form.tidsperiode.tilDato': 'Til og med',\n        'bostedUtland.form.land.spm': 'Velg land',\n        'bostedUtland.form.ok': 'Legg til',\n        'bostedUtland.form.avbryt': 'Avbryt',\n    },\n};\n\nexport default bostedUtlandMessages;\n","const ferieuttakMessages = {\n    nb: {\n        'ferieuttak.list.title': 'Registrer uttak av ferie',\n        'ferieuttak.list.fromDate': 'Fra og med',\n        'ferieuttak.list.toDate': 'Til og med',\n        'ferieuttak.list.intervalTitle': 'Velg tidsrom',\n        'ferieuttak.list.okButton': 'Ok',\n        'ferieuttak.list.cancelButton': 'Avbryt',\n        'ferieuttak.form.validation.required': 'Feltet er påkrevd',\n        'ferieuttak.form.validation.dateOutsideRange': 'Første gyldige dato er {fom}, og siste gyldige dato er {tom}',\n        'ferieuttak.form.validation.fromDateAfterToDate': 'Fra-dato må være lik eller før til-dato',\n        'ferieuttak.form.validation.toDateBeforeFromDate': 'Til-dato må være lik eller etter fra-dato',\n    },\n    nn: {\n        'ferieuttak.list.title': 'Registrer uttak av ferie',\n        'ferieuttak.list.fromDate': 'Frå og med',\n        'ferieuttak.list.toDate': 'Til og med',\n        'ferieuttak.list.intervalTitle': 'Velg tidsrom',\n        'ferieuttak.list.okButton': 'Ok',\n        'ferieuttak.list.cancelButton': 'Avbryt',\n        'ferieuttak.form.validation.required': 'Feltet er påkrevd',\n        'ferieuttak.form.validation.dateOutsideRange': 'Første gyldige dato er {fom}, og siste gyldige dato er {tom}',\n        'ferieuttak.form.validation.fromDateAfterToDate': 'Frå-dato må vere lik eller før til-dato',\n        'ferieuttak.form.validation.toDateBeforeFromDate': 'Til-dato må vere lik eller etter frå-dato',\n    },\n};\n\nexport default ferieuttakMessages;\n","import intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { IntlShape } from 'react-intl';\nimport { FraværÅrsak } from './types';\n\nconst fraværMessages = {\n    nb: {\n        'fravær.årsak.STENGT_SKOLE_ELLER_BARNEHAGE': 'Skolen/barnehagen var stengt på grunn av koronasituasjonen.',\n        'fravær.årsak.SMITTEVERNHENSYN':\n            'Skolen/barnehagen var åpen, men barnet måtte være hjemme på grunn av særlige smittevernhensyn.',\n        'fravær.årsak.STENGT_SKOLE_ELLER_BARNEHAGE.kort': 'stengt skole/barnehage',\n        'fravær.årsak.SMITTEVERNHENSYN.kort': 'særlige smittevernhensyn',\n\n        'fravær.list.årsak': 'På grunn av {årsak}',\n        'fravær.form.validation.required': 'Feltet er påkrevd',\n        'fravær.form.validation.dateOutsideRange': 'Første gyldige dato er {fom}, og siste gyldige dato er {tom}',\n        'fravær.form.validation.fromDateAfterToDate': 'Fra-dato må være lik eller før til-dato',\n        'fravær.form.validation.toDateBeforeFromDate': 'Til-dato må være lik eller etter fra-dato',\n        'fravær.form.validation.fra_og_til_er_ulike_år': 'Fra og til dato må være i samme år',\n        'fravær.form.validation.timer_mer_enn_arbeidstimer':\n            'Antall timer med fravær kan ikke være mer enn antall timer du skulle ha jobbet denne dagen',\n        'fravær.form.validation.er_helg': 'Lørdag og søndag er ikke gyldig.',\n        'fieldvalidation.dager_overlapper_med_andre_dager':\n            'Én eller flere dager med fravær overlapper med andre dager med fravær.',\n        'fieldvalidation.fra_dato_kolliderer_med_annet_fravær':\n            'Fra og med datoen overlapper med allerede registrert fraværsdag',\n        'fieldvalidation.til_dato_kolliderer_med_annet_fravær':\n            'Til og med datoen overlapper med allerede registrert fraværsdag',\n        'fieldvalidation.dato_kolliderer_med_annet_fravær': 'Datoen overlapper med allerede registrert fraværsdag',\n        'info.smittevern.tittel': 'Hva menes med særlige smittevernhensyn?',\n        'info.smittevern.info.html':\n            'Når barnehagen eller skolen er åpen, men du må være hjemme med barnet ditt på grunn <strong>av særlige smittevernhensyn</strong>, kan du bruke omsorgsdager. Det er en lege som avgjør om det foreligger særlige smittevernhensyn. Det kan være smittevernhensyn til barnet eller andre familiemedlemmer som bor med barnet.',\n        'info.årsak.tittel': 'Hva om begge årsakene gjelder i perioden jeg har lagt inn?',\n        'info.årsak.info.1': `Hvis du har vært hjemme med barn både fordi barnehage/skole var stengt, og på grunn av særlige smittevernshensyn, må du legge inn flere perioder. Når du har lagt inn én periode og trykker OK, får du mulighet til å legge til flere perioder.`,\n        'info.årsak.info.2': `Eksempel:`,\n        'info.årsak.info.3': `1.-2. mars var du hjemme med barn fordi barnehage/skole var stengt. Da legger du inn 1.-2. mars som en periode. I tillegg var du hjemme 3.-5. mars på grunn av særlige smittevernshensyn. Da legger du inn 3.-5. mars som en egen periode.`,\n\n        'fravær.form.felles.hjemmePgaKorona':\n            'Var du hjemme med barn fordi barnehage/skole var stengt på grunn av koronaviruset, eller på grunn av særlige smittevernshensyn?',\n        'fravær.form.felles.årsak': 'Kryss av for hvilken årsak du var hjemme med barn i perioden du har lagt inn',\n        'fravær.form.felles.ok': 'Ok',\n        'fravær.form.felles.avbryt': 'Avbryt',\n        'fravær.form.periode.tittel': 'Periode med fravær fra jobb',\n        'fravær.form.periode.tidsrom': 'Velg tidsrom',\n        'fravær.form.periode.fom': 'Fra og med',\n        'fravær.form.periode.tom': 'Til og med',\n        'fravær.form.dag.tittel': 'Dag med delvis fravær fra jobb',\n        'fravær.form.dag.dato': 'Dato',\n        'fravær.form.dag.antallArbeidstimer': 'Antall timer du skulle ha jobbet denne dagen',\n        'fravær.form.dag.timerFravær': 'Antall timer du var borte fra jobb denne dagen',\n    },\n    nn: {\n        'fravær.list.årsak': 'På grunn av {årsak}',\n        'fravær.form.validation.required': 'Feltet er påkrevd',\n        'fravær.form.validation.dateOutsideRange': 'Første gyldige dato er {fom}, og siste gyldige dato er {tom}',\n        'fravær.form.validation.fromDateAfterToDate': 'Frå-datoen må vere lik eller før til-datoen',\n        'fravær.form.validation.toDateBeforeFromDate': 'Til-datoen må vere lik eller etter frå-datoen',\n        'fravær.form.validation.fra_og_til_er_ulike_år': 'Fra og til dato må vera i same år',\n        'fieldvalidation.dager_overlapper_med_andre_dager':\n            'Ein eller fleire dagar med fråvær overlappar andre dagar med fråvær.',\n        'fieldvalidation.fra_dato_kolliderer_med_annet_fravær':\n            'Frå og med datoen overlappar med allereie registrert fråværsdag',\n        'fieldvalidation.til_dato_kolliderer_med_annet_fravær':\n            'Til og med datoen overlappar med allereie registrert fråværsdag',\n        'fieldvalidation.dato_kolliderer_med_annet_fravær': 'Datoen overlappar med allereie registrert fråværsdag',\n        'fravær.form.validation.timer_mer_enn_arbeidstimer':\n            'Talet på timar med fråvær kan ikkje vere meir enn talet på timar du skulle ha jobba denne dagen',\n        'fravær.form.validation.er_helg': 'Laurdag og søndag er ikkje gyldig.',\n\n        'fravær.årsak.STENGT_SKOLE_ELLER_BARNEHAGE': 'Skolen/barnehagen var stengt på grunn av koronasituasjonen',\n        'fravær.årsak.SMITTEVERNHENSYN':\n            'Skolen/barnehagen var åpen, men barnet måtte være hjemme på grunn av særlige smittevernhensyn.',\n        'fravær.årsak.ORDINÆRT_FRAVÆR': 'Ordinært fravær',\n        'fravær.årsak.STENGT_SKOLE_ELLER_BARNEHAGE.kort': 'stengt skole/barnehage',\n        'fravær.årsak.SMITTEVERNHENSYN.kort': 'særlige smittevernhensyn',\n        'fravær.årsak.ORDINÆRT_FRAVÆR.kort': 'ordinært fravær',\n        'info.smittevern.tittel': 'Hva menes med særlige smittevernhensyn?',\n        'info.smittevern.info.html':\n            'Når barnehagen eller skolen er åpen, men du må være hjemme med barnet ditt på grunn <strong>av særlige smittevernhensyn</strong>, kan du bruke omsorgsdager. Det er en lege som avgjør om det foreligger særlige smittevernhensyn. Det kan være smittevernhensyn til barnet eller andre familiemedlemmer som bor med barnet.',\n        'info.årsak.tittel': 'Hva om begge årsakene gjelder i perioden jeg har lagt inn?',\n        'info.årsak.info.1': `Hvis du har vært hjemme med barn både fordi barnehage/skole var stengt, og på grunn av særlige smittevernshensyn, må du legge inn flere perioder. Når du har lagt inn én periode og trykker OK, får du mulighet til å legge til flere perioder.`,\n        'info.årsak.info.2': `Eksempel:`,\n        'info.årsak.info.3': `1.-2. mars var du hjemme med barn fordi barnehage/skole var stengt. Da legger du inn 1.-2. mars som en periode. I tillegg var du hjemme 3.-5. mars på grunn av særlige smittevernshensyn. Da legger du inn 3.-5. mars som en egen periode.`,\n    },\n};\n\nexport const getFraværÅrsakTekst = (årsak: FraværÅrsak, intl: IntlShape): string => {\n    return intlHelper(intl, `fravær.årsak.${årsak}`);\n};\n\nexport const getFraværÅrsakTekstKort = (årsak: FraværÅrsak, intl: IntlShape): string => {\n    return intlHelper(intl, `fravær.årsak.${årsak}.kort`);\n};\n\nexport default fraværMessages;\n","const utenlandsoppholdMessages = {\n    nb: {\n        'utenlandsopphold.list.add': '+ Legg til opphold',\n        'utenlandsopphold.form.tittel': 'Utenlandsopphold',\n        'utenlandsopphold.form.tidsperiode.spm': 'Velg tidsperiode for oppholdet',\n        'utenlandsopphold.form.tidsperiode.fraDato': 'Fra og med',\n        'utenlandsopphold.form.tidsperiode.tilDato': 'Til og med',\n        'utenlandsopphold.form.land.spm': 'Velg land',\n        'utenlandsopphold.form.erBarnetInnlagt.spm': 'Er, eller skal, barnet være innlagt i helseinstitusjon i {land}?',\n        'utenlandsopphold.form.perioderBarnetErInnlag.formTitle': 'Periode barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.addLabel': 'Legg til periode barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.modalTitle': 'Periode(r) barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.listTitle': 'Periode(r) barnet er innlagt',\n        'utenlandsopphold.form.årsak.spm': 'Hvordan dekkes utgiftene til innleggelsen?',\n        'utenlandsopphold.form.årsak.BARNET_INNLAGT_I_HELSEINSTITUSJON_FOR_NORSK_OFFENTLIG_REGNING':\n            'For norsk offentlig regning',\n        'utenlandsopphold.form.årsak.BARNET_INNLAGT_I_HELSEINSTITUSJON_DEKKET_ETTER_AVTALE_MED_ET_ANNET_LAND_OM_TRYGD':\n            'Etter trygdeavtale med et annet land',\n        'utenlandsopphold.form.årsak.ANNET': 'Jeg dekker utgiftene selv',\n        'utenlandsopphold.oppsummering.årsak.ANNET': 'Jeg dekker utgiftene selv',\n        'utenlandsopphold.form.ok': 'Legg til',\n        'utenlandsopphold.form.avbryt': 'Avbryt',\n    },\n    nn: {\n        'utenlandsopphold.list.add': 'Legg til opphald',\n        'utenlandsopphold.form.tittel': 'Utanlandsopphald',\n        'utenlandsopphold.form.tidsperiode.spm': 'Tidsperiode',\n        'utenlandsopphold.form.tidsperiode.fraDato': 'Frå og med',\n        'utenlandsopphold.form.tidsperiode.tilDato': 'Til og med',\n        'utenlandsopphold.form.land.spm': 'Vel land',\n        'utenlandsopphold.form.erBarnetInnlagt.spm': 'Er, eller skal, barnet bli lagt inn i helseinstitusjon i {land}?',\n        'utenlandsopphold.form.perioderBarnetErInnlag.formTitle': 'Perioden barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.addLabel': 'Legg til perioden barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.modalTitle': 'Perioden/periodane barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.listTitle': 'Perioden/periodane barnet er innlagt',\n        'utenlandsopphold.form.årsak.spm': 'Korleis blir utgiftene til innlegginga dekte?',\n        'utenlandsopphold.form.årsak.BARNET_INNLAGT_I_HELSEINSTITUSJON_FOR_NORSK_OFFENTLIG_REGNING':\n            'For norsk offentleg rekning',\n        'utenlandsopphold.form.årsak.BARNET_INNLAGT_I_HELSEINSTITUSJON_DEKKET_ETTER_AVTALE_MED_ET_ANNET_LAND_OM_TRYGD':\n            'Etter trygdeavtale med eit anna land',\n        'utenlandsopphold.form.årsak.ANNET': 'Eg dekkjer utgiftene sjølv',\n        'utenlandsopphold.oppsummering.årsak.ANNET': 'Eg dekkjer utgiftene sjølv',\n        'utenlandsopphold.form.ok': 'Legg til',\n        'utenlandsopphold.form.avbryt': 'Avbryt',\n    },\n};\n\nexport default utenlandsoppholdMessages;\n","const fosterbarnMessages = {\n    nb: {\n        'fosterbarn.form.etternavn_label': 'Etternavn',\n        'fosterbarn.form.fornavn_label': 'Fornavn',\n        'fosterbarn.form.fødselsnummer_label': 'Fødselsnummer',\n        'fosterbarn.list.legg_til_knapp': 'Legg til fosterbarn',\n        'fosterbarn.list.tittel': 'Registrerte fosterbarn',\n        'fosterbarn.modal.tittel': 'Fosterbarn',\n    },\n    nn: {\n        'fosterbarn.form.etternavn_label': 'Etternavn',\n        'fosterbarn.form.fornavn_label': 'Fornavn',\n        'fosterbarn.form.fødselsnummer_label': 'Fødselsnummer',\n        'fosterbarn.list.legg_til_knapp': 'Legg til fosterbarn',\n        'fosterbarn.list.tittel': 'Registrerte fosterbarn',\n        'fosterbarn.modal.tittel': 'Fosterbarn',\n    },\n};\n\nexport default fosterbarnMessages;\n","const virksomhetMessages = {\n    nb: {\n        'sifForms.virksomhet.næringstype_fisker': 'Fisker',\n        'sifForms.virksomhet.næringstype_jordbruker': 'Jordbruker',\n        'sifForms.virksomhet.næringstype_dagmamma': 'Dagmamma eller familiebarnehage i eget hjem',\n        'sifForms.virksomhet.næringstype_annet': 'Annet',\n        'sifForms.virksomhet.form_title': 'Opplysninger om virksomheten din',\n        'sifForms.virksomhet.hvilken_type_virksomhet': 'Hvilken type virksomhet har du?',\n        'sifForms.virksomhet.hva_heter_virksomheten': 'Hva heter virksomheten?',\n        'sifForms.virksomhet.fisker_blad_b': 'Er du fisker på blad B?',\n        'sifForms.virksomhet.veileder_fisker': `Hvis du ikke har organisasjonsnummer, svarer du nei på spørsmålet \"Er {navnPåVirksomheten} registrert i Norge?\" I nedtrekkslisten velger du at virksomheten er registrert i Norge.`,\n        'sifForms.virksomhet.registert_i_norge': `Er {navnPåVirksomheten} registert i Norge?`,\n        'sifForms.virksomhet.registert_i_hvilket_land': `I hvilket land er {navnPåVirksomheten} din registrert i?`,\n        'sifForms.virksomhet.organisasjonsnummer': 'Hva er organisasjonsnummeret?',\n        'sifForms.virksomhet.startdato': `Når startet du {navnPåVirksomheten}?`,\n        'sifForms.virksomhet.kalender_fom': 'Startdato',\n        'sifForms.virksomhet.kalender_tom': 'Eventuell sluttdato',\n        'sifForms.virksomhet.kalender_pågående': 'Er pågående',\n        'sifForms.virksomhet.næringsinntekt':\n            'Hva har du hatt i næringsresultat før skatt de siste 12 månedene? Hvis virksomheten har vart i kortere tid, kan du bruke denne perioden og regne om til årsinntekt. Oppgi beløpet i hele kroner.',\n        'sifForms.virksomhet.næringsinntekt_info':\n            'Næringsresultatet er inntekter du har i næringen din, minus utgifter og avskrivninger.',\n        'sifForms.virksomhet.næringsinntekt_info_title': 'Hva er næringsresultatet?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv':\n            'Har du begynt i arbeidslivet i løpet av de 3 siste ferdigliknede årene?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_info_title': 'Hva betyr dette?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_info':\n            'Du skal svare ja på spørsmålet hvis du før oppstart av næringsvirksomheten din hadde lav eller ingen inntekt.',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_dato': 'Oppgi dato for når du begynte i arbeidslivet',\n        'sifForms.virksomhet.varig_endring_spm':\n            'Har du hatt en varig endring i arbeidsforholdet ditt, virksomheten eller arbeidssituasjonen din de siste fire årene?',\n        'sifForms.virksomhet.varig_endring_dato': 'Oppgi dato for endringen',\n        'sifForms.virksomhet.varig_endring_inntekt':\n            'Oppgi næringsinntekten din etter endringen. Oppgi årsinntekten i hele kroner.',\n        'sifForms.virksomhet.varig_endring_tekst':\n            'Her kan du skrive kort hva som har endret seg i arbeidsforholdet ditt, virksomheten eller arbeidssituasjonen din',\n        'sifForms.virksomhet.regnskapsfører_spm': 'Har du regnskapsfører?',\n        'sifForms.virksomhet.regnskapsfører_navn': 'Oppgi navnet til regnskapsfører',\n        'sifForms.virksomhet.regnskapsfører_telefon': 'Oppgi telefonnummeret til regnskapsfører',\n        'sifForms.virksomhet.revisor_spm': 'Har du revisor?',\n        'sifForms.virksomhet.revisor_navn': 'Oppgi navnet til revisor',\n        'sifForms.virksomhet.revisor_telefon': 'Oppgi telefonnummeret til revisor',\n        'sifForms.virksomhet.revisor_fullmakt': 'Gir du NAV fullmakt til å innhente opplysninger direkte fra revisor?',\n        'sifForms.virksomhet.veileder_innhenter_info.1':\n            'Vi henter inn opplysninger om virksomheten og inntekten din fra offentlige registre.',\n        'sifForms.virksomhet.veileder_innhenter_info.2': 'Vi tar kontakt med deg hvis vi trenger flere opplysninger.',\n    },\n    nn: {\n        'sifForms.virksomhet.næringstype_fisker': 'Fisker',\n        'sifForms.virksomhet.næringstype_jordbruker': 'Jordbrukar',\n        'sifForms.virksomhet.næringstype_dagmamma': 'Dagmamma eller familiebarnehage i eigen heim',\n        'sifForms.virksomhet.næringstype_annet': 'Anna',\n        'sifForms.virksomhet.form_title': 'Opplysningar om verksemda di',\n        'sifForms.virksomhet.hvilken_type_virksomhet': 'Kva type verksemd har du?',\n        'sifForms.virksomhet.hva_heter_virksomheten': 'Kva heiter verksemda?',\n        'sifForms.virksomhet.fisker_blad_b': 'Er du fiskar på blad B?',\n        'sifForms.virksomhet.veileder_fisker': `Dersom du ikkje har organisasjonsnummer, svarer du nei på spørsmålet \"Er {navnPåVirksomheten} registrert i Noreg?\". I nedtrekkslista vel du at verksemda er registrert i Noreg.`,\n        'sifForms.virksomhet.registert_i_norge': `Er {navnPåVirksomheten} registert i Noreg?`,\n        'sifForms.virksomhet.registert_i_hvilket_land': `I kva land er {navnPåVirksomheten} registrert?`,\n        'sifForms.virksomhet.organisasjonsnummer': 'Kva er organisasjonsnummeret?',\n        'sifForms.virksomhet.startdato': `Når starta du {navnPåVirksomheten}?`,\n        'sifForms.virksomhet.kalender_fom': 'Startdato',\n        'sifForms.virksomhet.kalender_tom': 'Eventuell sluttdato',\n        'sifForms.virksomhet.kalender_pågående': 'Er i gang',\n        'sifForms.virksomhet.næringsinntekt':\n            'Kva har du hatt i næringsresultat før skatt dei siste 12 månadene? Dersom verksemda har vart i kortare tid, kan du bruke denne perioden og rekne om til årsinntekt. Gi opp beløpet i heile kroner.',\n        'sifForms.virksomhet.næringsinntekt_info':\n            'Næringsresultatet er inntekter du har i næringa di, minus utgifter og avskrivingar.',\n        'sifForms.virksomhet.næringsinntekt_info_title': 'Kva er næringsresultatet?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv':\n            'Har du begynt i arbeidslivet i løpet av dei 3 siste ferdiglikna åra?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_info_title': 'Kva betyr dette?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_info':\n            'Du skal svare ja på spørsmålet dersom du før oppstart av næringsverksemda di hadde låg eller inga inntekt.',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_dato': 'Gi opp datoen for når du begynte i arbeidslivet',\n        'sifForms.virksomhet.varig_endring_spm':\n            'Har du hatt ei varig endring i arbeidsforholdet ditt, verksemda di eller arbeidssituasjonen din dei siste fire åra?',\n        'sifForms.virksomhet.varig_endring_dato': 'Gi opp datoen for endringa',\n        'sifForms.virksomhet.varig_endring_inntekt':\n            'Gi opp næringsinntekta di etter endringa. Gi opp årsinntekta i heile kroner.',\n        'sifForms.virksomhet.varig_endring_tekst':\n            'Her kan du skrive kort kva som har endra seg i arbeidsforholdet ditt, verksemda di eller arbeidssituasjonen din.',\n        'sifForms.virksomhet.regnskapsfører_spm': 'Har du rekneskapsførar?',\n        'sifForms.virksomhet.regnskapsfører_navn': 'Gi opp namnet til rekneskapsføraren',\n        'sifForms.virksomhet.regnskapsfører_telefon': 'Gi opp telefonnummeret til rekneskapsføraren',\n        'sifForms.virksomhet.revisor_spm': 'Har du revisor?',\n        'sifForms.virksomhet.revisor_navn': 'Gi opp namnet til revisoren',\n        'sifForms.virksomhet.revisor_telefon': 'Gi opp telefonnummeret til revisoren',\n        'sifForms.virksomhet.revisor_fullmakt':\n            'Gir du NAV fullmakt til å hente inn opplysningar direkte frå revisoren?',\n        'sifForms.virksomhet.veileder_innhenter_info.1':\n            'Vi hentar inn opplysningar om verksemda og inntekta di frå offentlege register.',\n        'sifForms.virksomhet.veileder_innhenter_info.2': 'Vi tek kontakt med deg dersom vi treng fleire opplysningar',\n    },\n};\nexport default virksomhetMessages;\n","const tidsperiodeMessages = {\n    nb: {\n        'tidsperiode.form.title': 'Tidsperiode',\n        'tidsperiode.form.fromDate': 'Fra og med',\n        'tidsperiode.form.toDate': 'Til og med',\n        'tidsperiode.form.okButton': 'Ok',\n        'tidsperiode.form.cancelButton': 'Avbryt',\n        'tidsperiode.form.validation.required': 'Feltet er påkrevd',\n        'tidsperiode.form.validation.dateOutsideRange': 'Første gyldige dato er {fom}, og siste gyldige dato er {tom}',\n        'tidsperiode.form.validation.fromDateAfterToDate': 'Fra-dato må være lik eller før til-dato',\n        'tidsperiode.form.validation.toDateBeforeFromDate': 'Til-dato må være lik eller etter fra-dato',\n    },\n    nn: {\n        'tidsperiode.form.title': 'Tidsperiode',\n        'tidsperiode.form.fromDate': 'Frå og med',\n        'tidsperiode.form.toDate': 'Til og med',\n        'tidsperiode.form.okButton': 'Ok',\n        'tidsperiode.form.cancelButton': 'Avbryt',\n        'tidsperiode.form.validation.required': 'Feltet er påkrevd',\n        'tidsperiode.form.validation.dateOutsideRange': 'Første gyldige dato er {fom}, og siste gyldige dato er {tom}',\n        'tidsperiode.form.validation.fromDateAfterToDate': 'Frå-datoen må vere lik eller før til-datoen',\n        'tidsperiode.form.validation.toDateBeforeFromDate': 'Til-datoen må vere lik eller etter frå-dato',\n    },\n};\n\nexport default tidsperiodeMessages;\n","const annetBarnMessages = {\n    nb: {\n        'annetBarn.form.title': 'Legg til barn',\n        'annetBarn.form.fnr': 'Barnets fødselsnummer/D-nummer',\n        'annetBarn.form.fødselsdato': 'Barnets fødselsdato',\n        'annetBarn.form.navn': 'Barnets navn',\n        'annetBarn.form.okButton': 'Ok',\n        'annetBarn.form.cancelButton': 'Avbryt',\n        'annetBarn.form.validation.required': 'Feltet er påkrevd',\n        'annetBarn.list.født': 'Født',\n    },\n    nn: {\n        'annetBarn.form.title': 'Legg til barn',\n        'annetBarn.form.fnr': 'Barnets fødselsnummer/D-nummer',\n        'annetBarn.form.fødselsdato': 'Barnets fødselsdato',\n        'annetBarn.form.navn': 'Barnets navn',\n        'annetBarn.form.okButton': 'Ok',\n        'annetBarn.form.cancelButton': 'Avbryt',\n        'annetBarn.form.validation.required': 'Feltet er påkrevd',\n        'annetBarn.list.født': 'Født',\n    },\n};\n\nexport default annetBarnMessages;\n","import bostedUtlandMessages from '../../../forms/bosted-utland/bostedUtlandMessages';\nimport ferieuttakMessages from '../../../forms/ferieuttak/ferieuttakMessages';\nimport fraværMessages from '../../../forms/fravær/fraværMessages';\nimport utenlandsoppholdMessages from '../../../forms/utenlandsopphold/utenlandsoppholdMessages';\nimport fosterbarnMessages from '../../../forms/fosterbarn/fosterbarnMessages';\nimport virksomhetMessages from '../../../forms/virksomhet/virksomhetMessages';\nimport tidsperiodeMessages from '../../../forms/tidsperiode/tidsperiodeMessages';\nimport annetBarnMessages from '../../../forms/annet-barn/annetBarnMessages';\n\nconst commonNb = require('@navikt/sif-common-core/lib/i18n/common.nb.json');\nconst commonNn = require('@navikt/sif-common-core/lib/i18n/common.nn.json');\nconst validationNb = require('@navikt/sif-common-core/lib/i18n/validationErrors.nb.json');\nconst validationNn = require('@navikt/sif-common-core/lib/i18n/validationErrors.nn.json');\n\nconst bokmålstekster = {\n    ...commonNb,\n    ...validationNb,\n    ...bostedUtlandMessages.nb,\n    ...fraværMessages.nb,\n    ...ferieuttakMessages.nb,\n    ...fosterbarnMessages.nb,\n    ...utenlandsoppholdMessages.nb,\n    ...tidsperiodeMessages.nb,\n    ...virksomhetMessages.nb,\n    ...annetBarnMessages.nb,\n};\n\nconst nynorsktekster = {\n    ...commonNn,\n    ...validationNn,\n    ...bostedUtlandMessages.nn,\n    ...fraværMessages.nn,\n    ...ferieuttakMessages.nn,\n    ...fosterbarnMessages.nn,\n    ...utenlandsoppholdMessages.nn,\n    ...tidsperiodeMessages.nn,\n    ...virksomhetMessages.nn,\n    ...annetBarnMessages.nn,\n};\n\nexport const appMessages = {\n    nb: bokmålstekster,\n    nn: nynorsktekster,\n};\n","import * as React from 'react';\nimport { IntlProvider } from 'react-intl';\nimport '@formatjs/intl-pluralrules//locale-data/en';\nimport '@formatjs/intl-pluralrules//locale-data/nb';\nimport '@formatjs/intl-pluralrules//locale-data/nn';\nimport '@formatjs/intl-pluralrules/polyfill';\nimport { Locale } from '@navikt/sif-common-core/lib/types/Locale';\nimport { appMessages } from './messages';\nimport dayjs from 'dayjs';\nrequire('dayjs/locale/nb');\nrequire('dayjs/locale/nn');\n\nexport interface IntlProviderProps {\n    locale: Locale;\n    children: React.ReactNode;\n    onError?: (error: any) => void;\n}\n\nconst AppIntlProvider = ({ locale, onError, children }: IntlProviderProps) => {\n    const messages = locale === 'nb' ? appMessages.nb : appMessages.nn;\n    dayjs.locale(locale === 'nb' ? 'nb' : 'nn');\n    return (\n        <IntlProvider locale={locale} messages={messages} onError={onError}>\n            {children}\n        </IntlProvider>\n    );\n};\n\nexport default AppIntlProvider;\n","import React from 'react';\n\nfunction NAVLogo(props) {\n    return (\n        <svg className=\"prefix__navLogo\" width={90} viewBox=\"0 0 269 169\" {...props}>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <path\n                    fill=\"#C30000\"\n                    d=\"M125.31 168.942c-46.642 0-84.46-37.817-84.46-84.465C40.85 37.824 78.667 0 125.31 0c46.657 0 84.48 37.824 84.48 84.477 0 46.648-37.823 84.465-84.48 84.465zM0 121.359l17.265-42.73h16.589l-17.243 42.73zm213.044 0l17.044-42.73h9.044l-17.043 42.73zM246.564 121.359l17.04-42.73h4.803l-17.043 42.731z\"\n                />\n                <path\n                    fill=\"#FEFEFE\"\n                    d=\"M197.36 78.63h-15.016s-1.035 0-1.4.914l-8.31 25.439-8.304-25.44c-.366-.913-1.407-.913-1.407-.913h-28.872c-.625 0-1.149.522-1.149 1.143v8.639c0-6.853-7.292-9.782-11.562-9.782-9.562 0-15.963 6.298-17.956 15.873-.108-6.352-.636-8.628-2.347-10.96-.786-1.141-1.922-2.101-3.159-2.895-2.547-1.492-4.834-2.018-9.749-2.018h-5.77s-1.044 0-1.412.914l-5.25 13.013V79.773c0-.621-.52-1.143-1.145-1.143H61.198s-1.03 0-1.406.914l-5.459 13.53s-.545 1.354.701 1.354h5.133v25.784c0 .64.504 1.147 1.147 1.147h13.238c.624 0 1.144-.507 1.144-1.147V94.428h5.16c2.961 0 3.588.08 4.74.618.694.262 1.32.792 1.66 1.403.698 1.314.873 2.892.873 7.545v16.218c0 .64.514 1.147 1.15 1.147h12.687s1.434 0 2.001-1.416l2.812-6.95c3.74 5.237 9.893 8.366 17.541 8.366h1.671s1.443 0 2.014-1.416l4.897-12.128v12.397c0 .64.524 1.147 1.15 1.147h12.951s1.43 0 2.003-1.416c0 0 5.18-12.861 5.2-12.958h.008c.2-1.07-1.153-1.07-1.153-1.07h-4.623V83.847l14.545 36.096c.568 1.416 2 1.416 2 1.416h15.301s1.44 0 2.008-1.416l16.125-39.93c.558-1.383-1.057-1.383-1.057-1.383zm-64.458 27.285h-8.7c-3.463 0-6.28-2.804-6.28-6.271 0-3.461 2.817-6.283 6.28-6.283h2.433c3.454 0 6.267 2.822 6.267 6.283v6.27z\"\n                />\n            </g>\n        </svg>\n    );\n}\n\nexport default NAVLogo;\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport dateRangeValidation from '@navikt/sif-common-core/lib/validation/dateRangeValidation';\nimport { validateRequiredSelect } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { getTypedFormComponents, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { mapFomTomToDateRange } from '../utils';\nimport bostedUtlandUtils from './bostedUtlandUtils';\nimport { BostedUtland, BostedUtlandFormValues } from './types';\n\nexport interface BostedUtlandFormLabels {\n    tittel: string;\n}\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    bosted?: BostedUtland;\n    alleBosteder?: BostedUtland[];\n    onSubmit: (values: BostedUtland) => void;\n    onCancel: () => void;\n}\n\nenum BostedUtlandFormFields {\n    fom = 'fom',\n    tom = 'tom',\n    landkode = 'landkode',\n}\n\ninterface DateLimits {\n    minDate: Date;\n    maxDate: Date;\n}\nconst Form = getTypedFormComponents<BostedUtlandFormFields, BostedUtlandFormValues>();\n\nconst BostedUtlandForm = ({ maxDate, minDate, bosted, alleBosteder = [], onSubmit, onCancel }: Props) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: BostedUtlandFormValues) => {\n        const bostedToSubmit = bostedUtlandUtils.mapFormValuesToBostedUtland(formValues, bosted?.id);\n        if (bostedUtlandUtils.isValidBostedUtland(bostedToSubmit)) {\n            onSubmit(bostedToSubmit);\n        } else {\n            throw new Error('BostedUtlandForm: Formvalues is not a valid BostedUtland on submit.');\n        }\n    };\n\n    return (\n        <Form.FormikWrapper\n            initialValues={bostedUtlandUtils.mapBostedUtlandToFormValues(bosted || {})}\n            onSubmit={onFormikSubmit}\n            renderForm={(formik) => {\n                const { values } = formik;\n                const fomDateLimits: DateLimits = {\n                    minDate,\n                    maxDate: ISOStringToDate(values.tom) || maxDate,\n                };\n                const tomDateLimits: DateLimits = {\n                    minDate: ISOStringToDate(values.fom) || minDate,\n                    maxDate: maxDate,\n                };\n\n                const andreBosteder =\n                    bosted === undefined\n                        ? alleBosteder.map(mapFomTomToDateRange)\n                        : alleBosteder.filter((b) => b.id !== bosted.id).map(mapFomTomToDateRange);\n\n                return (\n                    <Form.Form\n                        onCancel={onCancel}\n                        fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                        <Systemtittel tag=\"h1\">\n                            <FormattedMessage id=\"bostedUtland.form.tittel\" />\n                        </Systemtittel>\n\n                        <FormBlock>\n                            <Form.DateRangePicker\n                                legend={intlHelper(intl, 'bostedUtland.form.tidsperiode.spm')}\n                                fullscreenOverlay={true}\n                                minDate={minDate}\n                                maxDate={maxDate}\n                                allowRangesToStartAndStopOnSameDate={false}\n                                disabledDateRanges={andreBosteder}\n                                fromInputProps={{\n                                    name: BostedUtlandFormFields.fom,\n                                    label: intlHelper(intl, 'bostedUtland.form.tidsperiode.fraDato'),\n                                    validate: (dateString) =>\n                                        dateRangeValidation.validateFromDate(\n                                            ISOStringToDate(dateString),\n                                            fomDateLimits.minDate,\n                                            fomDateLimits.maxDate,\n                                            ISOStringToDate(values.tom)\n                                        ),\n                                }}\n                                toInputProps={{\n                                    name: BostedUtlandFormFields.tom,\n                                    label: intlHelper(intl, 'bostedUtland.form.tidsperiode.tilDato'),\n                                    validate: (dateString) =>\n                                        dateRangeValidation.validateToDate(\n                                            ISOStringToDate(dateString),\n                                            tomDateLimits.minDate,\n                                            tomDateLimits.maxDate,\n                                            ISOStringToDate(values.fom)\n                                        ),\n                                }}\n                            />\n                        </FormBlock>\n                        <FormBlock>\n                            <Form.CountrySelect\n                                name={BostedUtlandFormFields.landkode}\n                                label={intlHelper(intl, 'bostedUtland.form.land.spm')}\n                                validate={validateRequiredSelect}\n                            />\n                        </FormBlock>\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default BostedUtlandForm;\n","import React from 'react';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { Ingress, Undertittel } from 'nav-frontend-typografi';\n\ninterface Props {\n    title: string;\n    children: React.ReactNode;\n}\n\nconst PageIntro = ({ title, children }: Props) => (\n    <>\n        <Box padBottom=\"xl\" margin=\"m\">\n            <Box padBottom={children ? 'm' : 'none'}>\n                <Undertittel>{title}</Undertittel>\n            </Box>\n            {children && <Ingress tag=\"div\">{children}</Ingress>}\n        </Box>\n    </>\n);\n\nexport default PageIntro;\n","import { DateTidsperiode } from '../tidsperiode';\nimport { DateRange } from '@navikt/sif-common-core/lib/utils/dateUtils';\n\nexport const mapFomTomToDateRange = ({ fom, tom }: DateTidsperiode): DateRange => ({\n    from: fom,\n    to: tom,\n});\n","import { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { guid } from 'nav-frontend-js-utils';\nimport { BostedUtland, BostedUtlandFormValues } from './types';\n\nconst isValidBostedUtland = (bosted: Partial<BostedUtland>): bosted is BostedUtland => {\n    const { fom, landkode, tom } = bosted;\n    return fom !== undefined && landkode !== undefined && tom !== undefined;\n};\n\nconst mapFormValuesToBostedUtland = (\n    formValues: BostedUtlandFormValues,\n    id: string | undefined\n): Partial<BostedUtland> => {\n    return {\n        id: id || guid(),\n        fom: ISOStringToDate(formValues.fom),\n        tom: ISOStringToDate(formValues.tom),\n        landkode: formValues.landkode,\n    };\n};\n\nconst mapBostedUtlandToFormValues = ({ fom, tom, landkode }: Partial<BostedUtland>): BostedUtlandFormValues => {\n    return {\n        fom: dateToISOString(fom),\n        tom: dateToISOString(tom),\n        landkode,\n    };\n};\n\nconst bostedUtlandUtils = {\n    isValidBostedUtland,\n    mapBostedUtlandToFormValues,\n    mapFormValuesToBostedUtland,\n};\n\nexport default bostedUtlandUtils;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { getCountryName } from '@navikt/sif-common-formik';\nimport { BostedUtland } from './types';\nimport './bostedUtlandList.less';\n\ninterface Props {\n    bosteder: BostedUtland[];\n    onEdit?: (opphold: BostedUtland) => void;\n    onDelete?: (opphold: BostedUtland) => void;\n}\n\nconst bem = bemUtils('bostedUtlandList');\n\nconst BostedUtlandList = ({ bosteder, onDelete, onEdit }: Props) => {\n    const intl = useIntl();\n    const renderBostedUtlandLabel = (opphold: BostedUtland): React.ReactNode => {\n        const navn = getCountryName(opphold.landkode, intl.locale);\n        return (\n            <div className={bem.element('label')}>\n                <span className={bem.element('land')}>\n                    {onEdit && <ActionLink onClick={() => onEdit(opphold)}>{navn}</ActionLink>}\n                    {!onEdit && <span>{navn}</span>}\n                </span>\n                <span className={bem.element('dato')}>\n                    {prettifyDateExtended(opphold.fom)} - {prettifyDateExtended(opphold.tom)}\n                </span>\n            </div>\n        );\n    };\n\n    return (\n        <ItemList<BostedUtland>\n            getItemId={(opphold) => opphold.id}\n            getItemTitle={(opphold) => getCountryName(opphold.landkode, intl.locale)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderBostedUtlandLabel}\n            items={bosteder}\n        />\n    );\n};\n\nexport default BostedUtlandList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { FormikModalFormAndList, FormikValidateFunction, ModalFormAndListLabels } from '@navikt/sif-common-formik';\nimport BostedUtlandForm from './BostedUtlandForm';\nimport BostedUtlandListe from './BostedUtlandList';\nimport { BostedUtland } from './types';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    validate?: FormikValidateFunction;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction BostedUtlandListAndDialog<FieldNames>({ name, minDate, maxDate, validate, labels }: Props<FieldNames>) {\n    return (\n        <FormikModalFormAndList<FieldNames, BostedUtland>\n            name={name}\n            labels={labels}\n            validate={validate}\n            dialogWidth=\"narrow\"\n            sortFunc={sortItemsByFom}\n            formRenderer={({ onSubmit, onCancel, item, allItems }) => (\n                <BostedUtlandForm\n                    bosted={item}\n                    alleBosteder={allItems}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    onSubmit={onSubmit}\n                    onCancel={onCancel}\n                />\n            )}\n            listRenderer={({ items, onEdit, onDelete }) => (\n                <BostedUtlandListe bosteder={items} onEdit={onEdit} onDelete={onDelete} />\n            )}\n        />\n    );\n}\n\nexport default BostedUtlandListAndDialog;\n","import React from 'react';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport Panel from 'nav-frontend-paneler';\n\ninterface Props {\n    values?: any;\n}\n\nfunction SubmitPreview({ values }: Props) {\n    return (\n        <Box margin=\"xl\">\n            <div style={{ borderTop: '1px dashed #59514B', paddingTop: '1rem', margin: '0 -1rem' }}>\n                <Box margin=\"m\">\n                    {values && (\n                        <Panel style={{ padding: '1rem' }}>\n                            <pre style={{ margin: 0, fontSize: '.8rem' }}>{JSON.stringify(values, null, 2)}</pre>\n                        </Panel>\n                    )}\n                    {values === undefined && <Panel style={{ padding: '1rem' }}>Ingen data</Panel>}\n                </Box>\n            </div>\n        </Box>\n    );\n}\n\nexport default SubmitPreview;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { date1YearAgo, date1YearFromNow } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { validateRequiredList } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport BostedUtlandForm from '../../../forms/bosted-utland/BostedUtlandForm';\nimport BostedUtlandListAndDialog from '../../../forms/bosted-utland/BostedUtlandListAndDialog';\nimport { BostedUtland } from '../../../forms/bosted-utland/types';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport bostedUtlandMessages from '../../../forms/bosted-utland/bostedUtlandMessages';\n\nenum FormField {\n    'bosted' = 'bosted',\n}\n\ninterface FormValues {\n    [FormField.bosted]: BostedUtland[];\n}\nconst initialValues: FormValues = { bosted: [] };\n\nconst FormikExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<BostedUtland> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                                <BostedUtlandListAndDialog<FormField>\n                                    name={FormField.bosted}\n                                    minDate={date1YearAgo}\n                                    maxDate={date1YearFromNow}\n                                    validate={validateRequiredList}\n                                    labels={{\n                                        addLabel: 'Legg til bosted',\n                                        listTitle: 'Registrerte bosteder',\n                                        modalTitle: 'Bosted',\n                                        emptyListText: 'Ingen bosteder er lagt til',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <DialogFormWrapper>\n                    <Panel border={true}>\n                        <BostedUtlandForm\n                            minDate={date1YearAgo}\n                            maxDate={date1YearFromNow}\n                            onSubmit={setSingleFormValues}\n                            onCancel={() => console.log('cancel me')}\n                        />\n                    </Panel>\n                    <SubmitPreview values={singleFormValues} />\n                </DialogFormWrapper>\n            </Box>\n\n            <MessagesPreview messages={bostedUtlandMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default FormikExample;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { DateRange } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport dateRangeValidation from '@navikt/sif-common-core/lib/validation/dateRangeValidation';\nimport { getTypedFormComponents, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { mapFomTomToDateRange } from '../utils';\nimport ferieuttakUtils from './ferieuttakUtils';\nimport { Ferieuttak, FerieuttakFormValues } from './types';\n\nexport interface FerieuttakFormLabels {\n    title: string;\n    fromDate: string;\n    toDate: string;\n    intervalTitle: string;\n    okButton: string;\n    cancelButton: string;\n}\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    ferieuttak?: Partial<Ferieuttak>;\n    alleFerieuttak?: Ferieuttak[];\n    labels?: Partial<FerieuttakFormLabels>;\n    onSubmit: (values: Ferieuttak) => void;\n    onCancel: () => void;\n}\n\nenum FerieuttakFormFields {\n    tom = 'tom',\n    fom = 'fom',\n}\n\nconst Form = getTypedFormComponents<FerieuttakFormFields, FerieuttakFormValues>();\n\nconst FerieuttakForm = ({ maxDate, minDate, labels, ferieuttak, alleFerieuttak = [], onSubmit, onCancel }: Props) => {\n    const intl = useIntl();\n    const onFormikSubmit = (formValues: FerieuttakFormValues) => {\n        const ferieuttakToSubmit = ferieuttakUtils.mapFormValuesToFerieuttak(formValues, ferieuttak?.id);\n        if (ferieuttakUtils.isValidFerieuttak(ferieuttakToSubmit)) {\n            onSubmit({ ...ferieuttak, ...ferieuttakToSubmit });\n        } else {\n            throw new Error('FerieuttakForm: Formvalues is not a valid Ferieuttak on submit.');\n        }\n    };\n\n    const defaultLabels: FerieuttakFormLabels = {\n        title: intlHelper(intl, 'ferieuttak.list.title'),\n        fromDate: intlHelper(intl, 'ferieuttak.list.fromDate'),\n        toDate: intlHelper(intl, 'ferieuttak.list.toDate'),\n        intervalTitle: intlHelper(intl, 'ferieuttak.list.intervalTitle'),\n        okButton: intlHelper(intl, 'ferieuttak.list.okButton'),\n        cancelButton: intlHelper(intl, 'ferieuttak.list.cancelButton'),\n    };\n\n    const formLabels: FerieuttakFormLabels = { ...defaultLabels, ...labels };\n\n    const andreFerieuttak: DateRange[] | undefined =\n        ferieuttak === undefined\n            ? alleFerieuttak.map(mapFomTomToDateRange)\n            : alleFerieuttak.filter((f) => f.id !== ferieuttak.id).map(mapFomTomToDateRange);\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={ferieuttakUtils.mapFerieuttakToFormValues(ferieuttak || {})}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => (\n                    <Form.Form\n                        onCancel={onCancel}\n                        fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                        <Systemtittel tag=\"h1\">{formLabels.title}</Systemtittel>\n                        <FormBlock>\n                            <Form.DateRangePicker\n                                legend={formLabels.intervalTitle}\n                                fullscreenOverlay={true}\n                                minDate={minDate}\n                                maxDate={maxDate}\n                                allowRangesToStartAndStopOnSameDate={true}\n                                disabledDateRanges={andreFerieuttak}\n                                fromInputProps={{\n                                    label: formLabels.fromDate,\n                                    name: FerieuttakFormFields.fom,\n                                    validate: (dateString) =>\n                                        dateRangeValidation.validateFromDate(\n                                            ISOStringToDate(dateString),\n                                            minDate,\n                                            maxDate,\n                                            ISOStringToDate(formik.values.tom)\n                                        ),\n                                    onChange: () => {\n                                        setTimeout(() => {\n                                            formik.validateField(FerieuttakFormFields.tom);\n                                        });\n                                    },\n                                }}\n                                toInputProps={{\n                                    label: formLabels.toDate,\n                                    name: FerieuttakFormFields.tom,\n                                    validate: (dateString) =>\n                                        dateRangeValidation.validateToDate(\n                                            ISOStringToDate(dateString),\n                                            minDate,\n                                            maxDate,\n                                            ISOStringToDate(formik.values.fom)\n                                        ),\n                                    onChange: () => {\n                                        setTimeout(() => {\n                                            formik.validateField(FerieuttakFormFields.fom);\n                                        });\n                                    },\n                                }}\n                            />\n                        </FormBlock>\n                    </Form.Form>\n                )}\n            />\n        </>\n    );\n};\n\nexport default FerieuttakForm;\n","import { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Ferieuttak, FerieuttakFormValues } from './types';\n\nexport const isValidFerieuttak = (ferieuttak: Partial<Ferieuttak>): ferieuttak is Ferieuttak => {\n    return ferieuttak.fom !== undefined && ferieuttak.tom !== undefined;\n};\n\nconst mapFormValuesToFerieuttak = (formValues: FerieuttakFormValues, id: string | undefined): Partial<Ferieuttak> => {\n    return {\n        id: id || guid(),\n        fom: ISOStringToDate(formValues.fom),\n        tom: ISOStringToDate(formValues.tom),\n    };\n};\n\nconst mapFerieuttakToFormValues = ({ fom, tom }: Partial<Ferieuttak>): FerieuttakFormValues => {\n    return {\n        fom: dateToISOString(fom),\n        tom: dateToISOString(tom),\n    };\n};\n\nconst ferieuttakUtils = {\n    isValidFerieuttak,\n    mapFerieuttakToFormValues,\n    mapFormValuesToFerieuttak,\n};\n\nexport default ferieuttakUtils;\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { Ferieuttak } from './types';\n\ninterface Props {\n    ferieuttak: Ferieuttak[];\n    onEdit?: (opphold: Ferieuttak) => void;\n    onDelete?: (opphold: Ferieuttak) => void;\n}\n\nconst FerieuttakList = ({ ferieuttak = [], onDelete, onEdit }: Props) => {\n    const getDateTitleString = (uttak: Ferieuttak) =>\n        `${prettifyDateExtended(uttak.fom)} - ${prettifyDateExtended(uttak.tom)}`;\n\n    const renderFerieuttakLabel = (uttak: Ferieuttak): React.ReactNode => {\n        const title = getDateTitleString(uttak);\n        return (\n            <>\n                {onEdit && <ActionLink onClick={() => onEdit(uttak)}>{title}</ActionLink>}\n                {!onEdit && <span>{title}</span>}\n            </>\n        );\n    };\n\n    return (\n        <ItemList<Ferieuttak>\n            getItemId={(uttak) => uttak.id}\n            getItemTitle={(uttak) => getDateTitleString(uttak)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderFerieuttakLabel}\n            items={ferieuttak.filter((uttak) => uttak.id !== undefined)}\n        />\n    );\n};\n\nexport default FerieuttakList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { FormikModalFormAndList, FormikValidateFunction, ModalFormAndListLabels } from '@navikt/sif-common-formik';\nimport FerieuttakForm from './FerieuttakForm';\nimport FerieuttakList from './FerieuttakList';\nimport { Ferieuttak } from './types';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    validate?: FormikValidateFunction;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction FerieuttakListAndDialog<FieldNames>({ name, minDate, maxDate, validate, labels }: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, Ferieuttak>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                sortFunc={sortItemsByFom}\n                formRenderer={({ onSubmit, onCancel, item, allItems }) => (\n                    <FerieuttakForm\n                        ferieuttak={item}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                        alleFerieuttak={allItems}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FerieuttakList ferieuttak={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FerieuttakListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { date1YearAgo, date1YearFromNow } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { validateRequiredList } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport FerieuttakForm from '../../../forms/ferieuttak/FerieuttakForm';\nimport FerieuttakListAndDialog from '../../../forms/ferieuttak/FerieuttakListAndDialog';\nimport { Ferieuttak } from '../../../forms/ferieuttak/types';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport ferieuttakMessages from '../../../forms/ferieuttak/ferieuttakMessages';\n\nenum FormField {\n    'ferie' = 'ferie',\n}\n\ninterface FormValues {\n    [FormField.ferie]: Ferieuttak[];\n}\nconst initialValues: FormValues = { ferie: [] };\n\nconst FormikExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<Ferieuttak> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                                <FerieuttakListAndDialog<FormField>\n                                    name={FormField.ferie}\n                                    minDate={date1YearAgo}\n                                    maxDate={date1YearFromNow}\n                                    validate={validateRequiredList}\n                                    labels={{\n                                        addLabel: 'Legg til ferie',\n                                        listTitle: 'Registrerte ferier',\n                                        modalTitle: 'Ferie',\n                                        emptyListText: 'Ingen ferier er lagt til',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <FerieuttakForm\n                        minDate={date1YearAgo}\n                        maxDate={date1YearFromNow}\n                        ferieuttak={{}}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                    />\n                </Panel>\n                <SubmitPreview values={singleFormValues} />\n            </DialogFormWrapper>\n\n            <MessagesPreview messages={ferieuttakMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default FormikExample;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport Tiles from '@navikt/sif-common-core/lib/components/tiles/Tiles';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { validateFødselsnummer, validateRequiredField } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { Fosterbarn, isFosterbarn } from './types';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { guid } from 'nav-frontend-js-utils';\n\ninterface FosterbarnFormText {\n    form_fødselsnummer_label: string;\n    form_fornavn_label: string;\n    form_etternavn_label: string;\n}\n\ninterface Props {\n    fosterbarn?: Partial<Fosterbarn>;\n    onSubmit: (values: Fosterbarn) => void;\n    onCancel: () => void;\n    includeName?: boolean;\n    text?: FosterbarnFormText;\n}\n\nenum FosterbarnFormField {\n    fødselsnummer = 'fødselsnummer',\n    fornavn = 'fornavn',\n    etternavn = 'etternavn',\n}\n\ntype FormValues = Partial<Fosterbarn>;\n\nconst Form = getTypedFormComponents<FosterbarnFormField, FormValues>();\n\nconst FosterbarnForm = ({\n    fosterbarn: initialValues = { fornavn: '', etternavn: '', fødselsnummer: '' },\n    text,\n    includeName,\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n    const onFormikSubmit = (formValues: FormValues) => {\n        if (isFosterbarn(formValues, includeName)) {\n            onSubmit({ ...formValues, id: initialValues.id || guid() });\n        } else {\n            throw new Error('Fosterbarn skjema: Formvalues is not a valid Fosterbarn on submit.');\n        }\n    };\n\n    const defaultText: FosterbarnFormText = {\n        form_etternavn_label: intlHelper(intl, 'fosterbarn.form.etternavn_label'),\n        form_fornavn_label: intlHelper(intl, 'fosterbarn.form.fornavn_label'),\n        form_fødselsnummer_label: intlHelper(intl, 'fosterbarn.form.fødselsnummer_label'),\n    };\n\n    const txt = { ...defaultText, ...text };\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={initialValues}\n                onSubmit={onFormikSubmit}\n                renderForm={() => (\n                    <Form.Form\n                        onCancel={onCancel}\n                        fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                        <Systemtittel tag=\"h1\">Fosterbarn</Systemtittel>\n                        <FormBlock>\n                            <Form.Input\n                                name={FosterbarnFormField.fødselsnummer}\n                                label={txt.form_fødselsnummer_label}\n                                validate={validateFødselsnummer}\n                                inputMode=\"numeric\"\n                                maxLength={11}\n                                style={{ width: '11rem' }}\n                            />\n                        </FormBlock>\n                        {includeName && (\n                            <Tiles columns={2}>\n                                <FormBlock>\n                                    <Form.Input\n                                        name={FosterbarnFormField.fornavn}\n                                        label={txt.form_fornavn_label}\n                                        validate={validateRequiredField}\n                                    />\n                                </FormBlock>\n                                <FormBlock>\n                                    <Form.Input\n                                        name={FosterbarnFormField.etternavn}\n                                        label={txt.form_etternavn_label}\n                                        validate={validateRequiredField}\n                                    />\n                                </FormBlock>\n                            </Tiles>\n                        )}\n                    </Form.Form>\n                )}\n            />\n        </>\n    );\n};\n\nexport default FosterbarnForm;\n","import { hasValue } from '@navikt/sif-common-core/lib/validation/hasValue';\n\nexport interface Fosterbarn {\n    id?: string;\n    fødselsnummer: string;\n    fornavn?: string;\n    etternavn?: string;\n}\n\nexport const isFosterbarn = (fosterbarn: Partial<Fosterbarn>, includeName?: boolean): fosterbarn is Fosterbarn => {\n    const { fornavn, etternavn, fødselsnummer } = fosterbarn;\n    if (includeName) {\n        return hasValue(fornavn) && hasValue(etternavn) && hasValue(fødselsnummer);\n    }\n    return hasValue(fødselsnummer);\n};\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { formatName } from '@navikt/sif-common-core/lib/utils/personUtils';\nimport { Fosterbarn } from './types';\n\ninterface Props {\n    fosterbarn: Fosterbarn[];\n    onEdit?: (opphold: Fosterbarn) => void;\n    onDelete?: (opphold: Fosterbarn) => void;\n}\n\nconst FosterbarnList = ({ fosterbarn = [], onDelete, onEdit }: Props) => {\n    const getBarnTitleString = (barn: Fosterbarn) => {\n        return (\n            <>\n                <span style={{ paddingRight: '1rem' }}>{barn.fødselsnummer}</span>{' '}\n                {barn.fornavn && barn.etternavn && <span>{formatName(barn.fornavn, barn.etternavn)}</span>}\n            </>\n        );\n    };\n    const renderFosterbarnLabel = (barn: Fosterbarn): React.ReactNode => {\n        return (\n            <>\n                {onEdit && <ActionLink onClick={() => onEdit(barn)}>{getBarnTitleString(barn)}</ActionLink>}\n                {!onEdit && <span>{getBarnTitleString(barn)}</span>}\n            </>\n        );\n    };\n\n    return (\n        <ItemList<Fosterbarn>\n            getItemId={(barn) => barn.id}\n            getItemTitle={(barn) =>\n                barn.fornavn && barn.etternavn ? formatName(barn.fornavn, barn.etternavn) : barn.fødselsnummer\n            }\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderFosterbarnLabel}\n            items={fosterbarn.filter((barn) => barn.id !== undefined)}\n        />\n    );\n};\n\nexport default FosterbarnList;\n","import React from 'react';\nimport { FormikModalFormAndList, FormikValidateFunction } from '@navikt/sif-common-formik';\nimport FosterbarnForm from './FosterbarnForm';\nimport FosterbarnList from './FosterbarnList';\nimport { Fosterbarn } from './types';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { useIntl } from 'react-intl';\n\nexport interface FosterbarnListAndDialogText {\n    liste_legg_til_knapp: string;\n    liste_tittel?: string;\n    liste_tom_liste_tekst?: string;\n    modal_tittel: string;\n}\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    validate?: FormikValidateFunction;\n    texts?: FosterbarnListAndDialogText;\n    includeName?: boolean;\n}\n\nfunction FosterbarnListAndDialog<FieldNames>({ name, validate, texts, includeName }: Props<FieldNames>) {\n    const intl = useIntl();\n\n    const defaultText: FosterbarnListAndDialogText = {\n        liste_legg_til_knapp: intlHelper(intl, 'fosterbarn.list.legg_til_knapp'),\n        liste_tittel: intlHelper(intl, 'fosterbarn.list.tittel'),\n        modal_tittel: intlHelper(intl, 'fosterbarn.modal.tittel'),\n    };\n\n    const txt = { ...defaultText, ...texts };\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, Fosterbarn>\n                name={name}\n                labels={{\n                    addLabel: txt.liste_legg_til_knapp,\n                    modalTitle: txt.modal_tittel,\n                    emptyListText: txt.liste_tom_liste_tekst,\n                    listTitle: txt.liste_tittel,\n                }}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                formRenderer={({ onSubmit, onCancel, item }) => (\n                    <FosterbarnForm\n                        fosterbarn={item}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                        includeName={includeName}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FosterbarnList fosterbarn={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FosterbarnListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { validateRequiredList } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { Fosterbarn } from '../../../forms/fosterbarn';\nimport FosterbarnForm from '../../../forms/fosterbarn/FosterbarnForm';\nimport FosterbarnListAndDialog from '../../../forms/fosterbarn/FosterbarnListAndDialog';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport fosterbarnMessages from '../../../forms/fosterbarn/fosterbarnMessages';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\n\nenum FormField {\n    'fosterbarn' = 'fosterbarn',\n}\n\ninterface FormValues {\n    [FormField.fosterbarn]: Fosterbarn[];\n}\nconst initialValues: FormValues = { fosterbarn: [] };\n\nconst FosterbarnExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<Fosterbarn> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                                <FosterbarnListAndDialog<FormField>\n                                    name={FormField.fosterbarn}\n                                    validate={validateRequiredList}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <FosterbarnForm\n                        fosterbarn={{}}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                    />\n                </Panel>\n                <SubmitPreview values={singleFormValues} />\n            </DialogFormWrapper>\n\n            <MessagesPreview messages={fosterbarnMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default FosterbarnExample;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport dateRangeValidation from '@navikt/sif-common-core/lib/validation/dateRangeValidation';\nimport { getTypedFormComponents, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { mapFomTomToDateRange } from '../utils';\nimport tidsperiodeUtils from './tidsperiodeUtils';\nimport { DateTidsperiode, DateTidsperiodeFormValues } from './types';\n\nexport interface TidsperiodeFormLabels {\n    title?: string;\n    fromDate: string;\n    toDate: string;\n    intervalTitle?: string;\n    okButton: string;\n    cancelButton: string;\n}\n\ninterface Props {\n    minDate?: Date;\n    maxDate?: Date;\n    tidsperiode?: Partial<DateTidsperiode>;\n    alleTidsperioder?: DateTidsperiode[];\n    formLabels?: Partial<TidsperiodeFormLabels>;\n    onSubmit: (values: DateTidsperiode) => void;\n    onCancel: () => void;\n}\n\nenum TidsperiodeFormFields {\n    tom = 'tom',\n    fom = 'fom',\n}\n\nconst Form = getTypedFormComponents<TidsperiodeFormFields, DateTidsperiodeFormValues>();\n\nconst TidsperiodeForm = ({\n    maxDate,\n    minDate,\n    formLabels,\n    tidsperiode,\n    alleTidsperioder = [],\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: DateTidsperiodeFormValues) => {\n        const dateTidsperiodeToSubmit = tidsperiodeUtils.mapFormValuesToDateTidsperiode(formValues, tidsperiode?.id);\n        if (tidsperiodeUtils.isValidDateTidsperiode(dateTidsperiodeToSubmit)) {\n            onSubmit(dateTidsperiodeToSubmit);\n        } else {\n            throw new Error('TidsperiodeForm: Formvalues is not a valid Tidsperiode on submit.');\n        }\n    };\n\n    const defaultLabels: TidsperiodeFormLabels = {\n        title: intlHelper(intl, 'tidsperiode.form.title'),\n        fromDate: intlHelper(intl, 'tidsperiode.form.fromDate'),\n        toDate: intlHelper(intl, 'tidsperiode.form.toDate'),\n        okButton: intlHelper(intl, 'tidsperiode.form.okButton'),\n        cancelButton: intlHelper(intl, 'tidsperiode.form.cancelButton'),\n    };\n\n    const inlineLabels: TidsperiodeFormLabels = { ...defaultLabels, ...formLabels };\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={tidsperiodeUtils.mapDateTidsperiodeToFormValues(tidsperiode || {})}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => {\n                    const validateFromDate = (dateString?: string) => {\n                        return dateRangeValidation.validateFromDate(\n                            ISOStringToDate(dateString),\n                            minDate,\n                            maxDate,\n                            ISOStringToDate(formik.values.tom)\n                        );\n                    };\n\n                    const validateToDate = (dateString?: string) => {\n                        return dateRangeValidation.validateToDate(\n                            ISOStringToDate(dateString),\n                            minDate,\n                            maxDate,\n                            ISOStringToDate(formik.values.tom)\n                        );\n                    };\n\n                    const disabledDateRanges =\n                        tidsperiode === undefined\n                            ? alleTidsperioder.map(mapFomTomToDateRange)\n                            : alleTidsperioder.filter((t) => t.id !== tidsperiode.id).map(mapFomTomToDateRange);\n\n                    return (\n                        <Form.Form\n                            onCancel={onCancel}\n                            fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                            <Systemtittel tag=\"h1\">{inlineLabels.title}</Systemtittel>\n                            <FormBlock>\n                                <Form.DateRangePicker\n                                    legend={inlineLabels.intervalTitle}\n                                    fullscreenOverlay={true}\n                                    minDate={minDate}\n                                    maxDate={maxDate}\n                                    disabledDateRanges={disabledDateRanges}\n                                    fromInputProps={{\n                                        label: inlineLabels.fromDate,\n                                        name: TidsperiodeFormFields.fom,\n                                        validate: validateFromDate,\n                                        onChange: () => {\n                                            setTimeout(() => {\n                                                formik.validateField(TidsperiodeFormFields.tom);\n                                            });\n                                        },\n                                    }}\n                                    toInputProps={{\n                                        label: inlineLabels.toDate,\n                                        name: TidsperiodeFormFields.tom,\n                                        validate: validateToDate,\n                                        onChange: () => {\n                                            setTimeout(() => {\n                                                formik.validateField(TidsperiodeFormFields.fom);\n                                            });\n                                        },\n                                    }}\n                                />\n                            </FormBlock>\n                        </Form.Form>\n                    );\n                }}\n            />\n        </>\n    );\n};\n\nexport default TidsperiodeForm;\n","import { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { guid } from 'nav-frontend-js-utils';\nimport { DateTidsperiode, DateTidsperiodeFormValues } from './types';\n\nconst isValidDateTidsperiode = (tidsperiode: Partial<DateTidsperiode>): tidsperiode is DateTidsperiode => {\n    return tidsperiode.fom !== undefined && tidsperiode.tom !== undefined;\n};\n\nconst mapFormValuesToDateTidsperiode = (\n    formValues: DateTidsperiodeFormValues,\n    id: string | undefined\n): Partial<DateTidsperiode> => {\n    return {\n        id: id || guid(),\n        fom: ISOStringToDate(formValues.fom),\n        tom: ISOStringToDate(formValues.tom),\n    };\n};\n\nconst mapDateTidsperiodeToFormValues = ({ fom, tom }: Partial<DateTidsperiode>): DateTidsperiodeFormValues => {\n    return {\n        fom: dateToISOString(fom),\n        tom: dateToISOString(tom),\n    };\n};\n\nconst tidsperiodeUtils = {\n    isValidDateTidsperiode,\n    mapDateTidsperiodeToFormValues,\n    mapFormValuesToDateTidsperiode,\n};\n\nexport default tidsperiodeUtils;\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { DateTidsperiode } from './types';\n\ninterface Props {\n    tidsperiode: DateTidsperiode[];\n    onEdit?: (opphold: DateTidsperiode) => void;\n    onDelete?: (opphold: DateTidsperiode) => void;\n}\n\nconst TidsperiodeList = ({ tidsperiode = [], onDelete, onEdit }: Props) => {\n    const getDateTitleString = (uttak: DateTidsperiode) =>\n        `${prettifyDateExtended(uttak.fom)} - ${prettifyDateExtended(uttak.tom)}`;\n\n    const renderTidsperiodeLabel = (uttak: DateTidsperiode): React.ReactNode => {\n        const title = getDateTitleString(uttak);\n        return (\n            <>\n                {onEdit && <ActionLink onClick={() => onEdit(uttak)}>{title}</ActionLink>}\n                {!onEdit && <span>{title}</span>}\n            </>\n        );\n    };\n\n    return (\n        <ItemList<DateTidsperiode>\n            getItemId={(uttak) => uttak.id}\n            getItemTitle={(uttak) => getDateTitleString(uttak)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderTidsperiodeLabel}\n            items={tidsperiode.filter((uttak) => uttak.id !== undefined)}\n        />\n    );\n};\n\nexport default TidsperiodeList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { FormikModalFormAndList, FormikValidateFunction, ModalFormAndListLabels } from '@navikt/sif-common-formik';\nimport TidsperiodeForm from './TidsperiodeForm';\nimport TidsperiodeList from './TidsperiodeList';\nimport { DateTidsperiode } from './types';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    validate?: FormikValidateFunction;\n    formTitle?: string;\n    minDate?: Date;\n    maxDate?: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction TidsperiodeListAndDialog<FieldNames>({\n    name,\n    minDate,\n    maxDate,\n    validate,\n    labels,\n    formTitle,\n}: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, DateTidsperiode>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                sortFunc={sortItemsByFom}\n                formRenderer={({ onSubmit, onCancel, item, allItems }) => (\n                    <TidsperiodeForm\n                        tidsperiode={item}\n                        alleTidsperioder={allItems}\n                        formLabels={formTitle ? { title: formTitle } : undefined}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => {\n                    console.log(items);\n\n                    return <TidsperiodeList tidsperiode={items} onEdit={onEdit} onDelete={onDelete} />;\n                }}\n            />\n        </>\n    );\n}\n\nexport default TidsperiodeListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { date1YearAgo, date1YearFromNow } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { validateRequiredList } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport { DateTidsperiode } from '../../../forms/tidsperiode';\nimport TidsperiodeListAndDialog from '../../../forms/tidsperiode/TidsperiodeListAndDialog';\nimport TidsperiodeForm from '../../../forms/tidsperiode/TidsperiodeForm';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport tidsperiodeMessages from '../../../forms/tidsperiode/tidsperiodeMessages';\n\nenum FormField {\n    'tidsperiode' = 'tidsperiode',\n}\n\ninterface FormValues {\n    [FormField.tidsperiode]: DateTidsperiode[];\n}\nconst initialValues: FormValues = { tidsperiode: [] };\n\nconst TidsperiodeExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<DateTidsperiode> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                                <TidsperiodeListAndDialog<FormField>\n                                    name={FormField.tidsperiode}\n                                    minDate={date1YearAgo}\n                                    maxDate={date1YearFromNow}\n                                    validate={validateRequiredList}\n                                    labels={{\n                                        addLabel: 'Legg til periode',\n                                        listTitle: 'Registrerte periode',\n                                        modalTitle: 'Periode',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <TidsperiodeForm\n                        minDate={date1YearAgo}\n                        maxDate={date1YearFromNow}\n                        tidsperiode={{}}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                    />\n                </Panel>\n                <SubmitPreview values={singleFormValues} />\n            </DialogFormWrapper>\n\n            <MessagesPreview messages={tidsperiodeMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default TidsperiodeExample;\n","import { YesOrNo } from '@navikt/sif-common-formik/lib';\n\nexport enum UtenlandsoppholdÅrsak {\n    'INNLAGT_DEKKET_NORGE' = 'BARNET_INNLAGT_I_HELSEINSTITUSJON_FOR_NORSK_OFFENTLIG_REGNING',\n    'INNLAGT_DEKKET_ANNET_LAND' = 'BARNET_INNLAGT_I_HELSEINSTITUSJON_DEKKET_ETTER_AVTALE_MED_ET_ANNET_LAND_OM_TRYGD',\n    'ANNET' = 'ANNET',\n}\n\nexport interface UtenlandsoppholdInnlagtPeriode {\n    fom: Date;\n    tom: Date;\n}\n\nexport interface Utenlandsopphold {\n    id?: string;\n    fom: Date;\n    tom: Date;\n    landkode: string;\n    erBarnetInnlagt?: YesOrNo;\n    barnInnlagtPerioder?: UtenlandsoppholdInnlagtPeriode[];\n    årsak?: UtenlandsoppholdÅrsak;\n}\n\nexport type UtenlandsoppholdFormValues = Partial<\n    Omit<Utenlandsopphold, 'id' | 'fom' | 'tom' | 'barnInnlagtPerioder'> & {\n        fom?: string;\n        tom?: string;\n        barnInnlagtPerioder?: UtenlandsoppholdInnlagtPeriode[];\n    }\n>;\n","import { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Utenlandsopphold, UtenlandsoppholdFormValues } from './types';\n\nconst isValidUtenlandsopphold = (utenlandsopphold: Partial<Utenlandsopphold>): utenlandsopphold is Utenlandsopphold => {\n    return (\n        utenlandsopphold.fom !== undefined &&\n        utenlandsopphold.tom !== undefined &&\n        utenlandsopphold.landkode !== undefined\n    );\n};\n\nconst mapFormValuesToUtenlandsopphold = (\n    formValues: UtenlandsoppholdFormValues,\n    id: string | undefined\n): Partial<Utenlandsopphold> => {\n    const { barnInnlagtPerioder } = formValues;\n    return {\n        ...formValues,\n        id: id || guid(),\n        fom: ISOStringToDate(formValues.fom),\n        tom: ISOStringToDate(formValues.tom),\n        barnInnlagtPerioder,\n    };\n};\n\nconst mapUtenlandsoppholdToFormValues = ({\n    fom,\n    tom,\n    erBarnetInnlagt,\n    barnInnlagtPerioder,\n    landkode,\n    årsak,\n}: Partial<Utenlandsopphold>): UtenlandsoppholdFormValues => ({\n    fom: dateToISOString(fom),\n    tom: dateToISOString(tom),\n    erBarnetInnlagt,\n    landkode,\n    årsak,\n    barnInnlagtPerioder,\n});\n\nconst utenlandsoppholdUtils = {\n    isValidUtenlandsopphold,\n    mapFormValuesToUtenlandsopphold,\n    mapUtenlandsoppholdToFormValues,\n};\nexport default utenlandsoppholdUtils;\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { countryIsMemberOfEøsOrEfta } from '@navikt/sif-common-core/lib/utils/countryUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport dateRangeValidation from '@navikt/sif-common-core/lib/validation/dateRangeValidation';\nimport {\n    validateRequiredField,\n    validateRequiredList,\n    validateRequiredSelect,\n    validateYesOrNoIsAnswered,\n} from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { hasValue } from '@navikt/sif-common-core/lib/validation/hasValue';\nimport { DateRange, getCountryName, ISOStringToDate, YesOrNo } from '@navikt/sif-common-formik';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport TidsperiodeListAndDialog from '../tidsperiode/TidsperiodeListAndDialog';\nimport { mapFomTomToDateRange } from '../utils';\nimport { Utenlandsopphold, UtenlandsoppholdFormValues, UtenlandsoppholdÅrsak } from './types';\nimport utils from './utenlandsoppholdUtils';\nimport { dateToday } from '@navikt/sif-common-core/lib/utils/dateUtils';\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    opphold?: Utenlandsopphold;\n    alleOpphold?: Utenlandsopphold[];\n    onSubmit: (values: Utenlandsopphold) => void;\n    onCancel: () => void;\n}\n\nenum UtenlandsoppholdFormFields {\n    fom = 'fom',\n    tom = 'tom',\n    landkode = 'landkode',\n    årsak = 'årsak',\n    erBarnetInnlagt = 'erBarnetInnlagt',\n    barnInnlagtPerioder = 'barnInnlagtPerioder',\n}\n\nconst defaultFormValues: UtenlandsoppholdFormValues = {\n    fom: undefined,\n    tom: undefined,\n    landkode: undefined,\n    erBarnetInnlagt: YesOrNo.UNANSWERED,\n    barnInnlagtPerioder: [],\n    årsak: undefined,\n};\n\nconst Form = getTypedFormComponents<UtenlandsoppholdFormFields, UtenlandsoppholdFormValues>();\n\nconst UtenlandsoppholdForm = ({ maxDate, minDate, opphold, alleOpphold = [], onSubmit, onCancel }: Props) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: Partial<UtenlandsoppholdFormValues>) => {\n        const utenlandsoppholdToSubmit = utils.mapFormValuesToUtenlandsopphold(formValues, opphold?.id);\n        if (utils.isValidUtenlandsopphold(utenlandsoppholdToSubmit)) {\n            onSubmit({\n                ...utenlandsoppholdToSubmit,\n                årsak: countryIsMemberOfEøsOrEfta(utenlandsoppholdToSubmit.landkode) ? undefined : formValues.årsak,\n            });\n        } else {\n            throw new Error('UtenlandsoppholdForm: Formvalues is not a valid Utenlandsopphold on submit.');\n        }\n    };\n\n    const registrerteTidsperioder: DateRange[] | undefined =\n        opphold === undefined\n            ? alleOpphold.map(mapFomTomToDateRange)\n            : alleOpphold.filter((o) => o.id !== opphold.id).map(mapFomTomToDateRange);\n\n    const initialValues = opphold ? utils.mapUtenlandsoppholdToFormValues(opphold) : defaultFormValues;\n    return (\n        <Form.FormikWrapper\n            initialValues={initialValues}\n            onSubmit={onFormikSubmit}\n            renderForm={(formik) => {\n                const {\n                    values: { fom, tom, landkode, erBarnetInnlagt, barnInnlagtPerioder = [], årsak },\n                } = formik;\n\n                const hasDateStringValues = hasValue(fom) && hasValue(tom);\n                const fomDate = ISOStringToDate(fom);\n                const tomDate = ISOStringToDate(tom);\n\n                const includeInnlagtPerioderQuestion =\n                    hasDateStringValues && landkode !== undefined && erBarnetInnlagt === YesOrNo.YES;\n\n                const includeInnlagtQuestion: boolean =\n                    landkode !== undefined && hasValue(landkode) && !countryIsMemberOfEøsOrEfta(landkode);\n\n                const showÅrsakQuestion = barnInnlagtPerioder.length > 0;\n\n                const areAllQuestionsAnswered: boolean =\n                    hasDateStringValues && landkode !== undefined && includeInnlagtQuestion === false\n                        ? true\n                        : erBarnetInnlagt !== YesOrNo.UNANSWERED &&\n                          (erBarnetInnlagt === YesOrNo.YES\n                              ? barnInnlagtPerioder.length > 0 && årsak !== undefined\n                              : true);\n\n                return (\n                    <Form.Form\n                        includeButtons={areAllQuestionsAnswered}\n                        onCancel={onCancel}\n                        fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                        <Systemtittel tag=\"h1\">\n                            <FormattedMessage id=\"utenlandsopphold.form.tittel\" />\n                        </Systemtittel>\n                        <FormBlock>\n                            <Form.DateRangePicker\n                                legend={intlHelper(intl, 'utenlandsopphold.form.tidsperiode.spm')}\n                                fullscreenOverlay={true}\n                                disabledDateRanges={registrerteTidsperioder}\n                                minDate={minDate}\n                                maxDate={maxDate}\n                                fromInputProps={{\n                                    name: UtenlandsoppholdFormFields.fom,\n                                    label: intlHelper(intl, 'utenlandsopphold.form.tidsperiode.fraDato'),\n                                    dayPickerProps: {\n                                        initialMonth: fomDate || minDate || dateToday,\n                                    },\n                                    validate: (dateString) =>\n                                        dateRangeValidation.validateFromDate(\n                                            ISOStringToDate(dateString),\n                                            minDate,\n                                            maxDate,\n                                            ISOStringToDate(tom)\n                                        ),\n                                }}\n                                toInputProps={{\n                                    name: UtenlandsoppholdFormFields.tom,\n                                    label: intlHelper(intl, 'utenlandsopphold.form.tidsperiode.tilDato'),\n                                    dayPickerProps: {\n                                        initialMonth: tomDate || fomDate || dateToday,\n                                    },\n                                    validate: (dateString) =>\n                                        dateRangeValidation.validateToDate(\n                                            ISOStringToDate(dateString),\n                                            minDate,\n                                            maxDate,\n                                            ISOStringToDate(fom)\n                                        ),\n                                }}\n                            />\n                        </FormBlock>\n                        {hasDateStringValues && (\n                            <FormBlock>\n                                <Form.CountrySelect\n                                    name={UtenlandsoppholdFormFields.landkode}\n                                    label={intlHelper(intl, 'utenlandsopphold.form.land.spm')}\n                                    validate={validateRequiredSelect}\n                                />\n                            </FormBlock>\n                        )}\n\n                        {includeInnlagtQuestion && landkode && hasDateStringValues && (\n                            <>\n                                <FormBlock>\n                                    <Form.YesOrNoQuestion\n                                        name={UtenlandsoppholdFormFields.erBarnetInnlagt}\n                                        legend={intlHelper(intl, 'utenlandsopphold.form.erBarnetInnlagt.spm', {\n                                            land: getCountryName(landkode, intl.locale),\n                                        })}\n                                        validate={validateYesOrNoIsAnswered}\n                                    />\n                                </FormBlock>\n                                {includeInnlagtPerioderQuestion && (\n                                    <FormBlock margin=\"l\">\n                                        <TidsperiodeListAndDialog\n                                            name={UtenlandsoppholdFormFields.barnInnlagtPerioder}\n                                            minDate={ISOStringToDate(fom)}\n                                            maxDate={ISOStringToDate(tom)}\n                                            validate={validateRequiredList}\n                                            formTitle={intlHelper(\n                                                intl,\n                                                'utenlandsopphold.form.perioderBarnetErInnlag.formTitle'\n                                            )}\n                                            labels={{\n                                                addLabel: intlHelper(\n                                                    intl,\n                                                    'utenlandsopphold.form.perioderBarnetErInnlag.addLabel'\n                                                ),\n                                                modalTitle: intlHelper(\n                                                    intl,\n                                                    'utenlandsopphold.form.perioderBarnetErInnlag.modalTitle'\n                                                ),\n                                                listTitle: intlHelper(\n                                                    intl,\n                                                    'utenlandsopphold.form.perioderBarnetErInnlag.listTitle'\n                                                ),\n                                            }}\n                                        />\n                                    </FormBlock>\n                                )}\n                                {showÅrsakQuestion && (\n                                    <>\n                                        <FormBlock>\n                                            <Form.RadioPanelGroup\n                                                legend={intlHelper(intl, 'utenlandsopphold.form.årsak.spm', {\n                                                    land: getCountryName(landkode, intl.locale),\n                                                })}\n                                                name={UtenlandsoppholdFormFields.årsak}\n                                                validate={validateRequiredField}\n                                                radios={[\n                                                    {\n                                                        value: UtenlandsoppholdÅrsak.INNLAGT_DEKKET_NORGE,\n                                                        label: intlHelper(\n                                                            intl,\n                                                            `utenlandsopphold.form.årsak.${UtenlandsoppholdÅrsak.INNLAGT_DEKKET_NORGE}`\n                                                        ),\n                                                    },\n                                                    {\n                                                        value: UtenlandsoppholdÅrsak.INNLAGT_DEKKET_ANNET_LAND,\n                                                        label: intlHelper(\n                                                            intl,\n                                                            `utenlandsopphold.form.årsak.${UtenlandsoppholdÅrsak.INNLAGT_DEKKET_ANNET_LAND}`,\n                                                            { land: getCountryName(landkode, intl.locale) }\n                                                        ),\n                                                    },\n                                                    {\n                                                        value: UtenlandsoppholdÅrsak.ANNET,\n                                                        label: intlHelper(\n                                                            intl,\n                                                            `utenlandsopphold.form.årsak.${UtenlandsoppholdÅrsak.ANNET}`\n                                                        ),\n                                                    },\n                                                ]}\n                                            />\n                                        </FormBlock>\n                                    </>\n                                )}\n                            </>\n                        )}\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default UtenlandsoppholdForm;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { getCountryName } from '@navikt/sif-common-formik';\nimport { Utenlandsopphold } from './types';\nimport './utenlandsoppholdList.less';\n\ninterface Props {\n    utenlandsopphold: Utenlandsopphold[];\n    onEdit?: (opphold: Utenlandsopphold) => void;\n    onDelete?: (opphold: Utenlandsopphold) => void;\n}\n\nconst bem = bemUtils('utenlandsoppholdList');\n\nconst UtenlandsoppholdList = ({ utenlandsopphold, onDelete, onEdit }: Props) => {\n    const intl = useIntl();\n    const renderUtenlandsoppholdLabel = (opphold: Utenlandsopphold): React.ReactNode => {\n        const navn = getCountryName(opphold.landkode, intl.locale);\n        return (\n            <div className={bem.element('label')}>\n                <span className={bem.element('land')}>\n                    {onEdit && <ActionLink onClick={() => onEdit(opphold)}>{navn}</ActionLink>}\n                    {!onEdit && <span>{navn}</span>}\n                </span>\n                <span className={bem.element('dato')}>\n                    {prettifyDateExtended(opphold.fom)} - {prettifyDateExtended(opphold.tom)}\n                </span>\n            </div>\n        );\n    };\n\n    return (\n        <ItemList<Utenlandsopphold>\n            getItemId={(opphold) => opphold.id}\n            getItemTitle={(opphold) => getCountryName(opphold.landkode, intl.locale)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderUtenlandsoppholdLabel}\n            items={utenlandsopphold}\n        />\n    );\n};\n\nexport default UtenlandsoppholdList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { FormikModalFormAndList, FormikValidateFunction, ModalFormAndListLabels } from '@navikt/sif-common-formik';\nimport { Utenlandsopphold } from './types';\nimport UtenlandsoppholdForm from './UtenlandsoppholdForm';\nimport UtenlandsoppholdListe from './UtenlandsoppholdList';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    validate?: FormikValidateFunction;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction UtenlandsoppholdListAndDialog<FieldNames>({ name, minDate, maxDate, validate, labels }: Props<FieldNames>) {\n    return (\n        <FormikModalFormAndList<FieldNames, Utenlandsopphold>\n            name={name}\n            labels={labels}\n            validate={validate}\n            dialogWidth=\"narrow\"\n            sortFunc={sortItemsByFom}\n            formRenderer={({ onSubmit, onCancel, item, allItems }) => (\n                <UtenlandsoppholdForm\n                    opphold={item}\n                    alleOpphold={allItems}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    onSubmit={onSubmit}\n                    onCancel={onCancel}\n                />\n            )}\n            listRenderer={({ items, onEdit, onDelete }) => (\n                <UtenlandsoppholdListe utenlandsopphold={items} onEdit={onEdit} onDelete={onDelete} />\n            )}\n        />\n    );\n}\n\nexport default UtenlandsoppholdListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { date1YearAgo, date1YearFromNow } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { validateRequiredList } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport Panel from 'nav-frontend-paneler';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { Utenlandsopphold } from '../../../forms/utenlandsopphold/types';\nimport UtenlandsoppholdForm from '../../../forms/utenlandsopphold/UtenlandsoppholdForm';\nimport UtenlandsoppholdListAndDialog from '../../../forms/utenlandsopphold/UtenlandsoppholdListAndDialog';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport utenlandsoppholdMessages from '../../../forms/utenlandsopphold/utenlandsoppholdMessages';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\n\nenum FormField {\n    'utenlandsopphold' = 'utenlandsopphold',\n}\n\ninterface FormValues {\n    [FormField.utenlandsopphold]: Utenlandsopphold[];\n}\nconst initialValues: FormValues = {\n    utenlandsopphold: [],\n};\n\nconst UtenlandsoppholdExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<Utenlandsopphold> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                                <UtenlandsoppholdListAndDialog\n                                    minDate={date1YearAgo}\n                                    maxDate={date1YearFromNow}\n                                    name={FormField.utenlandsopphold}\n                                    validate={validateRequiredList}\n                                    labels={{\n                                        addLabel: 'Legg til utenlandsopphold',\n                                        listTitle: 'Registrerte utenlandsopphold',\n                                        modalTitle: 'Utenlandsopphold',\n                                        emptyListText: 'Ingen utenlandsopphold er lagt til',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <UtenlandsoppholdForm\n                        opphold={initialValues.utenlandsopphold[0]}\n                        minDate={date1YearAgo}\n                        maxDate={date1YearFromNow}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                    />\n                    <SubmitPreview values={singleFormValues} />\n                </Panel>\n            </DialogFormWrapper>\n\n            <MessagesPreview messages={utenlandsoppholdMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default UtenlandsoppholdExample;\n","import { YesOrNo } from '@navikt/sif-common-core/lib/types/YesOrNo';\n\nexport enum FraværÅrsak {\n    'stengtSkoleBhg' = 'STENGT_SKOLE_ELLER_BARNEHAGE',\n    'smittevernhensyn' = 'SMITTEVERNHENSYN',\n    'ordinært' = 'ORDINÆRT_FRAVÆR',\n}\n\nexport interface FraværPeriode {\n    id?: string;\n    fraOgMed: Date;\n    tilOgMed: Date;\n    årsak: FraværÅrsak;\n}\n\nexport type FraværPeriodeFormValues = Partial<{\n    id: string;\n    fraOgMed: string;\n    tilOgMed: string;\n    hjemmePgaKorona: YesOrNo;\n    årsak: FraværÅrsak;\n}>;\n\nexport interface FraværDag {\n    id?: string;\n    dato: Date;\n    timerArbeidsdag: string;\n    timerFravær: string;\n    årsak: FraværÅrsak;\n}\n\nexport type FraværDagFormValues = Partial<\n    Omit<FraværDag, 'dato'> & {\n        dato: string;\n        hjemmePgaKorona: YesOrNo;\n        årsak?: FraværÅrsak;\n    }\n>;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\ninterface Props {\n    id: string;\n    value?: Record<string, string | number | boolean | null | undefined | Date>;\n}\n\nconst basicHtmlTagRenderers = {\n    li: (value: string) => <li>{value}</li>,\n    strong: (value: string) => <strong>{value}</strong>,\n    p: (value: string) => <p>{value}</p>,\n    em: (value: string) => <em>{value}</em>,\n};\n\nconst FormattedHtmlMessage = ({ id, value }: Props) => (\n    <FormattedMessage id={id} values={{ ...value, ...basicHtmlTagRenderers }} />\n);\n\nexport default FormattedHtmlMessage;\n","import { YesOrNo } from '@navikt/sif-common-core/lib/types/YesOrNo';\nimport { DateRange } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport dayjs from 'dayjs';\nimport isSameOrAfter from 'dayjs/plugin/isSameOrAfter';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\nimport { isString } from 'formik';\nimport { guid } from 'nav-frontend-js-utils';\nimport { FraværDag, FraværDagFormValues, FraværPeriode, FraværPeriodeFormValues, FraværÅrsak } from './types';\n\ndayjs.extend(isSameOrAfter);\ndayjs.extend(isSameOrBefore);\n\nexport const isFraværDag = (fraværDag: Partial<FraværDag>): fraværDag is FraværDag => {\n    return (\n        fraværDag.dato !== undefined &&\n        fraværDag.timerArbeidsdag !== undefined &&\n        fraværDag.timerFravær !== undefined &&\n        fraværDag.årsak !== undefined\n    );\n};\n\nexport const isFraværPeriode = (fraværPeriode: Partial<FraværPeriode>): fraværPeriode is FraværPeriode => {\n    return (\n        fraværPeriode.fraOgMed !== undefined &&\n        fraværPeriode.tilOgMed !== undefined &&\n        fraværPeriode.årsak !== undefined\n    );\n};\n\nexport const fraværDagToFraværDateRange = (fraværDag: FraværDag): DateRange => ({\n    from: fraværDag.dato,\n    to: fraværDag.dato,\n});\n\nexport const fraværPeriodeToDateRange = (fraværDag: FraværPeriode): DateRange => ({\n    from: fraværDag.fraOgMed,\n    to: fraværDag.tilOgMed,\n});\n\nexport enum Weekday {\n    monday = 'monday',\n    tuesday = 'tuesday',\n    wednesday = 'wednesday',\n    thursday = 'thursday',\n    friday = 'friday',\n    saturday = 'saturday',\n    sunday = 'sunday',\n}\n\nexport const getWeekdayName = (date: Date): Weekday | undefined => {\n    switch (date.getDay()) {\n        case 0:\n            return Weekday.sunday;\n        case 1:\n            return Weekday.monday;\n        case 2:\n            return Weekday.tuesday;\n        case 3:\n            return Weekday.wednesday;\n        case 4:\n            return Weekday.thursday;\n        case 5:\n            return Weekday.friday;\n        case 6:\n            return Weekday.saturday;\n        default:\n            return undefined;\n    }\n};\n\nexport const dateErHelg = (date: Date) =>\n    getWeekdayName(date) === Weekday.saturday || getWeekdayName(date) === Weekday.sunday;\n\nexport const rangeCollideWithRanges = (range: DateRange, ranges: DateRange[] = []): boolean => {\n    if (!range || !range.from || !range.to || ranges.length === 0) {\n        return false;\n    }\n    return ranges.some((periode) => {\n        const fromDay = dayjs(range.from);\n        const toDay = dayjs(range.to);\n        const { from, to } = periode;\n        if (fromDay.isBefore(from) && toDay.isAfter(to)) return true;\n        if (fromDay.isSameOrAfter(from, 'day') && fromDay.isSameOrBefore(to, 'day')) return true;\n        if (toDay.isSameOrAfter(from, 'day') && toDay.isSameOrBefore(to, 'day')) return true;\n    });\n};\n\nexport const dateCollideWithRanges = (date: Date | undefined, ranges: DateRange[] = []): boolean => {\n    if (!date || ranges.length === 0) {\n        return false;\n    }\n    return ranges.some((range) => {\n        return dayjs(date).isSameOrAfter(range.from, 'day') && dayjs(date).isSameOrBefore(range.to, 'day');\n    });\n};\n\nexport const timeText = (timer: string): string =>\n    timer === '0' || timer === '0.5' || timer === '1' ? 'time' : 'timer';\n\nexport const dateRangeToFomTom = (dateRange: DateRange): { fom: Date; tom: Date } => ({\n    fom: dateRange.from,\n    tom: dateRange.to,\n});\nexport const toMaybeNumber = (timerArbeidsdag: string | undefined): number | undefined => {\n    if (timerArbeidsdag && isString(timerArbeidsdag)) {\n        return parseFloat(timerArbeidsdag);\n    }\n    return undefined;\n};\n\nexport const getHjemmePgaKoronaFormValueFromFraværÅrsak = (årsak?: FraværÅrsak): YesOrNo => {\n    if (årsak === undefined) {\n        return YesOrNo.UNANSWERED;\n    }\n    return årsak === FraværÅrsak.smittevernhensyn || årsak === FraværÅrsak.stengtSkoleBhg ? YesOrNo.YES : YesOrNo.NO;\n};\n\nexport const getÅrsakFromFraværFormValues = (formValues: FraværDagFormValues | FraværPeriodeFormValues): FraværÅrsak =>\n    formValues.hjemmePgaKorona === YesOrNo.YES && formValues.årsak ? formValues.årsak : FraværÅrsak.ordinært;\n\nexport const mapFormValuesToFraværDag = (\n    formValues: FraværDagFormValues,\n    id: string | undefined\n): Partial<FraværDag> => {\n    return {\n        id: id || guid(),\n        timerArbeidsdag: formValues.timerArbeidsdag,\n        timerFravær: formValues.timerFravær,\n        dato: ISOStringToDate(formValues.dato),\n        årsak: getÅrsakFromFraværFormValues(formValues),\n    };\n};\n\nexport const mapFraværDagToFormValues = (fraværDag: Partial<FraværDag>): FraværDagFormValues => {\n    return {\n        timerArbeidsdag: fraværDag.timerArbeidsdag,\n        timerFravær: fraværDag.timerFravær,\n        dato: fraværDag.dato ? dateToISOString(fraværDag.dato) : '',\n        hjemmePgaKorona: getHjemmePgaKoronaFormValueFromFraværÅrsak(fraværDag.årsak),\n        årsak: fraværDag.årsak,\n    };\n};\n\nexport const mapFormValuesToFraværPeriode = (\n    formValues: FraværPeriodeFormValues,\n    id: string | undefined\n): Partial<FraværPeriode> => {\n    return {\n        id: id || guid(),\n        fraOgMed: ISOStringToDate(formValues.fraOgMed),\n        tilOgMed: ISOStringToDate(formValues.tilOgMed),\n        årsak: getÅrsakFromFraværFormValues(formValues),\n    };\n};\n\nexport const mapFraværPeriodeToFormValues = (fraværPeriode: Partial<FraværPeriode>): FraværPeriodeFormValues => {\n    return {\n        fraOgMed: fraværPeriode.fraOgMed ? dateToISOString(fraværPeriode.fraOgMed) : '',\n        tilOgMed: fraværPeriode.tilOgMed ? dateToISOString(fraværPeriode.tilOgMed) : '',\n        hjemmePgaKorona: getHjemmePgaKoronaFormValueFromFraværÅrsak(fraværPeriode.årsak),\n        årsak: fraværPeriode.årsak,\n    };\n};\n","import { DateRange } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { createFieldValidationError } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { FieldValidationResult } from '@navikt/sif-common-core/lib/validation/types';\nimport { FormikValidateFunction, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport {\n    dateCollideWithRanges,\n    dateErHelg,\n    fraværDagToFraværDateRange,\n    fraværPeriodeToDateRange,\n    rangeCollideWithRanges,\n} from './fraværUtilities';\nimport { FraværDag, FraværPeriode } from './types';\n\nexport enum FraværFieldValidationErrors {\n    'påkrevd' = 'fieldvalidation.påkrevd',\n    'fraværsperioder_mangler' = 'fieldvalidation.fraværsperioder_mangler',\n    'fraværsperioder_overlapper' = 'fieldvalidation.fraværsperioder_overlapper',\n    'fraværsperioder_utenfor_periode' = 'fieldvalidation.fraværsperioder_utenfor_periode',\n    'dager_med_fravær_ugyldig_dag' = 'fieldvalidation.dager_med_fravær_ugyldig_dag',\n    'dager_med_fravær_mangler' = 'fieldvalidation.dager_med_fravær_mangler',\n    'dager_med_fravær_like' = 'fieldvalidation.dager_med_fravær_like',\n    'dager_med_fravær_utenfor_periode' = 'fieldvalidation.dager_med_fravær_utenfor_periode',\n    'dager_med_for_mange_timer' = 'fieldvalidation.dager_med_for_mange_timer',\n    'dager_overlapper_med_andre_dager' = 'fieldvalidation.dager_overlapper_med_andre_dager',\n    'fra_dato_kolliderer_med_annet_fravær' = 'fieldvalidation.fra_dato_kolliderer_med_annet_fravær',\n    'til_dato_kolliderer_med_annet_fravær' = 'fieldvalidation.til_dato_kolliderer_med_annet_fravær',\n    'dato_kolliderer_med_annet_fravær' = 'fieldvalidation.dato_kolliderer_med_annet_fravær',\n    'timer_ikke_tall' = 'fieldvalidation.timer_ikke_tall',\n    'timer_for_mange_timer' = 'fieldvalidation.timer_for_mange_timer',\n    'dato_utenfor_gyldig_tidsrom' = 'fieldvalidation.dato_utenfor_gyldig_tidsrom',\n    'tom_er_før_fom' = 'fieldvalidation.tom_er_før_fom',\n    'ingen_dokumenter' = 'fieldvalidation.ingen_dokumenter',\n    'for_mange_dokumenter' = 'fieldvalidation.for_mange_dokumenter',\n    'fravær_timer_mer_enn_arbeidstimer' = 'fravær.form.validation.timer_mer_enn_arbeidstimer',\n    'er_helg' = 'fravær.form.validation.er_helg',\n    'fra_og_til_er_ulike_år' = 'fravær.form.validation.fra_og_til_er_ulike_år',\n    'fra_og_til_overlapper_andre_perioder' = 'fravær.form.validation.fra_og_til_overlapper_andre_perioder',\n    'dato_overlapper_med_andre_perioder' = 'fravær.form.validation.dato_overlapper_med_andre_perioder',\n}\n\nexport type FieldValidationArray<ValueType> = (\n    validations: FormikValidateFunction<ValueType>[]\n) => (value: ValueType) => FieldValidationResult;\n\nexport const validateAll = <ValueType>(validations: FormikValidateFunction<ValueType>[]): FormikValidateFunction => (\n    value: ValueType\n): FieldValidationResult =>\n    validations\n        .map((validate: FormikValidateFunction<ValueType>) => validate(value))\n        .reduce((prev: FieldValidationResult, curr: FieldValidationResult) => prev || curr, undefined);\n\nexport const validateLessOrEqualTo = (maybeMaxValue: number | undefined): FormikValidateFunction => (\n    maybeValue: string | undefined\n) => {\n    const maybeValueFloat: number | undefined = maybeValue ? parseFloat(maybeValue) : undefined;\n    if (maybeMaxValue && maybeValueFloat) {\n        return maybeValueFloat <= maybeMaxValue\n            ? undefined\n            : createFieldValidationError(FraværFieldValidationErrors.fravær_timer_mer_enn_arbeidstimer);\n    }\n    return undefined;\n};\n\nexport const validateErSammeÅr = (maybeDateFrom: string | undefined, maybeDateTo: string | undefined) => {\n    const fromDate = ISOStringToDate(maybeDateFrom);\n    const toDate = ISOStringToDate(maybeDateTo);\n    if (fromDate && toDate && fromDate.getFullYear() !== toDate.getFullYear()) {\n        return createFieldValidationError(FraværFieldValidationErrors.fra_og_til_er_ulike_år);\n    }\n    return undefined;\n};\n\nexport const validateNotHelgedag = (maybeDate: string | undefined): FieldValidationResult => {\n    const date = ISOStringToDate(maybeDate);\n    return date && dateErHelg(date) ? createFieldValidationError(FraværFieldValidationErrors.er_helg) : undefined;\n};\n\nexport const validateFraværPeriodeCollision = (\n    from: Date | undefined,\n    to: Date | undefined,\n    ranges: DateRange[] | undefined\n): FieldValidationResult => {\n    if (!from || !to || (ranges || []).length === 0) {\n        return undefined;\n    }\n    return rangeCollideWithRanges({ from, to }, ranges)\n        ? createFieldValidationError(FraværFieldValidationErrors.dager_overlapper_med_andre_dager)\n        : undefined;\n};\n\nexport const validateFraOgMedForCollision = (\n    date: Date | undefined,\n    ranges: DateRange[] | undefined\n): FieldValidationResult => {\n    if (!date || (ranges || []).length === 0) {\n        return undefined;\n    }\n    return dateCollideWithRanges(date, ranges)\n        ? createFieldValidationError(FraværFieldValidationErrors.fra_dato_kolliderer_med_annet_fravær)\n        : undefined;\n};\n\nexport const validateTilOgMedForCollision = (\n    date: Date | undefined,\n    ranges: DateRange[] | undefined\n): FieldValidationResult => {\n    if (!date || (ranges || []).length === 0) {\n        return undefined;\n    }\n    return dateCollideWithRanges(date, ranges)\n        ? createFieldValidationError(FraværFieldValidationErrors.til_dato_kolliderer_med_annet_fravær)\n        : undefined;\n};\n\nexport const validateFraværDagCollision = (\n    date: Date | undefined,\n    ranges: DateRange[] | undefined\n): FieldValidationResult => {\n    if (!date || (ranges || []).length === 0) {\n        return undefined;\n    }\n    return dateCollideWithRanges(date, ranges)\n        ? createFieldValidationError(FraværFieldValidationErrors.dato_kolliderer_med_annet_fravær)\n        : undefined;\n};\n\nexport const validateNoCollisions = (\n    fraværDager: FraværDag[],\n    fraværPerioder: FraværPeriode[]\n) => (): FieldValidationResult => {\n    if (fraværPerioder.length === 0 && fraværDager.length === 0) {\n        return undefined;\n    }\n\n    const allFraværDagDateRanges = fraværDager.map(fraværDagToFraværDateRange);\n    const allFraværPeriodeDateRanges = fraværPerioder.map(fraværPeriodeToDateRange);\n\n    const hasDateCollision = fraværDager.some((dag) => {\n        const rangesWithoutCurrentDag = [\n            ...fraværDager.filter((d) => d !== dag).map(fraværDagToFraværDateRange),\n            ...allFraværPeriodeDateRanges,\n        ];\n        return dateCollideWithRanges(dag.dato, rangesWithoutCurrentDag);\n    });\n\n    const hasRangeCollision = fraværPerioder.some((periode) => {\n        const rangesWithoutCurrentPeriode = [\n            ...allFraværDagDateRanges,\n            ...fraværPerioder.filter((p) => p !== periode).map(fraværPeriodeToDateRange),\n        ];\n        return rangeCollideWithRanges(fraværPeriodeToDateRange(periode), rangesWithoutCurrentPeriode);\n    });\n    return hasDateCollision || hasRangeCollision\n        ? createFieldValidationError(FraværFieldValidationErrors.dager_overlapper_med_andre_dager)\n        : undefined;\n};\n","import React from 'react';\nimport { FraværDagForm, FraværDagFormFields } from './FraværDagForm';\nimport { FormikValidateFunction } from '@navikt/sif-common-formik/lib';\nimport { timeText } from './fraværUtilities';\n\ninterface Props {\n    name: FraværDagFormFields;\n    validate: FormikValidateFunction;\n    label?: string;\n    maksTid?: number;\n}\n\nconst getOptionsList: (maksTid: number) => JSX.Element[] = (maksTid: number) => {\n    const newOptionElement = (t: number): JSX.Element => {\n        return (\n            <option key={t} value={t}>\n                {t.toString(10).replace('.', ',')} {timeText(t.toString(10))}\n            </option>\n        );\n    };\n    const go = (jsxList: JSX.Element[], tid: number): JSX.Element[] => {\n        return tid >= maksTid\n            ? [...jsxList, newOptionElement(tid)]\n            : go([...jsxList, newOptionElement(tid)], tid + 0.5);\n    };\n    return go([], 0.5);\n};\n\nconst FraværTimerSelect = ({ name, validate, label, maksTid }: Props) => {\n    return (\n        <FraværDagForm.Select bredde=\"s\" label={label || 'Antall timer'} name={name} validate={validate}>\n            <option />\n            {getOptionsList(maksTid || 7.5)}\n        </FraværDagForm.Select>\n    );\n};\n\nexport default FraværTimerSelect;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport ExpandableInfo from '@navikt/sif-common-core/lib/components/expandable-content/ExpandableInfo';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { YesOrNo } from '@navikt/sif-common-core/lib/types/YesOrNo';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { DateRange, dateToday } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport {\n    validateDateInRange,\n    validateRequiredField,\n    validateYesOrNoIsAnswered,\n} from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport datepickerUtils from '@navikt/sif-common-formik/lib/components/formik-datepicker/datepickerUtils';\nimport { FormikDatepickerProps } from '@navikt/sif-common-formik/lib/components/formik-datepicker/FormikDatepicker';\nimport dayjs from 'dayjs';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport FormattedHtmlMessage from '../components/formatted-html-message/FormattedHtmlMessage';\nimport FraværTimerSelect from './FraværTimerSelect';\nimport { isFraværDag, mapFormValuesToFraværDag, mapFraværDagToFormValues, toMaybeNumber } from './fraværUtilities';\nimport {\n    validateAll,\n    validateFraværDagCollision,\n    validateLessOrEqualTo,\n    validateNotHelgedag,\n} from './fraværValidationUtils';\nimport { getFraværÅrsakRadios } from './fraværÅrsakRadios';\nimport { FraværDag, FraværDagFormValues } from './types';\nimport ÅrsakInfo from './ÅrsakInfo';\n\nexport interface FraværDagFormLabels {\n    tittel: string;\n    dato: string;\n    antallArbeidstimer: string;\n    timerFravær: string;\n    hjemmePgaKorona: string;\n    årsak: string;\n    ok: string;\n    avbryt: string;\n}\n\ninterface Props {\n    fraværDag?: Partial<FraværDag>;\n    dagDescription?: JSX.Element;\n    minDate: Date;\n    maxDate: Date;\n    dateRangesToDisable?: DateRange[];\n    helgedagerIkkeTillatt?: boolean;\n    headerContent?: JSX.Element;\n    maksArbeidstidPerDag?: number;\n    onSubmit: (values: FraværDag) => void;\n    onCancel: () => void;\n}\n\nexport enum FraværDagFormFields {\n    dato = 'dato',\n    timerArbeidsdag = 'timerArbeidsdag',\n    timerFravær = 'timerFravær',\n    hjemmePgaKorona = 'hjemmePgaKorona',\n    årsak = 'årsak',\n}\n\nexport const FraværDagForm = getTypedFormComponents<FraværDagFormFields, FraværDagFormValues>();\n\nconst FraværDagFormView = ({\n    fraværDag = {\n        dato: undefined,\n        timerArbeidsdag: undefined,\n        timerFravær: undefined,\n        årsak: undefined,\n    },\n    dagDescription,\n    maxDate,\n    minDate,\n    dateRangesToDisable,\n    helgedagerIkkeTillatt,\n    maksArbeidstidPerDag,\n    headerContent,\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n    const onFormikSubmit = (formValues: FraværDagFormValues) => {\n        const fraværDagToSubmit = mapFormValuesToFraværDag(formValues, fraværDag.id);\n        if (isFraværDag(fraværDagToSubmit)) {\n            onSubmit(fraværDagToSubmit);\n        } else {\n            throw new Error('FraværDagFOrm: Formvalues is not a valid FraværDag on submit.');\n        }\n    };\n\n    const formLabels: FraværDagFormLabels = {\n        ok: intlHelper(intl, 'fravær.form.felles.ok'),\n        avbryt: intlHelper(intl, 'fravær.form.felles.avbryt'),\n        årsak: intlHelper(intl, 'fravær.form.felles.årsak'),\n        tittel: intlHelper(intl, 'fravær.form.dag.tittel'),\n        dato: intlHelper(intl, 'fravær.form.dag.dato'),\n        antallArbeidstimer: intlHelper(intl, 'fravær.form.dag.antallArbeidstimer'),\n        timerFravær: intlHelper(intl, 'fravær.form.dag.timerFravær'),\n        hjemmePgaKorona: intlHelper(intl, 'fravær.form.felles.hjemmePgaKorona'),\n    };\n    const fraværÅrsakRadios = getFraværÅrsakRadios(intl);\n    const disabledDateRanges = dateRangesToDisable\n        ? dateRangesToDisable.filter((range) => {\n              const { dato } = fraværDag;\n              return !(dato && dayjs(dato).isSame(range.from, 'day') && dayjs(dato).isSame(range.to, 'day'));\n          })\n        : undefined;\n\n    return (\n        <>\n            <FraværDagForm.FormikWrapper\n                initialValues={mapFraværDagToFormValues(fraværDag)}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => {\n                    const { values } = formik;\n                    const valgtDato = datepickerUtils.getDateFromDateString(values.dato);\n                    const datepickerProps: FormikDatepickerProps<FraværDagFormFields> = {\n                        label: formLabels.dato,\n                        name: FraværDagFormFields.dato,\n                        fullscreenOverlay: true,\n                        dayPickerProps: {\n                            initialMonth: dayjs(dateToday).isAfter(maxDate) ? maxDate : dateToday,\n                        },\n                        minDate,\n                        maxDate,\n                        disableWeekend: helgedagerIkkeTillatt || false,\n                        disabledDateRanges,\n                        validate: helgedagerIkkeTillatt\n                            ? validateAll([\n                                  validateRequiredField,\n                                  validateDateInRange({ from: minDate, to: maxDate }),\n                                  validateNotHelgedag,\n                                  () => validateFraværDagCollision(valgtDato, disabledDateRanges),\n                              ])\n                            : validateAll([validateRequiredField, validateDateInRange({ from: minDate, to: maxDate })]),\n                        onChange: () => {\n                            setTimeout(() => {\n                                formik.validateField(FraværDagFormFields.dato);\n                            });\n                        },\n                    };\n\n                    return (\n                        <FraværDagForm.Form\n                            onCancel={onCancel}\n                            fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                            <Systemtittel tag=\"h1\">{formLabels.tittel}</Systemtittel>\n                            {headerContent && <Box>{headerContent}</Box>}\n                            <FormBlock>\n                                <FraværDagForm.DatePicker {...datepickerProps} description={dagDescription} />\n                            </FormBlock>\n                            <FormBlock>\n                                <FraværTimerSelect\n                                    name={FraværDagFormFields.timerArbeidsdag}\n                                    validate={validateRequiredField}\n                                    label={formLabels.antallArbeidstimer}\n                                    maksTid={maksArbeidstidPerDag}\n                                />\n                            </FormBlock>\n                            <FormBlock>\n                                <FraværTimerSelect\n                                    name={FraværDagFormFields.timerFravær}\n                                    validate={validateAll([\n                                        validateRequiredField,\n                                        validateLessOrEqualTo(toMaybeNumber(values.timerArbeidsdag)),\n                                    ])}\n                                    label={formLabels.timerFravær}\n                                    maksTid={maksArbeidstidPerDag}\n                                />\n                            </FormBlock>\n                            <FormBlock>\n                                <FraværDagForm.YesOrNoQuestion\n                                    legend={formLabels.hjemmePgaKorona}\n                                    name={FraværDagFormFields.hjemmePgaKorona}\n                                    validate={validateYesOrNoIsAnswered}\n                                    description={\n                                        <ExpandableInfo title={intlHelper(intl, 'info.smittevern.tittel')}>\n                                            <FormattedHtmlMessage id=\"info.smittevern.info.html\" />\n                                        </ExpandableInfo>\n                                    }\n                                />\n                            </FormBlock>\n                            {values.hjemmePgaKorona === YesOrNo.YES && (\n                                <FormBlock>\n                                    <FraværDagForm.RadioPanelGroup\n                                        legend={formLabels.årsak}\n                                        name={FraværDagFormFields.årsak}\n                                        validate={validateRequiredField}\n                                        radios={fraværÅrsakRadios}\n                                        description={<ÅrsakInfo />}\n                                    />\n                                </FormBlock>\n                            )}\n                        </FraværDagForm.Form>\n                    );\n                }}\n            />\n        </>\n    );\n};\n\nexport default FraværDagFormView;\n","import intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { RadioPanelProps } from 'nav-frontend-skjema';\nimport { IntlShape } from 'react-intl';\nimport { FraværÅrsak } from './types';\n\nexport const getFraværÅrsakRadios = (intl: IntlShape): RadioPanelProps[] => [\n    {\n        label: intlHelper(intl, `fravær.årsak.${FraværÅrsak.stengtSkoleBhg}`),\n        value: FraværÅrsak.stengtSkoleBhg,\n    },\n    {\n        label: intlHelper(intl, `fravær.årsak.${FraværÅrsak.smittevernhensyn}`),\n        value: FraværÅrsak.smittevernhensyn,\n    },\n];\n","import ExpandableInfo from '@navikt/sif-common-core/lib/components/expandable-content/ExpandableInfo';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { Element } from 'nav-frontend-typografi';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormattedHtmlMessage from '../components/formatted-html-message/FormattedHtmlMessage';\n\nconst ÅrsakInfo: React.FunctionComponent = () => {\n    const intl = useIntl();\n    return (\n        <ExpandableInfo title={intlHelper(intl, 'info.årsak.tittel')}>\n            <p style={{ marginTop: '0' }}>\n                <FormattedHtmlMessage id=\"info.årsak.info.1\" />\n            </p>\n            <Element tag=\"h3\">\n                <FormattedHtmlMessage id=\"info.årsak.info.2\" />\n            </Element>\n            <FormattedHtmlMessage id=\"info.årsak.info.3\" />\n        </ExpandableInfo>\n    );\n};\n\nexport default ÅrsakInfo;\n","import ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { getFraværÅrsakTekstKort } from './fraværMessages';\nimport { FraværÅrsak } from './types';\n\ninterface Props {\n    title: string;\n    årsak?: FraværÅrsak;\n    onEdit?: () => void;\n}\n\nconst FraværListItem: React.FunctionComponent<Props> = ({ title, årsak, onEdit }: Props) => {\n    const intl = useIntl();\n    return (\n        <div style={{ padding: '.5rem 0' }}>\n            <div>{onEdit ? <ActionLink onClick={() => onEdit()}>{title}</ActionLink> : { title }}</div>\n            {årsak && årsak !== FraværÅrsak.ordinært && (\n                <div style={{ marginTop: '.25rem' }}>\n                    <FormattedMessage\n                        id={`fravær.list.årsak`}\n                        values={{ årsak: getFraværÅrsakTekstKort(årsak, intl) }}\n                    />\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default FraværListItem;\n","import React from 'react';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport FraværListItem from './FraværListItem';\nimport { timeText } from './fraværUtilities';\nimport { FraværDag } from './types';\n\ninterface Props {\n    fraværDager: FraværDag[];\n    onEdit?: (fraværDag: FraværDag) => void;\n    onDelete?: (fraværDag: FraværDag) => void;\n}\n\nconst FraværDagerList = ({ fraværDager = [], onDelete, onEdit }: Props) => {\n    const getFraværDagListItemTitle = (fraværDag: FraværDag) =>\n        `${prettifyDateExtended(fraværDag.dato)}:\n        Skulle jobbet ${fraværDag.timerArbeidsdag} ${timeText(fraværDag.timerArbeidsdag)}.\n        Borte fra jobb ${fraværDag.timerFravær}  ${timeText(fraværDag.timerFravær)}.`;\n\n    const renderFraværDagLabel = (fraværDag: FraværDag): React.ReactNode => {\n        const title = getFraværDagListItemTitle(fraværDag);\n        return (\n            <FraværListItem\n                title={title}\n                årsak={fraværDag.årsak}\n                onEdit={onEdit ? () => onEdit(fraværDag) : undefined}\n            />\n        );\n    };\n\n    return (\n        <ItemList<FraværDag>\n            getItemId={(fraværDag) => fraværDag.id}\n            getItemTitle={(fraværDag) => getFraværDagListItemTitle(fraværDag)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderFraværDagLabel}\n            items={fraværDager.filter((fraværDag) => fraværDag.id !== undefined)}\n        />\n    );\n};\n\nexport default FraværDagerList;\n","import React from 'react';\nimport { DateRange, sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { FormikModalFormAndList, FormikValidateFunction, ModalFormAndListLabels } from '@navikt/sif-common-formik';\nimport { FraværDag } from './types';\nimport FraværDagFormView from './FraværDagForm';\nimport FraværDagerList from './FraværDagerList';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    validate?: FormikValidateFunction;\n    minDate: Date;\n    maxDate: Date;\n    dagDescription?: JSX.Element;\n    labels: ModalFormAndListLabels;\n    formHeaderContent?: JSX.Element;\n    dateRangesToDisable?: DateRange[];\n    helgedagerIkkeTillatt?: boolean;\n    maksArbeidstidPerDag?: number;\n}\n\nfunction FraværDagerListAndDialog<FieldNames>({\n    name,\n    minDate,\n    maxDate,\n    validate,\n    dagDescription,\n    labels,\n    formHeaderContent,\n    dateRangesToDisable,\n    helgedagerIkkeTillatt,\n    maksArbeidstidPerDag,\n}: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, FraværDag>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                sortFunc={(fraværDagA: FraværDag, fraværDagB: FraværDag) =>\n                    sortItemsByFom({ fom: fraværDagA.dato }, { fom: fraværDagB.dato })\n                }\n                formRenderer={({ onSubmit, onCancel, item }) => (\n                    <FraværDagFormView\n                        fraværDag={item}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        headerContent={formHeaderContent}\n                        dagDescription={dagDescription}\n                        dateRangesToDisable={dateRangesToDisable}\n                        helgedagerIkkeTillatt={helgedagerIkkeTillatt}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                        maksArbeidstidPerDag={maksArbeidstidPerDag}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FraværDagerList fraværDager={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FraværDagerListAndDialog;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport ExpandableInfo from '@navikt/sif-common-core/lib/components/expandable-content/ExpandableInfo';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { YesOrNo } from '@navikt/sif-common-core/lib/types/YesOrNo';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { DateRange, dateToday } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport dateRangeValidation from '@navikt/sif-common-core/lib/validation/dateRangeValidation';\nimport {\n    validateRequiredField,\n    validateYesOrNoIsAnswered,\n} from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { getTypedFormComponents, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport dayjs from 'dayjs';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport FormattedHtmlMessage from '../components/formatted-html-message/FormattedHtmlMessage';\nimport { isFraværPeriode, mapFormValuesToFraværPeriode, mapFraværPeriodeToFormValues } from './fraværUtilities';\nimport {\n    validateAll,\n    validateErSammeÅr,\n    validateFraOgMedForCollision,\n    validateFraværPeriodeCollision,\n    validateNotHelgedag,\n    validateTilOgMedForCollision,\n} from './fraværValidationUtils';\nimport { getFraværÅrsakRadios } from './fraværÅrsakRadios';\nimport { FraværPeriode, FraværPeriodeFormValues } from './types';\nimport ÅrsakInfo from './ÅrsakInfo';\n\nexport interface FraværPeriodeFormLabels {\n    tittel: string;\n    tidsrom: string;\n    fom: string;\n    tom: string;\n    hjemmePgaKorona: string;\n    årsak: string;\n    ok: string;\n    avbryt: string;\n}\n\ninterface Props {\n    fraværPeriode?: Partial<FraværPeriode>;\n    periodeDescription?: JSX.Element;\n    minDate: Date;\n    maxDate: Date;\n    dateRangesToDisable?: DateRange[];\n    helgedagerIkkeTillat?: boolean;\n    begrensTilSammeÅr?: boolean;\n    headerContent?: JSX.Element;\n    onSubmit: (values: FraværPeriode) => void;\n    onCancel: () => void;\n}\n\nenum FraværPeriodeFormFields {\n    fraOgMed = 'fraOgMed',\n    tilOgMed = 'tilOgMed',\n    årsak = 'årsak',\n    hjemmePgaKorona = 'hjemmePgaKorona',\n}\n\nconst Form = getTypedFormComponents<FraværPeriodeFormFields, FraværPeriodeFormValues>();\n\nconst FraværPeriodeForm = ({\n    fraværPeriode = {},\n    periodeDescription,\n    maxDate,\n    minDate,\n    dateRangesToDisable,\n    helgedagerIkkeTillat,\n    headerContent,\n    begrensTilSammeÅr,\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: FraværPeriodeFormValues) => {\n        const fraværPeriodeToSubmit = mapFormValuesToFraværPeriode(formValues, fraværPeriode.id);\n        if (isFraværPeriode(fraværPeriodeToSubmit)) {\n            onSubmit(fraværPeriodeToSubmit);\n        } else {\n            throw new Error('FraværPeriodeForm: Formvalues is not a valid FraværPeriode on submit.');\n        }\n    };\n\n    const formLabels: FraværPeriodeFormLabels = {\n        ok: intlHelper(intl, 'fravær.form.felles.ok'),\n        avbryt: intlHelper(intl, 'fravær.form.felles.avbryt'),\n        årsak: intlHelper(intl, 'fravær.form.felles.årsak'),\n        tittel: intlHelper(intl, 'fravær.form.periode.tittel'),\n        tidsrom: intlHelper(intl, 'fravær.form.periode.tidsrom'),\n        hjemmePgaKorona: intlHelper(intl, 'fravær.form.felles.hjemmePgaKorona'),\n        fom: intlHelper(intl, 'fravær.form.periode.fom'),\n        tom: intlHelper(intl, 'fravær.form.periode.tom'),\n    };\n    const fraværÅrsakRadios = getFraværÅrsakRadios(intl);\n\n    const disabledDateRanges = dateRangesToDisable\n        ? dateRangesToDisable.filter((range) => {\n              const { fraOgMed, tilOgMed } = fraværPeriode;\n              return !(\n                  fraOgMed &&\n                  tilOgMed &&\n                  dayjs(fraOgMed).isSame(range.from, 'day') &&\n                  dayjs(tilOgMed).isSame(range.to, 'day')\n              );\n          })\n        : undefined;\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={mapFraværPeriodeToFormValues(fraværPeriode)}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => {\n                    const { fraOgMed, tilOgMed } = formik.values;\n                    const fromDate: Date | undefined = ISOStringToDate(fraOgMed);\n                    const toDate: Date | undefined = ISOStringToDate(tilOgMed);\n                    return (\n                        <Form.Form\n                            onCancel={onCancel}\n                            fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                            <Systemtittel tag=\"h1\">{formLabels.tittel}</Systemtittel>\n                            {headerContent && <Box margin=\"l\">{headerContent}</Box>}\n                            <FormBlock>\n                                <Form.DateIntervalPicker\n                                    legend={formLabels.tidsrom}\n                                    description={periodeDescription}\n                                    validate={() => {\n                                        return validateFraværPeriodeCollision(fromDate, toDate, disabledDateRanges);\n                                    }}\n                                    fromDatepickerProps={{\n                                        label: formLabels.fom,\n                                        name: FraværPeriodeFormFields.fraOgMed,\n                                        fullscreenOverlay: true,\n                                        minDate: minDate,\n                                        maxDate: toDate || maxDate,\n                                        disableWeekend: helgedagerIkkeTillat || false,\n                                        disabledDateRanges,\n                                        dayPickerProps: {\n                                            initialMonth:\n                                                fromDate || toDate || dayjs(dateToday).isAfter(maxDate)\n                                                    ? maxDate\n                                                    : dateToday,\n                                        },\n                                        validate: validateAll<string>([\n                                            ...(helgedagerIkkeTillat ? [validateNotHelgedag] : []),\n                                            ...(begrensTilSammeÅr\n                                                ? [(dateString) => validateErSammeÅr(dateString, tilOgMed)]\n                                                : []),\n                                            () => validateFraOgMedForCollision(fromDate, disabledDateRanges),\n                                            (dateString) =>\n                                                dateRangeValidation.validateFromDate(\n                                                    ISOStringToDate(dateString),\n                                                    minDate,\n                                                    maxDate,\n                                                    toDate\n                                                ),\n                                        ]),\n                                        onChange: () => {\n                                            setTimeout(() => {\n                                                formik.validateField(FraværPeriodeFormFields.fraOgMed);\n                                                formik.validateField(FraværPeriodeFormFields.tilOgMed);\n                                            });\n                                        },\n                                    }}\n                                    toDatepickerProps={{\n                                        label: formLabels.tom,\n                                        name: FraværPeriodeFormFields.tilOgMed,\n                                        fullscreenOverlay: true,\n                                        minDate: fromDate || minDate,\n                                        maxDate,\n                                        disableWeekend: helgedagerIkkeTillat || false,\n                                        disabledDateRanges,\n                                        dayPickerProps: {\n                                            initialMonth:\n                                                toDate || fromDate || dayjs(dateToday).isAfter(maxDate)\n                                                    ? maxDate\n                                                    : dateToday,\n                                        },\n                                        validate: validateAll<string>([\n                                            ...(helgedagerIkkeTillat ? [validateNotHelgedag] : []),\n                                            ...(begrensTilSammeÅr\n                                                ? [(dateString) => validateErSammeÅr(fraOgMed, dateString)]\n                                                : []),\n                                            () => validateTilOgMedForCollision(toDate, disabledDateRanges),\n                                            (dateString) =>\n                                                dateRangeValidation.validateToDate(\n                                                    ISOStringToDate(dateString),\n                                                    minDate,\n                                                    maxDate,\n                                                    fromDate\n                                                ),\n                                        ]),\n                                        onChange: () => {\n                                            setTimeout(() => {\n                                                formik.validateField(FraværPeriodeFormFields.fraOgMed);\n                                                formik.validateField(FraværPeriodeFormFields.tilOgMed);\n                                            });\n                                        },\n                                    }}\n                                />\n                            </FormBlock>\n                            <FormBlock>\n                                <Form.YesOrNoQuestion\n                                    legend={formLabels.hjemmePgaKorona}\n                                    name={FraværPeriodeFormFields.hjemmePgaKorona}\n                                    validate={validateYesOrNoIsAnswered}\n                                    description={\n                                        <ExpandableInfo title={intlHelper(intl, 'info.smittevern.tittel')}>\n                                            <FormattedHtmlMessage id=\"info.smittevern.info.html\" />\n                                        </ExpandableInfo>\n                                    }\n                                />\n                            </FormBlock>\n\n                            {formik.values.hjemmePgaKorona === YesOrNo.YES && (\n                                <FormBlock>\n                                    <Form.RadioPanelGroup\n                                        legend={formLabels.årsak}\n                                        name={FraværPeriodeFormFields.årsak}\n                                        validate={validateRequiredField}\n                                        radios={fraværÅrsakRadios}\n                                        description={<ÅrsakInfo />}\n                                    />\n                                </FormBlock>\n                            )}\n                        </Form.Form>\n                    );\n                }}\n            />\n        </>\n    );\n};\n\nexport default FraværPeriodeForm;\n","import React from 'react';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { FraværPeriode } from './types';\nimport FraværListItem from './FraværListItem';\n\ninterface Props {\n    fraværPerioder: FraværPeriode[];\n    onEdit?: (fraværPeriode: FraværPeriode) => void;\n    onDelete?: (fraværPeriode: FraværPeriode) => void;\n    useTrashcan?: boolean;\n}\n\nconst FraværPerioderList = ({ fraværPerioder = [], onDelete, onEdit, useTrashcan }: Props) => {\n    const getDateTitleString = (fraværPeriode: FraværPeriode) =>\n        `${prettifyDateExtended(fraværPeriode.fraOgMed)} - ${prettifyDateExtended(fraværPeriode.tilOgMed)}`;\n\n    const renderFraværPeriodeLabel = (fraværPeriode: FraværPeriode): React.ReactNode => {\n        const title = getDateTitleString(fraværPeriode);\n        return (\n            <FraværListItem\n                title={title}\n                årsak={fraværPeriode.årsak}\n                onEdit={onEdit ? () => onEdit(fraværPeriode) : undefined}\n            />\n        );\n    };\n\n    return (\n        <ItemList<FraværPeriode>\n            getItemId={(fraværPeriode) => fraværPeriode.id}\n            getItemTitle={(fraværPeriode) => getDateTitleString(fraværPeriode)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderFraværPeriodeLabel}\n            items={fraværPerioder.filter((fraværPeriode) => fraværPeriode.id !== undefined)}\n            useTrashcan={useTrashcan || false}\n        />\n    );\n};\n\nexport default FraværPerioderList;\n","import React from 'react';\nimport { DateRange, sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { FormikModalFormAndList, FormikValidateFunction, ModalFormAndListLabels } from '@navikt/sif-common-formik';\nimport { FraværPeriode } from './types';\nimport FraværPeriodeForm from './FraværPeriodeForm';\nimport FraværPerioderList from './FraværPerioderList';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n    periodeDescription?: JSX.Element;\n    formHeaderContent?: JSX.Element;\n    validate?: FormikValidateFunction;\n    dateRangesToDisable?: DateRange[];\n    begrensTilSammeÅr?: boolean;\n    helgedagerIkkeTillat?: boolean;\n}\n\nfunction FraværPerioderListAndDialog<FieldNames>({\n    name,\n    minDate,\n    maxDate,\n    dateRangesToDisable,\n    periodeDescription,\n    formHeaderContent,\n    begrensTilSammeÅr = true,\n    validate,\n    labels,\n    helgedagerIkkeTillat,\n}: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, FraværPeriode>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                sortFunc={(fraværPeriodeA: FraværPeriode, fraværPeriodeB: FraværPeriode) =>\n                    sortItemsByFom({ fom: fraværPeriodeA.fraOgMed }, { fom: fraværPeriodeB.tilOgMed })\n                }\n                formRenderer={({ onSubmit, onCancel, item }) => (\n                    <FraværPeriodeForm\n                        fraværPeriode={item}\n                        periodeDescription={periodeDescription}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        headerContent={formHeaderContent}\n                        dateRangesToDisable={dateRangesToDisable}\n                        helgedagerIkkeTillat={helgedagerIkkeTillat}\n                        begrensTilSammeÅr={begrensTilSammeÅr}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FraværPerioderList fraværPerioder={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FraværPerioderListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { date1YearAgo, date1YearFromNow, dateToday } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { validateRequiredList } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { FraværDag, FraværPeriode } from '../../../forms/fravær';\nimport FraværDagerListAndDialog from '../../../forms/fravær/FraværDagerListAndDialog';\nimport FraværDagFormView from '../../../forms/fravær/FraværDagForm';\nimport fraværMessages from '../../../forms/fravær/fraværMessages';\nimport FraværPeriodeForm from '../../../forms/fravær/FraværPeriodeForm';\nimport FraværPerioderListAndDialog from '../../../forms/fravær/FraværPerioderListAndDialog';\nimport { fraværDagToFraværDateRange, fraværPeriodeToDateRange } from '../../../forms/fravær/fraværUtilities';\nimport { validateAll, validateNoCollisions } from '../../../forms/fravær/fraværValidationUtils';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\n\nenum FormField {\n    perioder = 'perioder',\n    dager = 'dager',\n}\n\ninterface FormValues {\n    [FormField.perioder]: FraværPeriode[];\n    [FormField.dager]: FraværDag[];\n}\n\nconst initialValues: FormValues = { [FormField.perioder]: [], [FormField.dager]: [] };\n\nconst FraværExample: React.FunctionComponent = () => {\n    const [fraværPeriodeSingleFormValues, setFraværPeriodeSingleFormValues] = useState<\n        Partial<FraværPeriode> | undefined\n    >(undefined);\n    const [fraværDagSingleFormValues, setFraværDagSingleFormValues] = useState<Partial<FraværDag> | undefined>(\n        undefined\n    );\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={(formik) => {\n                        const { values } = formik;\n                        const dateRangesToDisable = [\n                            ...values.perioder.map(fraværPeriodeToDateRange),\n                            ...values.dager.map(fraværDagToFraværDateRange),\n                        ];\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                                <FormBlock>\n                                    <FraværPerioderListAndDialog<FormField>\n                                        name={FormField.perioder}\n                                        minDate={date1YearAgo}\n                                        maxDate={dateToday}\n                                        periodeDescription={\n                                            <p style={{ marginTop: '.5rem' }}>\n                                                Du kan kun søke for ett og samme år i en søknad. Får å søke for flere\n                                                år, må du sende en søknad for hvert år.\n                                            </p>\n                                        }\n                                        validate={validateAll([\n                                            validateRequiredList,\n                                            validateNoCollisions(values.dager, values.perioder),\n                                        ])}\n                                        labels={{\n                                            addLabel: 'Legg til periode',\n                                            modalTitle: 'Fravær hele dager',\n                                        }}\n                                        dateRangesToDisable={dateRangesToDisable}\n                                        helgedagerIkkeTillat={true}\n                                    />\n                                </FormBlock>\n                                <FormBlock>\n                                    <FraværDagerListAndDialog<FormField>\n                                        name={FormField.dager}\n                                        minDate={date1YearAgo}\n                                        maxDate={dateToday}\n                                        validate={validateAll([\n                                            validateRequiredList,\n                                            validateNoCollisions(values.dager, values.perioder),\n                                        ])}\n                                        labels={{\n                                            addLabel: 'Legg til dag med delvis fravær',\n                                            listTitle: 'Dager med delvis fravær',\n                                            modalTitle: 'Fravær deler av dag',\n                                            emptyListText: 'Ingen dager er lagt til',\n                                        }}\n                                        dateRangesToDisable={dateRangesToDisable}\n                                        helgedagerIkkeTillatt={true}\n                                        maksArbeidstidPerDag={24}\n                                    />\n                                </FormBlock>\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialoger</Undertittel>\n            </Box>\n\n            <FormBlock>\n                <DialogFormWrapper>\n                    <Panel border={true}>\n                        <FraværPeriodeForm\n                            minDate={date1YearAgo}\n                            maxDate={date1YearFromNow}\n                            fraværPeriode={{}}\n                            onSubmit={setFraværPeriodeSingleFormValues}\n                            onCancel={() => {\n                                // tslint:disable-next-line:no-console\n                                return console.log('cancel me');\n                            }}\n                        />\n                    </Panel>\n                    <SubmitPreview values={fraværPeriodeSingleFormValues} />\n                </DialogFormWrapper>\n            </FormBlock>\n\n            <FormBlock>\n                <DialogFormWrapper>\n                    <Panel border={true}>\n                        <FraværDagFormView\n                            minDate={date1YearAgo}\n                            maxDate={date1YearFromNow}\n                            fraværDag={{}}\n                            onSubmit={setFraværDagSingleFormValues}\n                            onCancel={() => {\n                                // tslint:disable-next-line:no-console\n                                return console.log('cancel me');\n                            }}\n                        />\n                    </Panel>\n                    <SubmitPreview values={fraværDagSingleFormValues} />\n                </DialogFormWrapper>\n            </FormBlock>\n\n            <MessagesPreview messages={fraværMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default FraværExample;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport {\n    validateAll,\n    validateDateInRange,\n    validateFødselsnummer,\n    validateRequiredField,\n} from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport annetBarnUtils from './annetBarnUtils';\nimport { AnnetBarn, AnnetBarnFormValues } from './types';\n\nexport interface AnnetBarnFormLabels {\n    title: string;\n    fnr: string;\n    placeholderFnr?: string;\n    fødselsdato: string;\n    navn: string;\n    placeholderNavn?: string;\n    okButton: string;\n    cancelButton: string;\n    aldersGrenseText?: string;\n}\n\ninterface Props {\n    annetBarn?: Partial<AnnetBarn>;\n    includeFødselsdatoSpørsmål: boolean;\n    labels?: Partial<AnnetBarnFormLabels>;\n    minDate: Date;\n    maxDate: Date;\n    onSubmit: (values: AnnetBarn) => void;\n    onCancel: () => void;\n}\n\nenum AnnetBarnFormFields {\n    fnr = 'fnr',\n    fødselsdato = 'fødselsdato',\n    navn = 'navn',\n}\n\nconst Form = getTypedFormComponents<AnnetBarnFormFields, AnnetBarnFormValues>();\n\nconst AnnetBarnForm = ({\n    annetBarn = { fnr: '', navn: '', fødselsdato: undefined, id: undefined },\n    includeFødselsdatoSpørsmål,\n    labels,\n    minDate,\n    maxDate,\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: AnnetBarnFormValues) => {\n        const annetBarnToSubmit = annetBarnUtils.mapFormValuesToPartialAnnetBarn(\n            formValues,\n            annetBarn.id,\n            includeFødselsdatoSpørsmål\n        );\n        if (annetBarnUtils.isAnnetBarn(annetBarnToSubmit, includeFødselsdatoSpørsmål)) {\n            onSubmit(annetBarnToSubmit);\n        } else {\n            throw new Error('AnnetBarnForm: Formvalues is not a valid AnnetBarn on submit.');\n        }\n    };\n\n    const defaultLabels: AnnetBarnFormLabels = {\n        title: intlHelper(intl, 'annetBarn.form.title'),\n        fnr: intlHelper(intl, 'annetBarn.form.fnr'),\n        fødselsdato: intlHelper(intl, 'annetBarn.form.fødselsdato'),\n        navn: intlHelper(intl, 'annetBarn.form.navn'),\n        okButton: intlHelper(intl, 'annetBarn.form.okButton'),\n        cancelButton: intlHelper(intl, 'annetBarn.form.cancelButton'),\n    };\n\n    const formLabels: AnnetBarnFormLabels = { ...defaultLabels, ...labels };\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={annetBarnUtils.mapAnnetBarnToFormValues(annetBarn, includeFødselsdatoSpørsmål)}\n                onSubmit={onFormikSubmit}\n                renderForm={() => (\n                    <Form.Form\n                        onCancel={onCancel}\n                        fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                        <Systemtittel tag=\"h1\">{formLabels.title}</Systemtittel>\n                        <FormBlock>\n                            <Form.Input\n                                name={AnnetBarnFormFields.navn}\n                                label={formLabels.navn}\n                                validate={validateRequiredField}\n                                placeholder={formLabels.placeholderNavn}\n                            />\n                        </FormBlock>\n                        {includeFødselsdatoSpørsmål && (\n                            <FormBlock>\n                                <Form.DatePicker\n                                    name={AnnetBarnFormFields.fødselsdato}\n                                    label={\n                                        formLabels.aldersGrenseText\n                                            ? `${formLabels.fødselsdato} ${formLabels.aldersGrenseText}`\n                                            : `${formLabels.fødselsdato}`\n                                    }\n                                    validate={validateAll([\n                                        validateRequiredField,\n                                        validateDateInRange({ from: minDate, to: maxDate }),\n                                    ])}\n                                    maxDate={maxDate}\n                                    minDate={minDate}\n                                    showYearSelector={true}\n                                />\n                            </FormBlock>\n                        )}\n                        <FormBlock>\n                            <Form.Input\n                                name={AnnetBarnFormFields.fnr}\n                                label={formLabels.fnr}\n                                validate={validateAll([validateRequiredField, validateFødselsnummer])}\n                                inputMode=\"numeric\"\n                                maxLength={11}\n                                placeholder={formLabels.placeholderFnr}\n                            />\n                        </FormBlock>\n                    </Form.Form>\n                )}\n            />\n        </>\n    );\n};\n\nexport default AnnetBarnForm;\n","import { hasValue } from '@navikt/sif-common-core/lib/validation/hasValue';\nimport { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { guid } from 'nav-frontend-js-utils';\nimport { AnnetBarn, AnnetBarnFormValues } from './types';\n\nconst isAnnetBarn = (annetBarn: Partial<AnnetBarn>, includeFødselsdatoSpørsmål = true): annetBarn is AnnetBarn => {\n    const { fnr, navn, fødselsdato } = annetBarn;\n    return hasValue(fnr) && hasValue(navn) && (includeFødselsdatoSpørsmål === false || hasValue(fødselsdato));\n};\n\nconst mapFormValuesToPartialAnnetBarn = (\n    formValues: AnnetBarnFormValues,\n    id: string | undefined,\n    includeFødselsdatoSpørsmål: boolean\n): Partial<AnnetBarn> => {\n    return {\n        ...formValues,\n        id: id || guid(),\n        fødselsdato:\n            includeFødselsdatoSpørsmål && formValues.fødselsdato ? ISOStringToDate(formValues.fødselsdato) : undefined,\n    };\n};\n\nconst mapAnnetBarnToFormValues = (\n    annetBarn: Partial<AnnetBarn>,\n    includeFødselsdatoSpørsmål: boolean\n): AnnetBarnFormValues => {\n    return {\n        fnr: annetBarn.fnr,\n        navn: annetBarn.navn,\n        fødselsdato: includeFødselsdatoSpørsmål\n            ? annetBarn.fødselsdato\n                ? dateToISOString(annetBarn.fødselsdato)\n                : ''\n            : undefined,\n    };\n};\n\nconst annetBarnUtils = {\n    mapAnnetBarnToFormValues,\n    mapFormValuesToPartialAnnetBarn,\n    isAnnetBarn,\n};\n\nexport default annetBarnUtils;\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { AnnetBarn } from './types';\nimport './annetBarnList.less';\n\ninterface Props {\n    annetBarn: AnnetBarn[];\n    includeFødselsdato: boolean;\n    onEdit?: (annetBarn: AnnetBarn) => void;\n    onDelete?: (annetBarn: AnnetBarn) => void;\n}\n\nconst bem = bemUtils('annetBarnList');\n\nconst AnnetBarnList = ({ annetBarn = [], includeFødselsdato, onDelete, onEdit }: Props) => {\n    const renderAnnetBarnLabel = (annetBarn: AnnetBarn): React.ReactNode => {\n        return (\n            <div className={bem.element('label')}>\n                {includeFødselsdato && annetBarn.fødselsdato && (\n                    <span className={bem.element('dato')}>{prettifyDate(annetBarn.fødselsdato)}</span>\n                )}\n                <span className={bem.element('land')}>\n                    {onEdit && <ActionLink onClick={() => onEdit(annetBarn)}>{annetBarn.navn}</ActionLink>}\n                    {!onEdit && <span>{annetBarn.navn}</span>}\n                </span>\n            </div>\n        );\n    };\n\n    return (\n        <ItemList<AnnetBarn>\n            getItemId={(annetBarn) => annetBarn.id}\n            getItemTitle={(annetBarn) => annetBarn.navn}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderAnnetBarnLabel}\n            items={annetBarn.filter((annetBarn) => annetBarn.id !== undefined)}\n        />\n    );\n};\n\nexport default AnnetBarnList;\n","import React from 'react';\nimport { FormikModalFormAndList, FormikValidateFunction, ModalFormAndListLabels } from '@navikt/sif-common-formik';\nimport AnnetBarnForm from './AnnetBarnForm';\nimport AnnetBarnList from './AnnetBarnList';\nimport { AnnetBarn } from './types';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    includeFødselsdatoSpørsmål?: boolean;\n    validate?: FormikValidateFunction;\n    labels: ModalFormAndListLabels;\n    minDate: Date;\n    maxDate: Date;\n    aldersGrenseText?: string;\n    placeholderFnr?: string;\n    placeholderNavn?: string;\n}\n\nfunction AnnetBarnListAndDialog<FieldNames>({\n    name,\n    validate,\n    labels,\n    minDate,\n    maxDate,\n    aldersGrenseText,\n    includeFødselsdatoSpørsmål = true,\n    placeholderFnr,\n    placeholderNavn,\n}: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, AnnetBarn>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                formRenderer={({ onSubmit, onCancel, item }) => (\n                    <AnnetBarnForm\n                        annetBarn={item}\n                        includeFødselsdatoSpørsmål={includeFødselsdatoSpørsmål}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        labels={{\n                            aldersGrenseText: aldersGrenseText,\n                            placeholderFnr: placeholderFnr,\n                            placeholderNavn: placeholderNavn,\n                        }}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <AnnetBarnList\n                        annetBarn={items}\n                        includeFødselsdato={includeFødselsdatoSpørsmål}\n                        onEdit={onEdit}\n                        onDelete={onDelete}\n                    />\n                )}\n            />\n        </>\n    );\n}\n\nexport default AnnetBarnListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { validateRequiredList } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport AnnetBarnForm from '../../../forms/annet-barn/AnnetBarnForm';\nimport { AnnetBarn } from '../../../forms/annet-barn/types';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport annetBarnMessages from '../../../forms/annet-barn/annetBarnMessages';\nimport AnnetBarnListAndDialog from '../../../forms/annet-barn/AnnetBarnListAndDialog';\nimport { dateToday, date4YearsAgo } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { Checkbox } from 'nav-frontend-skjema';\n\nenum FormField {\n    'annetBarn' = 'annetBarn',\n}\n\ninterface FormValues {\n    [FormField.annetBarn]: AnnetBarn[];\n}\nconst initialValues: FormValues = { annetBarn: [] };\n\nconst AnnetBarnExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<AnnetBarn> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const [inkluderFødselsdatoSpørsmål, setInkluderFødselsdatoSpørsmål] = useState<boolean>(true);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n                <Box margin=\"l\">\n                    <p>Det er muligheter for å skru på og av spørsmålet om fødselsdato</p>\n                    <Checkbox\n                        label=\"Inkluder spørsmål om fødselsdato i dialog og fødselsdato i liste\"\n                        checked={inkluderFødselsdatoSpørsmål}\n                        onChange={(evt) => setInkluderFødselsdatoSpørsmål(evt.target.checked === true)}\n                    />\n                </Box>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                                <AnnetBarnListAndDialog<FormField>\n                                    name={FormField.annetBarn}\n                                    includeFødselsdatoSpørsmål={inkluderFødselsdatoSpørsmål}\n                                    validate={validateRequiredList}\n                                    labels={{\n                                        addLabel: 'Legg til barn',\n                                        listTitle: 'Registrerte barn',\n                                        modalTitle: 'Legg til barn',\n                                        emptyListText: 'Ingen barn er lagt til',\n                                    }}\n                                    minDate={date4YearsAgo}\n                                    maxDate={dateToday}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <AnnetBarnForm\n                        annetBarn={{}}\n                        includeFødselsdatoSpørsmål={inkluderFødselsdatoSpørsmål}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                        minDate={date4YearsAgo}\n                        maxDate={dateToday}\n                    />\n                </Panel>\n                <SubmitPreview values={singleFormValues} />\n            </DialogFormWrapper>\n\n            <MessagesPreview messages={annetBarnMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default AnnetBarnExample;\n","import { ApiStringDate } from '@navikt/sif-common-core/lib/types/ApiStringDate';\nimport { YesOrNo } from '@navikt/sif-common-core/lib/types/YesOrNo';\n\nexport enum Næringstype {\n    'FISKER' = 'FISKE',\n    'JORDBRUK' = 'JORDBRUK_SKOGBRUK',\n    'DAGMAMMA' = 'DAGMAMMA',\n    'ANNEN' = 'ANNEN',\n}\n\nexport enum VirksomhetFormField {\n    'næringstyper' = 'næringstyper',\n    'fiskerErPåBladB' = 'fiskerErPåBladB',\n    'fom' = 'fom',\n    'tom' = 'tom',\n    'næringsinntekt' = 'næringsinntekt',\n    'erPågående' = 'erPågående',\n    'navnPåVirksomheten' = 'navnPåVirksomheten',\n    'organisasjonsnummer' = 'organisasjonsnummer',\n    'registrertINorge' = 'registrertINorge',\n    'registrertILand' = 'registrertILand',\n    'harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene' = 'harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene',\n    'oppstartsdato' = 'oppstartsdato',\n    'hattVarigEndringAvNæringsinntektSiste4Kalenderår' = 'hattVarigEndringAvNæringsinntektSiste4Kalenderår',\n    'varigEndringINæringsinntekt_dato' = 'varigEndringINæringsinntekt_dato',\n    'varigEndringINæringsinntekt_inntektEtterEndring' = 'varigEndringINæringsinntekt_inntektEtterEndring',\n    'varigEndringINæringsinntekt_forklaring' = 'varigEndringINæringsinntekt_forklaring',\n    'endretNæringsinntektInformasjon' = 'endretNæringsinntektInformasjon',\n    'harRegnskapsfører' = 'harRegnskapsfører',\n    'regnskapsfører' = 'regnskapsfører',\n    'regnskapsfører_navn' = 'regnskapsfører_navn',\n    'regnskapsfører_telefon' = 'regnskapsfører_telefon',\n    'harRevisor' = 'harRevisor',\n    'revisor_navn' = 'revisor_navn',\n    'revisor_telefon' = 'revisor_telefon',\n    'kanInnhenteOpplsyningerFraRevisor' = 'kanInnhenteOpplsyningerFraRevisor',\n}\n\nexport interface VirksomhetHideFields {\n    [VirksomhetFormField.fiskerErPåBladB]?: boolean;\n    [VirksomhetFormField.harRevisor]?: boolean;\n}\n\nexport interface Virksomhet {\n    id?: string;\n    [VirksomhetFormField.næringstyper]: Næringstype[];\n    [VirksomhetFormField.fiskerErPåBladB]?: YesOrNo;\n    [VirksomhetFormField.fom]: Date;\n    [VirksomhetFormField.tom]?: Date;\n    [VirksomhetFormField.næringsinntekt]?: number;\n    [VirksomhetFormField.erPågående]?: boolean;\n    [VirksomhetFormField.navnPåVirksomheten]: string;\n    [VirksomhetFormField.organisasjonsnummer]?: string;\n    [VirksomhetFormField.registrertINorge]: YesOrNo;\n    [VirksomhetFormField.registrertILand]?: string;\n    [VirksomhetFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene]?: YesOrNo;\n    [VirksomhetFormField.oppstartsdato]?: Date;\n    [VirksomhetFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår]?: YesOrNo;\n    [VirksomhetFormField.varigEndringINæringsinntekt_dato]?: Date;\n    [VirksomhetFormField.varigEndringINæringsinntekt_inntektEtterEndring]?: number;\n    [VirksomhetFormField.varigEndringINæringsinntekt_forklaring]?: string;\n    [VirksomhetFormField.harRegnskapsfører]: YesOrNo;\n    [VirksomhetFormField.regnskapsfører_navn]?: string;\n    [VirksomhetFormField.regnskapsfører_telefon]?: string;\n    [VirksomhetFormField.harRevisor]?: YesOrNo;\n    [VirksomhetFormField.revisor_navn]?: string;\n    [VirksomhetFormField.revisor_telefon]?: string;\n    [VirksomhetFormField.kanInnhenteOpplsyningerFraRevisor]?: YesOrNo;\n}\nexport type VirksomhetFormValues = Partial<\n    Omit<Virksomhet, 'fom' | 'tom' | 'oppstartsdato' | 'varigEndringINæringsinntekt_dato'> & {\n        [VirksomhetFormField.fom]: string;\n        [VirksomhetFormField.tom]?: string;\n        [VirksomhetFormField.oppstartsdato]?: string;\n        [VirksomhetFormField.varigEndringINæringsinntekt_dato]?: string;\n    }\n>;\n\nexport const isVirksomhet = (virksomhet: Partial<Virksomhet>): virksomhet is Virksomhet => {\n    return virksomhet !== undefined;\n};\n\nexport interface VirksomhetApiData {\n    næringstyper: Næringstype[];\n    fiskerErPåBladB?: boolean;\n    fraOgMed: ApiStringDate;\n    tilOgMed?: ApiStringDate | null;\n    erNyoppstartet: boolean;\n    næringsinntekt?: number;\n    navnPåVirksomheten: string;\n    organisasjonsnummer?: string;\n    registrertINorge: boolean;\n    registrertIUtlandet?: {\n        landkode: string;\n        landnavn: string;\n    };\n    yrkesaktivSisteTreFerdigliknedeÅrene?: {\n        oppstartsdato: ApiStringDate;\n    };\n    varigEndring?: {\n        dato: ApiStringDate;\n        inntektEtterEndring: number;\n        forklaring: string;\n    };\n    regnskapsfører?: {\n        navn: string;\n        telefon: string;\n    };\n    revisor?: {\n        navn: string;\n        telefon: string;\n        kanInnhenteOpplysninger?: boolean;\n    };\n}\n","/* eslint-disable react/display-name */\nimport React, { useState } from 'react';\nimport Tabs from 'nav-frontend-tabs';\nimport 'nav-frontend-tabs-style';\nimport PageIntro from '../../components/page-intro/PageIntro';\nimport { RouteConfig } from '../../config/routeConfig';\nimport BostedUtlandExample from './BostedUtlandExample';\nimport FerieuttakExample from './FerieuttakExample';\nimport FosterbarnExample from './FosterbarnExample';\nimport TidsperiodeExample from './TidsperiodeExample';\nimport UtenlandsoppholdIPeriodenExample from './UtenlandsoppholdExample';\nimport FraværExample from './FraværExample';\nimport AnnetBarnExample from './AnnetBarnExample';\n\nconst tabRoutes: RouteConfig[] = [\n    {\n        path: 'fravær',\n        renderContent: () => <FraværExample />,\n        title: 'Fravær',\n    },\n    {\n        path: 'tidsrom',\n        renderContent: () => <TidsperiodeExample />,\n        title: 'Tidsperiode',\n    },\n    {\n        path: 'utenlandsopphold',\n        renderContent: () => <UtenlandsoppholdIPeriodenExample />,\n        title: 'Utenlandsopphold i perioden',\n    },\n    {\n        path: 'bosted-utland',\n        renderContent: () => <BostedUtlandExample />,\n        title: 'Bosted utland',\n    },\n    {\n        path: 'ferieuttak',\n        renderContent: () => <FerieuttakExample />,\n        title: 'Ferieuttak i perioden',\n    },\n    {\n        path: 'fosterbarn',\n        renderContent: () => <FosterbarnExample />,\n        title: 'Fosterbarn',\n    },\n    {\n        path: 'annetbarn',\n        renderContent: () => <AnnetBarnExample />,\n        title: 'Annet Barn',\n    },\n];\n\nconst DialogForms = () => {\n    const [path, setPath] = useState(tabRoutes[0].path);\n    const activeRoute = tabRoutes.find((r) => {\n        return r.path === path;\n    });\n    return (\n        <>\n            <PageIntro title=\"Dialogskjema\">\n                Skjema for ferieuttak i perioden, utenlandsopphold i perioden og bosted i utlandet.\n            </PageIntro>\n            <Tabs\n                onChange={(evt, idx) => setPath(tabRoutes[idx].path)}\n                tabs={tabRoutes.map((r) => ({\n                    label: r.title,\n                    active: r.path === path ? 'true' : 'false',\n                }))}\n            />\n            {activeRoute && activeRoute.renderContent()}\n        </>\n    );\n};\n\nexport default DialogForms;\n","import { date4YearsAgo } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport dayjs from 'dayjs';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Næringstype, Virksomhet, VirksomhetFormValues } from './types';\n\nexport const harFiskerNæringstype = (næringstyper: Næringstype[]): boolean =>\n    næringstyper.find((n) => n === Næringstype.FISKER) !== undefined;\n\nexport const erVirksomhetRegnetSomNyoppstartet = (oppstartsdato: Date) => {\n    return dayjs(oppstartsdato).startOf('day').isAfter(date4YearsAgo);\n};\n\nexport const mapFormValuesToVirksomhet = (\n    formValues: VirksomhetFormValues,\n    id: string | undefined\n): Partial<Virksomhet> => {\n    return {\n        ...formValues,\n        id: id || guid(),\n        fom: ISOStringToDate(formValues.fom),\n        tom: ISOStringToDate(formValues.tom),\n        oppstartsdato: ISOStringToDate(formValues.oppstartsdato),\n        varigEndringINæringsinntekt_dato: ISOStringToDate(formValues.varigEndringINæringsinntekt_dato),\n    };\n};\n\nexport const mapVirksomhetToFormValues = (virksomhet: Virksomhet): VirksomhetFormValues => {\n    return {\n        ...virksomhet,\n        fom: dateToISOString(virksomhet.fom),\n        tom: dateToISOString(virksomhet.tom),\n        oppstartsdato: dateToISOString(virksomhet.oppstartsdato),\n        varigEndringINæringsinntekt_dato: dateToISOString(virksomhet.varigEndringINæringsinntekt_dato),\n    };\n};\n","import { formatDateToApiFormat } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { YesOrNo, getCountryName } from '@navikt/sif-common-formik/lib';\nimport { Virksomhet, VirksomhetApiData } from './types';\nimport { erVirksomhetRegnetSomNyoppstartet, harFiskerNæringstype } from './virksomhetUtils';\n\nexport const mapVirksomhetToVirksomhetApiData = (\n    locale: string,\n    virksomhet: Virksomhet,\n    harBesvartFikserPåBladB?: boolean\n): VirksomhetApiData => {\n    const registrertINorge = virksomhet.registrertINorge === YesOrNo.YES;\n    const harRegnskapsfører = virksomhet.harRegnskapsfører === YesOrNo.YES;\n\n    const data: VirksomhetApiData = {\n        næringstyper: [...virksomhet.næringstyper],\n        navnPåVirksomheten: virksomhet.navnPåVirksomheten,\n        registrertINorge,\n        ...(registrertINorge\n            ? {\n                  organisasjonsnummer: virksomhet.organisasjonsnummer,\n              }\n            : {\n                  registrertIUtlandet: virksomhet.registrertILand\n                      ? {\n                            landkode: virksomhet.registrertILand,\n                            landnavn: getCountryName(virksomhet.registrertILand, locale),\n                        }\n                      : undefined,\n              }),\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        fraOgMed: formatDateToApiFormat(virksomhet.fom),\n        tilOgMed: virksomhet.erPågående || virksomhet.tom === undefined ? null : formatDateToApiFormat(virksomhet.tom),\n        næringsinntekt: virksomhet.næringsinntekt,\n        erNyoppstartet: erVirksomhetRegnetSomNyoppstartet(virksomhet.fom),\n    };\n\n    if (virksomhet.hattVarigEndringAvNæringsinntektSiste4Kalenderår) {\n        const harHatt = virksomhet.hattVarigEndringAvNæringsinntektSiste4Kalenderår === YesOrNo.YES;\n        const {\n            varigEndringINæringsinntekt_dato,\n            varigEndringINæringsinntekt_forklaring,\n            varigEndringINæringsinntekt_inntektEtterEndring,\n        } = virksomhet;\n        if (\n            harHatt &&\n            varigEndringINæringsinntekt_dato &&\n            varigEndringINæringsinntekt_inntektEtterEndring !== undefined &&\n            varigEndringINæringsinntekt_forklaring\n        ) {\n            data.varigEndring = {\n                dato: formatDateToApiFormat(varigEndringINæringsinntekt_dato),\n                forklaring: varigEndringINæringsinntekt_forklaring,\n                inntektEtterEndring: varigEndringINæringsinntekt_inntektEtterEndring,\n            };\n        }\n    }\n\n    if (harFiskerNæringstype(virksomhet.næringstyper) && harBesvartFikserPåBladB !== true) {\n        data.fiskerErPåBladB = virksomhet.fiskerErPåBladB === YesOrNo.YES;\n    }\n\n    if (virksomhet.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene) {\n        const harBlittAktiv = virksomhet.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene === YesOrNo.YES;\n        if (harBlittAktiv && virksomhet.oppstartsdato) {\n            data.yrkesaktivSisteTreFerdigliknedeÅrene = {\n                oppstartsdato: formatDateToApiFormat(virksomhet.oppstartsdato),\n            };\n        }\n    }\n\n    if (harRegnskapsfører && virksomhet.regnskapsfører_navn && virksomhet.regnskapsfører_telefon) {\n        data.regnskapsfører = {\n            navn: virksomhet.regnskapsfører_navn,\n            telefon: virksomhet.regnskapsfører_telefon,\n        };\n    }\n\n    if (!harRegnskapsfører) {\n        if (virksomhet.harRevisor === YesOrNo.YES && virksomhet.revisor_navn && virksomhet.revisor_telefon) {\n            data.revisor = {\n                navn: virksomhet.revisor_navn,\n                telefon: virksomhet.revisor_telefon,\n                kanInnhenteOpplysninger: virksomhet.kanInnhenteOpplsyningerFraRevisor === YesOrNo.YES,\n            };\n        }\n    }\n\n    return data;\n};\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport CounsellorPanel from '@navikt/sif-common-core/lib/components/counsellor-panel/CounsellorPanel';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\n\ninterface Props {\n    navnPåVirksomheten: string;\n}\n\nconst InfoTilFisker = ({ navnPåVirksomheten }: Props) => {\n    const intl = useIntl();\n    return (\n        <CounsellorPanel>\n            {intlHelper(intl, 'sifForms.virksomhet.veileder_fisker', { navnPåVirksomheten })}\n        </CounsellorPanel>\n    );\n};\n\nexport default InfoTilFisker;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport CounsellorPanel from '@navikt/sif-common-core/lib/components/counsellor-panel/CounsellorPanel';\nimport ExpandableInfo from '@navikt/sif-common-core/lib/components/expandable-content/ExpandableInfo';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport ResponsivePanel from '@navikt/sif-common-core/lib/components/responsive-panel/ResponsivePanel';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { date3YearsAgo, date4YearsAgo, dateToday } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport {\n    validateOrgNumber,\n    validatePhoneNumber,\n    validateRequiredField,\n    validateRequiredList,\n    validateRequiredNumber,\n    validateYesOrNoIsAnswered,\n} from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { hasValue } from '@navikt/sif-common-core/lib/validation/hasValue';\nimport { FormikYesOrNoQuestion, getTypedFormComponents, ISOStringToDate, YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { FormikProps } from 'formik';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport InfoTilFisker from './parts/InfoTilFisker';\nimport {\n    isVirksomhet,\n    Næringstype,\n    Virksomhet,\n    VirksomhetFormField,\n    VirksomhetFormValues,\n    VirksomhetHideFields,\n} from './types';\nimport {\n    erVirksomhetRegnetSomNyoppstartet,\n    harFiskerNæringstype,\n    mapFormValuesToVirksomhet,\n    mapVirksomhetToFormValues,\n} from './virksomhetUtils';\n\ninterface Props {\n    virksomhet?: Virksomhet;\n    hideFormFields?: VirksomhetHideFields;\n    skipOrgNumValidation?: boolean;\n    onSubmit: (oppdrag: Virksomhet) => void;\n    onCancel: () => void;\n}\n\nconst MAKS_INNTEKT = 999999999;\n\nconst Form = getTypedFormComponents<VirksomhetFormField, VirksomhetFormValues>();\n\nconst visNæringsinntekt = (values: VirksomhetFormValues): boolean => {\n    const fomDate = ISOStringToDate(values.fom);\n    return fomDate !== undefined && erVirksomhetRegnetSomNyoppstartet(fomDate);\n};\n\nconst ensureValidNæringsinntekt = (values: VirksomhetFormValues): number | undefined => {\n    if (visNæringsinntekt(values)) {\n        return values.næringsinntekt;\n    }\n    return undefined;\n};\n\nconst VirksomhetForm = ({ onCancel, virksomhet, onSubmit, hideFormFields, skipOrgNumValidation }: Props) => {\n    const onFormikSubmit = (values: VirksomhetFormValues) => {\n        const virksomhetToSubmit = mapFormValuesToVirksomhet(values, virksomhet?.id);\n        if (isVirksomhet(virksomhetToSubmit)) {\n            onSubmit({\n                ...virksomhetToSubmit,\n                næringsinntekt: ensureValidNæringsinntekt(values),\n            });\n        } else {\n            throw new Error('VirksomhetForm: Formvalues is not a valid Virksomhet on submit.');\n        }\n    };\n\n    const intl = useIntl();\n    const getText = (key: string, value?: any): string => intlHelper(intl, `sifForms.virksomhet.${key}`, value);\n    const hideFiskerPåBladB = hideFormFields?.[VirksomhetFormField.fiskerErPåBladB] === true;\n    const hideRevisor = hideFormFields?.harRevisor === true;\n\n    return (\n        <Form.FormikWrapper\n            initialValues={virksomhet ? mapVirksomhetToFormValues(virksomhet) : { næringstyper: [] }}\n            onSubmit={onFormikSubmit}\n            renderForm={(formik: FormikProps<VirksomhetFormValues>) => {\n                const { values, setFieldValue } = formik;\n                const { navnPåVirksomheten = 'virksomheten' } = values;\n                const fomDate = ISOStringToDate(values.fom);\n                return (\n                    <Form.Form\n                        includeValidationSummary={true}\n                        onCancel={onCancel}\n                        fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                        <Box padBottom=\"l\">\n                            <Systemtittel tag=\"h1\">{getText('form_title')}</Systemtittel>\n                        </Box>\n                        <Form.CheckboxPanelGroup\n                            name={VirksomhetFormField.næringstyper}\n                            legend={getText('hvilken_type_virksomhet')}\n                            checkboxes={[\n                                {\n                                    value: Næringstype.FISKER,\n                                    label: getText('næringstype_fisker'),\n                                },\n                                {\n                                    value: Næringstype.JORDBRUK,\n                                    label: getText('næringstype_jordbruker'),\n                                },\n                                {\n                                    value: Næringstype.DAGMAMMA,\n                                    label: getText('næringstype_dagmamma'),\n                                },\n                                {\n                                    value: Næringstype.ANNEN,\n                                    label: getText('næringstype_annet'),\n                                },\n                            ]}\n                            validate={validateRequiredList}\n                        />\n\n                        {harFiskerNæringstype(values.næringstyper || []) && hideFiskerPåBladB !== true && (\n                            <Box margin=\"xl\">\n                                <FormikYesOrNoQuestion<VirksomhetFormField>\n                                    name={VirksomhetFormField.fiskerErPåBladB}\n                                    legend={getText('fisker_blad_b')}\n                                    validate={validateYesOrNoIsAnswered}\n                                />\n                            </Box>\n                        )}\n\n                        <Box margin=\"xl\">\n                            <Form.Input\n                                name={VirksomhetFormField.navnPåVirksomheten}\n                                label={getText('hva_heter_virksomheten')}\n                                validate={validateRequiredField}\n                                maxLength={50}\n                            />\n                        </Box>\n\n                        {harFiskerNæringstype(values.næringstyper || []) &&\n                            values.navnPåVirksomheten !== undefined &&\n                            hasValue(navnPåVirksomheten) && (\n                                <Box margin=\"xl\">\n                                    <InfoTilFisker navnPåVirksomheten={values.navnPåVirksomheten} />\n                                </Box>\n                            )}\n\n                        <Box margin=\"xl\">\n                            <Form.YesOrNoQuestion\n                                name={VirksomhetFormField.registrertINorge}\n                                legend={getText('registert_i_norge', { navnPåVirksomheten })}\n                                validate={validateYesOrNoIsAnswered}\n                            />\n                        </Box>\n\n                        {values.registrertINorge === YesOrNo.NO && (\n                            <Box margin=\"xl\">\n                                <Form.CountrySelect\n                                    name={VirksomhetFormField.registrertILand}\n                                    label={getText('registert_i_hvilket_land', { navnPåVirksomheten })}\n                                    validate={validateRequiredField}\n                                    useAlpha3Code={true}\n                                />\n                            </Box>\n                        )}\n\n                        {values.registrertINorge === YesOrNo.YES && (\n                            <Box margin=\"xl\">\n                                <Form.Input\n                                    name={VirksomhetFormField.organisasjonsnummer}\n                                    label={getText('organisasjonsnummer')}\n                                    style={{ maxWidth: '10rem' }}\n                                    maxLength={9}\n                                    validate={\n                                        skipOrgNumValidation\n                                            ? undefined\n                                            : (value) =>\n                                                  validateOrgNumber(value, values.registrertINorge === YesOrNo.YES)\n                                    }\n                                />\n                            </Box>\n                        )}\n\n                        {(values.registrertINorge === YesOrNo.YES || values.registrertINorge === YesOrNo.NO) && (\n                            <Box margin=\"xl\">\n                                <Form.DateRangePicker\n                                    legend={getText('startdato', { navnPåVirksomheten })}\n                                    showYearSelector={true}\n                                    maxDate={dateToday}\n                                    fromInputProps={{\n                                        label: getText('kalender_fom'),\n                                        name: VirksomhetFormField.fom,\n                                        validate: validateRequiredField,\n                                    }}\n                                    toInputProps={{\n                                        label: getText('kalender_tom'),\n                                        name: VirksomhetFormField.tom,\n                                        disabled: values.erPågående === true,\n                                    }}\n                                />\n                                <Form.Checkbox\n                                    label={getText('kalender_pågående')}\n                                    name={VirksomhetFormField.erPågående}\n                                    afterOnChange={(checked) => {\n                                        if (checked) {\n                                            setFieldValue(VirksomhetFormField.tom, undefined);\n                                        }\n                                    }}\n                                />\n                            </Box>\n                        )}\n\n                        {fomDate && erVirksomhetRegnetSomNyoppstartet(fomDate) && (\n                            <>\n                                <Box margin=\"xl\">\n                                    <Form.Input\n                                        name={VirksomhetFormField.næringsinntekt}\n                                        label={getText('næringsinntekt')}\n                                        type=\"number\"\n                                        maxLength={10}\n                                        max={MAKS_INNTEKT}\n                                        style={{ maxWidth: '10rem' }}\n                                        validate={validateRequiredNumber({ min: 0, max: MAKS_INNTEKT })}\n                                        description={\n                                            <ExpandableInfo title={getText('næringsinntekt_info_title')}>\n                                                {getText('næringsinntekt_info')}\n                                            </ExpandableInfo>\n                                        }\n                                    />\n                                </Box>\n                                <Box margin=\"xl\">\n                                    <Form.YesOrNoQuestion\n                                        name={\n                                            VirksomhetFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene\n                                        }\n                                        legend={getText('har_blitt_yrkesaktiv')}\n                                        validate={validateYesOrNoIsAnswered}\n                                        description={\n                                            <ExpandableInfo title={getText('har_blitt_yrkesaktiv_info_title')}>\n                                                {getText('har_blitt_yrkesaktiv_info')}\n                                            </ExpandableInfo>\n                                        }\n                                    />\n                                </Box>\n                                {values.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene === YesOrNo.YES && (\n                                    <FormBlock margin=\"m\">\n                                        <ResponsivePanel>\n                                            <Form.DatePicker\n                                                name={VirksomhetFormField.oppstartsdato}\n                                                label={getText('har_blitt_yrkesaktiv_dato')}\n                                                showYearSelector={true}\n                                                minDate={date3YearsAgo}\n                                                maxDate={dateToday}\n                                                validate={validateRequiredField}\n                                            />\n                                        </ResponsivePanel>\n                                    </FormBlock>\n                                )}\n                            </>\n                        )}\n                        {fomDate && erVirksomhetRegnetSomNyoppstartet(fomDate) === false && (\n                            <>\n                                <Box margin=\"xl\">\n                                    <Form.YesOrNoQuestion\n                                        name={VirksomhetFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår}\n                                        legend={getText('varig_endring_spm')}\n                                        validate={validateYesOrNoIsAnswered}\n                                    />\n                                </Box>\n                                {values.hattVarigEndringAvNæringsinntektSiste4Kalenderår === YesOrNo.YES && (\n                                    <>\n                                        <Box margin=\"xl\">\n                                            <Form.DatePicker\n                                                name={VirksomhetFormField.varigEndringINæringsinntekt_dato}\n                                                label={getText('varig_endring_dato')}\n                                                validate={validateRequiredField}\n                                                minDate={date4YearsAgo}\n                                                maxDate={dateToday}\n                                            />\n                                        </Box>\n                                        <Box margin=\"xl\">\n                                            <Form.Input\n                                                name={\n                                                    VirksomhetFormField.varigEndringINæringsinntekt_inntektEtterEndring\n                                                }\n                                                label={getText('varig_endring_inntekt')}\n                                                type=\"number\"\n                                                maxLength={10}\n                                                max={MAKS_INNTEKT}\n                                                style={{ maxWidth: '10rem' }}\n                                                validate={validateRequiredNumber({ min: 0, max: MAKS_INNTEKT })}\n                                            />\n                                        </Box>\n                                        <Box margin=\"xl\">\n                                            <Form.Textarea\n                                                name={VirksomhetFormField.varigEndringINæringsinntekt_forklaring}\n                                                label={getText('varig_endring_tekst')}\n                                                validate={validateRequiredField}\n                                                maxLength={1000}\n                                            />\n                                        </Box>\n                                    </>\n                                )}\n                            </>\n                        )}\n\n                        {(values.fom || values.registrertINorge === YesOrNo.YES) && (\n                            <>\n                                <Box margin=\"xl\">\n                                    <Form.YesOrNoQuestion\n                                        name={VirksomhetFormField.harRegnskapsfører}\n                                        legend={getText('regnskapsfører_spm')}\n                                        validate={validateYesOrNoIsAnswered}\n                                    />\n                                </Box>\n\n                                {values.harRegnskapsfører === YesOrNo.YES && (\n                                    <FormBlock margin=\"m\">\n                                        <ResponsivePanel>\n                                            <Form.Input\n                                                name={VirksomhetFormField.regnskapsfører_navn}\n                                                label={getText('regnskapsfører_navn')}\n                                                validate={validateRequiredField}\n                                                maxLength={50}\n                                            />\n                                            <Box margin=\"xl\">\n                                                <Form.Input\n                                                    name={VirksomhetFormField.regnskapsfører_telefon}\n                                                    label={getText('regnskapsfører_telefon')}\n                                                    validate={validatePhoneNumber}\n                                                    maxLength={15}\n                                                />\n                                            </Box>\n                                        </ResponsivePanel>\n                                    </FormBlock>\n                                )}\n\n                                {values.harRegnskapsfører === YesOrNo.NO && hideRevisor === false && (\n                                    <>\n                                        <Box margin=\"xl\">\n                                            <Form.YesOrNoQuestion\n                                                name={VirksomhetFormField.harRevisor}\n                                                legend={getText('revisor_spm')}\n                                                validate={validateYesOrNoIsAnswered}\n                                            />\n                                        </Box>\n\n                                        {values.harRevisor === YesOrNo.YES && (\n                                            <FormBlock margin=\"m\">\n                                                <ResponsivePanel>\n                                                    <Form.Input\n                                                        name={VirksomhetFormField.revisor_navn}\n                                                        label={getText('revisor_navn')}\n                                                        validate={validateRequiredField}\n                                                        maxLength={50}\n                                                    />\n                                                    <Box margin=\"xl\">\n                                                        <Form.Input\n                                                            name={VirksomhetFormField.revisor_telefon}\n                                                            label={getText('revisor_telefon')}\n                                                            validate={validatePhoneNumber}\n                                                            maxLength={15}\n                                                        />\n                                                    </Box>\n                                                    <Box margin=\"xl\">\n                                                        <Form.YesOrNoQuestion\n                                                            name={VirksomhetFormField.kanInnhenteOpplsyningerFraRevisor}\n                                                            legend={getText('revisor_fullmakt')}\n                                                            validate={validateYesOrNoIsAnswered}\n                                                        />\n                                                    </Box>\n                                                </ResponsivePanel>\n                                            </FormBlock>\n                                        )}\n                                    </>\n                                )}\n                            </>\n                        )}\n                        {(values.harRegnskapsfører === YesOrNo.YES ||\n                            (values.harRevisor && values.harRevisor !== YesOrNo.UNANSWERED)) && (\n                            <Box margin=\"xl\">\n                                <CounsellorPanel>\n                                    {getText('veileder_innhenter_info.1')}\n                                    <br />\n                                    {getText('veileder_innhenter_info.2')}\n                                </CounsellorPanel>\n                            </Box>\n                        )}\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default VirksomhetForm;\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { Virksomhet } from './types';\nimport './virksomhetList.less';\n\ninterface Props {\n    virksomheter: Virksomhet[];\n    onEdit?: (virksomhet: Virksomhet) => void;\n    onDelete?: (virksomhet: Virksomhet) => void;\n}\n\nconst bem = bemUtils('virksomhetList');\n\nconst VirksomhetList = ({ virksomheter = [], onDelete, onEdit }: Props) => {\n    const næringLabel = (næring: Virksomhet): React.ReactNode => {\n        return (\n            <div className={bem.element('label')}>\n                <span className={bem.element('navn')}>\n                    {onEdit && <ActionLink onClick={() => onEdit(næring)}>{næring.navnPåVirksomheten}</ActionLink>}\n                    {!onEdit && <span>{næring.navnPåVirksomheten}</span>}\n                </span>\n            </div>\n        );\n    };\n\n    return (\n        <ItemList<Virksomhet>\n            getItemId={(næring) => næring.organisasjonsnummer}\n            getItemTitle={(næring) => næring.navnPåVirksomheten}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={næringLabel}\n            items={virksomheter.filter((næring) => næring.id !== undefined)}\n        />\n    );\n};\n\nexport default VirksomhetList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { FormikModalFormAndList, FormikValidateFunction, ModalFormAndListLabels } from '@navikt/sif-common-formik';\nimport { Virksomhet, VirksomhetHideFields } from './types';\nimport VirksomhetForm from './VirksomhetForm';\nimport VirksomhetListe from './VirksomhetList';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    validate?: FormikValidateFunction;\n    labels: ModalFormAndListLabels;\n    hideFormFields?: VirksomhetHideFields;\n    skipOrgNumValidation?: boolean;\n    onAfterChange?: (virksomheter: Virksomhet[]) => void;\n}\n\nfunction VirksomhetListAndDialog<FieldNames>({\n    name,\n    validate,\n    labels,\n    hideFormFields,\n    skipOrgNumValidation,\n    onAfterChange,\n}: Props<FieldNames>) {\n    return (\n        <FormikModalFormAndList<FieldNames, Virksomhet>\n            name={name}\n            labels={labels}\n            validate={validate}\n            dialogWidth=\"narrow\"\n            sortFunc={sortItemsByFom}\n            formRenderer={({ onSubmit, onCancel, item }) => (\n                <VirksomhetForm\n                    virksomhet={item}\n                    onSubmit={onSubmit}\n                    onCancel={onCancel}\n                    skipOrgNumValidation={skipOrgNumValidation}\n                    hideFormFields={hideFormFields}\n                />\n            )}\n            listRenderer={({ items, onEdit, onDelete }) => (\n                <VirksomhetListe virksomheter={items} onEdit={onEdit} onDelete={onDelete} />\n            )}\n            onAfterChange={onAfterChange}\n        />\n    );\n}\n\nexport default VirksomhetListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { validateRequiredList } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { TypedFormikForm, TypedFormikWrapper, YesOrNo } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport Panel from 'nav-frontend-paneler';\nimport { Checkbox } from 'nav-frontend-skjema';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { mapVirksomhetToVirksomhetApiData } from '../../../forms/virksomhet/mapVirksomhetToApiData';\nimport { isVirksomhet, Næringstype, Virksomhet } from '../../../forms/virksomhet/types';\nimport VirksomhetForm from '../../../forms/virksomhet/VirksomhetForm';\nimport VirksomhetListAndDialog from '../../../forms/virksomhet/VirksomhetListAndDialog';\nimport PageIntro from '../../components/page-intro/PageIntro';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\n\nenum FormField {\n    'virksomheter' = 'virksomheter',\n}\n\nexport const mockVirksomhet: Virksomhet = {\n    id: '024782550-1402-01448-04932-71872390929312',\n    næringstyper: [Næringstype.ANNEN, Næringstype.DAGMAMMA],\n    navnPåVirksomheten: 'Gamle greier',\n    registrertINorge: YesOrNo.YES,\n    organisasjonsnummer: '123123123',\n    fom: new Date('2007-02-01T00:00:00.000Z'),\n    erPågående: true,\n    hattVarigEndringAvNæringsinntektSiste4Kalenderår: YesOrNo.YES,\n    varigEndringINæringsinntekt_dato: new Date('2019-12-09T00:00:00.000Z'),\n    varigEndringINæringsinntekt_inntektEtterEndring: 200000,\n    varigEndringINæringsinntekt_forklaring: 'Jeg fikk flere barn',\n    harRegnskapsfører: YesOrNo.YES,\n    harRevisor: YesOrNo.YES,\n    regnskapsfører_navn: 'Regnskapsefører Truls',\n    regnskapsfører_telefon: '98219409',\n};\n\ninterface FormValues {\n    [FormField.virksomheter]: Virksomhet[];\n}\nconst initialValues: FormValues = { virksomheter: [] };\n\nconst VirksomhetExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<Virksomhet> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const [hideFisker, setHideFisker] = useState<boolean>(false);\n    const [hideRevisor, setHideRevisor] = useState<boolean>(false);\n    const intl = useIntl();\n    return (\n        <>\n            <PageIntro title=\"Næringsvirksomhet\">Skjema som brukes for på registrere en næringsvirksomhet.</PageIntro>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                                <VirksomhetListAndDialog<FormField>\n                                    name={FormField.virksomheter}\n                                    validate={validateRequiredList}\n                                    hideFormFields={{ fiskerErPåBladB: hideFisker, harRevisor: hideRevisor }}\n                                    labels={{\n                                        addLabel: 'Legg til',\n                                        listTitle: 'Virksomhet',\n                                        modalTitle: 'Virksomhet',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n            <DialogFormWrapper width=\"wide\">\n                <Panel border={true}>\n                    <VirksomhetForm\n                        hideFormFields={{ fiskerErPåBladB: hideFisker, harRevisor: hideRevisor }}\n                        onCancel={() => setSingleFormValues({})}\n                        onSubmit={(values) => setSingleFormValues(values)}\n                    />\n                    <Box margin=\"l\">\n                        <hr />\n                        <Panel style={{ padding: '1rem' }}>\n                            <Box padBottom=\"m\">Spørsmål som kan skjules:</Box>\n                            <Box margin=\"m\">\n                                <Checkbox\n                                    label=\"Fisker på Blad B\"\n                                    checked={hideFisker}\n                                    onChange={(evt) => setHideFisker(evt.currentTarget.checked)}\n                                />\n                            </Box>\n                            <Box margin=\"m\">\n                                <Checkbox\n                                    label=\"Revisor\"\n                                    checked={hideRevisor}\n                                    onChange={(evt) => setHideRevisor(evt.currentTarget.checked)}\n                                />\n                            </Box>\n                        </Panel>\n                    </Box>\n                    <Box margin=\"l\">\n                        <SubmitPreview values={singleFormValues} />\n                    </Box>\n                    <Box margin=\"xl\">\n                        <Undertittel>API-data</Undertittel>\n                        <SubmitPreview\n                            values={\n                                singleFormValues && isVirksomhet(singleFormValues)\n                                    ? mapVirksomhetToVirksomhetApiData(intl.locale, singleFormValues)\n                                    : undefined\n                            }\n                        />\n                    </Box>\n                </Panel>\n            </DialogFormWrapper>\n        </>\n    );\n};\n\nexport default VirksomhetExample;\n","import { ApiStringDate } from '@navikt/sif-common-core/lib/types/ApiStringDate';\nimport { YesOrNo } from '@navikt/sif-common-core/lib/types/YesOrNo';\n\nexport enum Næringstype {\n    'FISKER' = 'FISKE',\n    'JORDBRUK' = 'JORDBRUK_SKOGBRUK',\n    'DAGMAMMA' = 'DAGMAMMA',\n    'ANNEN' = 'ANNEN',\n}\n\nexport enum SelvstendigNæringsdrivendeFormField {\n    'næringstyper' = 'næringstyper',\n    'fiskerErPåBladB' = 'fiskerErPåBladB',\n    'fom' = 'fom',\n    'tom' = 'tom',\n    'næringsinntekt' = 'næringsinntekt',\n    'erPågående' = 'erPågående',\n    'navnPåVirksomheten' = 'navnPåVirksomheten',\n    'organisasjonsnummer' = 'organisasjonsnummer',\n    'registrertINorge' = 'registrertINorge',\n    'registrertILand' = 'registrertILand',\n    'harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene' = 'harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene',\n    'oppstartsdato' = 'oppstartsdato',\n    'hattVarigEndringAvNæringsinntektSiste4Kalenderår' = 'hattVarigEndringAvNæringsinntektSiste4Kalenderår',\n    'varigEndringINæringsinntekt_dato' = 'varigEndringINæringsinntekt_dato',\n    'varigEndringINæringsinntekt_inntektEtterEndring' = 'varigEndringINæringsinntekt_inntektEtterEndring',\n    'varigEndringINæringsinntekt_forklaring' = 'varigEndringINæringsinntekt_forklaring',\n    'endretNæringsinntektInformasjon' = 'endretNæringsinntektInformasjon',\n    'harRegnskapsfører' = 'harRegnskapsfører',\n    'regnskapsfører' = 'regnskapsfører',\n    'regnskapsfører_navn' = 'regnskapsfører_navn',\n    'regnskapsfører_telefon' = 'regnskapsfører_telefon',\n    'harRevisor' = 'harRevisor',\n    'revisor_navn' = 'revisor_navn',\n    'revisor_telefon' = 'revisor_telefon',\n    'kanInnhenteOpplsyningerFraRevisor' = 'kanInnhenteOpplsyningerFraRevisor',\n}\n\nexport interface SelvstendigNæringsdrivende {\n    id?: string;\n    [SelvstendigNæringsdrivendeFormField.næringstyper]: Næringstype[];\n    [SelvstendigNæringsdrivendeFormField.fiskerErPåBladB]?: YesOrNo;\n    [SelvstendigNæringsdrivendeFormField.fom]: Date;\n    [SelvstendigNæringsdrivendeFormField.tom]?: Date;\n    [SelvstendigNæringsdrivendeFormField.næringsinntekt]?: number;\n    [SelvstendigNæringsdrivendeFormField.erPågående]?: boolean;\n    [SelvstendigNæringsdrivendeFormField.navnPåVirksomheten]: string;\n    [SelvstendigNæringsdrivendeFormField.organisasjonsnummer]?: string;\n    [SelvstendigNæringsdrivendeFormField.registrertINorge]: YesOrNo;\n    [SelvstendigNæringsdrivendeFormField.registrertILand]?: string;\n    [SelvstendigNæringsdrivendeFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene]?: YesOrNo;\n    [SelvstendigNæringsdrivendeFormField.oppstartsdato]?: Date;\n    [SelvstendigNæringsdrivendeFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår]?: YesOrNo;\n    [SelvstendigNæringsdrivendeFormField.varigEndringINæringsinntekt_dato]?: Date;\n    [SelvstendigNæringsdrivendeFormField.varigEndringINæringsinntekt_inntektEtterEndring]?: number;\n    [SelvstendigNæringsdrivendeFormField.varigEndringINæringsinntekt_forklaring]?: string;\n    [SelvstendigNæringsdrivendeFormField.harRegnskapsfører]: YesOrNo;\n    [SelvstendigNæringsdrivendeFormField.regnskapsfører_navn]?: string;\n    [SelvstendigNæringsdrivendeFormField.regnskapsfører_telefon]?: string;\n}\nexport type SelvstendigNæringsdrivendeFormValues = Partial<\n    Omit<SelvstendigNæringsdrivende, 'fom' | 'tom' | 'oppstartsdato' | 'varigEndringINæringsinntekt_dato'> & {\n        [SelvstendigNæringsdrivendeFormField.fom]: string;\n        [SelvstendigNæringsdrivendeFormField.tom]?: string;\n        [SelvstendigNæringsdrivendeFormField.oppstartsdato]?: string;\n        [SelvstendigNæringsdrivendeFormField.varigEndringINæringsinntekt_dato]?: string;\n    }\n>;\n\nexport const isSelvstendigNæringsdrivende = (\n    info: Partial<SelvstendigNæringsdrivende>\n): info is SelvstendigNæringsdrivende => {\n    return info !== undefined;\n};\n\nexport interface SelvstendigNæringsdrivendeApiData {\n    næringstyper: Næringstype[];\n    fiskerErPåBladB?: boolean;\n    fraOgMed: ApiStringDate;\n    tilOgMed?: ApiStringDate | null;\n    erNyoppstartet: boolean;\n    næringsinntekt?: number;\n    navnPåVirksomheten: string;\n    organisasjonsnummer?: string;\n    registrertINorge: boolean;\n    registrertIUtlandet?: {\n        landkode: string;\n        landnavn: string;\n    };\n    yrkesaktivSisteTreFerdigliknedeÅrene?: {\n        oppstartsdato: ApiStringDate;\n    };\n    varigEndring?: {\n        dato: ApiStringDate;\n        inntektEtterEndring: number;\n        forklaring: string;\n    };\n    regnskapsfører?: {\n        navn: string;\n        telefon: string;\n    };\n}\n","import React from 'react';\nimport PageIntro from './components/page-intro/PageIntro';\n\nconst Intro = () => (\n    <>\n        <PageIntro title=\"SIF-common guide\">\n            Dette er starten på en enkel guide til komponenter og konsepter i SIF-common, og som kan brukes i\n            søknadsapplikasjonene til kapittel 9. Vi legger det vi trenger, etter hvert som vi ser at vi trenger det :)\n        </PageIntro>\n    </>\n);\n\nexport default Intro;\n","import React from 'react';\nimport { MessageFileFormat } from '@navikt/sif-common-core/lib/dev-utils/intl/devIntlUtils';\nimport bostedUtlandMessages from '../../../forms/bosted-utland/bostedUtlandMessages';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport MessagePreviewExplanation from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagePreviewExplanation';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport ferieuttakMessages from '../../../forms/ferieuttak/ferieuttakMessages';\nimport fosterbarnMessages from '../../../forms/fosterbarn/fosterbarnMessages';\nimport fraværMessages from '../../../forms/fravær/fraværMessages';\nimport tidsperiodeMessages from '../../../forms/tidsperiode/tidsperiodeMessages';\nimport utenlandsoppholdMessages from '../../../forms/utenlandsopphold/utenlandsoppholdMessages';\nimport virksomhetMessages from '../../../forms/virksomhet/virksomhetMessages';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport annetBarnMessages from '../../../forms/annet-barn/annetBarnMessages';\n\nconst Texts = () => {\n    const formMessages: { title: string; messages: MessageFileFormat }[] = [];\n    formMessages.push({ title: 'Bosted utland', messages: bostedUtlandMessages });\n    formMessages.push({ title: 'Ferieuttak', messages: ferieuttakMessages });\n    formMessages.push({ title: 'Fosterbarn', messages: fosterbarnMessages });\n    formMessages.push({ title: 'Fravær', messages: fraværMessages });\n    formMessages.push({ title: 'Tidsperiode', messages: tidsperiodeMessages });\n    formMessages.push({ title: 'Utenlandsopphold', messages: utenlandsoppholdMessages });\n    formMessages.push({ title: 'Næringsvirksomhet (selvstendig næringsdrivende)', messages: virksomhetMessages });\n    formMessages.push({ title: 'Annet barn', messages: annetBarnMessages });\n    return (\n        <div>\n            <Box>\n                <MessagePreviewExplanation />\n            </Box>\n            {formMessages.map(({ title, messages }) => {\n                return (\n                    <div key={title}>\n                        <FormBlock margin=\"none\" paddingBottom=\"xl\">\n                            <MessagesPreview\n                                messages={messages}\n                                title={title}\n                                showExplanation={false}\n                                showMissingTextSummary={true}\n                            />\n                        </FormBlock>\n                    </div>\n                );\n            })}\n        </div>\n    );\n};\n\nexport default Texts;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport CounsellorPanel from '@navikt/sif-common-core/lib/components/counsellor-panel/CounsellorPanel';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\n\ninterface Props {\n    navnPåVirksomheten: string;\n}\n\nconst InfoTilFisker = ({ navnPåVirksomheten }: Props) => {\n    const intl = useIntl();\n    return (\n        <CounsellorPanel>\n            {intlHelper(intl, 'sifForms.selvstendigNæringsdrivende.veileder_fisker', { navnPåVirksomheten })}\n        </CounsellorPanel>\n    );\n};\n\nexport default InfoTilFisker;\n","import { date4YearsAgo } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport dayjs from 'dayjs';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Næringstype, SelvstendigNæringsdrivende, SelvstendigNæringsdrivendeFormValues } from './types';\n\nexport const harFiskerNæringstype = (næringstyper: Næringstype[]): boolean =>\n    næringstyper.find((n) => n === Næringstype.FISKER) !== undefined;\n\nexport const erVirksomhetRegnetSomNyoppstartet = (oppstartsdato: Date) => {\n    return dayjs(oppstartsdato).startOf('day').isAfter(date4YearsAgo);\n};\n\nexport const mapFormValuesToSelvstendigNæringsdrivende = (\n    formValues: SelvstendigNæringsdrivendeFormValues,\n    id: string | undefined\n): Partial<SelvstendigNæringsdrivende> => {\n    return {\n        ...formValues,\n        id: id || guid(),\n        fom: ISOStringToDate(formValues.fom),\n        tom: ISOStringToDate(formValues.tom),\n        oppstartsdato: ISOStringToDate(formValues.oppstartsdato),\n        varigEndringINæringsinntekt_dato: ISOStringToDate(formValues.varigEndringINæringsinntekt_dato),\n    };\n};\n\nexport const mapSelvstendigNæringsdrivendeToFormValues = (\n    info: SelvstendigNæringsdrivende\n): SelvstendigNæringsdrivendeFormValues => {\n    return {\n        ...info,\n        fom: dateToISOString(info.fom),\n        tom: dateToISOString(info.tom),\n        oppstartsdato: dateToISOString(info.oppstartsdato),\n        varigEndringINæringsinntekt_dato: dateToISOString(info.varigEndringINæringsinntekt_dato),\n    };\n};\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport CounsellorPanel from '@navikt/sif-common-core/lib/components/counsellor-panel/CounsellorPanel';\nimport ExpandableInfo from '@navikt/sif-common-core/lib/components/expandable-content/ExpandableInfo';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport ResponsivePanel from '@navikt/sif-common-core/lib/components/responsive-panel/ResponsivePanel';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { date3YearsAgo, date4YearsAgo, dateToday } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport {\n    validateOrgNumber,\n    validatePhoneNumber,\n    validateRequiredField,\n    validateRequiredList,\n    validateRequiredNumber,\n    validateYesOrNoIsAnswered,\n} from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { hasValue } from '@navikt/sif-common-core/lib/validation/hasValue';\nimport { FormikYesOrNoQuestion, getTypedFormComponents, ISOStringToDate, YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { FormikProps } from 'formik';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport InfoTilFisker from './parts/InfoTilFisker';\nimport {\n    isSelvstendigNæringsdrivende,\n    Næringstype,\n    SelvstendigNæringsdrivende,\n    SelvstendigNæringsdrivendeFormField,\n    SelvstendigNæringsdrivendeFormValues,\n} from './types';\nimport {\n    erVirksomhetRegnetSomNyoppstartet,\n    harFiskerNæringstype,\n    mapFormValuesToSelvstendigNæringsdrivende,\n    mapSelvstendigNæringsdrivendeToFormValues,\n} from './utils';\n\ninterface Props {\n    info?: SelvstendigNæringsdrivende;\n    onSubmit: (info: SelvstendigNæringsdrivende) => void;\n    onCancel: () => void;\n}\n\nconst MAKS_INNTEKT = 999999999;\n\nconst Form = getTypedFormComponents<SelvstendigNæringsdrivendeFormField, SelvstendigNæringsdrivendeFormValues>();\n\nconst visNæringsinntekt = (values: SelvstendigNæringsdrivendeFormValues): boolean => {\n    const fomDate = ISOStringToDate(values.fom);\n    return fomDate !== undefined && erVirksomhetRegnetSomNyoppstartet(fomDate);\n};\n\nconst ensureValidNæringsinntekt = (values: SelvstendigNæringsdrivendeFormValues): number | undefined => {\n    if (visNæringsinntekt(values)) {\n        return values.næringsinntekt;\n    }\n    return undefined;\n};\n\nconst SelvstendigNæringsdrivendeForm = ({ onCancel, info, onSubmit }: Props) => {\n    const onFormikSubmit = (values: SelvstendigNæringsdrivendeFormValues) => {\n        const virksomhetToSubmit = mapFormValuesToSelvstendigNæringsdrivende(values, info?.id);\n        if (isSelvstendigNæringsdrivende(virksomhetToSubmit)) {\n            onSubmit({\n                ...virksomhetToSubmit,\n                næringsinntekt: ensureValidNæringsinntekt(values),\n            });\n        } else {\n            throw new Error('VirksomhetForm: Formvalues is not a valid SelvstendigNæringsdrivende on submit.');\n        }\n    };\n\n    const intl = useIntl();\n    const getText = (key: string, value?: any): string =>\n        intlHelper(intl, `sifForms.selvstendigNæringsdrivende.${key}`, value);\n\n    return (\n        <Form.FormikWrapper\n            initialValues={info ? mapSelvstendigNæringsdrivendeToFormValues(info) : { næringstyper: [] }}\n            onSubmit={onFormikSubmit}\n            renderForm={(formik: FormikProps<SelvstendigNæringsdrivendeFormValues>) => {\n                const { values, setFieldValue } = formik;\n                const { navnPåVirksomheten = 'virksomheten' } = values;\n                const fomDate = ISOStringToDate(values.fom);\n                return (\n                    <Form.Form\n                        includeValidationSummary={true}\n                        onCancel={onCancel}\n                        fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                        <Box padBottom=\"l\">\n                            <Systemtittel tag=\"h1\">{getText('form_title')}</Systemtittel>\n                        </Box>\n                        <Form.CheckboxPanelGroup\n                            name={SelvstendigNæringsdrivendeFormField.næringstyper}\n                            legend={getText('hvilken_type_virksomhet')}\n                            checkboxes={[\n                                {\n                                    value: Næringstype.FISKER,\n                                    label: getText('næringstype_fisker'),\n                                },\n                                {\n                                    value: Næringstype.JORDBRUK,\n                                    label: getText('næringstype_jordbruker'),\n                                },\n                                {\n                                    value: Næringstype.DAGMAMMA,\n                                    label: getText('næringstype_dagmamma'),\n                                },\n                                {\n                                    value: Næringstype.ANNEN,\n                                    label: getText('næringstype_annet'),\n                                },\n                            ]}\n                            validate={validateRequiredList}\n                        />\n\n                        {harFiskerNæringstype(values.næringstyper || []) && (\n                            <Box margin=\"xl\">\n                                <FormikYesOrNoQuestion<SelvstendigNæringsdrivendeFormField>\n                                    name={SelvstendigNæringsdrivendeFormField.fiskerErPåBladB}\n                                    legend={getText('fisker_blad_b')}\n                                    validate={validateYesOrNoIsAnswered}\n                                />\n                            </Box>\n                        )}\n\n                        <Box margin=\"xl\">\n                            <Form.Input\n                                name={SelvstendigNæringsdrivendeFormField.navnPåVirksomheten}\n                                label={getText('hva_heter_virksomheten')}\n                                validate={validateRequiredField}\n                                maxLength={50}\n                            />\n                        </Box>\n\n                        {harFiskerNæringstype(values.næringstyper || []) &&\n                            values.navnPåVirksomheten !== undefined &&\n                            hasValue(navnPåVirksomheten) && (\n                                <Box margin=\"xl\">\n                                    <InfoTilFisker navnPåVirksomheten={values.navnPåVirksomheten} />\n                                </Box>\n                            )}\n\n                        <Box margin=\"xl\">\n                            <Form.YesOrNoQuestion\n                                name={SelvstendigNæringsdrivendeFormField.registrertINorge}\n                                legend={getText('registert_i_norge', { navnPåVirksomheten })}\n                                validate={validateYesOrNoIsAnswered}\n                            />\n                        </Box>\n\n                        {values.registrertINorge === YesOrNo.NO && (\n                            <Box margin=\"xl\">\n                                <Form.CountrySelect\n                                    name={SelvstendigNæringsdrivendeFormField.registrertILand}\n                                    label={getText('registert_i_hvilket_land', { navnPåVirksomheten })}\n                                    validate={validateRequiredField}\n                                    useAlpha3Code={true}\n                                />\n                            </Box>\n                        )}\n\n                        {values.registrertINorge === YesOrNo.YES && (\n                            <Box margin=\"xl\">\n                                <Form.Input\n                                    name={SelvstendigNæringsdrivendeFormField.organisasjonsnummer}\n                                    label={getText('organisasjonsnummer')}\n                                    style={{ maxWidth: '10rem' }}\n                                    maxLength={9}\n                                    validate={(value) =>\n                                        validateOrgNumber(value, values.registrertINorge === YesOrNo.YES)\n                                    }\n                                />\n                            </Box>\n                        )}\n\n                        {(values.registrertINorge === YesOrNo.YES || values.registrertINorge === YesOrNo.NO) && (\n                            <Box margin=\"xl\">\n                                <Form.DateRangePicker\n                                    legend={getText('startdato', { navnPåVirksomheten })}\n                                    showYearSelector={true}\n                                    maxDate={dateToday}\n                                    fromInputProps={{\n                                        label: getText('kalender_fom'),\n                                        name: SelvstendigNæringsdrivendeFormField.fom,\n                                        validate: validateRequiredField,\n                                    }}\n                                    toInputProps={{\n                                        label: getText('kalender_tom'),\n                                        name: SelvstendigNæringsdrivendeFormField.tom,\n                                        disabled: values.erPågående === true,\n                                    }}\n                                />\n                                <Form.Checkbox\n                                    label={getText('kalender_pågående')}\n                                    name={SelvstendigNæringsdrivendeFormField.erPågående}\n                                    afterOnChange={(checked) => {\n                                        if (checked) {\n                                            setFieldValue(SelvstendigNæringsdrivendeFormField.tom, undefined);\n                                        }\n                                    }}\n                                />\n                            </Box>\n                        )}\n\n                        {fomDate && erVirksomhetRegnetSomNyoppstartet(fomDate) && (\n                            <>\n                                <Box margin=\"xl\">\n                                    <Form.Input\n                                        name={SelvstendigNæringsdrivendeFormField.næringsinntekt}\n                                        label={getText('næringsinntekt')}\n                                        type=\"number\"\n                                        maxLength={10}\n                                        max={MAKS_INNTEKT}\n                                        style={{ maxWidth: '10rem' }}\n                                        validate={validateRequiredNumber({ min: 0, max: MAKS_INNTEKT })}\n                                        description={\n                                            <ExpandableInfo title={getText('næringsinntekt_info_title')}>\n                                                {getText('næringsinntekt_info')}\n                                            </ExpandableInfo>\n                                        }\n                                    />\n                                </Box>\n                                <Box margin=\"xl\">\n                                    <Form.YesOrNoQuestion\n                                        name={\n                                            SelvstendigNæringsdrivendeFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene\n                                        }\n                                        legend={getText('har_blitt_yrkesaktiv')}\n                                        validate={validateYesOrNoIsAnswered}\n                                        description={\n                                            <ExpandableInfo title={getText('har_blitt_yrkesaktiv_info_title')}>\n                                                {getText('har_blitt_yrkesaktiv_info')}\n                                            </ExpandableInfo>\n                                        }\n                                    />\n                                </Box>\n                                {values.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene === YesOrNo.YES && (\n                                    <FormBlock margin=\"m\">\n                                        <ResponsivePanel>\n                                            <Form.DatePicker\n                                                name={SelvstendigNæringsdrivendeFormField.oppstartsdato}\n                                                label={getText('har_blitt_yrkesaktiv_dato')}\n                                                showYearSelector={true}\n                                                minDate={date3YearsAgo}\n                                                maxDate={dateToday}\n                                                validate={validateRequiredField}\n                                            />\n                                        </ResponsivePanel>\n                                    </FormBlock>\n                                )}\n                            </>\n                        )}\n                        {fomDate && erVirksomhetRegnetSomNyoppstartet(fomDate) === false && (\n                            <>\n                                <Box margin=\"xl\">\n                                    <Form.YesOrNoQuestion\n                                        name={\n                                            SelvstendigNæringsdrivendeFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår\n                                        }\n                                        legend={getText('varig_endring_spm')}\n                                        validate={validateYesOrNoIsAnswered}\n                                    />\n                                </Box>\n                                {values.hattVarigEndringAvNæringsinntektSiste4Kalenderår === YesOrNo.YES && (\n                                    <>\n                                        <Box margin=\"xl\">\n                                            <Form.DatePicker\n                                                name={\n                                                    SelvstendigNæringsdrivendeFormField.varigEndringINæringsinntekt_dato\n                                                }\n                                                label={getText('varig_endring_dato')}\n                                                validate={validateRequiredField}\n                                                minDate={date4YearsAgo}\n                                                maxDate={dateToday}\n                                            />\n                                        </Box>\n                                        <Box margin=\"xl\">\n                                            <Form.Input\n                                                name={\n                                                    SelvstendigNæringsdrivendeFormField.varigEndringINæringsinntekt_inntektEtterEndring\n                                                }\n                                                label={getText('varig_endring_inntekt')}\n                                                type=\"number\"\n                                                maxLength={10}\n                                                max={MAKS_INNTEKT}\n                                                style={{ maxWidth: '10rem' }}\n                                                validate={validateRequiredNumber({ min: 0, max: MAKS_INNTEKT })}\n                                            />\n                                        </Box>\n                                        <Box margin=\"xl\">\n                                            <Form.Textarea\n                                                name={\n                                                    SelvstendigNæringsdrivendeFormField.varigEndringINæringsinntekt_forklaring\n                                                }\n                                                label={getText('varig_endring_tekst')}\n                                                validate={validateRequiredField}\n                                                maxLength={1000}\n                                            />\n                                        </Box>\n                                    </>\n                                )}\n                            </>\n                        )}\n\n                        {(values.fom || values.registrertINorge === YesOrNo.YES) && (\n                            <>\n                                <Box margin=\"xl\">\n                                    <Form.YesOrNoQuestion\n                                        name={SelvstendigNæringsdrivendeFormField.harRegnskapsfører}\n                                        legend={getText('regnskapsfører_spm')}\n                                        validate={validateYesOrNoIsAnswered}\n                                    />\n                                </Box>\n\n                                {values.harRegnskapsfører === YesOrNo.YES && (\n                                    <FormBlock margin=\"m\">\n                                        <ResponsivePanel>\n                                            <Form.Input\n                                                name={SelvstendigNæringsdrivendeFormField.regnskapsfører_navn}\n                                                label={getText('regnskapsfører_navn')}\n                                                validate={validateRequiredField}\n                                                maxLength={50}\n                                            />\n                                            <Box margin=\"xl\">\n                                                <Form.Input\n                                                    name={SelvstendigNæringsdrivendeFormField.regnskapsfører_telefon}\n                                                    label={getText('regnskapsfører_telefon')}\n                                                    validate={validatePhoneNumber}\n                                                    maxLength={15}\n                                                />\n                                            </Box>\n                                        </ResponsivePanel>\n                                    </FormBlock>\n                                )}\n                            </>\n                        )}\n                        {values.harRegnskapsfører === YesOrNo.YES && (\n                            <Box margin=\"xl\">\n                                <CounsellorPanel>\n                                    {getText('veileder_innhenter_info.1')}\n                                    <br />\n                                    {getText('veileder_innhenter_info.2')}\n                                </CounsellorPanel>\n                            </Box>\n                        )}\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default SelvstendigNæringsdrivendeForm;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { FormikModalFormAndList, FormikValidateFunction, ModalFormAndListLabels } from '@navikt/sif-common-formik';\nimport Form from './SelvstendigNæringsdrivendeForm';\nimport { SelvstendigNæringsdrivende } from './types';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    labels: ModalFormAndListLabels;\n    validate?: FormikValidateFunction;\n    onAfterChange?: (info: SelvstendigNæringsdrivende) => void;\n}\n\nfunction SelvstendigNæringsdrivendeInfoAndDialog<FieldNames>({\n    name,\n    validate,\n    labels,\n}: // onAfterChange,\nProps<FieldNames>) {\n    return (\n        <FormikModalFormAndList<FieldNames, SelvstendigNæringsdrivende>\n            name={name}\n            labels={labels}\n            validate={validate}\n            dialogWidth=\"narrow\"\n            sortFunc={sortItemsByFom}\n            formRenderer={({ onSubmit, onCancel, item }) => (\n                <Form info={item} onSubmit={onSubmit} onCancel={onCancel} />\n            )}\n            listRenderer={() => <span>nonno</span>}\n            // onAfterChange={onAfterChange}\n        />\n    );\n}\n\nexport default SelvstendigNæringsdrivendeInfoAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { validateRequiredList } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { TypedFormikForm, TypedFormikWrapper, YesOrNo } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport Panel from 'nav-frontend-paneler';\nimport { Checkbox } from 'nav-frontend-skjema';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport {\n    isSelvstendigNæringsdrivende,\n    mapFormDataToApiData,\n    Næringstype,\n    SelvstendigNæringsdrivende,\n} from '../../../forms/selvstendig-næringsdrivende';\nimport PageIntro from '../../components/page-intro/PageIntro';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport SelvstendigNæringsdrivendeInfoAndDialog from '../../../forms/selvstendig-næringsdrivende/SelvstendigNæringsdrivendeInfoAndDialog';\nimport SelvstendigNæringsdrivendeForm from '../../../forms/selvstendig-næringsdrivende/SelvstendigNæringsdrivendeForm';\n\nenum FormField {\n    'info' = 'info',\n}\n\nexport const mockVirksomhet: SelvstendigNæringsdrivende = {\n    id: '024782550-1402-01448-04932-71872390929312',\n    næringstyper: [Næringstype.ANNEN, Næringstype.DAGMAMMA],\n    navnPåVirksomheten: 'Gamle greier',\n    registrertINorge: YesOrNo.YES,\n    organisasjonsnummer: '123123123',\n    fom: new Date('2007-02-01T00:00:00.000Z'),\n    erPågående: true,\n    hattVarigEndringAvNæringsinntektSiste4Kalenderår: YesOrNo.YES,\n    varigEndringINæringsinntekt_dato: new Date('2019-12-09T00:00:00.000Z'),\n    varigEndringINæringsinntekt_inntektEtterEndring: 200000,\n    varigEndringINæringsinntekt_forklaring: 'Jeg fikk flere barn',\n    harRegnskapsfører: YesOrNo.YES,\n    regnskapsfører_navn: 'Regnskapsefører Truls',\n    regnskapsfører_telefon: '98219409',\n};\n\ninterface FormValues {\n    [FormField.info]?: SelvstendigNæringsdrivende;\n}\nconst initialValues: FormValues = { info: undefined };\n\nconst SelvstendigNæringsdrivendeExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<SelvstendigNæringsdrivende> | undefined>(\n        undefined\n    );\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const [hideFisker, setHideFisker] = useState<boolean>(false);\n    const [hideRevisor, setHideRevisor] = useState<boolean>(false);\n    const intl = useIntl();\n    return (\n        <>\n            <PageIntro title=\"Selvstendig næringsdrivende\">\n                Skjema som brukes for på registrere informasjon om selvstendig næringsdrivende.\n            </PageIntro>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                                <SelvstendigNæringsdrivendeInfoAndDialog<FormField>\n                                    name={FormField.info}\n                                    validate={validateRequiredList}\n                                    labels={{\n                                        addLabel: 'Legg til',\n                                        listTitle: 'Virksomhet',\n                                        modalTitle: 'Virksomhet',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper width=\"wide\">\n                <Panel border={true}>\n                    <SelvstendigNæringsdrivendeForm\n                        onCancel={() => setSingleFormValues({})}\n                        onSubmit={(values) => setSingleFormValues(values)}\n                    />\n                    <Box margin=\"l\">\n                        <hr />\n                        <Panel style={{ padding: '1rem' }}>\n                            <Box padBottom=\"m\">Spørsmål som kan skjules:</Box>\n                            <Box margin=\"m\">\n                                <Checkbox\n                                    label=\"Fisker på Blad B\"\n                                    checked={hideFisker}\n                                    onChange={(evt) => setHideFisker(evt.currentTarget.checked)}\n                                />\n                            </Box>\n                            <Box margin=\"m\">\n                                <Checkbox\n                                    label=\"Revisor\"\n                                    checked={hideRevisor}\n                                    onChange={(evt) => setHideRevisor(evt.currentTarget.checked)}\n                                />\n                            </Box>\n                        </Panel>\n                    </Box>\n                    <Box margin=\"l\">\n                        <SubmitPreview values={singleFormValues} />\n                    </Box>\n                    <Box margin=\"xl\">\n                        <Undertittel>API-data</Undertittel>\n                        <SubmitPreview\n                            values={\n                                singleFormValues && isSelvstendigNæringsdrivende(singleFormValues)\n                                    ? mapFormDataToApiData(intl.locale, singleFormValues)\n                                    : undefined\n                            }\n                        />\n                    </Box>\n                </Panel>\n            </DialogFormWrapper>\n        </>\n    );\n};\n\nexport default SelvstendigNæringsdrivendeExample;\n","import { formatDateToApiFormat } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { YesOrNo, getCountryName } from '@navikt/sif-common-formik/lib';\nimport { SelvstendigNæringsdrivende, SelvstendigNæringsdrivendeApiData } from './types';\nimport { erVirksomhetRegnetSomNyoppstartet, harFiskerNæringstype } from './utils';\n\nexport const mapFormDataToApiData = (\n    locale: string,\n    info: SelvstendigNæringsdrivende,\n    harBesvartFikserPåBladB?: boolean\n): SelvstendigNæringsdrivendeApiData => {\n    const registrertINorge = info.registrertINorge === YesOrNo.YES;\n    const harRegnskapsfører = info.harRegnskapsfører === YesOrNo.YES;\n\n    const data: SelvstendigNæringsdrivendeApiData = {\n        næringstyper: [...info.næringstyper],\n        navnPåVirksomheten: info.navnPåVirksomheten,\n        registrertINorge,\n        ...(registrertINorge\n            ? {\n                  organisasjonsnummer: info.organisasjonsnummer,\n              }\n            : {\n                  registrertIUtlandet: info.registrertILand\n                      ? {\n                            landkode: info.registrertILand,\n                            landnavn: getCountryName(info.registrertILand, locale),\n                        }\n                      : undefined,\n              }),\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        fraOgMed: formatDateToApiFormat(info.fom),\n        tilOgMed: info.erPågående || info.tom === undefined ? null : formatDateToApiFormat(info.tom),\n        næringsinntekt: info.næringsinntekt,\n        erNyoppstartet: erVirksomhetRegnetSomNyoppstartet(info.fom),\n    };\n\n    if (info.hattVarigEndringAvNæringsinntektSiste4Kalenderår) {\n        const harHatt = info.hattVarigEndringAvNæringsinntektSiste4Kalenderår === YesOrNo.YES;\n        const {\n            varigEndringINæringsinntekt_dato,\n            varigEndringINæringsinntekt_forklaring,\n            varigEndringINæringsinntekt_inntektEtterEndring,\n        } = info;\n        if (\n            harHatt &&\n            varigEndringINæringsinntekt_dato &&\n            varigEndringINæringsinntekt_inntektEtterEndring !== undefined &&\n            varigEndringINæringsinntekt_forklaring\n        ) {\n            data.varigEndring = {\n                dato: formatDateToApiFormat(varigEndringINæringsinntekt_dato),\n                forklaring: varigEndringINæringsinntekt_forklaring,\n                inntektEtterEndring: varigEndringINæringsinntekt_inntektEtterEndring,\n            };\n        }\n    }\n\n    if (harFiskerNæringstype(info.næringstyper) && harBesvartFikserPåBladB !== true) {\n        data.fiskerErPåBladB = info.fiskerErPåBladB === YesOrNo.YES;\n    }\n\n    if (info.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene) {\n        const harBlittAktiv = info.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene === YesOrNo.YES;\n        if (harBlittAktiv && info.oppstartsdato) {\n            data.yrkesaktivSisteTreFerdigliknedeÅrene = {\n                oppstartsdato: formatDateToApiFormat(info.oppstartsdato),\n            };\n        }\n    }\n\n    if (harRegnskapsfører && info.regnskapsfører_navn && info.regnskapsfører_telefon) {\n        data.regnskapsfører = {\n            navn: info.regnskapsfører_navn,\n            telefon: info.regnskapsfører_telefon,\n        };\n    }\n\n    return data;\n};\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport DialogForms from '../examples/dialog-forms/DialogForms';\nimport VirksomhetExample from '../examples/virksomhet-example/VirksomhetExample';\nimport Intro from '../Intro';\nimport Texts from '../examples/texts/Texts';\nimport SelvstendigNæringsdrivendeExample from '../examples/selvstendig-næringsdrivende-example/SelvstendigNæringsdrivendeExample';\n\nexport interface RouteConfig {\n    path: string;\n    title: string;\n    renderContent: () => React.ReactNode;\n}\n\nexport const routes: RouteConfig[] = [\n    {\n        path: 'frontpage',\n        title: 'Forside',\n        renderContent: () => <Intro />,\n    },\n    {\n        path: 'dialog-forms',\n        title: 'Dialogskjema',\n        renderContent: () => <DialogForms />,\n    },\n    {\n        path: 'selvstendig',\n        title: 'Selvstendig næringsdrivende',\n        renderContent: () => <SelvstendigNæringsdrivendeExample />,\n    },\n    {\n        path: 'næring',\n        title: 'Næringsvirksomhet',\n        renderContent: () => <VirksomhetExample />,\n    },\n    {\n        path: 'texts',\n        title: 'Tekster',\n        renderContent: () => <Texts />,\n    },\n];\n\nexport const isActiveRoute = (path: string, pathname: string): boolean => {\n    return pathname.indexOf(path) >= 0;\n};\n\nexport const getRouteConfig = (pathname: string): RouteConfig | undefined => {\n    return routes.find((f) => isActiveRoute(f.path, pathname));\n};\n","import * as React from 'react';\nimport { Button, Menu, MenuItem, Wrapper } from 'react-aria-menubutton';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { NedChevron } from 'nav-frontend-chevron';\nimport { isActiveRoute, RouteConfig, routes } from '../../config/routeConfig';\nimport './headerMenu.less';\n\nconst renderMenuItem = (route: RouteConfig) => {\n    return (\n        <li key={route.path}>\n            <MenuItem className=\"headerMenu__menu__item\">\n                <div data-page={route.path}>{route.title}</div>\n            </MenuItem>\n        </li>\n    );\n};\n\ntype Props = RouteComponentProps;\n\nconst HeaderMenu = ({ history }: Props) => {\n    const {\n        location: { pathname },\n    } = history;\n\n    const toggle = (element: any) => {\n        const r = element.props ? element.props['data-page'] : undefined;\n        if (r) {\n            history.push(r);\n        }\n    };\n    const route = routes.find((r) => isActiveRoute(r.path, pathname)) || routes[0];\n    return (\n        <div className=\"headerMenu\">\n            <Wrapper className=\"headerMenu__wrapper\" onSelection={toggle}>\n                <Button className=\"headerMenu__button\">\n                    <div className=\"headerMenu__button__label\">{route ? route.title : 'Velg'}</div>\n                    <div className=\"headerMenu__button__chevron\">\n                        <NedChevron />\n                    </div>\n                </Button>\n                <Menu className=\"headerMenu__menu\">\n                    <ul>{routes.map(renderMenuItem)}</ul>\n                </Menu>\n            </Wrapper>\n        </div>\n    );\n};\nexport default withRouter(HeaderMenu);\n","import React from 'react';\nimport { Link, withRouter, RouteComponentProps } from 'react-router-dom';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport 'nav-frontend-lenker-style';\nimport { isActiveRoute, routes } from '../../config/routeConfig';\n\nconst lenkeBem = bemUtils('lenke');\n\nconst LeftMenu = ({\n    history: {\n        location: { pathname },\n    },\n}: RouteComponentProps) => {\n    return (\n        <div className=\"leftMenu\">\n            {routes.map((route) => (\n                <Link\n                    key={route.path}\n                    to={route.path}\n                    className={lenkeBem.classNames(\n                        lenkeBem.block,\n                        lenkeBem.modifierConditional('active', isActiveRoute(route.path, pathname))\n                    )}>\n                    {route.title}\n                </Link>\n            ))}\n        </div>\n    );\n};\n\nexport default withRouter(LeftMenu);\n","import React from 'react';\nimport MediaQuery from 'react-responsive';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport HeaderMenu from './components/header-menu/HeaderMenu';\nimport LeftMenu from './components/left-menu/LeftMenu';\nimport { getRouteConfig } from './config/routeConfig';\nimport Intro from './Intro';\n\ntype Props = RouteComponentProps;\n\nconst DevContent = ({\n    history: {\n        location: { pathname },\n    },\n}: Props) => {\n    const routeConfig = getRouteConfig(pathname);\n    return (\n        <>\n            <MediaQuery minWidth={1072}>\n                <aside className=\"asideContent\">\n                    <LeftMenu />\n                </aside>\n                <article style={{ maxWidth: '1000px' }} className=\"mainContent\">\n                    {routeConfig ? routeConfig.renderContent() : <Intro />}\n                </article>\n            </MediaQuery>\n            <MediaQuery maxWidth={1071}>\n                <aside className=\"asideContentTop\">\n                    <HeaderMenu />\n                </aside>\n                <article style={{ maxWidth: '1000px' }} className=\"mainContent\">\n                    {routeConfig ? routeConfig.renderContent() : <Intro />}\n                </article>\n            </MediaQuery>\n        </>\n    );\n};\n\nexport default withRouter(DevContent);\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { HashRouter } from 'react-router-dom';\nimport LanguageToggle from '@navikt/sif-common-core/lib/components/language-toggle/LanguageToggle';\nimport { Locale } from '@navikt/sif-common-core/lib/types/Locale';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport NAVLogo from './components/svg/NAVLogo';\nimport DevContent from './DevContent';\nimport './styles/dev.less';\n\ninterface Props {\n    onChangeLocale: (locale: Locale) => void;\n}\n\nconst DevPage = ({ onChangeLocale }: Props) => {\n    const intl = useIntl();\n    return (\n        <main className=\"devPage\">\n            <header className=\"header\">\n                <span className=\"navLogo\">\n                    <NAVLogo />\n                </span>\n                <span className=\"header__title\">\n                    <Systemtittel>Sykdom i familien - sif-common-forms</Systemtittel>\n                </span>\n                <span className=\"languageToggler\">\n                    <LanguageToggle toggle={onChangeLocale} locale={intl.locale as Locale} />\n                </span>\n            </header>\n            <div className=\"contentWrapper\">\n                <HashRouter>\n                    <DevContent />\n                </HashRouter>\n            </div>\n        </main>\n    );\n};\n\nexport default DevPage;\n","import * as React from 'react';\nimport '@formatjs/intl-pluralrules//locale-data/nb';\nimport '@formatjs/intl-pluralrules//locale-data/nn';\nimport '@formatjs/intl-pluralrules/polyfill';\nimport { Locale } from '@navikt/sif-common-core/lib/types/Locale';\nimport { getLocaleFromSessionStorage, setLocaleInSessionStorage } from '@navikt/sif-common-core/lib/utils/localeUtils';\nimport 'nav-frontend-skjema-style';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport AppIntlProvider from './dev/components/app-intl-provider/AppIntlProvider';\nimport DevPage from './dev/DevPage';\nimport '@navikt/sif-common-core/lib/styles/globalStyles.less';\n\nconst localeFromSessionStorage = getLocaleFromSessionStorage();\n\nconst App = () => {\n    const [locale, setLocale] = React.useState(localeFromSessionStorage || 'nb');\n    return (\n        <Normaltekst tag=\"div\">\n            <AppIntlProvider locale={locale as Locale}>\n                <DevPage\n                    onChangeLocale={(l: Locale) => {\n                        setLocaleInSessionStorage(l);\n                        setLocale(l);\n                    }}\n                />\n            </AppIntlProvider>\n        </Normaltekst>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Modal from 'react-modal';\nimport App from './App';\n\nModal.setAppElement('#root');\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}