{"version":3,"sources":["dev/components/app-intl-provider/messages.ts","dev/components/app-intl-provider/AppIntlProvider.tsx","dev/components/svg/NAVLogo.tsx","forms/bosted-utland/BostedUtlandForm.tsx","dev/components/page-intro/PageIntro.tsx","forms/bosted-utland/types.ts","forms/bosted-utland/BostedUtlandList.tsx","forms/bosted-utland/BostedUtlandListAndDialog.tsx","dev/components/submit-preview/SubmitPreview.tsx","dev/examples/dialog-forms/BostedUtlandExample.tsx","forms/ferieuttak/FerieuttakForm.tsx","forms/ferieuttak/types.ts","forms/ferieuttak/FerieuttakList.tsx","forms/ferieuttak/FerieuttakListAndDialog.tsx","dev/examples/dialog-forms/FerieuttakExample.tsx","forms/fosterbarn/FosterbarnForm.tsx","forms/fosterbarn/types.ts","forms/fosterbarn/FosterbarnList.tsx","forms/fosterbarn/FosterbarnListAndDialog.tsx","dev/examples/dialog-forms/FosterbarnExample.tsx","forms/utenlandsopphold/types.ts","forms/tidsperiode/TidsperiodeForm.tsx","forms/tidsperiode/types.ts","forms/tidsperiode/TidsperiodeList.tsx","forms/tidsperiode/TidsperiodeListAndDialog.tsx","forms/utenlandsopphold/UtenlandsoppholdForm.tsx","forms/utenlandsopphold/UtenlandsoppholdList.tsx","forms/utenlandsopphold/UtenlandsoppholdListAndDialog.tsx","dev/examples/dialog-forms/UtenlandsoppholdExample.tsx","forms/fravær/fraværValidationUtils.ts","forms/fravær/fraværUtilities.ts","forms/fravær/FraværPeriodeForm.tsx","forms/fravær/types.ts","forms/fravær/FraværPerioderList.tsx","forms/fravær/FraværPerioderListAndDialog.tsx","forms/fravær/FraværDagForm.tsx","forms/fravær/FraværTimerSelect.tsx","forms/fravær/FraværDagerList.tsx","forms/fravær/FraværDagerListAndDialog.tsx","dev/examples/dialog-forms/FraværExample.tsx","forms/frilans/types.ts","dev/examples/dialog-forms/DialogForms.tsx","forms/frilans/FrilansoppdragForm.tsx","forms/frilans/FrilansoppdragList.tsx","forms/frilans/FrilansoppdragListAndDialog.tsx","dev/examples/frilans-example/FrilansExample.tsx","forms/frilans/mapFrilansOppdragToApiData.ts","forms/virksomhet/types.ts","forms/virksomhet/virksomhetUtils.ts","forms/virksomhet/mapVirksomhetToApiData.ts","forms/virksomhet/i18n/virksomhetForm.texts.tsx","forms/virksomhet/parts/InfoTilFisker.tsx","forms/virksomhet/VirksomhetForm.tsx","forms/virksomhet/VirksomhetList.tsx","forms/virksomhet/VirksomhetListAndDialog.tsx","dev/examples/virksomhet-example/VirksomhetExample.tsx","dev/Intro.tsx","dev/config/routeConfig.tsx","dev/components/header-menu/HeaderMenu.tsx","dev/components/left-menu/LeftMenu.tsx","dev/DevContent.tsx","dev/DevPage.tsx","App.tsx","index.tsx"],"names":["commonNb","require","commonNn","validationNb","validationNn","ferieMessagesNb","ferieMessagesNn","utenlandsoppholdNb","utenlandsoppholdNn","bostedUtlandNb","bostedUtlandNn","fraværNb","fraværNn","appMessages","nb","nn","AppIntlProvider","locale","onError","children","messages","NAVLogo","BostedUtlandFormFields","props","className","width","viewBox","fill","fillRule","d","PageIntro","title","padBottom","margin","tag","Form","getTypedFormComponents","BostedUtlandForm","maxDate","minDate","bosted","onSubmit","onCancel","intl","useIntl","FormikWrapper","initialValues","formValues","fom","landkode","tom","undefined","isValidBostedUtland","Error","renderForm","formik","values","fomDateLimits","minDato","maksDato","tomDateLimits","fieldErrorRenderer","error","commonFieldErrorRenderer","id","DateIntervalPicker","legend","intlHelper","fromDatepickerProps","name","label","fullscreenOverlay","dateLimitations","validate","date","dateRangeValidation","validateFromDate","toDatepickerProps","validateToDate","CountrySelect","validateRequiredSelect","bem","bemUtils","BostedUtlandList","bosteder","onDelete","onEdit","getItemId","opphold","getItemTitle","getCountryName","labelRenderer","navn","element","onClick","prettifyDateExtended","items","BostedUtlandListAndDialog","labels","dialogWidth","sortFunc","sortItemsByFom","formRenderer","item","listRenderer","SubmitPreview","FormField","style","borderTop","paddingTop","padding","fontSize","JSON","stringify","FerieuttakFormFields","FormikExample","useState","singleFormValues","setSingleFormValues","listFormValues","setListFormValues","border","includeButtons","submitButtonLabel","date1YearAgo","date1YearFromNow","validateRequiredList","addLabel","listTitle","modalTitle","emptyListText","console","log","defaultLabels","fromDate","toDate","intervalTitle","okButton","cancelButton","FerieuttakForm","ferieuttak","formLabels","onChange","setTimeout","validateField","FerieuttakList","getDateTitleString","uttak","filter","FerieuttakListAndDialog","FosterbarnFormField","ferie","defaultText","form_etternavn_label","form_fornavn_label","form_fødselsnummer_label","FosterbarnForm","fosterbarn","fornavn","etternavn","fødselsnummer","text","includeName","txt","hasValue","isFosterbarn","Input","validateFødselsnummer","inputMode","maxLength","columns","validateRequiredField","FosterbarnList","getBarnTitleString","barn","paddingRight","formatName","liste_legg_til_knapp","liste_tittel","modal_tittel","FosterbarnListAndDialog","texts","info","liste_tom_liste_tekst","UtenlandsoppholdÅrsak","FosterbarnExample","TidsperiodeFormFields","TidsperiodeForm","tidsperiode","inlineLabels","TidsperiodeList","TidsperiodeListAndDialog","UtenlandsoppholdFormFields","formTitle","defaultFormValues","erBarnetInnlagt","YesOrNo","UNANSWERED","barnInnlagtPerioder","årsak","UtenlandsoppholdForm","utenlandsopphold","countryIsMemberOfEøsOrEfta","fromDateLimitations","toDateLimitations","includeInnlagtPerioderQuestion","YES","includeInnlagtQuestion","showÅrsakQuestion","length","areAllQuestionsAnswered","YesOrNoQuestion","land","validateYesOrNoIsAnswered","RadioPanelGroup","radios","value","INNLAGT_DEKKET_NORGE","INNLAGT_DEKKET_ANNET_LAND","ANNET","UtenlandsoppholdList","UtenlandsoppholdListAndDialog","FraværFieldValidationErrors","UtenlandsoppholdExample","Weekday","validateAll","validations","map","reduce","prev","curr","fraværDagToFraværDateRange","fraværDag","from","dato","to","validateNoCollisions","fraværDager","fraværPerioder","dates","ranges","some","range","moment","isSameOrAfter","isSameOrBefore","createFieldValidationError","dager_med_fravær_overlapper_perioder","FraværPeriodeFormFields","getWeekdayName","getDay","sunday","monday","tuesday","wednesday","thursday","friday","saturday","validateNotHelgedag","maybeDate","er_helg","timeText","timer","toString","includes","dateRangeToFomTom","dateRange","FraværPeriodeForm","fraværPeriode","dateRangesToDisable","helgedagerIkkeTillat","helgedagerIkkeTillatt","ugyldigeTidsperioder","FraværPerioderList","FraværPerioderListAndDialog","FraværDagFormFields","fraværPeriodeFormLabels","fraværPeriodeA","fraværPeriodeB","FraværTimerSelect","maksTid","FraværDagForm","Select","bredde","newOptionElement","t","key","replace","go","jsxList","tid","getOptionsList","antallArbeidstimer","timerFravær","FraværDagFormView","timerArbeidsdag","maxValue","datepickerProps","DatePicker","fravær_timer_mer_enn_arbeidstimer","FraværDagerList","getFraværDagListItemTitle","FraværDagerListAndDialog","fraværDagFormLabels","fraværDagA","fraværDagB","FrilansoppdragFormField","perioder","dager","FraværExample","fraværPeriodeSingleFormValues","setFraværPeriodeSingleFormValues","fraværDagSingleFormValues","setFraværDagSingleFormValues","dateToday","tabRoutes","path","renderContent","BostedUtlandExample","FerieuttakExample","DialogForms","setPath","activeRoute","find","r","evt","idx","tabs","active","isFrilansoppdrag","oppdrag","arbeidsgiverNavn","erPågående","FrilansoppdragForm","setFieldValue","includeValidationSummary","showYearSelector","disabled","Checkbox","afterOnChange","checked","FrilansoppdragList","o","FrilansoppdragListAndDialog","mapFrilansOppdragToApiData","frilansoppdrag","arbeidsgivernavn","fra_og_med","formatDateToApiFormat","til_og_med","er_pagaende","Næringstype","VirksomhetFormField","FrilansExample","harFiskerNæringstype","næringstyper","n","FISKER","mapVirksomhetToVirksomhetApiData","virksomhet","harBesvartFikserPåBladB","registrertINorge","harRegnskapsfører","data","navnPåVirksomheten","organisasjonsnummer","registrertIUtlandet","registrertILand","landnavn","fraOgMed","tilOgMed","næringsinntekt","hattVarigEndringAvNæringsinntektSiste4Kalenderår","harHatt","varigEndringINæringsinntekt_dato","varigEndringINæringsinntekt_forklaring","varigEndringINæringsinntekt_inntektEtterEndring","varigEndring","forklaring","inntektEtterEndring","fiskerErPåBladB","harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene","oppstartsdato","yrkesaktivSisteTreFerdigliknedeÅrene","regnskapsfører","regnskapsfører_navn","telefon","regnskapsfører_telefon","harRevisor","revisor","revisor_navn","revisor_telefon","kanInnhenteOpplysninger","kanInnhenteOpplsyningerFraRevisor","VirksomhetTextNB","næringstype_fisker","næringstype_jordbruker","næringstype_dagmamma","næringstype_annet","form_title","hvilken_type_virksomhet","hva_heter_virksomheten","fisker_blad_b","veielder_fisker","registert_i_norge","registert_i_hvilket_land","startdato","kalender_fom","kalender_tom","kalender_pågående","næringsinntekt_info","næringsinntekt_info_title","har_blitt_yrkesaktiv","har_blitt_yrkesaktiv_info_title","har_blitt_yrkesaktiv_info","har_blitt_yrkesaktiv_dato","varig_endring_spm","varig_endring_dato","varig_endring_inntekt","varig_endring_tekst","regnskapsfører_spm","revisor_spm","revisor_fullmakt","veileder_innhenter_info_html","InfoTilFisker","navnPåVirksomhet","ensureValidNæringsinntekt","isAfter","date4YearsAgo","visNæringsinntekt","VirksomhetForm","hideFormFields","hideFiskerPåBladB","CheckboxPanelGroup","checkboxes","JORDBRUK","DAGMAMMA","ANNEN","NO","useAlpha3Code","maxWidth","validateOrgNumber","type","max","validateRequiredNumber","min","description","date3YearsAgo","Textarea","validatePhoneNumber","VirksomhetList","virksomheter","næring","VirksomhetListAndDialog","onAfterChange","Date","VirksomhetExample","hideFisker","setHideFisker","currentTarget","Intro","routes","isActiveRoute","pathname","indexOf","renderMenuItem","route","data-page","withRouter","history","location","onSelection","push","lenkeBem","classNames","block","modifierConditional","routeConfig","f","getRouteConfig","minWidth","DevPage","onChangeLocale","toggle","localeFromSessionStorage","getLocaleFromSessionStorage","App","React","setLocale","l","setLocaleInSessionStorage","Modal","setAppElement","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2a53e155.chunk.js","sourcesContent":["const commonNb = require('@navikt/sif-common-core/lib/i18n/common.nb.json');\nconst commonNn = require('@navikt/sif-common-core/lib/i18n/common.nn.json');\nconst validationNb = require('@navikt/sif-common-core/lib/i18n/validationErrors.nb.json');\nconst validationNn = require('@navikt/sif-common-core/lib/i18n/validationErrors.nn.json');\n\nconst ferieMessagesNb = require('../../../forms/ferieuttak/ferieuttak.nb.json');\nconst ferieMessagesNn = require('../../../forms/ferieuttak/ferieuttak.nn.json');\nconst utenlandsoppholdNb = require('../../../forms/utenlandsopphold/utenlandsopphold.nb.json');\nconst utenlandsoppholdNn = require('../../../forms/utenlandsopphold/utenlandsopphold.nn.json');\nconst bostedUtlandNb = require('../../../forms/bosted-utland/bostedUtland.nb.json');\nconst bostedUtlandNn = require('../../../forms/bosted-utland/bostedUtland.nn.json');\nconst fraværNb = require('../../../forms/fravær/fravær.nb.json');\nconst fraværNn = require('../../../forms/fravær/fravær.nn.json');\n\nconst bokmålstekster = {\n    ...ferieMessagesNb,\n    ...utenlandsoppholdNb,\n    ...bostedUtlandNb,\n    ...commonNb,\n    ...validationNb,\n    ...fraværNb\n};\nconst nynorsktekster = {\n    ...ferieMessagesNn,\n    ...utenlandsoppholdNn,\n    ...bostedUtlandNn,\n    ...commonNn,\n    ...validationNn,\n    ...fraværNn\n};\n\nexport const appMessages = {\n    nb: bokmålstekster,\n    nn: nynorsktekster\n};\n","import * as React from 'react';\nimport { IntlProvider } from 'react-intl';\nimport '@formatjs/intl-pluralrules/dist/locale-data/en';\nimport '@formatjs/intl-pluralrules/dist/locale-data/nb';\nimport '@formatjs/intl-pluralrules/dist/locale-data/nn';\nimport '@formatjs/intl-pluralrules/polyfill';\nimport { Locale } from '@navikt/sif-common-core/lib/types/Locale';\nimport { appMessages } from './messages';\n\nexport interface IntlProviderProps {\n    locale: Locale;\n}\nexport interface IntlProviderProps {\n    locale: Locale;\n    onError?: (error: any) => void;\n}\n\nconst AppIntlProvider: React.FunctionComponent<IntlProviderProps> = ({ locale, onError, children }) => {\n    const messages = locale === 'nb' ? appMessages.nb : appMessages.nn;\n    return (\n        <IntlProvider locale={locale} messages={messages} onError={onError}>\n            {children}\n        </IntlProvider>\n    );\n};\n\nexport default AppIntlProvider;\n","import React from 'react';\n\nfunction NAVLogo(props) {\n    return (\n        <svg className=\"prefix__navLogo\" width={90} viewBox=\"0 0 269 169\" {...props}>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <path\n                    fill=\"#C30000\"\n                    d=\"M125.31 168.942c-46.642 0-84.46-37.817-84.46-84.465C40.85 37.824 78.667 0 125.31 0c46.657 0 84.48 37.824 84.48 84.477 0 46.648-37.823 84.465-84.48 84.465zM0 121.359l17.265-42.73h16.589l-17.243 42.73zm213.044 0l17.044-42.73h9.044l-17.043 42.73zM246.564 121.359l17.04-42.73h4.803l-17.043 42.731z\"\n                />\n                <path\n                    fill=\"#FEFEFE\"\n                    d=\"M197.36 78.63h-15.016s-1.035 0-1.4.914l-8.31 25.439-8.304-25.44c-.366-.913-1.407-.913-1.407-.913h-28.872c-.625 0-1.149.522-1.149 1.143v8.639c0-6.853-7.292-9.782-11.562-9.782-9.562 0-15.963 6.298-17.956 15.873-.108-6.352-.636-8.628-2.347-10.96-.786-1.141-1.922-2.101-3.159-2.895-2.547-1.492-4.834-2.018-9.749-2.018h-5.77s-1.044 0-1.412.914l-5.25 13.013V79.773c0-.621-.52-1.143-1.145-1.143H61.198s-1.03 0-1.406.914l-5.459 13.53s-.545 1.354.701 1.354h5.133v25.784c0 .64.504 1.147 1.147 1.147h13.238c.624 0 1.144-.507 1.144-1.147V94.428h5.16c2.961 0 3.588.08 4.74.618.694.262 1.32.792 1.66 1.403.698 1.314.873 2.892.873 7.545v16.218c0 .64.514 1.147 1.15 1.147h12.687s1.434 0 2.001-1.416l2.812-6.95c3.74 5.237 9.893 8.366 17.541 8.366h1.671s1.443 0 2.014-1.416l4.897-12.128v12.397c0 .64.524 1.147 1.15 1.147h12.951s1.43 0 2.003-1.416c0 0 5.18-12.861 5.2-12.958h.008c.2-1.07-1.153-1.07-1.153-1.07h-4.623V83.847l14.545 36.096c.568 1.416 2 1.416 2 1.416h15.301s1.44 0 2.008-1.416l16.125-39.93c.558-1.383-1.057-1.383-1.057-1.383zm-64.458 27.285h-8.7c-3.463 0-6.28-2.804-6.28-6.271 0-3.461 2.817-6.283 6.28-6.283h2.433c3.454 0 6.267 2.822 6.267 6.283v6.27z\"\n                />\n            </g>\n        </svg>\n    );\n}\n\nexport default NAVLogo;\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport dateRangeValidation from '@navikt/sif-common-core/lib/validation/dateRangeValidation';\nimport { validateRequiredSelect } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { BostedUtland, isValidBostedUtland } from './types';\n\nexport interface BostedUtlandFormLabels {\n    tittel: string;\n}\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    bosted?: BostedUtland;\n    onSubmit: (values: BostedUtland) => void;\n    onCancel: () => void;\n}\n\nenum BostedUtlandFormFields {\n    fom = 'fom',\n    tom = 'tom',\n    landkode = 'landkode',\n}\n\ntype FormValues = Partial<BostedUtland>;\n\nconst Form = getTypedFormComponents<BostedUtlandFormFields, FormValues>();\n\nconst BostedUtlandForm = ({ maxDate, minDate, bosted, onSubmit, onCancel }: Props) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: Partial<BostedUtland>) => {\n        if (isValidBostedUtland(formValues)) {\n            onSubmit(formValues);\n        } else {\n            throw new Error('BostedUtlandForm: Formvalues is not a valid BostedUtland on submit.');\n        }\n    };\n\n    return (\n        <Form.FormikWrapper\n            initialValues={bosted || {}}\n            onSubmit={onFormikSubmit}\n            renderForm={(formik) => {\n                const { values } = formik;\n\n                const fomDateLimits = {\n                    minDato: minDate,\n                    maksDato: values.tom || maxDate,\n                };\n                const tomDateLimits = {\n                    minDato: values.fom || minDate,\n                    maksDato: maxDate,\n                };\n                return (\n                    <Form.Form\n                        onCancel={onCancel}\n                        fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                        <Systemtittel tag=\"h1\">\n                            <FormattedMessage id=\"bostedUtland.form.tittel\" />\n                        </Systemtittel>\n\n                        <FormBlock>\n                            <Form.DateIntervalPicker\n                                legend={intlHelper(intl, 'bostedUtland.form.tidsperiode.spm')}\n                                fromDatepickerProps={{\n                                    name: BostedUtlandFormFields.fom,\n                                    label: intlHelper(intl, 'bostedUtland.form.tidsperiode.fraDato'),\n                                    fullscreenOverlay: true,\n                                    dateLimitations: fomDateLimits,\n                                    validate: (date: Date) =>\n                                        dateRangeValidation.validateFromDate(\n                                            date,\n                                            fomDateLimits.minDato,\n                                            fomDateLimits.maksDato,\n                                            values.tom\n                                        ),\n                                }}\n                                toDatepickerProps={{\n                                    name: BostedUtlandFormFields.tom,\n                                    label: intlHelper(intl, 'bostedUtland.form.tidsperiode.tilDato'),\n                                    fullscreenOverlay: true,\n                                    dateLimitations: tomDateLimits,\n                                    validate: (date: Date) =>\n                                        dateRangeValidation.validateToDate(\n                                            date,\n                                            tomDateLimits.minDato,\n                                            tomDateLimits.maksDato,\n                                            values.fom\n                                        ),\n                                }}\n                            />\n                        </FormBlock>\n                        <FormBlock>\n                            <Form.CountrySelect\n                                name={BostedUtlandFormFields.landkode}\n                                label={intlHelper(intl, 'bostedUtland.form.land.spm')}\n                                validate={validateRequiredSelect}\n                            />\n                        </FormBlock>\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default BostedUtlandForm;\n","import React from 'react';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { Ingress, Undertittel } from 'nav-frontend-typografi';\n\ninterface Props {\n    title: string;\n    children: React.ReactNode;\n}\n\nconst PageIntro = ({ title, children }: Props) => (\n    <>\n        <Box padBottom=\"xl\" margin=\"m\">\n            <Box padBottom={children ? 'm' : 'none'}>\n                <Undertittel>{title}</Undertittel>\n            </Box>\n            {children && <Ingress tag=\"div\">{children}</Ingress>}\n        </Box>\n    </>\n);\n\nexport default PageIntro;\n","export interface BostedUtland {\n    id?: string;\n    fom: Date;\n    tom: Date;\n    landkode: string;\n}\n\nexport const isValidBostedUtland = (bosted: Partial<BostedUtland>): bosted is BostedUtland => {\n    const { fom, landkode, tom } = bosted;\n    return fom !== undefined && landkode !== undefined && tom !== undefined;\n};\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { getCountryName } from '@navikt/sif-common-formik';\nimport { BostedUtland } from './types';\nimport './bostedUtlandList.less';\n\ninterface Props {\n    bosteder: BostedUtland[];\n    onEdit?: (opphold: BostedUtland) => void;\n    onDelete?: (opphold: BostedUtland) => void;\n}\n\nconst bem = bemUtils('bostedUtlandList');\n\nconst BostedUtlandList = ({ bosteder, onDelete, onEdit }: Props) => {\n    const intl = useIntl();\n    const renderBostedUtlandLabel = (opphold: BostedUtland): React.ReactNode => {\n        const navn = getCountryName(opphold.landkode, intl.locale);\n        return (\n            <div className={bem.element('label')}>\n                <span className={bem.element('land')}>\n                    {onEdit && <ActionLink onClick={() => onEdit(opphold)}>{navn}</ActionLink>}\n                    {!onEdit && <span>{navn}</span>}\n                </span>\n                <span className={bem.element('dato')}>\n                    {prettifyDateExtended(opphold.fom)} - {prettifyDateExtended(opphold.tom)}\n                </span>\n            </div>\n        );\n    };\n\n    return (\n        <ItemList<BostedUtland>\n            getItemId={(opphold) => opphold.id}\n            getItemTitle={(opphold) => getCountryName(opphold.landkode, intl.locale)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderBostedUtlandLabel}\n            items={bosteder}\n        />\n    );\n};\n\nexport default BostedUtlandList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList, FormikValidateFunction, ModalFormAndListLabels\n} from '@navikt/sif-common-formik';\nimport BostedUtlandForm from './BostedUtlandForm';\nimport BostedUtlandListe from './BostedUtlandList';\nimport { BostedUtland } from './types';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    validate?: FormikValidateFunction;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction BostedUtlandListAndDialog<FieldNames>({ name, minDate, maxDate, validate, labels }: Props<FieldNames>) {\n    return (\n        <FormikModalFormAndList<FieldNames, BostedUtland>\n            name={name}\n            labels={labels}\n            validate={validate}\n            dialogWidth=\"narrow\"\n            sortFunc={sortItemsByFom}\n            formRenderer={({ onSubmit, onCancel, item }) => (\n                <BostedUtlandForm\n                    bosted={item}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    onSubmit={onSubmit}\n                    onCancel={onCancel}\n                />\n            )}\n            listRenderer={({ items, onEdit, onDelete }) => (\n                <BostedUtlandListe bosteder={items} onEdit={onEdit} onDelete={onDelete} />\n            )}\n        />\n    );\n}\n\nexport default BostedUtlandListAndDialog;\n","import React from 'react';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport Panel from 'nav-frontend-paneler';\n\ninterface Props {\n    values?: {};\n}\n\nfunction SubmitPreview<FormValues>({ values }: Props) {\n    return (\n        <Box margin=\"xl\">\n            <div style={{ borderTop: '1px dashed #59514B', paddingTop: '1rem', margin: '0 -1rem' }}>\n                <Box margin=\"m\">\n                    {values && (\n                        <Panel style={{ padding: '1rem' }}>\n                            <pre style={{ margin: 0, fontSize: '.8rem' }}>{JSON.stringify(values, null, 2)}</pre>\n                        </Panel>\n                    )}\n                    {values === undefined && <Panel style={{ padding: '1rem' }}>Ingen data</Panel>}\n                </Box>\n            </div>\n        </Box>\n    );\n}\n\nexport default SubmitPreview;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { date1YearAgo, date1YearFromNow } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { validateRequiredList } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport BostedUtlandForm from '../../../forms/bosted-utland/BostedUtlandForm';\nimport BostedUtlandListAndDialog from '../../../forms/bosted-utland/BostedUtlandListAndDialog';\nimport { BostedUtland } from '../../../forms/bosted-utland/types';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\n\nenum FormField {\n    'bosted' = 'bosted',\n}\n\ninterface FormValues {\n    [FormField.bosted]: BostedUtland[];\n}\nconst initialValues: FormValues = { bosted: [] };\n\nconst FormikExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<BostedUtland> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                                <BostedUtlandListAndDialog<FormField>\n                                    name={FormField.bosted}\n                                    minDate={date1YearAgo}\n                                    maxDate={date1YearFromNow}\n                                    validate={validateRequiredList}\n                                    labels={{\n                                        addLabel: 'Legg til bosted',\n                                        listTitle: 'Registrerte bosteder',\n                                        modalTitle: 'Bosted',\n                                        emptyListText: 'Ingen bosteder er lagt til',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <BostedUtlandForm\n                        minDate={date1YearAgo}\n                        maxDate={date1YearFromNow}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                    />\n                </Panel>\n                <SubmitPreview values={singleFormValues} />\n            </DialogFormWrapper>\n        </>\n    );\n};\n\nexport default FormikExample;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport dateRangeValidation from '@navikt/sif-common-core/lib/validation/dateRangeValidation';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { Ferieuttak, isFerieuttak } from './types';\n\nexport interface FerieuttakFormLabels {\n    title: string;\n    fromDate: string;\n    toDate: string;\n    intervalTitle: string;\n    okButton: string;\n    cancelButton: string;\n}\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    ferieuttak?: Partial<Ferieuttak>;\n    labels?: Partial<FerieuttakFormLabels>;\n    onSubmit: (values: Ferieuttak) => void;\n    onCancel: () => void;\n}\n\nconst defaultLabels: FerieuttakFormLabels = {\n    title: 'Registrer uttak av ferie',\n    fromDate: 'Fra og med',\n    toDate: 'Til og med',\n    intervalTitle: 'Velg tidsrom',\n    okButton: 'Ok',\n    cancelButton: 'Avbryt',\n};\n\nenum FerieuttakFormFields {\n    tom = 'tom',\n    fom = 'fom',\n}\n\ntype FormValues = Partial<Ferieuttak>;\n\nconst Form = getTypedFormComponents<FerieuttakFormFields, FormValues>();\n\nconst FerieuttakForm = ({\n    maxDate,\n    minDate,\n    labels,\n    ferieuttak: initialValues = { fom: undefined, tom: undefined },\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n    const onFormikSubmit = (formValues: FormValues) => {\n        if (isFerieuttak(formValues)) {\n            onSubmit(formValues);\n        } else {\n            throw new Error('FerieuttakForm: Formvalues is not a valid Ferieuttak on submit.');\n        }\n    };\n\n    const formLabels: FerieuttakFormLabels = { ...defaultLabels, ...labels };\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={initialValues}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => (\n                    <Form.Form\n                        onCancel={onCancel}\n                        fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                        <Systemtittel tag=\"h1\">{formLabels.title}</Systemtittel>\n                        <FormBlock>\n                            <Form.DateIntervalPicker\n                                legend={formLabels.intervalTitle}\n                                fromDatepickerProps={{\n                                    label: formLabels.fromDate,\n                                    name: FerieuttakFormFields.fom,\n                                    fullscreenOverlay: true,\n                                    dateLimitations: {\n                                        minDato: minDate,\n                                        maksDato: maxDate || formik.values.tom,\n                                    },\n                                    validate: (date: Date) =>\n                                        dateRangeValidation.validateFromDate(date, minDate, maxDate, formik.values.tom),\n                                    onChange: () => {\n                                        setTimeout(() => {\n                                            formik.validateField(FerieuttakFormFields.tom);\n                                        });\n                                    },\n                                }}\n                                toDatepickerProps={{\n                                    label: formLabels.toDate,\n                                    name: FerieuttakFormFields.tom,\n                                    fullscreenOverlay: true,\n                                    dateLimitations: {\n                                        minDato: minDate || formik.values.fom,\n                                        maksDato: maxDate,\n                                    },\n                                    validate: (date: Date) =>\n                                        dateRangeValidation.validateToDate(date, minDate, maxDate, formik.values.fom),\n                                    onChange: () => {\n                                        setTimeout(() => {\n                                            formik.validateField(FerieuttakFormFields.fom);\n                                        });\n                                    },\n                                }}\n                            />\n                        </FormBlock>\n                    </Form.Form>\n                )}\n            />\n        </>\n    );\n};\n\nexport default FerieuttakForm;\n","export interface Ferieuttak {\n    id?: string;\n    fom: Date;\n    tom: Date;\n}\n\nexport const isFerieuttak = (ferieuttak: Partial<Ferieuttak>): ferieuttak is Ferieuttak => {\n    return ferieuttak.fom !== undefined && ferieuttak.tom !== undefined;\n};\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { Ferieuttak } from './types';\n\ninterface Props {\n    ferieuttak: Ferieuttak[];\n    onEdit?: (opphold: Ferieuttak) => void;\n    onDelete?: (opphold: Ferieuttak) => void;\n}\n\nconst FerieuttakList = ({ ferieuttak = [], onDelete, onEdit }: Props) => {\n    const getDateTitleString = (uttak: Ferieuttak) =>\n        `${prettifyDateExtended(uttak.fom)} - ${prettifyDateExtended(uttak.tom)}`;\n\n    const renderFerieuttakLabel = (uttak: Ferieuttak): React.ReactNode => {\n        const title = getDateTitleString(uttak);\n        return (\n            <>\n                {onEdit && <ActionLink onClick={() => onEdit(uttak)}>{title}</ActionLink>}\n                {!onEdit && <span>{title}</span>}\n            </>\n        );\n    };\n\n    return (\n        <ItemList<Ferieuttak>\n            getItemId={(uttak) => uttak.id}\n            getItemTitle={(uttak) => getDateTitleString(uttak)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderFerieuttakLabel}\n            items={ferieuttak.filter((uttak) => uttak.id !== undefined)}\n        />\n    );\n};\n\nexport default FerieuttakList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { FormikModalFormAndList, FormikValidateFunction, ModalFormAndListLabels } from '@navikt/sif-common-formik';\nimport FerieuttakForm from './FerieuttakForm';\nimport FerieuttakList from './FerieuttakList';\nimport { Ferieuttak } from './types';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    validate?: FormikValidateFunction;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction FerieuttakListAndDialog<FieldNames>({ name, minDate, maxDate, validate, labels }: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, Ferieuttak>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                sortFunc={sortItemsByFom}\n                formRenderer={({ onSubmit, onCancel, item }) => (\n                    <FerieuttakForm\n                        ferieuttak={item}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FerieuttakList ferieuttak={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FerieuttakListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { date1YearAgo, date1YearFromNow } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { validateRequiredList } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport FerieuttakForm from '../../../forms/ferieuttak/FerieuttakForm';\nimport FerieuttakListAndDialog from '../../../forms/ferieuttak/FerieuttakListAndDialog';\nimport { Ferieuttak } from '../../../forms/ferieuttak/types';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\n\nenum FormField {\n    'ferie' = 'ferie',\n}\n\ninterface FormValues {\n    [FormField.ferie]: Ferieuttak[];\n}\nconst initialValues: FormValues = { ferie: [] };\n\nconst FormikExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<Ferieuttak> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={(formik) => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                                <FerieuttakListAndDialog<FormField>\n                                    name={FormField.ferie}\n                                    minDate={date1YearAgo}\n                                    maxDate={date1YearFromNow}\n                                    validate={validateRequiredList}\n                                    labels={{\n                                        addLabel: 'Legg til ferie',\n                                        listTitle: 'Registrerte ferier',\n                                        modalTitle: 'Ferie',\n                                        emptyListText: 'Ingen ferier er lagt til',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <FerieuttakForm\n                        minDate={date1YearAgo}\n                        maxDate={date1YearFromNow}\n                        ferieuttak={{}}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                    />\n                </Panel>\n                <SubmitPreview values={singleFormValues} />\n            </DialogFormWrapper>\n        </>\n    );\n};\n\nexport default FormikExample;\n","/* eslint-disable @typescript-eslint/camelcase */\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport Tiles from '@navikt/sif-common-core/lib/components/tiles/Tiles';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { validateFødselsnummer, validateRequiredField } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { Fosterbarn, isFosterbarn } from './types';\n\ninterface Props {\n    fosterbarn?: Partial<Fosterbarn>;\n    onSubmit: (values: Fosterbarn) => void;\n    onCancel: () => void;\n    includeName?: boolean;\n    text?: FosterbarnFormText;\n}\n\ninterface FosterbarnFormText {\n    form_fødselsnummer_label: string;\n    form_fornavn_label: string;\n    form_etternavn_label: string;\n}\n\nconst defaultText: FosterbarnFormText = {\n    form_etternavn_label: 'Etternavn',\n    form_fornavn_label: 'Fornavn',\n    form_fødselsnummer_label: 'Fødselsnummer',\n};\n\nenum FosterbarnFormField {\n    fødselsnummer = 'fødselsnummer',\n    fornavn = 'fornavn',\n    etternavn = 'etternavn',\n}\n\ntype FormValues = Partial<Fosterbarn>;\n\nconst Form = getTypedFormComponents<FosterbarnFormField, FormValues>();\n\nconst FosterbarnForm = ({\n    fosterbarn: initialValues = { fornavn: '', etternavn: '', fødselsnummer: '' },\n    text,\n    includeName,\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n    const onFormikSubmit = (formValues: FormValues) => {\n        if (isFosterbarn(formValues, includeName)) {\n            onSubmit(formValues);\n        } else {\n            throw new Error('Fosterbarn skjema: Formvalues is not a valid Fosterbarn on submit.');\n        }\n    };\n\n    const txt = { ...defaultText, ...text };\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={initialValues}\n                onSubmit={onFormikSubmit}\n                renderForm={() => (\n                    <Form.Form\n                        onCancel={onCancel}\n                        fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                        <Systemtittel tag=\"h1\">Fosterbarn</Systemtittel>\n                        <FormBlock>\n                            <Form.Input\n                                name={FosterbarnFormField.fødselsnummer}\n                                label={txt.form_fødselsnummer_label}\n                                validate={validateFødselsnummer}\n                                inputMode=\"numeric\"\n                                maxLength={11}\n                                style={{ width: '11rem' }}\n                            />\n                        </FormBlock>\n                        {includeName && (\n                            <Tiles columns={2}>\n                                <FormBlock>\n                                    <Form.Input\n                                        name={FosterbarnFormField.fornavn}\n                                        label={txt.form_fornavn_label}\n                                        validate={validateRequiredField}\n                                    />\n                                </FormBlock>\n                                <FormBlock>\n                                    <Form.Input\n                                        name={FosterbarnFormField.etternavn}\n                                        label={txt.form_etternavn_label}\n                                        validate={validateRequiredField}\n                                    />\n                                </FormBlock>\n                            </Tiles>\n                        )}\n                    </Form.Form>\n                )}\n            />\n        </>\n    );\n};\n\nexport default FosterbarnForm;\n","import { hasValue } from '@navikt/sif-common-core/lib/validation/hasValue';\n\nexport interface Fosterbarn {\n    id?: string;\n    fødselsnummer: string;\n    fornavn?: string;\n    etternavn?: string;\n}\n\nexport const isFosterbarn = (fosterbarn: Partial<Fosterbarn>, includeName?: boolean): fosterbarn is Fosterbarn => {\n    const { fornavn, etternavn, fødselsnummer } = fosterbarn;\n    if (includeName) {\n        return hasValue(fornavn) && hasValue(etternavn) && hasValue(fødselsnummer);\n    }\n    return hasValue(fødselsnummer);\n};\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { formatName } from '@navikt/sif-common-core/lib/utils/personUtils';\nimport { Fosterbarn } from './types';\n\ninterface Props {\n    fosterbarn: Fosterbarn[];\n    onEdit?: (opphold: Fosterbarn) => void;\n    onDelete?: (opphold: Fosterbarn) => void;\n}\n\nconst FosterbarnList = ({ fosterbarn = [], onDelete, onEdit }: Props) => {\n    const getBarnTitleString = (barn: Fosterbarn) => {\n        return (\n            <>\n                <span style={{ paddingRight: '1rem' }}>{barn.fødselsnummer}</span>{' '}\n                {barn.fornavn && barn.etternavn && <span>{formatName(barn.fornavn, barn.etternavn)}</span>}\n            </>\n        );\n    };\n    const renderFosterbarnLabel = (barn: Fosterbarn): React.ReactNode => {\n        return (\n            <>\n                {onEdit && <ActionLink onClick={() => onEdit(barn)}>{getBarnTitleString(barn)}</ActionLink>}\n                {!onEdit && <span>{getBarnTitleString(barn)}</span>}\n            </>\n        );\n    };\n\n    return (\n        <ItemList<Fosterbarn>\n            getItemId={(barn) => barn.id}\n            getItemTitle={(barn) =>\n                barn.fornavn && barn.etternavn ? formatName(barn.fornavn, barn.etternavn) : barn.fødselsnummer\n            }\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderFosterbarnLabel}\n            items={fosterbarn.filter((barn) => barn.id !== undefined)}\n        />\n    );\n};\n\nexport default FosterbarnList;\n","import React from 'react';\nimport { FormikModalFormAndList, FormikValidateFunction } from '@navikt/sif-common-formik';\nimport FosterbarnForm from './FosterbarnForm';\nimport FosterbarnList from './FosterbarnList';\nimport { Fosterbarn } from './types';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    validate?: FormikValidateFunction;\n    texts?: FosterbarnListAndDialogText;\n    info?: string;\n    includeName?: boolean;\n}\n\nfunction FosterbarnListAndDialog<FieldNames>({ name, validate, texts, info, includeName }: Props<FieldNames>) {\n    const txt = { ...defaultText, ...texts };\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, Fosterbarn>\n                name={name}\n                labels={{\n                    addLabel: txt.liste_legg_til_knapp,\n                    modalTitle: txt.modal_tittel,\n                    emptyListText: txt.liste_tom_liste_tekst,\n                    listTitle: txt.liste_tittel,\n                    info\n                }}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                formRenderer={({ onSubmit, onCancel, item }) => (\n                    <FosterbarnForm\n                        fosterbarn={item}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                        includeName={includeName}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FosterbarnList fosterbarn={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport interface FosterbarnListAndDialogText {\n    liste_legg_til_knapp: string;\n    liste_tittel?: string;\n    liste_tom_liste_tekst?: string;\n    modal_tittel: string;\n}\n\nexport const defaultText: FosterbarnListAndDialogText = {\n    liste_legg_til_knapp: 'Legg til fosterbarn',\n    liste_tittel: 'Registrerte fosterbarn',\n    modal_tittel: 'Fosterbarn'\n};\n\nexport default FosterbarnListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { validateRequiredList } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { Fosterbarn } from '../../../forms/fosterbarn';\nimport FosterbarnForm from '../../../forms/fosterbarn/FosterbarnForm';\nimport FosterbarnListAndDialog from '../../../forms/fosterbarn/FosterbarnListAndDialog';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\n\nenum FormField {\n    'fosterbarn' = 'fosterbarn',\n}\n\ninterface FormValues {\n    [FormField.fosterbarn]: Fosterbarn[];\n}\nconst initialValues: FormValues = { fosterbarn: [] };\n\nconst FosterbarnExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<Fosterbarn> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={(formik) => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                                <FosterbarnListAndDialog<FormField>\n                                    name={FormField.fosterbarn}\n                                    validate={validateRequiredList}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <FosterbarnForm\n                        fosterbarn={{}}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                    />\n                </Panel>\n                <SubmitPreview values={singleFormValues} />\n            </DialogFormWrapper>\n        </>\n    );\n};\n\nexport default FosterbarnExample;\n","import { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { DateRange } from '@navikt/sif-common-core/lib/utils/dateUtils';\n\nexport enum UtenlandsoppholdÅrsak {\n    'INNLAGT_DEKKET_NORGE' = 'BARNET_INNLAGT_I_HELSEINSTITUSJON_FOR_NORSK_OFFENTLIG_REGNING',\n    'INNLAGT_DEKKET_ANNET_LAND' = 'BARNET_INNLAGT_I_HELSEINSTITUSJON_DEKKET_ETTER_AVTALE_MED_ET_ANNET_LAND_OM_TRYGD',\n    'ANNET' = 'ANNET',\n}\n\nexport interface Utenlandsopphold {\n    id?: string;\n    fom: Date;\n    tom: Date;\n    landkode: string;\n    erBarnetInnlagt?: YesOrNo;\n    barnInnlagtPerioder?: DateRange[];\n    årsak?: UtenlandsoppholdÅrsak;\n}\n\nexport const isUtenlandsoppholdType = (\n    utenlandsopphold: Partial<Utenlandsopphold>\n): utenlandsopphold is Utenlandsopphold => {\n    return (\n        utenlandsopphold.fom !== undefined &&\n        utenlandsopphold.tom !== undefined &&\n        utenlandsopphold.landkode !== undefined\n    );\n};\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport dateRangeValidation from '@navikt/sif-common-core/lib/validation/dateRangeValidation';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { Tidsperiode, isTidsperiode } from './types';\n\nexport interface TidsperiodeFormLabels {\n    title?: string;\n    fromDate: string;\n    toDate: string;\n    intervalTitle?: string;\n    okButton: string;\n    cancelButton: string;\n}\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    tidsperiode?: Partial<Tidsperiode>;\n    formLabels?: Partial<TidsperiodeFormLabels>;\n    onSubmit: (values: Tidsperiode) => void;\n    onCancel: () => void;\n}\n\nconst defaultLabels: TidsperiodeFormLabels = {\n    title: 'Tidsperiode',\n    fromDate: 'Fra og med',\n    toDate: 'Til og med',\n    okButton: 'Ok',\n    cancelButton: 'Avbryt',\n};\n\nenum TidsperiodeFormFields {\n    tom = 'tom',\n    fom = 'fom',\n}\n\ntype FormValues = Partial<Tidsperiode>;\n\nconst Form = getTypedFormComponents<TidsperiodeFormFields, FormValues>();\n\nconst TidsperiodeForm = ({\n    maxDate,\n    minDate,\n    formLabels,\n    tidsperiode: initialValues = { fom: undefined, tom: undefined },\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n    const onFormikSubmit = (formValues: FormValues) => {\n        if (isTidsperiode(formValues)) {\n            onSubmit(formValues);\n        } else {\n            throw new Error('TidsperiodeForm: Formvalues is not a valid Tidsperiode on submit.');\n        }\n    };\n\n    const inlineLabels: TidsperiodeFormLabels = { ...defaultLabels, ...formLabels };\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={initialValues}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => (\n                    <Form.Form\n                        onCancel={onCancel}\n                        fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                        <Systemtittel tag=\"h1\">{inlineLabels.title}</Systemtittel>\n                        <FormBlock>\n                            <Form.DateIntervalPicker\n                                legend={inlineLabels.intervalTitle}\n                                fromDatepickerProps={{\n                                    label: inlineLabels.fromDate,\n                                    name: TidsperiodeFormFields.fom,\n                                    fullscreenOverlay: true,\n                                    dateLimitations: {\n                                        minDato: minDate,\n                                        maksDato: maxDate || formik.values.tom,\n                                    },\n                                    validate: (date: Date) =>\n                                        dateRangeValidation.validateFromDate(date, minDate, maxDate, formik.values.tom),\n                                    onChange: () => {\n                                        setTimeout(() => {\n                                            formik.validateField(TidsperiodeFormFields.tom);\n                                        });\n                                    },\n                                }}\n                                toDatepickerProps={{\n                                    label: inlineLabels.toDate,\n                                    name: TidsperiodeFormFields.tom,\n                                    fullscreenOverlay: true,\n                                    dateLimitations: {\n                                        minDato: minDate || formik.values.fom,\n                                        maksDato: maxDate,\n                                    },\n                                    validate: (date: Date) =>\n                                        dateRangeValidation.validateToDate(date, minDate, maxDate, formik.values.fom),\n                                    onChange: () => {\n                                        setTimeout(() => {\n                                            formik.validateField(TidsperiodeFormFields.fom);\n                                        });\n                                    },\n                                }}\n                            />\n                        </FormBlock>\n                    </Form.Form>\n                )}\n            />\n        </>\n    );\n};\n\nexport default TidsperiodeForm;\n","export interface Tidsperiode {\n    id?: string;\n    fom: Date;\n    tom: Date;\n}\n\nexport const isTidsperiode = (tidsperiode: Partial<Tidsperiode>): tidsperiode is Tidsperiode => {\n    return tidsperiode.fom !== undefined && tidsperiode.tom !== undefined;\n};\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { Tidsperiode } from './types';\n\ninterface Props {\n    tidsperiode: Tidsperiode[];\n    onEdit?: (opphold: Tidsperiode) => void;\n    onDelete?: (opphold: Tidsperiode) => void;\n}\n\nconst TidsperiodeList = ({ tidsperiode = [], onDelete, onEdit }: Props) => {\n    const getDateTitleString = (uttak: Tidsperiode) =>\n        `${prettifyDateExtended(uttak.fom)} - ${prettifyDateExtended(uttak.tom)}`;\n\n    const renderTidsperiodeLabel = (uttak: Tidsperiode): React.ReactNode => {\n        const title = getDateTitleString(uttak);\n        return (\n            <>\n                {onEdit && <ActionLink onClick={() => onEdit(uttak)}>{title}</ActionLink>}\n                {!onEdit && <span>{title}</span>}\n            </>\n        );\n    };\n\n    return (\n        <ItemList<Tidsperiode>\n            getItemId={(uttak) => uttak.id}\n            getItemTitle={(uttak) => getDateTitleString(uttak)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderTidsperiodeLabel}\n            items={tidsperiode.filter((uttak) => uttak.id !== undefined)}\n        />\n    );\n};\n\nexport default TidsperiodeList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { FormikModalFormAndList, FormikValidateFunction, ModalFormAndListLabels } from '@navikt/sif-common-formik';\nimport TidsperiodeForm from './TidsperiodeForm';\nimport TidsperiodeList from './TidsperiodeList';\nimport { Tidsperiode } from './types';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    validate?: FormikValidateFunction;\n    formTitle?: string;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction TidsperiodeListAndDialog<FieldNames>({\n    name,\n    minDate,\n    maxDate,\n    validate,\n    labels,\n    formTitle,\n}: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, Tidsperiode>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                sortFunc={sortItemsByFom}\n                formRenderer={({ onSubmit, onCancel, item }) => (\n                    <TidsperiodeForm\n                        tidsperiode={item}\n                        formLabels={{ title: formTitle }}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <TidsperiodeList tidsperiode={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default TidsperiodeListAndDialog;\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { countryIsMemberOfEøsOrEfta } from '@navikt/sif-common-core/lib/utils/countryUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport dateRangeValidation from '@navikt/sif-common-core/lib/validation/dateRangeValidation';\nimport {\n    validateRequiredField,\n    validateRequiredSelect,\n    validateYesOrNoIsAnswered,\n    validateRequiredList,\n} from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { hasValue } from '@navikt/sif-common-core/lib/validation/hasValue';\nimport { getCountryName, YesOrNo } from '@navikt/sif-common-formik';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { isUtenlandsoppholdType, Utenlandsopphold, UtenlandsoppholdÅrsak } from './types';\nimport TidsperiodeListAndDialog from '../tidsperiode/TidsperiodeListAndDialog';\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    opphold?: Utenlandsopphold;\n    onSubmit: (values: Utenlandsopphold) => void;\n    onCancel: () => void;\n}\n\nenum UtenlandsoppholdFormFields {\n    fom = 'fom',\n    tom = 'tom',\n    landkode = 'landkode',\n    årsak = 'årsak',\n    erBarnetInnlagt = 'erBarnetInnlagt',\n    barnInnlagtPerioder = 'barnInnlagtPerioder',\n}\n\nconst defaultFormValues: Partial<Utenlandsopphold> = {\n    fom: undefined,\n    tom: undefined,\n    landkode: undefined,\n    erBarnetInnlagt: YesOrNo.UNANSWERED,\n    barnInnlagtPerioder: [],\n    årsak: undefined,\n};\n\ntype FormValues = Partial<Utenlandsopphold>;\n\nconst Form = getTypedFormComponents<UtenlandsoppholdFormFields, FormValues>();\n\nconst UtenlandsoppholdForm = ({ maxDate, minDate, opphold: initialValues, onSubmit, onCancel }: Props) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: Partial<Utenlandsopphold>) => {\n        if (isUtenlandsoppholdType(formValues)) {\n            onSubmit({\n                ...formValues,\n                årsak: countryIsMemberOfEøsOrEfta(formValues.landkode) ? undefined : formValues.årsak,\n            });\n        } else {\n            throw new Error('UtenlandsoppholdForm: Formvalues is not a valid Utenlandsopphold on submit.');\n        }\n    };\n\n    return (\n        <Form.FormikWrapper\n            initialValues={initialValues || defaultFormValues}\n            onSubmit={onFormikSubmit}\n            renderForm={(formik) => {\n                const {\n                    values: { fom, tom, landkode, erBarnetInnlagt, barnInnlagtPerioder = [], årsak },\n                } = formik;\n\n                const fromDateLimitations = {\n                    minDato: minDate,\n                    maksDato: tom || maxDate,\n                };\n\n                const toDateLimitations = {\n                    minDato: fom || minDate,\n                    maksDato: maxDate,\n                };\n\n                const includeInnlagtPerioderQuestion =\n                    fom !== undefined && tom !== undefined && landkode !== undefined && erBarnetInnlagt === YesOrNo.YES;\n\n                const includeInnlagtQuestion: boolean =\n                    landkode !== undefined && hasValue(landkode) && !countryIsMemberOfEøsOrEfta(landkode);\n\n                const showÅrsakQuestion = barnInnlagtPerioder.length > 0;\n\n                const areAllQuestionsAnswered: boolean =\n                    fom !== undefined &&\n                    tom !== undefined &&\n                    landkode !== undefined &&\n                    erBarnetInnlagt !== YesOrNo.UNANSWERED &&\n                    (erBarnetInnlagt === YesOrNo.YES ? barnInnlagtPerioder.length > 0 && årsak !== undefined : true);\n\n                return (\n                    <Form.Form\n                        includeButtons={areAllQuestionsAnswered}\n                        onCancel={onCancel}\n                        fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                        <Systemtittel tag=\"h1\">\n                            <FormattedMessage id=\"utenlandsopphold.form.tittel\" />\n                        </Systemtittel>\n                        <FormBlock>\n                            <Form.DateIntervalPicker\n                                legend={intlHelper(intl, 'utenlandsopphold.form.tidsperiode.spm')}\n                                fromDatepickerProps={{\n                                    name: UtenlandsoppholdFormFields.fom,\n                                    label: intlHelper(intl, 'utenlandsopphold.form.tidsperiode.fraDato'),\n                                    fullscreenOverlay: true,\n                                    dateLimitations: fromDateLimitations,\n                                    validate: (date: Date) =>\n                                        dateRangeValidation.validateFromDate(\n                                            date,\n                                            fromDateLimitations.minDato,\n                                            fromDateLimitations.maksDato,\n                                            tom\n                                        ),\n                                }}\n                                toDatepickerProps={{\n                                    name: UtenlandsoppholdFormFields.tom,\n                                    label: intlHelper(intl, 'utenlandsopphold.form.tidsperiode.tilDato'),\n                                    fullscreenOverlay: true,\n                                    dateLimitations: toDateLimitations,\n                                    validate: (date: Date) =>\n                                        dateRangeValidation.validateToDate(\n                                            date,\n                                            toDateLimitations.minDato,\n                                            toDateLimitations.maksDato,\n                                            fom\n                                        ),\n                                }}\n                            />\n                        </FormBlock>\n                        {fom !== undefined && tom !== undefined && (\n                            <FormBlock>\n                                <Form.CountrySelect\n                                    name={UtenlandsoppholdFormFields.landkode}\n                                    label={intlHelper(intl, 'utenlandsopphold.form.land.spm')}\n                                    validate={validateRequiredSelect}\n                                />\n                            </FormBlock>\n                        )}\n\n                        {includeInnlagtQuestion && landkode && fom && tom && (\n                            <>\n                                <FormBlock>\n                                    <Form.YesOrNoQuestion\n                                        name={UtenlandsoppholdFormFields.erBarnetInnlagt}\n                                        legend={intlHelper(intl, 'utenlandsopphold.form.erBarnetInnlagt.spm', {\n                                            land: getCountryName(landkode, intl.locale),\n                                        })}\n                                        validate={validateYesOrNoIsAnswered}\n                                    />\n                                </FormBlock>\n                                {includeInnlagtPerioderQuestion && (\n                                    <FormBlock margin=\"l\">\n                                        <TidsperiodeListAndDialog\n                                            name={UtenlandsoppholdFormFields.barnInnlagtPerioder}\n                                            minDate={fom}\n                                            maxDate={tom}\n                                            validate={validateRequiredList}\n                                            formTitle=\"Periode barnet er innlagt\"\n                                            labels={{\n                                                addLabel: 'Legg til periode',\n                                                modalTitle: 'Periode barnet er innlagt',\n                                                listTitle: 'Periode(r) barnet er innlagt',\n                                            }}\n                                        />\n                                    </FormBlock>\n                                )}\n                                {showÅrsakQuestion && (\n                                    <>\n                                        <FormBlock>\n                                            <Form.RadioPanelGroup\n                                                legend={intlHelper(intl, 'utenlandsopphold.form.årsak.spm', {\n                                                    land: getCountryName(landkode, intl.locale),\n                                                })}\n                                                name={UtenlandsoppholdFormFields.årsak}\n                                                validate={validateRequiredField}\n                                                radios={[\n                                                    {\n                                                        value: UtenlandsoppholdÅrsak.INNLAGT_DEKKET_NORGE,\n                                                        label: intlHelper(\n                                                            intl,\n                                                            `utenlandsopphold.form.årsak.${UtenlandsoppholdÅrsak.INNLAGT_DEKKET_NORGE}`\n                                                        ),\n                                                    },\n                                                    {\n                                                        value: UtenlandsoppholdÅrsak.INNLAGT_DEKKET_ANNET_LAND,\n                                                        label: intlHelper(\n                                                            intl,\n                                                            `utenlandsopphold.form.årsak.${UtenlandsoppholdÅrsak.INNLAGT_DEKKET_ANNET_LAND}`,\n                                                            { land: getCountryName(landkode, intl.locale) }\n                                                        ),\n                                                    },\n                                                    {\n                                                        value: UtenlandsoppholdÅrsak.ANNET,\n                                                        label: intlHelper(\n                                                            intl,\n                                                            `utenlandsopphold.form.årsak.${UtenlandsoppholdÅrsak.ANNET}`\n                                                        ),\n                                                    },\n                                                ]}\n                                            />\n                                        </FormBlock>\n                                    </>\n                                )}\n                            </>\n                        )}\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default UtenlandsoppholdForm;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { getCountryName } from '@navikt/sif-common-formik';\nimport { Utenlandsopphold } from './types';\nimport './utenlandsoppholdList.less';\n\ninterface Props {\n    utenlandsopphold: Utenlandsopphold[];\n    onEdit?: (opphold: Utenlandsopphold) => void;\n    onDelete?: (opphold: Utenlandsopphold) => void;\n}\n\nconst bem = bemUtils('utenlandsoppholdList');\n\nconst UtenlandsoppholdList = ({ utenlandsopphold, onDelete, onEdit }: Props) => {\n    const intl = useIntl();\n    const renderUtenlandsoppholdLabel = (opphold: Utenlandsopphold): React.ReactNode => {\n        const navn = getCountryName(opphold.landkode, intl.locale);\n        return (\n            <div className={bem.element('label')}>\n                <span className={bem.element('land')}>\n                    {onEdit && <ActionLink onClick={() => onEdit(opphold)}>{navn}</ActionLink>}\n                    {!onEdit && <span>{navn}</span>}\n                </span>\n                <span className={bem.element('dato')}>\n                    {prettifyDateExtended(opphold.fom)} - {prettifyDateExtended(opphold.tom)}\n                </span>\n            </div>\n        );\n    };\n\n    return (\n        <ItemList<Utenlandsopphold>\n            getItemId={(opphold) => opphold.id}\n            getItemTitle={(opphold) => getCountryName(opphold.landkode, intl.locale)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderUtenlandsoppholdLabel}\n            items={utenlandsopphold}\n        />\n    );\n};\n\nexport default UtenlandsoppholdList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList, FormikValidateFunction, ModalFormAndListLabels\n} from '@navikt/sif-common-formik';\nimport { Utenlandsopphold } from './types';\nimport UtenlandsoppholdForm from './UtenlandsoppholdForm';\nimport UtenlandsoppholdListe from './UtenlandsoppholdList';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    validate?: FormikValidateFunction;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction UtenlandsoppholdListAndDialog<FieldNames>({ name, minDate, maxDate, validate, labels }: Props<FieldNames>) {\n    return (\n        <FormikModalFormAndList<FieldNames, Utenlandsopphold>\n            name={name}\n            labels={labels}\n            validate={validate}\n            dialogWidth=\"narrow\"\n            sortFunc={sortItemsByFom}\n            formRenderer={({ onSubmit, onCancel, item }) => (\n                <UtenlandsoppholdForm\n                    opphold={item}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    onSubmit={onSubmit}\n                    onCancel={onCancel}\n                />\n            )}\n            listRenderer={({ items, onEdit, onDelete }) => (\n                <UtenlandsoppholdListe utenlandsopphold={items} onEdit={onEdit} onDelete={onDelete} />\n            )}\n        />\n    );\n}\n\nexport default UtenlandsoppholdListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { date1YearAgo, date1YearFromNow } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { validateRequiredList } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport Panel from 'nav-frontend-paneler';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { Utenlandsopphold } from '../../../forms/utenlandsopphold/types';\nimport UtenlandsoppholdForm from '../../../forms/utenlandsopphold/UtenlandsoppholdForm';\nimport UtenlandsoppholdListAndDialog from '../../../forms/utenlandsopphold/UtenlandsoppholdListAndDialog';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\n\nenum FormField {\n    'utenlandsopphold' = 'utenlandsopphold',\n}\n\ninterface FormValues {\n    [FormField.utenlandsopphold]: Utenlandsopphold[];\n}\nconst initialValues: FormValues = {\n    utenlandsopphold: [],\n};\n\nconst UtenlandsoppholdExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<Utenlandsopphold> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                                <UtenlandsoppholdListAndDialog\n                                    minDate={date1YearAgo}\n                                    maxDate={date1YearFromNow}\n                                    name={FormField.utenlandsopphold}\n                                    validate={validateRequiredList}\n                                    labels={{\n                                        addLabel: 'Legg til utenlandsopphold',\n                                        listTitle: 'Registrerte utenlandsopphold',\n                                        modalTitle: 'Utenlandsopphold',\n                                        emptyListText: 'Ingen utenlandsopphold er lagt til',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <UtenlandsoppholdForm\n                        opphold={initialValues.utenlandsopphold[0]}\n                        minDate={date1YearAgo}\n                        maxDate={date1YearFromNow}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                    />\n                    <SubmitPreview values={singleFormValues} />\n                </Panel>\n            </DialogFormWrapper>\n        </>\n    );\n};\n\nexport default UtenlandsoppholdExample;\n","import { FieldValidationResult } from '@navikt/sif-common-core/lib/validation/types';\nimport { FormikValidateFunction } from '@navikt/sif-common-formik/lib';\nimport { createFieldValidationError } from '@navikt/sif-common-core/lib/validation/fieldValidations';\n\nexport enum FraværFieldValidationErrors {\n    'påkrevd' = 'fieldvalidation.påkrevd',\n    'fraværsperioder_mangler' = 'fieldvalidation.fraværsperioder_mangler',\n    'fraværsperioder_overlapper' = 'fieldvalidation.fraværsperioder_overlapper',\n    'fraværsperioder_utenfor_periode' = 'fieldvalidation.fraværsperioder_utenfor_periode',\n    'fraværsperioder_overlapper_med_fraværsdager' = 'fieldvalidation.fraværsperioder_overlapper_med_fraværsdager',\n    'dager_med_fravær_ugyldig_dag' = 'fieldvalidation.dager_med_fravær_ugyldig_dag',\n    'dager_med_fravær_mangler' = 'fieldvalidation.dager_med_fravær_mangler',\n    'dager_med_fravær_like' = 'fieldvalidation.dager_med_fravær_like',\n    'dager_med_fravær_utenfor_periode' = 'fieldvalidation.dager_med_fravær_utenfor_periode',\n    'dager_med_for_mange_timer' = 'fieldvalidation.dager_med_for_mange_timer',\n    'dager_med_fravær_overlapper_perioder' = 'fieldvalidation.dager_med_fravær_overlapper_perioder',\n    'timer_ikke_tall' = 'fieldvalidation.timer_ikke_tall',\n    'timer_for_mange_timer' = 'fieldvalidation.timer_for_mange_timer',\n    'dato_utenfor_gyldig_tidsrom' = 'fieldvalidation.dato_utenfor_gyldig_tidsrom',\n    'tom_er_før_fom' = 'fieldvalidation.tom_er_før_fom',\n    'ingen_dokumenter' = 'fieldvalidation.ingen_dokumenter',\n    'for_mange_dokumenter' = 'fieldvalidation.for_mange_dokumenter',\n    'fravær_timer_mer_enn_arbeidstimer' = 'fravær.form.validation.timer_mer_enn_arbeidstimer',\n    'er_helg' = 'fravær.form.validation.er_helg',\n}\n\nexport type FieldValidationArray = (validations: FormikValidateFunction[]) => (value: any) => FieldValidationResult;\n\nexport const validateAll: FieldValidationArray = (validations: FormikValidateFunction[]): FormikValidateFunction => (\n    value: any\n): FieldValidationResult =>\n    validations\n        .map((validate: FormikValidateFunction) => validate(value))\n        .reduce((prev: FieldValidationResult, curr: FieldValidationResult) => prev || curr, undefined);\n\nexport const validateLessOrEqualTo = (maxValue: number | undefined): FormikValidateFunction => (\n    value: number | undefined\n) => {\n    if (maxValue && value) {\n        return value <= maxValue\n            ? undefined\n            : createFieldValidationError(FraværFieldValidationErrors.fravær_timer_mer_enn_arbeidstimer);\n    }\n    return undefined;\n};\n","import { FraværDag, FraværPeriode } from './types';\nimport { FormikValidateFunction } from '@navikt/sif-common-formik/lib';\nimport { FieldValidationResult } from '@navikt/sif-common-core/lib/validation/types';\nimport moment from 'moment';\nimport { createFieldValidationError } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { FraværFieldValidationErrors } from './fraværValidationUtils';\nimport { DateRange } from '@navikt/sif-common-core/lib/utils/dateUtils';\n\nexport const fraværDagToFraværDateRange = (fraværDag: FraværDag): DateRange => ({\n    from: fraværDag.dato,\n    to: fraværDag.dato,\n});\n\nexport const datesCollideWithDateRanges = (dates: Date[], ranges: DateRange[]): boolean => {\n    if (ranges.length > 0 && dates.length > 0) {\n        return dates.some((d) => {\n            return ranges.some((range) => moment(d).isSameOrAfter(range.from) && moment(d).isSameOrBefore(range.to));\n        });\n    }\n    return false;\n};\n\nexport const validateNoCollisions = (\n    fraværDager: FraværDag[],\n    fraværPerioder: FraværPeriode[]\n): FormikValidateFunction => (): FieldValidationResult =>\n    datesCollideWithDateRanges(\n        fraværDager.map((d) => d.dato),\n        fraværPerioder\n    )\n        ? createFieldValidationError(FraværFieldValidationErrors.dager_med_fravær_overlapper_perioder)\n        : undefined;\n\nexport enum Weekday {\n    monday = 'monday',\n    tuesday = 'tuesday',\n    wednesday = 'wednesday',\n    thursday = 'thursday',\n    friday = 'friday',\n    saturday = 'saturday',\n    sunday = 'sunday',\n}\n\nexport const getWeekdayName = (date: Date): Weekday | undefined => {\n    switch (date.getDay()) {\n        case 0:\n            return Weekday.sunday;\n        case 1:\n            return Weekday.monday;\n        case 2:\n            return Weekday.tuesday;\n        case 3:\n            return Weekday.wednesday;\n        case 4:\n            return Weekday.thursday;\n        case 5:\n            return Weekday.friday;\n        case 6:\n            return Weekday.saturday;\n        default:\n            return undefined;\n    }\n};\n\nexport const dateErHelg = (date: Date) =>\n    getWeekdayName(date) === Weekday.saturday || getWeekdayName(date) === Weekday.sunday;\n\nexport const validateNotHelgedag = (maybeDate: Date | undefined): FieldValidationResult =>\n    maybeDate && dateErHelg(maybeDate) ? createFieldValidationError(FraværFieldValidationErrors.er_helg) : undefined;\n\nexport const timeText = (timer: number): string =>\n    timer.toString(10) === '1' || timer.toString(10).includes('.') ? 'time' : 'timer';\n\nexport const dateRangeToFomTom = (dateRange: DateRange): { fom: Date; tom: Date } => ({\n    fom: dateRange.from,\n    tom: dateRange.to,\n});\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport dateRangeValidation from '@navikt/sif-common-core/lib/validation/dateRangeValidation';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { FraværPeriode, isFraværPeriode } from './types';\nimport { dateRangeToFomTom, validateNotHelgedag } from './fraværUtilities';\nimport { validateAll } from './fraværValidationUtils';\nimport { DateRange } from '@navikt/sif-common-core/lib/utils/dateUtils';\n\nexport interface FraværPeriodeFormLabels {\n    title: string;\n    intervalTitle: string;\n    fromDate: string;\n    toDate: string;\n    okButton: string;\n    cancelButton: string;\n}\n\ninterface Props {\n    fraværPeriode?: Partial<FraværPeriode>;\n    minDate: Date;\n    maxDate: Date;\n    dateRangesToDisable?: DateRange[];\n    helgedagerIkkeTillat?: boolean;\n    labels?: Partial<FraværPeriodeFormLabels>;\n    onSubmit: (values: FraværPeriode) => void;\n    onCancel: () => void;\n}\n\nconst defaultLabels: FraværPeriodeFormLabels = {\n    title: 'Periode med fravær',\n    intervalTitle: 'Velg tidsrom',\n    fromDate: 'Fra og med',\n    toDate: 'Til og med',\n    okButton: 'Ok',\n    cancelButton: 'Avbryt',\n};\n\nenum FraværPeriodeFormFields {\n    from = 'from',\n    to = 'to',\n}\n\ntype FormValues = Partial<FraværPeriode>;\n\nconst Form = getTypedFormComponents<FraværPeriodeFormFields, FormValues>();\n\nconst FraværPeriodeForm: React.FunctionComponent<Props> = ({\n    fraværPeriode: initialValues = { from: undefined, to: undefined },\n    maxDate,\n    minDate,\n    dateRangesToDisable,\n    helgedagerIkkeTillat,\n    labels,\n    onSubmit,\n    onCancel,\n}) => {\n    const intl = useIntl();\n    const onFormikSubmit = (formValues: FormValues) => {\n        if (isFraværPeriode(formValues)) {\n            onSubmit(formValues);\n        } else {\n            throw new Error('FraværPeriodeForm: Formvalues is not a valid FraværPeriode on submit.');\n        }\n    };\n\n    const formLabels: FraværPeriodeFormLabels = { ...defaultLabels, ...labels };\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={initialValues}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => (\n                    <Form.Form\n                        onCancel={onCancel}\n                        fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                        <Systemtittel tag=\"h1\">{formLabels.title}</Systemtittel>\n                        <FormBlock>\n                            <Form.DateIntervalPicker\n                                legend={formLabels.intervalTitle}\n                                fromDatepickerProps={{\n                                    label: formLabels.fromDate,\n                                    name: FraværPeriodeFormFields.from,\n                                    fullscreenOverlay: true,\n                                    dateLimitations: {\n                                        minDato: minDate,\n                                        maksDato: formik.values.to || maxDate,\n                                        helgedagerIkkeTillatt: helgedagerIkkeTillat || false,\n                                        ugyldigeTidsperioder: dateRangesToDisable\n                                            ? dateRangesToDisable.map(dateRangeToFomTom)\n                                            : undefined,\n                                    },\n                                    validate: validateAll([\n                                        ...(helgedagerIkkeTillat ? [validateNotHelgedag] : []),\n                                        (date: Date) =>\n                                            dateRangeValidation.validateFromDate(\n                                                date,\n                                                minDate,\n                                                maxDate,\n                                                formik.values.to\n                                            ),\n                                    ]),\n                                    onChange: () => {\n                                        setTimeout(() => {\n                                            formik.validateField(FraværPeriodeFormFields.from);\n                                        });\n                                    },\n                                }}\n                                toDatepickerProps={{\n                                    label: formLabels.toDate,\n                                    name: FraværPeriodeFormFields.to,\n                                    fullscreenOverlay: true,\n                                    dateLimitations: {\n                                        minDato: formik.values.from || minDate,\n                                        maksDato: maxDate,\n                                        helgedagerIkkeTillatt: helgedagerIkkeTillat || false,\n                                        ugyldigeTidsperioder: dateRangesToDisable\n                                            ? dateRangesToDisable.map(dateRangeToFomTom)\n                                            : undefined,\n                                    },\n                                    validate: validateAll([\n                                        ...(helgedagerIkkeTillat ? [validateNotHelgedag] : []),\n                                        (date: Date) =>\n                                            dateRangeValidation.validateToDate(\n                                                date,\n                                                minDate,\n                                                maxDate,\n                                                formik.values.from\n                                            ),\n                                    ]),\n                                    onChange: () => {\n                                        setTimeout(() => {\n                                            formik.validateField(FraværPeriodeFormFields.to);\n                                        });\n                                    },\n                                }}\n                            />\n                        </FormBlock>\n                    </Form.Form>\n                )}\n            />\n        </>\n    );\n};\n\nexport default FraværPeriodeForm;\n","import { DateRange } from '@navikt/sif-common-core/lib/utils/dateUtils';\n\nexport interface FraværPeriode extends DateRange {\n    id?: string;\n}\n\nexport const isFraværPeriode = (fraværPeriode: Partial<FraværPeriode>): fraværPeriode is FraværPeriode => {\n    return fraværPeriode.from !== undefined && fraværPeriode.to !== undefined;\n};\n\nexport interface FraværDag {\n    id?: string;\n    dato: Date;\n    timerArbeidsdag: number;\n    timerFravær: number;\n}\n\nexport const isFraværDag = (fraværDag: Partial<FraværDag>): fraværDag is FraværDag => {\n    return (\n        fraværDag.dato !== undefined && fraværDag.timerArbeidsdag !== undefined && fraværDag.timerFravær !== undefined\n    );\n};\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { FraværPeriode } from './types';\n\ninterface Props {\n    fraværPerioder: FraværPeriode[];\n    onEdit?: (fraværPeriode: FraværPeriode) => void;\n    onDelete?: (fraværPeriode: FraværPeriode) => void;\n}\n\nconst FraværPerioderList: React.FunctionComponent<Props> = ({ fraværPerioder = [], onDelete, onEdit }) => {\n    const getDateTitleString = (fraværPeriode: FraværPeriode) =>\n        `${prettifyDateExtended(fraværPeriode.from)} - ${prettifyDateExtended(fraværPeriode.to)}`;\n\n    const renderFraværPeriodeLabel = (fraværPeriode: FraværPeriode): React.ReactNode => {\n        const title = getDateTitleString(fraværPeriode);\n        return (\n            <>\n                {onEdit && <ActionLink onClick={() => onEdit(fraværPeriode)}>{title}</ActionLink>}\n                {!onEdit && <span>{title}</span>}\n            </>\n        );\n    };\n\n    return (\n        <ItemList<FraværPeriode>\n            getItemId={(fraværPeriode) => fraværPeriode.id}\n            getItemTitle={(fraværPeriode) => getDateTitleString(fraværPeriode)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderFraværPeriodeLabel}\n            items={fraværPerioder.filter((fraværPeriode) => fraværPeriode.id !== undefined)}\n        />\n    );\n};\n\nexport default FraværPerioderList;\n","import React from 'react';\nimport { DateRange, sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { FormikModalFormAndList, FormikValidateFunction, ModalFormAndListLabels } from '@navikt/sif-common-formik';\nimport { FraværPeriode } from './types';\nimport FraværPeriodeForm, { FraværPeriodeFormLabels } from './FraværPeriodeForm';\nimport FraværPerioderList from './FraværPerioderList';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n    validate?: FormikValidateFunction;\n    dateRangesToDisable?: DateRange[];\n    helgedagerIkkeTillat?: boolean;\n    fraværPeriodeFormLabels?: Partial<FraværPeriodeFormLabels>;\n}\n\nfunction FraværPerioderListAndDialog<FieldNames>({\n    name,\n    minDate,\n    maxDate,\n    dateRangesToDisable,\n    validate,\n    labels,\n    helgedagerIkkeTillat,\n    fraværPeriodeFormLabels,\n}: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, FraværPeriode>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                sortFunc={(fraværPeriodeA: FraværPeriode, fraværPeriodeB: FraværPeriode) =>\n                    sortItemsByFom({ fom: fraværPeriodeA.from }, { fom: fraværPeriodeA.from })\n                }\n                formRenderer={({ onSubmit, onCancel, item }) => (\n                    <FraværPeriodeForm\n                        fraværPeriode={item}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        dateRangesToDisable={dateRangesToDisable}\n                        helgedagerIkkeTillat={helgedagerIkkeTillat}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                        labels={fraværPeriodeFormLabels}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FraværPerioderList fraværPerioder={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FraværPerioderListAndDialog;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { FraværDag, isFraværDag } from './types';\nimport FraværTimerSelect from './FraværTimerSelect';\nimport { FormikDatepickerProps } from '@navikt/sif-common-formik/lib/components/formik-datepicker/FormikDatepicker';\nimport { validateRequiredField } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { dateRangeToFomTom, validateNotHelgedag } from './fraværUtilities';\nimport { validateAll, validateLessOrEqualTo } from './fraværValidationUtils';\nimport { DateRange } from '@navikt/sif-common-core/lib/utils/dateUtils';\n\nexport interface FraværDagFormLabels {\n    title: string;\n    date: string;\n    antallArbeidstimer: string;\n    timerFravær: string;\n    okButton: string;\n    cancelButton: string;\n}\n\ninterface Props {\n    fraværDag?: Partial<FraværDag>;\n    minDate: Date;\n    maxDate: Date;\n    dateRangesToDisable?: DateRange[];\n    helgedagerIkkeTillatt?: boolean;\n    labels?: Partial<FraværDagFormLabels>;\n    onSubmit: (values: FraværDag) => void;\n    onCancel: () => void;\n}\n\nconst defaultLabels: FraværDagFormLabels = {\n    title: 'Dag med delvis fravær',\n    date: 'Dato',\n    antallArbeidstimer: 'Antall timer du skulle ha jobbet denne dagen',\n    timerFravær: 'Antall timer du var borte fra jobb denne dagen',\n    okButton: 'Ok',\n    cancelButton: 'Avbryt',\n};\n\nexport enum FraværDagFormFields {\n    dato = 'dato',\n    timerArbeidsdag = 'timerArbeidsdag',\n    timerFravær = 'timerFravær',\n}\n\ntype FormValues = Partial<FraværDag>;\n\nexport const FraværDagForm = getTypedFormComponents<FraværDagFormFields, FormValues>();\n\nconst FraværDagFormView: React.FunctionComponent<Props> = ({\n    fraværDag: initialValues = {\n        dato: undefined,\n        timerArbeidsdag: undefined,\n        timerFravær: undefined,\n    },\n    maxDate,\n    minDate,\n    dateRangesToDisable,\n    helgedagerIkkeTillatt,\n    labels,\n    onSubmit,\n    onCancel,\n}) => {\n    const intl = useIntl();\n    const onFormikSubmit = (formValues: FormValues) => {\n        if (isFraværDag(formValues)) {\n            onSubmit(formValues);\n        } else {\n            throw new Error('FraværDagFOrm: Formvalues is not a valid FraværDag on submit.');\n        }\n    };\n\n    const formLabels: FraværDagFormLabels = { ...defaultLabels, ...labels };\n\n    return (\n        <>\n            <FraværDagForm.FormikWrapper\n                initialValues={initialValues}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => {\n                    const { values } = formik;\n                    const datepickerProps: FormikDatepickerProps<FraværDagFormFields> = {\n                        label: formLabels.date,\n                        name: FraværDagFormFields.dato,\n                        fullscreenOverlay: true,\n                        dateLimitations: {\n                            minDato: minDate,\n                            maksDato: maxDate,\n                            helgedagerIkkeTillatt: helgedagerIkkeTillatt || false,\n                            ugyldigeTidsperioder: dateRangesToDisable\n                                ? dateRangesToDisable.map(dateRangeToFomTom)\n                                : undefined,\n                        },\n                        validate: helgedagerIkkeTillatt\n                            ? validateAll([validateRequiredField, validateNotHelgedag])\n                            : validateRequiredField,\n                        onChange: () => {\n                            setTimeout(() => {\n                                formik.validateField(FraværDagFormFields.dato);\n                            });\n                        },\n                    };\n\n                    return (\n                        <FraværDagForm.Form\n                            onCancel={onCancel}\n                            fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                            <Systemtittel tag=\"h1\">{formLabels.title}</Systemtittel>\n                            <FormBlock>\n                                <FraværDagForm.DatePicker {...datepickerProps} />\n                            </FormBlock>\n                            <FormBlock>\n                                <FraværTimerSelect\n                                    name={FraværDagFormFields.timerArbeidsdag}\n                                    validate={validateRequiredField}\n                                    label={formLabels.antallArbeidstimer}\n                                />\n                            </FormBlock>\n                            <FormBlock>\n                                <FraværTimerSelect\n                                    name={FraværDagFormFields.timerFravær}\n                                    validate={validateAll([\n                                        validateRequiredField,\n                                        validateLessOrEqualTo(values.timerArbeidsdag),\n                                    ])}\n                                    label={formLabels.timerFravær}\n                                />\n                            </FormBlock>\n                        </FraværDagForm.Form>\n                    );\n                }}\n            />\n        </>\n    );\n};\n\nexport default FraværDagFormView;\n","import React from 'react';\nimport { FraværDagForm, FraværDagFormFields } from './FraværDagForm';\nimport { FormikValidateFunction } from '@navikt/sif-common-formik/lib';\nimport { timeText } from './fraværUtilities';\n\ninterface Props<> {\n    name: FraværDagFormFields;\n    validate: FormikValidateFunction;\n    label?: string;\n    maksTid?: number;\n}\n\nconst getOptionsList: (maksTid: number) => JSX.Element[] = (maksTid: number) => {\n    const newOptionElement = (t: number): JSX.Element => (\n        <option key={t} value={t}>\n            {t.toString(10).replace('.', ',')} {timeText(t)}\n        </option>\n    );\n    const go = (jsxList: JSX.Element[], tid: number): JSX.Element[] => {\n        return tid >= maksTid\n            ? [...jsxList, newOptionElement(tid)]\n            : go([...jsxList, newOptionElement(tid)], tid + 0.5);\n    };\n    return go([], 0.5);\n};\n\nconst FraværTimerSelect: React.FunctionComponent<Props> = ({ name, validate, label, maksTid }) => {\n    return (\n        <FraværDagForm.Select bredde=\"s\" label={label || 'Antall timer'} name={name} validate={validate}>\n            <option />\n            {getOptionsList(maksTid || 7.5)}\n        </FraværDagForm.Select>\n    );\n};\n\nexport default FraværTimerSelect;\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { FraværDag } from './types';\nimport { timeText } from './fraværUtilities';\n\ninterface Props {\n    fraværDager: FraværDag[];\n    onEdit?: (fraværDag: FraværDag) => void;\n    onDelete?: (fraværDag: FraværDag) => void;\n}\n\nconst FraværDagerList: React.FC<Props> = ({ fraværDager = [], onDelete, onEdit }) => {\n    const getFraværDagListItemTitle = (fraværDag: FraværDag) =>\n        `${prettifyDateExtended(fraværDag.dato)}: \n        Skulle jobbet ${fraværDag.timerArbeidsdag} ${timeText(fraværDag.timerArbeidsdag)}. \n        Borte fra jobb ${fraværDag.timerFravær}  ${timeText(fraværDag.timerFravær)}.`;\n\n    const renderFraværDagLabel = (fraværDag: FraværDag): React.ReactNode => {\n        const title = getFraværDagListItemTitle(fraværDag);\n        return (\n            <>\n                {onEdit && <ActionLink onClick={() => onEdit(fraværDag)}>{title}</ActionLink>}\n                {!onEdit && <span>{title}</span>}\n            </>\n        );\n    };\n\n    return (\n        <ItemList<FraværDag>\n            getItemId={(fraværDag) => fraværDag.id}\n            getItemTitle={(fraværDag) => getFraværDagListItemTitle(fraværDag)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderFraværDagLabel}\n            items={fraværDager.filter((fraværDag) => fraværDag.id !== undefined)}\n        />\n    );\n};\n\nexport default FraværDagerList;\n","import React from 'react';\nimport { DateRange, sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { FormikModalFormAndList, FormikValidateFunction, ModalFormAndListLabels } from '@navikt/sif-common-formik';\nimport { FraværDag } from './types';\nimport FraværDagFormView, { FraværDagFormLabels } from './FraværDagForm';\nimport FraværDagerList from './FraværDagerList';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    validate?: FormikValidateFunction;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n    dateRangesToDisable?: DateRange[];\n    helgedagerIkkeTillatt?: boolean;\n    fraværDagFormLabels?: Partial<FraværDagFormLabels>;\n}\n\nfunction FraværDagerListAndDialog<FieldNames>({\n    name,\n    minDate,\n    maxDate,\n    validate,\n    labels,\n    dateRangesToDisable,\n    helgedagerIkkeTillatt,\n    fraværDagFormLabels,\n}: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, FraværDag>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                sortFunc={(fraværDagA: FraværDag, fraværDagB: FraværDag) =>\n                    sortItemsByFom({ fom: fraværDagA.dato }, { fom: fraværDagB.dato })\n                }\n                formRenderer={({ onSubmit, onCancel, item }) => (\n                    <FraværDagFormView\n                        fraværDag={item}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        dateRangesToDisable={dateRangesToDisable}\n                        helgedagerIkkeTillatt={helgedagerIkkeTillatt}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                        labels={fraværDagFormLabels}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FraværDagerList fraværDager={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FraværDagerListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { date1YearAgo, date1YearFromNow, dateToday } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { validateRequiredList } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport { FraværDag, FraværPeriode } from '../../../forms/fravær';\nimport FraværPerioderListAndDialog from '../../../forms/fravær/FraværPerioderListAndDialog';\nimport FraværDagerListAndDialog from '../../../forms/fravær/FraværDagerListAndDialog';\nimport FraværPeriodeForm from '../../../forms/fravær/FraværPeriodeForm';\nimport FraværDagFormView from '../../../forms/fravær/FraværDagForm';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { fraværDagToFraværDateRange, validateNoCollisions } from '../../../forms/fravær/fraværUtilities';\nimport { validateAll } from '../../../forms/fravær/fraværValidationUtils';\nimport Panel from 'nav-frontend-paneler';\n\ninterface Props {}\n\nenum FormField {\n    perioder = 'perioder',\n    dager = 'dager',\n}\n\ninterface FormValues {\n    [FormField.perioder]: FraværPeriode[];\n    [FormField.dager]: FraværDag[];\n}\n\nconst initialValues: FormValues = { [FormField.perioder]: [], [FormField.dager]: [] };\n\nconst FraværExample: React.FunctionComponent<Props> = (props) => {\n    const [fraværPeriodeSingleFormValues, setFraværPeriodeSingleFormValues] = useState<\n        Partial<FraværPeriode> | undefined\n    >(undefined);\n    const [fraværDagSingleFormValues, setFraværDagSingleFormValues] = useState<Partial<FraværDag> | undefined>(\n        undefined\n    );\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={(formik) => {\n                        const { values } = formik;\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                                <FormBlock>\n                                    <FraværPerioderListAndDialog<FormField>\n                                        name={FormField.perioder}\n                                        minDate={date1YearAgo}\n                                        maxDate={dateToday}\n                                        validate={validateAll([\n                                            validateRequiredList,\n                                            validateNoCollisions(values[FormField.dager], values[FormField.perioder]),\n                                        ])}\n                                        labels={{\n                                            addLabel: 'Legg til periode',\n                                            listTitle: 'Perioder med fravær',\n                                            modalTitle: 'Fravær hele dager',\n                                            emptyListText: 'Ingen perioder er lagt til',\n                                        }}\n                                        dateRangesToDisable={[\n                                            ...values[FormField.dager].map(fraværDagToFraværDateRange),\n                                        ]}\n                                        helgedagerIkkeTillat={true}\n                                    />\n                                </FormBlock>\n                                <FormBlock>\n                                    <FraværDagerListAndDialog<FormField>\n                                        name={FormField.dager}\n                                        minDate={date1YearAgo}\n                                        maxDate={dateToday}\n                                        validate={validateAll([\n                                            validateRequiredList,\n                                            validateNoCollisions(values[FormField.dager], values[FormField.perioder]),\n                                        ])}\n                                        labels={{\n                                            addLabel: 'Legg til dag med delvis fravær',\n                                            listTitle: 'Dager med delvis fravær',\n                                            modalTitle: 'Fravær deler av dag',\n                                            emptyListText: 'Ingen dager er lagt til',\n                                        }}\n                                        dateRangesToDisable={[\n                                            ...values[FormField.perioder],\n                                        ]}\n                                        helgedagerIkkeTillatt={true}\n                                        fraværDagFormLabels={{\n                                            title: 'Dag med delvis fravær',\n                                            date: 'Dato',\n                                            antallArbeidstimer: 'Antall timer du skulle ha jobbet denne dagen',\n                                            timerFravær: 'Antall timer du var borte fra jobb denne dagen',\n                                        }}\n                                    />\n                                </FormBlock>\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialoger</Undertittel>\n            </Box>\n\n            <FormBlock>\n                <DialogFormWrapper>\n                    <Panel border={true}>\n                        <FraværPeriodeForm\n                            minDate={date1YearAgo}\n                            maxDate={date1YearFromNow}\n                            fraværPeriode={{}}\n                            onSubmit={setFraværPeriodeSingleFormValues}\n                            onCancel={() => {\n                                // tslint:disable-next-line:no-console\n                                return console.log('cancel me');\n                            }}\n                        />\n                    </Panel>\n                    <SubmitPreview values={fraværPeriodeSingleFormValues} />\n                </DialogFormWrapper>\n            </FormBlock>\n\n            <FormBlock>\n                <DialogFormWrapper>\n                    <Panel border={true}>\n                        <FraværDagFormView\n                            minDate={date1YearAgo}\n                            maxDate={date1YearFromNow}\n                            fraværDag={{}}\n                            onSubmit={setFraværDagSingleFormValues}\n                            onCancel={() => {\n                                // tslint:disable-next-line:no-console\n                                return console.log('cancel me');\n                            }}\n                        />\n                    </Panel>\n                    <SubmitPreview values={fraværDagSingleFormValues} />\n                </DialogFormWrapper>\n            </FormBlock>\n        </>\n    );\n};\n\nexport default FraværExample;\n","import { ApiStringDate } from '@navikt/sif-common-core/lib/types/ApiStringDate';\n\nexport enum FrilansoppdragFormField {\n    'arbeidsgiverNavn' = 'arbeidsgiverNavn',\n    'fom' = 'fom',\n    'tom' = 'tom',\n    'erPågående' = 'erPågående'\n}\n\nexport interface Frilansoppdrag {\n    id?: string;\n    [FrilansoppdragFormField.arbeidsgiverNavn]: string;\n    [FrilansoppdragFormField.fom]: Date;\n    [FrilansoppdragFormField.tom]: Date | undefined;\n    [FrilansoppdragFormField.erPågående]: boolean | undefined;\n}\n\nexport interface FrilansoppdragApiData {\n    arbeidsgivernavn: string;\n    fra_og_med: ApiStringDate;\n    til_og_med: ApiStringDate | null;\n    er_pagaende?: boolean;\n}\n\nexport const isFrilansoppdrag = (oppdrag: Partial<Frilansoppdrag>): oppdrag is Frilansoppdrag => {\n    const { arbeidsgiverNavn, erPågående, fom, tom } = oppdrag;\n    if (arbeidsgiverNavn !== undefined && fom !== undefined && (erPågående !== undefined || tom !== undefined)) {\n        return true;\n    }\n    return false;\n};\n","/* eslint-disable react/display-name */\nimport React, { useState } from 'react';\nimport Tabs from 'nav-frontend-tabs';\nimport 'nav-frontend-tabs-style';\nimport PageIntro from '../../components/page-intro/PageIntro';\nimport { RouteConfig } from '../../config/routeConfig';\nimport BostedUtlandExample from './BostedUtlandExample';\nimport FerieuttakExample from './FerieuttakExample';\nimport FosterbarnExample from './FosterbarnExample';\nimport UtenlandsoppholdIPeriodenExample from './UtenlandsoppholdExample';\nimport FraværExample from './FraværExample';\n\nconst tabRoutes: RouteConfig[] = [\n    {\n        path: 'utenlandsopphold',\n        renderContent: () => <UtenlandsoppholdIPeriodenExample />,\n        title: 'Utenlandsopphold i perioden',\n    },\n    {\n        path: 'bosted-utland',\n        renderContent: () => <BostedUtlandExample />,\n        title: 'Bosted utland',\n    },\n    {\n        path: 'ferieuttak',\n        renderContent: () => <FerieuttakExample />,\n        title: 'Ferieuttak i perioden',\n    },\n    {\n        path: 'fosterbarn',\n        renderContent: () => <FosterbarnExample />,\n        title: 'Fosterbarn',\n    },\n    {\n        path: 'fravær',\n        renderContent: () => <FraværExample />,\n        title: 'Fravær',\n    },\n];\n\nconst DialogForms = () => {\n    const [path, setPath] = useState(tabRoutes[0].path);\n    const activeRoute = tabRoutes.find((r) => {\n        return r.path === path;\n    });\n    return (\n        <>\n            <PageIntro title=\"Dialogskjema\">\n                Skjema for ferieuttak i perioden, utenlandsopphold i perioden og bosted i utlandet.\n            </PageIntro>\n            <Tabs\n                onChange={(evt, idx) => setPath(tabRoutes[idx].path)}\n                tabs={tabRoutes.map((r) => ({\n                    label: r.title,\n                    active: r.path === path ? 'true' : 'false',\n                }))}\n            />\n            {activeRoute && activeRoute.renderContent()}\n        </>\n    );\n};\n\nexport default DialogForms;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport dateRangeValidation from '@navikt/sif-common-core/lib/validation/dateRangeValidation';\nimport { validateRequiredField } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport { FormikProps } from 'formik';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { Frilansoppdrag, FrilansoppdragFormField, isFrilansoppdrag } from './types';\n\ninterface Props {\n    oppdrag?: Frilansoppdrag;\n    minDate: Date;\n    maxDate: Date;\n    onSubmit: (oppdrag: Frilansoppdrag) => void;\n    onCancel: () => void;\n}\n\ntype FormValues = Partial<Frilansoppdrag>;\n\nconst Form = getTypedFormComponents<FrilansoppdragFormField, FormValues>();\n\nconst FrilansoppdragForm = ({ onCancel, oppdrag, onSubmit, minDate, maxDate }: Props) => {\n    const onFormikSubmit = (values: Partial<Frilansoppdrag>) => {\n        if (isFrilansoppdrag(values)) {\n            onSubmit(values);\n        } else {\n            throw new Error('FrilansoppdragForm: Formvalues is not a valid Frilansoppdrag on submit.');\n        }\n    };\n\n    const intl = useIntl();\n\n    return (\n        <Form.FormikWrapper\n            initialValues={oppdrag || {}}\n            onSubmit={onFormikSubmit}\n            renderForm={(formik: FormikProps<FormValues>) => {\n                const { values, setFieldValue } = formik;\n                return (\n                    <Form.Form\n                        includeValidationSummary={false}\n                        onCancel={onCancel}\n                        fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                        <Box padBottom=\"l\">\n                            <Systemtittel tag=\"h1\">Frilansoppdrag</Systemtittel>\n                        </Box>\n                        <Form.Input\n                            label=\"Navn på arbeidsgiver\"\n                            name={FrilansoppdragFormField.arbeidsgiverNavn}\n                            validate={validateRequiredField}\n                        />\n                        <Box margin=\"l\">\n                            <Form.DateIntervalPicker\n                                legend={'Periode'}\n                                fromDatepickerProps={{\n                                    label: 'Fra og med',\n                                    fullscreenOverlay: true,\n                                    name: FrilansoppdragFormField.fom,\n                                    showYearSelector: true,\n                                    dateLimitations: {\n                                        minDato: minDate,\n                                        maksDato: values.tom || maxDate,\n                                    },\n                                    validate: (date) =>\n                                        dateRangeValidation.validateFromDate(date, minDate, maxDate, values.tom),\n                                }}\n                                toDatepickerProps={{\n                                    label: 'Til og med',\n                                    name: FrilansoppdragFormField.tom,\n                                    fullscreenOverlay: true,\n                                    disabled: values.erPågående === true,\n                                    showYearSelector: true,\n                                    dateLimitations: {\n                                        minDato: values.fom || minDate,\n                                        maksDato: maxDate,\n                                    },\n                                    validate:\n                                        values.erPågående !== true\n                                            ? (date: Date) =>\n                                                  dateRangeValidation.validateToDate(date, minDate, maxDate, values.fom)\n                                            : undefined,\n                                }}\n                            />\n                            <Form.Checkbox\n                                label=\"Pågående\"\n                                name={FrilansoppdragFormField.erPågående}\n                                afterOnChange={(checked) => {\n                                    if (checked) {\n                                        setFieldValue(FrilansoppdragFormField.tom, undefined);\n                                    }\n                                }}\n                            />\n                        </Box>\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default FrilansoppdragForm;\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { Frilansoppdrag } from './types';\nimport './frilansoppdragList.less';\n\ninterface Props {\n    oppdrag: Frilansoppdrag[];\n    onEdit?: (opphold: Frilansoppdrag) => void;\n    onDelete?: (opphold: Frilansoppdrag) => void;\n}\n\nconst bem = bemUtils('frilansoppdragList');\n\nconst FrilansoppdragList = ({ oppdrag, onDelete, onEdit }: Props) => {\n    const renderOppdragLabel = (o: Frilansoppdrag): React.ReactNode => {\n        return (\n            <div className={bem.element('label')}>\n                <span className={bem.element('navn')}>\n                    {onEdit && <ActionLink onClick={() => onEdit(o)}>{o.arbeidsgiverNavn}</ActionLink>}\n                    {!onEdit && <span>{o.arbeidsgiverNavn}</span>}\n                </span>\n                <span className={bem.element('dato')}>\n                    {prettifyDateExtended(o.fom)}\n                    {`${o.tom ? `- ${prettifyDateExtended(o.tom)}` : ''}`}\n                </span>\n            </div>\n        );\n    };\n\n    return (\n        <ItemList<Frilansoppdrag>\n            getItemId={(o) => o.id}\n            getItemTitle={(o) => o.arbeidsgiverNavn}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderOppdragLabel}\n            items={oppdrag.filter((o) => o.id !== undefined)}\n        />\n    );\n};\n\nexport default FrilansoppdragList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList, FormikValidateFunction, ModalFormAndListLabels\n} from '@navikt/sif-common-formik';\nimport FrilansoppdragForm from './FrilansoppdragForm';\nimport FrilansoppdragList from './FrilansoppdragList';\nimport { Frilansoppdrag } from './types';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    validate?: FormikValidateFunction;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction FrilansoppdragListAndDialog<FieldNames>({ name, minDate, maxDate, validate, labels }: Props<FieldNames>) {\n    return (\n        <FormikModalFormAndList<FieldNames, Frilansoppdrag>\n            name={name}\n            labels={labels}\n            validate={validate}\n            dialogWidth=\"narrow\"\n            sortFunc={sortItemsByFom}\n            formRenderer={({ onSubmit, onCancel, item }) => (\n                <FrilansoppdragForm\n                    oppdrag={item}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    onSubmit={onSubmit}\n                    onCancel={onCancel}\n                />\n            )}\n            listRenderer={({ items, onEdit, onDelete }) => (\n                <FrilansoppdragList oppdrag={items} onEdit={onEdit} onDelete={onDelete} />\n            )}\n        />\n    );\n}\n\nexport default FrilansoppdragListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { date1YearAgo, date1YearFromNow } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { validateRequiredList } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport Panel from 'nav-frontend-paneler';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport FrilansoppdragForm from '../../../forms/frilans/FrilansoppdragForm';\nimport FrilansoppdragListAndDialog from '../../../forms/frilans/FrilansoppdragListAndDialog';\nimport { mapFrilansOppdragToApiData } from '../../../forms/frilans/mapFrilansOppdragToApiData';\nimport { Frilansoppdrag, isFrilansoppdrag } from '../../../forms/frilans/types';\nimport PageIntro from '../../components/page-intro/PageIntro';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\n\nenum FormField {\n    'frilansoppdrag' = 'frilansoppdrag',\n}\n\ninterface FormValues {\n    [FormField.frilansoppdrag]: Frilansoppdrag[];\n}\nconst initialValues: FormValues = { frilansoppdrag: [] };\n\nconst FrilansExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<Frilansoppdrag> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n\n    return (\n        <>\n            <PageIntro title=\"Frilans\">Skjema som brukes for på registrere ett frilansoppdrag</PageIntro>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                                <FrilansoppdragListAndDialog<FormField>\n                                    name={FormField.frilansoppdrag}\n                                    validate={validateRequiredList}\n                                    minDate={date1YearAgo}\n                                    maxDate={date1YearFromNow}\n                                    labels={{\n                                        addLabel: 'Legg til',\n                                        listTitle: 'Frilansoppdrag',\n                                        modalTitle: 'Frilansoppdrag',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n            <DialogFormWrapper width=\"wide\">\n                <Panel border={true}>\n                    <FrilansoppdragForm\n                        minDate={date1YearAgo}\n                        maxDate={date1YearFromNow}\n                        onCancel={() => console.log('cancel me')}\n                        onSubmit={(values) => setSingleFormValues(values)}\n                    />\n                    <Box margin=\"l\">\n                        <SubmitPreview values={singleFormValues} />\n                    </Box>\n                    <Box margin=\"xl\">\n                        <Undertittel>API-data</Undertittel>\n                        <SubmitPreview\n                            values={\n                                singleFormValues && isFrilansoppdrag(singleFormValues)\n                                    ? mapFrilansOppdragToApiData(singleFormValues)\n                                    : undefined\n                            }\n                        />\n                    </Box>\n                </Panel>\n            </DialogFormWrapper>\n        </>\n    );\n};\n\nexport default FrilansExample;\n","import { formatDateToApiFormat } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { Frilansoppdrag, FrilansoppdragApiData } from './types';\n\nexport const mapFrilansOppdragToApiData = (frilansoppdrag: Frilansoppdrag): FrilansoppdragApiData | undefined => {\n    const { arbeidsgiverNavn, erPågående, fom, tom } = frilansoppdrag;\n    return {\n        arbeidsgivernavn: arbeidsgiverNavn,\n        fra_og_med: formatDateToApiFormat(fom),\n        til_og_med: erPågående || tom === undefined ? null : formatDateToApiFormat(tom),\n        er_pagaende: erPågående\n    };\n};\n","import { ApiStringDate } from '@navikt/sif-common-core/lib/types/ApiStringDate';\nimport { YesOrNo } from '@navikt/sif-common-core/lib/types/YesOrNo';\n\nexport enum Næringstype {\n    'FISKER' = 'FISKE',\n    'JORDBRUK' = 'JORDBRUK_SKOGBRUK',\n    'DAGMAMMA' = 'DAGMAMMA',\n    'ANNEN' = 'ANNEN',\n}\n\nexport enum VirksomhetFormField {\n    'næringstyper' = 'næringstyper',\n    'fiskerErPåBladB' = 'fiskerErPåBladB',\n    'fom' = 'fom',\n    'tom' = 'tom',\n    'næringsinntekt' = 'næringsinntekt',\n    'erPågående' = 'erPågående',\n    'navnPåVirksomheten' = 'navnPåVirksomheten',\n    'organisasjonsnummer' = 'organisasjonsnummer',\n    'registrertINorge' = 'registrertINorge',\n    'registrertILand' = 'registrertILand',\n    'harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene' = 'harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene',\n    'oppstartsdato' = 'oppstartsdato',\n    'hattVarigEndringAvNæringsinntektSiste4Kalenderår' = 'hattVarigEndringAvNæringsinntektSiste4Kalenderår',\n    'varigEndringINæringsinntekt_dato' = 'varigEndringINæringsinntekt_dato',\n    'varigEndringINæringsinntekt_inntektEtterEndring' = 'varigEndringINæringsinntekt_inntektEtterEndring',\n    'varigEndringINæringsinntekt_forklaring' = 'varigEndringINæringsinntekt_forklaring',\n    'endretNæringsinntektInformasjon' = 'endretNæringsinntektInformasjon',\n    'harRegnskapsfører' = 'harRegnskapsfører',\n    'regnskapsfører' = 'regnskapsfører',\n    'regnskapsfører_navn' = 'regnskapsfører_navn',\n    'regnskapsfører_telefon' = 'regnskapsfører_telefon',\n    'harRevisor' = 'harRevisor',\n    'revisor_navn' = 'revisor_navn',\n    'revisor_telefon' = 'revisor_telefon',\n    'kanInnhenteOpplsyningerFraRevisor' = 'kanInnhenteOpplsyningerFraRevisor',\n}\n\nexport interface VirksomhetHideFields {\n    [VirksomhetFormField.fiskerErPåBladB]: boolean;\n}\n\nexport interface Virksomhet {\n    id?: string;\n    [VirksomhetFormField.næringstyper]: Næringstype[];\n    [VirksomhetFormField.fiskerErPåBladB]?: YesOrNo;\n    [VirksomhetFormField.fom]: Date;\n    [VirksomhetFormField.tom]?: Date;\n    [VirksomhetFormField.næringsinntekt]?: number;\n    [VirksomhetFormField.erPågående]?: boolean;\n    [VirksomhetFormField.navnPåVirksomheten]: string;\n    [VirksomhetFormField.organisasjonsnummer]?: string;\n    [VirksomhetFormField.registrertINorge]: YesOrNo;\n    [VirksomhetFormField.registrertILand]?: string;\n    [VirksomhetFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene]?: YesOrNo;\n    [VirksomhetFormField.oppstartsdato]?: Date;\n    [VirksomhetFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår]?: YesOrNo;\n    [VirksomhetFormField.varigEndringINæringsinntekt_dato]?: Date;\n    [VirksomhetFormField.varigEndringINæringsinntekt_inntektEtterEndring]?: number;\n    [VirksomhetFormField.varigEndringINæringsinntekt_forklaring]?: string;\n    [VirksomhetFormField.harRegnskapsfører]: YesOrNo;\n    [VirksomhetFormField.regnskapsfører_navn]?: string;\n    [VirksomhetFormField.regnskapsfører_telefon]?: string;\n    [VirksomhetFormField.harRevisor]?: YesOrNo;\n    [VirksomhetFormField.revisor_navn]?: string;\n    [VirksomhetFormField.revisor_telefon]?: string;\n    [VirksomhetFormField.kanInnhenteOpplsyningerFraRevisor]?: YesOrNo;\n}\n\nexport const isVirksomhet = (virksomhet: Partial<Virksomhet>): virksomhet is Virksomhet => {\n    return true;\n};\n\nexport interface VirksomhetApiData {\n    næringstyper: Næringstype[];\n    fiskerErPåBladB?: boolean;\n    fraOgMed: ApiStringDate;\n    tilOgMed?: ApiStringDate | null;\n    næringsinntekt?: number;\n    navnPåVirksomheten: string;\n    organisasjonsnummer?: string;\n    registrertINorge: boolean;\n    registrertIUtlandet?: {\n        landkode: string;\n        landnavn: string;\n    };\n    yrkesaktivSisteTreFerdigliknedeÅrene?: {\n        oppstartsdato: ApiStringDate;\n    };\n    varigEndring?: {\n        dato: ApiStringDate;\n        inntektEtterEndring: number;\n        forklaring: string;\n    };\n    regnskapsfører?: {\n        navn: string;\n        telefon: string;\n    };\n    revisor?: {\n        navn: string;\n        telefon: string;\n        kanInnhenteOpplysninger?: boolean;\n    };\n}\n","import { Næringstype } from './types';\n\nexport const harFiskerNæringstype = (næringstyper: Næringstype[]): boolean =>\n    næringstyper.find((n) => n === Næringstype.FISKER) !== undefined;\n","import { formatDateToApiFormat } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { YesOrNo, getCountryName } from '@navikt/sif-common-formik/lib';\nimport { Virksomhet, VirksomhetApiData } from './types';\nimport { harFiskerNæringstype } from './virksomhetUtils';\n\nexport const mapVirksomhetToVirksomhetApiData = (\n    locale: string,\n    virksomhet: Virksomhet,\n    harBesvartFikserPåBladB?: boolean\n): VirksomhetApiData => {\n    const registrertINorge = virksomhet.registrertINorge === YesOrNo.YES;\n    const harRegnskapsfører = virksomhet.harRegnskapsfører === YesOrNo.YES;\n\n    const data: VirksomhetApiData = {\n        næringstyper: [...virksomhet.næringstyper],\n        navnPåVirksomheten: virksomhet.navnPåVirksomheten,\n        registrertINorge,\n        ...(registrertINorge\n            ? {\n                  organisasjonsnummer: virksomhet.organisasjonsnummer,\n              }\n            : {\n                  registrertIUtlandet: virksomhet.registrertILand\n                      ? {\n                            landkode: virksomhet.registrertILand,\n                            landnavn: getCountryName(virksomhet.registrertILand, locale),\n                        }\n                      : undefined,\n              }),\n        fraOgMed: formatDateToApiFormat(virksomhet.fom),\n        tilOgMed: virksomhet.erPågående || virksomhet.tom === undefined ? null : formatDateToApiFormat(virksomhet.tom),\n        næringsinntekt: virksomhet.næringsinntekt,\n    };\n\n    if (virksomhet.hattVarigEndringAvNæringsinntektSiste4Kalenderår) {\n        const harHatt = virksomhet.hattVarigEndringAvNæringsinntektSiste4Kalenderår === YesOrNo.YES;\n        const {\n            varigEndringINæringsinntekt_dato,\n            varigEndringINæringsinntekt_forklaring,\n            varigEndringINæringsinntekt_inntektEtterEndring,\n        } = virksomhet;\n        if (\n            harHatt &&\n            varigEndringINæringsinntekt_dato &&\n            varigEndringINæringsinntekt_inntektEtterEndring !== undefined &&\n            varigEndringINæringsinntekt_forklaring\n        ) {\n            data.varigEndring = {\n                dato: formatDateToApiFormat(varigEndringINæringsinntekt_dato),\n                forklaring: varigEndringINæringsinntekt_forklaring,\n                inntektEtterEndring: varigEndringINæringsinntekt_inntektEtterEndring,\n            };\n        }\n    }\n\n    if (harFiskerNæringstype(virksomhet.næringstyper) && harBesvartFikserPåBladB !== true) {\n        data.fiskerErPåBladB = virksomhet.fiskerErPåBladB === YesOrNo.YES;\n    }\n\n    if (virksomhet.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene) {\n        const harBlittAktiv = virksomhet.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene === YesOrNo.YES;\n        if (harBlittAktiv && virksomhet.oppstartsdato) {\n            data.yrkesaktivSisteTreFerdigliknedeÅrene = {\n                oppstartsdato: formatDateToApiFormat(virksomhet.oppstartsdato),\n            };\n        }\n    }\n\n    if (harRegnskapsfører) {\n        data.regnskapsfører = {\n            navn: virksomhet.regnskapsfører_navn!,\n            telefon: virksomhet.regnskapsfører_telefon!,\n        };\n    }\n\n    if (!harRegnskapsfører) {\n        if (virksomhet.harRevisor === YesOrNo.YES) {\n            data.revisor = {\n                navn: virksomhet.revisor_navn!,\n                telefon: virksomhet.revisor_telefon!,\n                kanInnhenteOpplysninger: virksomhet.kanInnhenteOpplsyningerFraRevisor === YesOrNo.YES,\n            };\n        }\n    }\n\n    return data;\n};\n","import React from 'react';\nimport { VirksomhetFormText } from './textKeys';\n\nexport const VirksomhetTextNB: VirksomhetFormText = {\n    næringstype_fisker: 'Fisker',\n    næringstype_jordbruker: 'Jordbruker',\n    næringstype_dagmamma: 'Dagmamma eller familiebarnehage i eget hjem',\n    næringstype_annet: 'Annet',\n    form_title: 'Opplysninger om virksomheten din',\n    hvilken_type_virksomhet: 'Hvilken type virksomhet har du?',\n    hva_heter_virksomheten: 'Hva heter virksomheten?',\n    fisker_blad_b: 'Er du fisker på blad B?',\n    veielder_fisker: (virksomhet) =>\n        `Hvis du ikke har organisasjonsnummer, svarer du nei på spørsmålet \"Er ${virksomhet} registrert i Norge?\" I nedtrekkslisten velger du at virksomheten er registrert i Norge.`,\n    registert_i_norge: (virksomhet: string) => `Er ${virksomhet} registert i Norge?`,\n    registert_i_hvilket_land: (virksomhet: string) => `I hvilket land er ${virksomhet} din registrert i?`,\n    organisasjonsnummer: 'Hva er organisasjonsnummeret?',\n    startdato: (navnPåVirksomheten) => `Når startet du ${navnPåVirksomheten}?`,\n    kalender_fom: 'Startdato',\n    kalender_tom: 'Eventuell sluttdato',\n    kalender_pågående: 'Er pågående',\n    næringsinntekt:\n        'Hva har du hatt i næringsresultat før skatt de siste 12 månedene? Hvis virksomheten har vart i kortere tid, kan du bruke denne perioden og regne om til årsinntekt. Oppgi beløpet i hele kroner.',\n    næringsinntekt_info: 'Næringsresultatet er inntekter du har i næringen din, minus utgifter og avskrivninger.',\n    næringsinntekt_info_title: 'Hva er næringsresultatet?',\n    har_blitt_yrkesaktiv: 'Har du begynt i arbeidslivet i løpet av de 3 siste ferdigliknede årene?',\n    har_blitt_yrkesaktiv_info_title: 'Hva betyr dette?',\n    har_blitt_yrkesaktiv_info:\n        'Du skal svare ja på spørsmålet hvis du før oppstart av næringsvirksomheten din hadde lav eller ingen inntekt.',\n    har_blitt_yrkesaktiv_dato: 'Oppgi dato for når du begynte i arbeidslivet',\n    varig_endring_spm:\n        'Har du hatt en varig endring i arbeidsforholdet ditt, virksomheten eller arbeidssituasjonen din de siste fire årene?',\n    varig_endring_dato: 'Oppgi dato for endringen',\n    varig_endring_inntekt: 'Oppgi næringsinntekten din etter endringen. Oppgi årsinntekten i hele kroner.',\n    varig_endring_tekst:\n        'Her kan du skrive kort hva som har endret seg i arbeidsforholdet ditt, virksomheten eller arbeidssituasjonen din',\n    regnskapsfører_spm: 'Har du regnskapsfører?',\n    regnskapsfører_navn: 'Oppgi navnet til regnskapsfører',\n    regnskapsfører_telefon: 'Oppgi telefonnummeret til regnskapsfører',\n    revisor_spm: 'Har du revisor?',\n    revisor_navn: 'Oppgi navnet til revisor',\n    revisor_telefon: 'Oppgi telefonnummeret til revisor',\n    revisor_fullmakt: 'Gir du NAV fullmakt til å innhente opplysninger direkte fra revisor?',\n    veileder_innhenter_info_html: () => (\n        <div>\n            Vi henter inn opplysninger om virksomheten og inntekten din fra offentlige registre.\n            <br />\n            Vi tar kontakt med deg hvis vi trenger flere opplysninger.\n        </div>\n    ),\n};\n","import React from 'react';\nimport CounsellorPanel from '@navikt/sif-common-core/lib/components/counsellor-panel/CounsellorPanel';\nimport { VirksomhetTextNB } from '../i18n/virksomhetForm.texts';\n\ninterface Props {\n    navnPåVirksomhet: string;\n}\n\nconst txt = VirksomhetTextNB;\n\nconst InfoTilFisker = ({ navnPåVirksomhet }: Props) => (\n    <CounsellorPanel>{txt.veielder_fisker(navnPåVirksomhet)}</CounsellorPanel>\n);\n\nexport default InfoTilFisker;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport CounsellorPanel from '@navikt/sif-common-core/lib/components/counsellor-panel/CounsellorPanel';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport ResponsivePanel from '@navikt/sif-common-core/lib/components/responsive-panel/ResponsivePanel';\nimport ExpandableInfo from '@navikt/sif-common-core/lib/components/expandable-content/ExpandableInfo';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { date3YearsAgo, date4YearsAgo, dateToday } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    validateOrgNumber,\n    validatePhoneNumber,\n    validateRequiredField,\n    validateRequiredList,\n    validateRequiredNumber,\n    validateYesOrNoIsAnswered,\n} from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { hasValue } from '@navikt/sif-common-core/lib/validation/hasValue';\nimport { FormikYesOrNoQuestion, getTypedFormComponents, YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { FormikProps } from 'formik';\nimport moment from 'moment';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { VirksomhetTextNB } from './i18n/virksomhetForm.texts';\nimport InfoTilFisker from './parts/InfoTilFisker';\nimport { isVirksomhet, Næringstype, Virksomhet, VirksomhetFormField, VirksomhetHideFields } from './types';\nimport { harFiskerNæringstype } from './virksomhetUtils';\n\ninterface Props {\n    virksomhet?: Virksomhet;\n    hideFormFields?: VirksomhetHideFields;\n    onSubmit: (oppdrag: Virksomhet) => void;\n    onCancel: () => void;\n}\n\nconst MAKS_INNTEKT = 999999999;\ntype FormValues = Partial<Virksomhet>;\n\nconst Form = getTypedFormComponents<VirksomhetFormField, FormValues>();\n\nconst visNæringsinntekt = (values: Virksomhet): boolean => {\n    return values.fom && moment(values.fom).isAfter(date4YearsAgo);\n};\n\nconst ensureValidNæringsinntekt = (values: Virksomhet): number | undefined => {\n    if (visNæringsinntekt(values)) {\n        return values.næringsinntekt;\n    }\n    return undefined;\n};\n\nconst initialValues: Partial<FormValues> = { næringstyper: [] };\n\nconst VirksomhetForm = ({ onCancel, virksomhet, onSubmit, hideFormFields }: Props) => {\n    const onFormikSubmit = (values: Partial<Virksomhet>) => {\n        if (isVirksomhet(values)) {\n            onSubmit({\n                ...values,\n                næringsinntekt: ensureValidNæringsinntekt(values),\n            });\n        } else {\n            throw new Error('VirksomhetForm: Formvalues is not a valid Virksomhet on submit.');\n        }\n    };\n\n    const intl = useIntl();\n    const txt = VirksomhetTextNB;\n    const hideFiskerPåBladB = hideFormFields?.[VirksomhetFormField.fiskerErPåBladB] === true;\n\n    return (\n        <Form.FormikWrapper\n            initialValues={virksomhet || initialValues}\n            onSubmit={onFormikSubmit}\n            renderForm={(formik: FormikProps<FormValues>) => {\n                const { values, setFieldValue } = formik;\n                const { navnPåVirksomheten = 'virksomheten' } = values;\n                return (\n                    <Form.Form\n                        includeValidationSummary={true}\n                        onCancel={onCancel}\n                        fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                        <Box padBottom=\"l\">\n                            <Systemtittel tag=\"h1\">{txt.form_title}</Systemtittel>\n                        </Box>\n                        <Form.CheckboxPanelGroup\n                            name={VirksomhetFormField.næringstyper}\n                            legend={txt.hvilken_type_virksomhet}\n                            checkboxes={[\n                                {\n                                    value: Næringstype.FISKER,\n                                    label: txt.næringstype_fisker,\n                                },\n                                {\n                                    value: Næringstype.JORDBRUK,\n                                    label: txt.næringstype_jordbruker,\n                                },\n                                {\n                                    value: Næringstype.DAGMAMMA,\n                                    label: txt.næringstype_dagmamma,\n                                },\n                                {\n                                    value: Næringstype.ANNEN,\n                                    label: txt.næringstype_annet,\n                                },\n                            ]}\n                            validate={validateRequiredList}\n                        />\n\n                        {harFiskerNæringstype(values.næringstyper || []) && hideFiskerPåBladB !== true && (\n                            <Box margin=\"xl\">\n                                <FormikYesOrNoQuestion<VirksomhetFormField>\n                                    name={VirksomhetFormField.fiskerErPåBladB}\n                                    legend={txt.fisker_blad_b}\n                                    validate={validateYesOrNoIsAnswered}\n                                />\n                            </Box>\n                        )}\n\n                        <Box margin=\"xl\">\n                            <Form.Input\n                                name={VirksomhetFormField.navnPåVirksomheten}\n                                label={txt.hva_heter_virksomheten}\n                                validate={validateRequiredField}\n                                maxLength={50}\n                            />\n                        </Box>\n\n                        {harFiskerNæringstype(values.næringstyper || []) &&\n                            values.navnPåVirksomheten !== undefined &&\n                            hasValue(navnPåVirksomheten) && (\n                                <Box margin=\"xl\">\n                                    <InfoTilFisker navnPåVirksomhet={values.navnPåVirksomheten} />\n                                </Box>\n                            )}\n\n                        <Box margin=\"xl\">\n                            <Form.YesOrNoQuestion\n                                name={VirksomhetFormField.registrertINorge}\n                                legend={txt.registert_i_norge(navnPåVirksomheten)}\n                                validate={validateYesOrNoIsAnswered}\n                            />\n                        </Box>\n\n                        {values.registrertINorge === YesOrNo.NO && (\n                            <Box margin=\"xl\">\n                                <Form.CountrySelect\n                                    name={VirksomhetFormField.registrertILand}\n                                    label={txt.registert_i_hvilket_land(navnPåVirksomheten)}\n                                    validate={validateRequiredField}\n                                    useAlpha3Code={true}\n                                />\n                            </Box>\n                        )}\n\n                        {values.registrertINorge === YesOrNo.YES && (\n                            <Box margin=\"xl\">\n                                <Form.Input\n                                    name={VirksomhetFormField.organisasjonsnummer}\n                                    label={txt.organisasjonsnummer}\n                                    style={{ maxWidth: '10rem' }}\n                                    maxLength={9}\n                                    validate={(value) =>\n                                        validateOrgNumber(value, values.registrertINorge === YesOrNo.YES)\n                                    }\n                                />\n                            </Box>\n                        )}\n\n                        {(values.registrertINorge === YesOrNo.YES || values.registrertINorge === YesOrNo.NO) && (\n                            <Box margin=\"xl\">\n                                <Form.DateIntervalPicker\n                                    legend={txt.startdato(navnPåVirksomheten)}\n                                    fromDatepickerProps={{\n                                        label: txt.kalender_fom,\n                                        name: VirksomhetFormField.fom,\n                                        showYearSelector: true,\n                                        dateLimitations: {\n                                            maksDato: dateToday,\n                                        },\n                                        validate: validateRequiredField,\n                                    }}\n                                    toDatepickerProps={{\n                                        label: txt.kalender_tom,\n                                        name: VirksomhetFormField.tom,\n                                        disabled: values.erPågående === true,\n                                        showYearSelector: true,\n                                        dateLimitations: {\n                                            minDato: values.fom || undefined,\n                                            maksDato: dateToday,\n                                        },\n                                    }}\n                                />\n                                <Form.Checkbox\n                                    label={txt.kalender_pågående}\n                                    name={VirksomhetFormField.erPågående}\n                                    afterOnChange={(checked) => {\n                                        if (checked) {\n                                            setFieldValue(VirksomhetFormField.tom, undefined);\n                                        }\n                                    }}\n                                />\n                            </Box>\n                        )}\n\n                        {values.fom && moment(values.fom).isAfter(date4YearsAgo) && (\n                            <>\n                                <Box margin=\"xl\">\n                                    <Form.Input\n                                        name={VirksomhetFormField.næringsinntekt}\n                                        label={txt.næringsinntekt}\n                                        type=\"number\"\n                                        maxLength={10}\n                                        max={MAKS_INNTEKT}\n                                        style={{ maxWidth: '10rem' }}\n                                        validate={validateRequiredNumber({ min: 0, max: MAKS_INNTEKT })}\n                                        description={\n                                            <ExpandableInfo title={txt.næringsinntekt_info_title}>\n                                                {txt.næringsinntekt_info}\n                                            </ExpandableInfo>\n                                        }\n                                    />\n                                </Box>\n                                <Box margin=\"xl\">\n                                    <Form.YesOrNoQuestion\n                                        name={\n                                            VirksomhetFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene\n                                        }\n                                        legend={txt.har_blitt_yrkesaktiv}\n                                        validate={validateYesOrNoIsAnswered}\n                                        description={\n                                            <ExpandableInfo title={txt.har_blitt_yrkesaktiv_info_title}>\n                                                {txt.har_blitt_yrkesaktiv_info}\n                                            </ExpandableInfo>\n                                        }\n                                    />\n                                </Box>\n                                {values.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene === YesOrNo.YES && (\n                                    <FormBlock margin=\"m\">\n                                        <ResponsivePanel>\n                                            <Form.DatePicker\n                                                name={VirksomhetFormField.oppstartsdato}\n                                                label={txt.har_blitt_yrkesaktiv_dato}\n                                                showYearSelector={true}\n                                                dateLimitations={{\n                                                    minDato: date3YearsAgo,\n                                                    maksDato: dateToday,\n                                                }}\n                                                validate={validateRequiredField}\n                                            />\n                                        </ResponsivePanel>\n                                    </FormBlock>\n                                )}\n                            </>\n                        )}\n                        {values.fom && moment(values.fom).isAfter(date4YearsAgo) === false && (\n                            <>\n                                <Box margin=\"xl\">\n                                    <Form.YesOrNoQuestion\n                                        name={VirksomhetFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår}\n                                        legend={txt.varig_endring_spm}\n                                        validate={validateYesOrNoIsAnswered}\n                                    />\n                                </Box>\n                                {values.hattVarigEndringAvNæringsinntektSiste4Kalenderår === YesOrNo.YES && (\n                                    <>\n                                        <Box margin=\"xl\">\n                                            <Form.DatePicker\n                                                name={VirksomhetFormField.varigEndringINæringsinntekt_dato}\n                                                label={txt.varig_endring_dato}\n                                                validate={validateRequiredField}\n                                                dateLimitations={{\n                                                    minDato: date4YearsAgo,\n                                                    maksDato: dateToday,\n                                                }}\n                                            />\n                                        </Box>\n                                        <Box margin=\"xl\">\n                                            <Form.Input\n                                                name={\n                                                    VirksomhetFormField.varigEndringINæringsinntekt_inntektEtterEndring\n                                                }\n                                                label={txt.varig_endring_inntekt}\n                                                type=\"number\"\n                                                maxLength={10}\n                                                max={MAKS_INNTEKT}\n                                                style={{ maxWidth: '10rem' }}\n                                                validate={validateRequiredNumber({ min: 0, max: MAKS_INNTEKT })}\n                                            />\n                                        </Box>\n                                        <Box margin=\"xl\">\n                                            <Form.Textarea\n                                                name={VirksomhetFormField.varigEndringINæringsinntekt_forklaring}\n                                                label={txt.varig_endring_tekst}\n                                                validate={validateRequiredField}\n                                                maxLength={1000}\n                                            />\n                                        </Box>\n                                    </>\n                                )}\n                            </>\n                        )}\n\n                        {(values.fom || values.registrertINorge === YesOrNo.YES) && (\n                            <>\n                                <Box margin=\"xl\">\n                                    <Form.YesOrNoQuestion\n                                        name={VirksomhetFormField.harRegnskapsfører}\n                                        legend={txt.regnskapsfører_spm}\n                                        validate={validateYesOrNoIsAnswered}\n                                    />\n                                </Box>\n\n                                {values.harRegnskapsfører === YesOrNo.YES && (\n                                    <FormBlock margin=\"m\">\n                                        <ResponsivePanel>\n                                            <Form.Input\n                                                name={VirksomhetFormField.regnskapsfører_navn}\n                                                label={txt.regnskapsfører_navn}\n                                                validate={validateRequiredField}\n                                                maxLength={50}\n                                            />\n                                            <Box margin=\"xl\">\n                                                <Form.Input\n                                                    name={VirksomhetFormField.regnskapsfører_telefon}\n                                                    label={txt.regnskapsfører_telefon}\n                                                    validate={validatePhoneNumber}\n                                                    maxLength={15}\n                                                />\n                                            </Box>\n                                        </ResponsivePanel>\n                                    </FormBlock>\n                                )}\n\n                                {values.harRegnskapsfører === YesOrNo.NO && (\n                                    <>\n                                        <Box margin=\"xl\">\n                                            <Form.YesOrNoQuestion\n                                                name={VirksomhetFormField.harRevisor}\n                                                legend={txt.revisor_spm}\n                                                validate={validateYesOrNoIsAnswered}\n                                            />\n                                        </Box>\n\n                                        {values.harRevisor === YesOrNo.YES && (\n                                            <FormBlock margin=\"m\">\n                                                <ResponsivePanel>\n                                                    <Form.Input\n                                                        name={VirksomhetFormField.revisor_navn}\n                                                        label={txt.revisor_navn}\n                                                        validate={validateRequiredField}\n                                                        maxLength={50}\n                                                    />\n                                                    <Box margin=\"xl\">\n                                                        <Form.Input\n                                                            name={VirksomhetFormField.revisor_telefon}\n                                                            label={txt.revisor_telefon}\n                                                            validate={validatePhoneNumber}\n                                                            maxLength={15}\n                                                        />\n                                                    </Box>\n                                                    <Box margin=\"xl\">\n                                                        <Form.YesOrNoQuestion\n                                                            name={VirksomhetFormField.kanInnhenteOpplsyningerFraRevisor}\n                                                            legend={txt.revisor_fullmakt}\n                                                            validate={validateYesOrNoIsAnswered}\n                                                        />\n                                                    </Box>\n                                                </ResponsivePanel>\n                                            </FormBlock>\n                                        )}\n                                    </>\n                                )}\n                            </>\n                        )}\n                        {(values.harRegnskapsfører === YesOrNo.YES ||\n                            (values.harRevisor && values.harRevisor !== YesOrNo.UNANSWERED)) && (\n                            <Box margin=\"xl\">\n                                <CounsellorPanel>\n                                    {txt.veileder_innhenter_info_html()}\n\n                                    {/* /** Nynorsk:\n                                     Vi hentar inn opplysningar om verksemda og inntekta di frå offentlege register. Vi tek kontakt med deg viss vi treng fleire opplysningar.\n                                      */}\n                                </CounsellorPanel>\n                            </Box>\n                        )}\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default VirksomhetForm;\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { Virksomhet } from './types';\nimport './virksomhetList.less';\n\ninterface Props {\n    virksomheter: Virksomhet[];\n    onEdit?: (virksomhet: Virksomhet) => void;\n    onDelete?: (virksomhet: Virksomhet) => void;\n}\n\nconst bem = bemUtils('virksomhetList');\n\nconst VirksomhetList = ({ virksomheter = [], onDelete, onEdit }: Props) => {\n    const næringLabel = (næring: Virksomhet): React.ReactNode => {\n        return (\n            <div className={bem.element('label')}>\n                <span className={bem.element('navn')}>\n                    {onEdit && <ActionLink onClick={() => onEdit(næring)}>{næring.navnPåVirksomheten}</ActionLink>}\n                    {!onEdit && <span>{næring.navnPåVirksomheten}</span>}\n                </span>\n            </div>\n        );\n    };\n\n    return (\n        <ItemList<Virksomhet>\n            getItemId={(næring) => næring.organisasjonsnummer}\n            getItemTitle={(næring) => næring.navnPåVirksomheten}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={næringLabel}\n            items={virksomheter.filter((næring) => næring.id !== undefined)}\n        />\n    );\n};\n\nexport default VirksomhetList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList, FormikValidateFunction, ModalFormAndListLabels\n} from '@navikt/sif-common-formik';\nimport { Virksomhet, VirksomhetHideFields } from './types';\nimport VirksomhetForm from './VirksomhetForm';\nimport VirksomhetListe from './VirksomhetList';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    validate?: FormikValidateFunction;\n    labels: ModalFormAndListLabels;\n    hideFormFields?: VirksomhetHideFields;\n    onAfterChange?: (virksomheter: Virksomhet[]) => void;\n}\n\nfunction VirksomhetListAndDialog<FieldNames>({\n    name,\n    validate,\n    labels,\n    hideFormFields,\n    onAfterChange\n}: Props<FieldNames>) {\n    return (\n        <FormikModalFormAndList<FieldNames, Virksomhet>\n            name={name}\n            labels={labels}\n            validate={validate}\n            dialogWidth=\"narrow\"\n            sortFunc={sortItemsByFom}\n            formRenderer={({ onSubmit, onCancel, item }) => (\n                <VirksomhetForm\n                    virksomhet={item}\n                    onSubmit={onSubmit}\n                    onCancel={onCancel}\n                    hideFormFields={hideFormFields}\n                />\n            )}\n            listRenderer={({ items, onEdit, onDelete }) => (\n                <VirksomhetListe virksomheter={items} onEdit={onEdit} onDelete={onDelete} />\n            )}\n            onAfterChange={onAfterChange}\n        />\n    );\n}\n\nexport default VirksomhetListAndDialog;\n","/* eslint-disable @typescript-eslint/camelcase */\nimport React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { validateRequiredList } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { TypedFormikForm, TypedFormikWrapper, YesOrNo } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport Panel from 'nav-frontend-paneler';\nimport { Checkbox } from 'nav-frontend-skjema';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { mapVirksomhetToVirksomhetApiData } from '../../../forms/virksomhet/mapVirksomhetToApiData';\nimport { isVirksomhet, Næringstype, Virksomhet } from '../../../forms/virksomhet/types';\nimport VirksomhetForm from '../../../forms/virksomhet/VirksomhetForm';\nimport VirksomhetListAndDialog from '../../../forms/virksomhet/VirksomhetListAndDialog';\nimport PageIntro from '../../components/page-intro/PageIntro';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\n\nenum FormField {\n    'virksomheter' = 'virksomheter',\n}\n\nexport const mockVirksomhet: Virksomhet = {\n    id: '024782550-1402-01448-04932-71872390929312',\n    næringstyper: [Næringstype.ANNEN, Næringstype.DAGMAMMA],\n    navnPåVirksomheten: 'Gamle greier',\n    registrertINorge: YesOrNo.YES,\n    organisasjonsnummer: '123123123',\n    fom: new Date('2007-02-01T00:00:00.000Z'),\n    erPågående: true,\n    hattVarigEndringAvNæringsinntektSiste4Kalenderår: YesOrNo.YES,\n    varigEndringINæringsinntekt_dato: new Date('2019-12-09T00:00:00.000Z'),\n    varigEndringINæringsinntekt_inntektEtterEndring: 200000,\n    varigEndringINæringsinntekt_forklaring: 'Jeg fikk flere barn',\n    harRegnskapsfører: YesOrNo.YES,\n    harRevisor: YesOrNo.YES,\n    regnskapsfører_navn: 'Regnskapsefører Truls',\n    regnskapsfører_telefon: '98219409',\n};\n\ninterface FormValues {\n    [FormField.virksomheter]: Virksomhet[];\n}\nconst initialValues: FormValues = { virksomheter: [] };\n\nconst VirksomhetExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<Virksomhet> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const [hideFisker, setHideFisker] = useState<boolean>(false);\n    const intl = useIntl();\n    return (\n        <>\n            <PageIntro title=\"Næringsvirksomhet\">Skjema som brukes for på registrere en næringsvirksomhet.</PageIntro>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                                <VirksomhetListAndDialog<FormField>\n                                    name={FormField.virksomheter}\n                                    validate={validateRequiredList}\n                                    hideFormFields={{ fiskerErPåBladB: hideFisker }}\n                                    labels={{\n                                        addLabel: 'Legg til',\n                                        listTitle: 'Virksomhet',\n                                        modalTitle: 'Virksomhet',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n            <DialogFormWrapper width=\"wide\">\n                <Panel border={true}>\n                    <VirksomhetForm\n                        hideFormFields={{ fiskerErPåBladB: hideFisker }}\n                        onCancel={() => setSingleFormValues({})}\n                        onSubmit={(values) => setSingleFormValues(values)}\n                    />\n                    <Box margin=\"l\">\n                        <hr />\n                        <Panel style={{ padding: '1rem' }}>\n                            <Box padBottom=\"m\">Spørsmål som kan skjules:</Box>\n                            <Checkbox\n                                label=\"Fisker på Blad B\"\n                                checked={hideFisker}\n                                onChange={(evt) => setHideFisker(evt.currentTarget.checked)}\n                            />\n                        </Panel>\n                    </Box>\n                    <Box margin=\"l\">\n                        <SubmitPreview values={singleFormValues} />\n                    </Box>\n                    <Box margin=\"xl\">\n                        <Undertittel>API-data</Undertittel>\n                        <SubmitPreview\n                            values={\n                                singleFormValues && isVirksomhet(singleFormValues)\n                                    ? mapVirksomhetToVirksomhetApiData(intl.locale, singleFormValues)\n                                    : undefined\n                            }\n                        />\n                    </Box>\n                </Panel>\n            </DialogFormWrapper>\n        </>\n    );\n};\n\nexport default VirksomhetExample;\n","import React from 'react';\nimport PageIntro from './components/page-intro/PageIntro';\n\nconst Intro = () => (\n    <>\n        <PageIntro title=\"SIF-common guide\">\n            Dette er starten på en enkel guide til komponenter og konsepter i SIF-common, og som kan brukes i\n            søknadsapplikasjonene til kapittel 9. Vi legger det vi trenger, etter hvert som vi ser at vi trenger det :)\n        </PageIntro>\n    </>\n);\n\nexport default Intro;\n","import React from 'react';\nimport DialogForms from '../examples/dialog-forms/DialogForms';\nimport FrilansExample from '../examples/frilans-example/FrilansExample';\nimport VirksomhetExample from '../examples/virksomhet-example/VirksomhetExample';\nimport Intro from '../Intro';\n\nexport interface RouteConfig {\n    path: string;\n    title: string;\n    renderContent: () => React.ReactNode;\n}\n\nexport const routes: RouteConfig[] = [\n    {\n        path: 'frontpage',\n        title: 'Forside',\n        renderContent: () => <Intro />\n    },\n    {\n        path: 'dialog-forms',\n        title: 'Dialogskjema',\n        renderContent: () => <DialogForms />\n    },\n    {\n        path: 'frilans',\n        title: 'Frilans',\n        renderContent: () => <FrilansExample />\n    },\n    {\n        path: 'næring',\n        title: 'Næringsvirksomhet',\n        renderContent: () => <VirksomhetExample />\n    }\n];\n\nexport const getRouteConfig = (pathname: string): RouteConfig | undefined => {\n    return routes.find((f) => isActiveRoute(f.path, pathname));\n};\n\nexport const isActiveRoute = (path: string, pathname: string): boolean => {\n    return pathname.indexOf(path) >= 0;\n};\n","import * as React from 'react';\nimport { Button, Menu, MenuItem, Wrapper } from 'react-aria-menubutton';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { NedChevron } from 'nav-frontend-chevron';\nimport { isActiveRoute, RouteConfig, routes } from '../../config/routeConfig';\nimport './headerMenu.less';\n\nconst renderMenuItem = (route: RouteConfig) => {\n    return (\n        <li key={route.path}>\n            <MenuItem className=\"headerMenu__menu__item\">\n                <div data-page={route.path}>{route.title}</div>\n            </MenuItem>\n        </li>\n    );\n};\n\ntype Props = RouteComponentProps;\n\nconst HeaderMenu = ({ history }: Props) => {\n    const {\n        location: { pathname },\n    } = history;\n\n    const toggle = (element: any) => {\n        const r = element.props ? element.props['data-page'] : undefined;\n        if (r) {\n            history.push(r);\n        }\n    };\n    const route = routes.find((r) => isActiveRoute(r.path, pathname)) || routes[0];\n    return (\n        <div className=\"headerMenu\">\n            <Wrapper className=\"headerMenu__wrapper\" onSelection={toggle}>\n                <Button className=\"headerMenu__button\">\n                    <div className=\"headerMenu__button__label\">{route ? route.title : 'Velg'}</div>\n                    <div className=\"headerMenu__button__chevron\">\n                        <NedChevron />\n                    </div>\n                </Button>\n                <Menu className=\"headerMenu__menu\">\n                    <ul>{routes.map(renderMenuItem)}</ul>\n                </Menu>\n            </Wrapper>\n        </div>\n    );\n};\nexport default withRouter(HeaderMenu);\n","import React from 'react';\nimport { Link, withRouter, RouteComponentProps } from 'react-router-dom';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport 'nav-frontend-lenker-style';\nimport { isActiveRoute, routes } from '../../config/routeConfig';\n\nconst lenkeBem = bemUtils('lenke');\n\nconst LeftMenu = ({\n    history: {\n        location: { pathname },\n    },\n}: RouteComponentProps) => {\n    return (\n        <div className=\"leftMenu\">\n            {routes.map((route) => (\n                <Link\n                    key={route.path}\n                    to={route.path}\n                    className={lenkeBem.classNames(\n                        lenkeBem.block,\n                        lenkeBem.modifierConditional('active', isActiveRoute(route.path, pathname))\n                    )}>\n                    {route.title}\n                </Link>\n            ))}\n        </div>\n    );\n};\n\nexport default withRouter(LeftMenu);\n","import React from 'react';\nimport MediaQuery from 'react-responsive';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport HeaderMenu from './components/header-menu/HeaderMenu';\nimport LeftMenu from './components/left-menu/LeftMenu';\nimport { getRouteConfig } from './config/routeConfig';\nimport Intro from './Intro';\n\ntype Props = RouteComponentProps;\n\nconst DevContent = ({\n    history: {\n        location: { pathname },\n    },\n}: Props) => {\n    const routeConfig = getRouteConfig(pathname);\n    return (\n        <>\n            <MediaQuery minWidth={1072}>\n                <aside className=\"asideContent\">\n                    <LeftMenu />\n                </aside>\n                <article style={{ maxWidth: '1000px' }} className=\"mainContent\">\n                    {routeConfig ? routeConfig.renderContent() : <Intro />}\n                </article>\n            </MediaQuery>\n            <MediaQuery maxWidth={1071}>\n                <aside className=\"asideContentTop\">\n                    <HeaderMenu />\n                </aside>\n                <article style={{ maxWidth: '1000px' }} className=\"mainContent\">\n                    {routeConfig ? routeConfig.renderContent() : <Intro />}\n                </article>\n            </MediaQuery>\n        </>\n    );\n};\n\nexport default withRouter(DevContent);\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { HashRouter } from 'react-router-dom';\nimport LanguageToggle from '@navikt/sif-common-core/lib/components/language-toggle/LanguageToggle';\nimport { Locale } from '@navikt/sif-common-core/lib/types/Locale';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport NAVLogo from './components/svg/NAVLogo';\nimport DevContent from './DevContent';\nimport './styles/dev.less';\n\ninterface Props {\n    onChangeLocale: (locale: Locale) => void;\n}\n\nconst DevPage = ({ onChangeLocale }: Props) => {\n    const intl = useIntl();\n    return (\n        <main className=\"devPage\">\n            <header className=\"header\">\n                <span className=\"navLogo\">\n                    <NAVLogo />\n                </span>\n                <span className=\"header__title\">\n                    <Systemtittel>Sykdom i familien - sif-common-forms</Systemtittel>\n                </span>\n                <span className=\"languageToggler\">\n                    <LanguageToggle toggle={onChangeLocale} locale={intl.locale as Locale} />\n                </span>\n            </header>\n            <div className=\"contentWrapper\">\n                <HashRouter>\n                    <DevContent />\n                </HashRouter>\n            </div>\n        </main>\n    );\n};\n\nexport default DevPage;\n","import * as React from 'react';\nimport '@formatjs/intl-pluralrules/dist/locale-data/nb';\nimport '@formatjs/intl-pluralrules/dist/locale-data/nn';\nimport '@formatjs/intl-pluralrules/polyfill';\nimport { Locale } from '@navikt/sif-common-core/lib/types/Locale';\nimport {\n    getLocaleFromSessionStorage, setLocaleInSessionStorage\n} from '@navikt/sif-common-core/lib/utils/localeUtils';\nimport 'nav-frontend-skjema-style';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport AppIntlProvider from './dev/components/app-intl-provider/AppIntlProvider';\nimport DevPage from './dev/DevPage';\nimport '@navikt/sif-common-core/lib/styles/globalStyles.less';\n\nconst localeFromSessionStorage = getLocaleFromSessionStorage();\n\nconst App: React.FC = () => {\n    const [locale, setLocale] = React.useState(localeFromSessionStorage || 'nb');\n    return (\n        <Normaltekst tag=\"div\">\n            <AppIntlProvider locale={locale as Locale}>\n                <DevPage\n                    onChangeLocale={(l: Locale) => {\n                        setLocaleInSessionStorage(l);\n                        setLocale(l);\n                    }}\n                />\n            </AppIntlProvider>\n        </Normaltekst>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Modal from 'react-modal';\nimport App from './App';\n\nModal.setAppElement('#root');\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}