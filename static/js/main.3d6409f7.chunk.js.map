{"version":3,"sources":["forms/bosted-utland/bostedUtlandMessages.ts","forms/ferieuttak/ferieuttakMessages.ts","forms/fravær/fraværMessages.ts","forms/utenlandsopphold/utenlandsoppholdMessages.ts","forms/fosterbarn/fosterbarnMessages.ts","forms/virksomhet/virksomhetMessages.ts","forms/tidsperiode/tidsperiodeMessages.ts","forms/annet-barn/annetBarnMessages.ts","forms/opptjening-utland/opptjeningUtlandMessages.ts","dev/components/app-intl-provider/messages.ts","dev/components/app-intl-provider/AppIntlProvider.tsx","dev/components/svg/NAVLogo.tsx","forms/bosted-utland/BostedUtlandForm.tsx","dev/components/page-intro/PageIntro.tsx","forms/utils/index.ts","forms/bosted-utland/bostedUtlandUtils.ts","forms/bosted-utland/BostedUtlandList.tsx","forms/bosted-utland/BostedUtlandListAndDialog.tsx","dev/components/submit-preview/SubmitPreview.tsx","dev/examples/dialog-forms/BostedUtlandExample.tsx","dev/components/validation-error-messages/ValidationErrorMessages.tsx","forms/ferieuttak/FerieuttakForm.tsx","forms/ferieuttak/ferieuttakUtils.ts","forms/ferieuttak/FerieuttakList.tsx","forms/ferieuttak/FerieuttakListAndDialog.tsx","dev/examples/dialog-forms/FerieuttakExample.tsx","forms/fosterbarn/FosterbarnForm.tsx","forms/fosterbarn/types.ts","forms/fosterbarn/FosterbarnList.tsx","forms/fosterbarn/FosterbarnListAndDialog.tsx","dev/examples/dialog-forms/FosterbarnExample.tsx","forms/tidsperiode/TidsperiodeForm.tsx","forms/tidsperiode/tidsperiodeUtils.ts","forms/tidsperiode/TidsperiodeList.tsx","forms/tidsperiode/TidsperiodeListAndDialog.tsx","dev/examples/dialog-forms/TidsperiodeExample.tsx","forms/utenlandsopphold/types.ts","forms/utenlandsopphold/utenlandsoppholdUtils.ts","forms/utenlandsopphold/UtenlandsoppholdForm.tsx","forms/utenlandsopphold/UtenlandsoppholdList.tsx","forms/utenlandsopphold/UtenlandsoppholdListAndDialog.tsx","dev/examples/dialog-forms/UtenlandsoppholdExample.tsx","forms/fravær/types.ts","forms/fravær/FraværListItem.tsx","forms/fravær/fraværUtilities.ts","forms/fravær/fraværValidationUtils.ts","forms/fravær/FraværDagerList.tsx","forms/components/formatted-html-message/FormattedHtmlMessage.tsx","forms/fravær/FraværTimerSelect.tsx","forms/fravær/FraværDagForm.tsx","forms/fravær/fraværÅrsakRadios.ts","forms/fravær/ÅrsakInfo.tsx","forms/fravær/FraværDagerListAndDialog.tsx","forms/fravær/FraværPeriodeForm.tsx","forms/fravær/FraværPerioderList.tsx","forms/fravær/FraværPerioderListAndDialog.tsx","dev/examples/dialog-forms/FraværExample.tsx","forms/annet-barn/types.ts","forms/annet-barn/AnnetBarnForm.tsx","forms/annet-barn/annetBarnUtils.ts","forms/annet-barn/AnnetBarnList.tsx","forms/annet-barn/AnnetBarnListAndDialog.tsx","dev/examples/dialog-forms/AnnetBarnExample.tsx","forms/opptjening-utland/types.ts","forms/opptjening-utland/opptjeningUtlandUtils.ts","forms/opptjening-utland/OpptjeningUtlandForm.tsx","forms/opptjening-utland/OpptjeningUtlandList.tsx","forms/opptjening-utland/OpptjeningUtlandListAndDialog.tsx","dev/examples/dialog-forms/OpptjeningUtlandExample.tsx","forms/virksomhet/types.ts","dev/examples/dialog-forms/DialogForms.tsx","forms/virksomhet/virksomhetUtils.ts","forms/virksomhet/VirksomhetForm.tsx","forms/virksomhet/mapVirksomhetToApiData.ts","forms/components/summary/DatoSvar.tsx","forms/components/summary/IntlLabelValue.tsx","forms/components/summary/JaNeiSvar.tsx","forms/components/summary/Sitat.tsx","forms/components/summary/SummaryBlock.tsx","forms/components/summary/TallSvar.tsx","forms/virksomhet/VirksomhetSummary.tsx","forms/virksomhet/VirksomhetInfoAndDialog.tsx","dev/examples/virksomhet-example/VirksomhetExample.tsx","dev/Intro.tsx","dev/examples/texts/Texts.tsx","dev/config/routeConfig.tsx","dev/components/header-menu/HeaderMenu.tsx","dev/components/left-menu/LeftMenu.tsx","dev/DevContent.tsx","dev/DevPage.tsx","App.tsx","index.tsx"],"names":["bostedUtlandMessages","nb","nn","ferieuttakMessages","getFraværÅrsakTekstKort","årsak","intl","intlHelper","fraværMessages","utenlandsoppholdMessages","fosterbarnMessages","virksomhetMessages","tidsperiodeMessages","annetBarnMessages","opptjeningUtlandMessages","commonNb","require","commonNn","validationNb","validationNn","appMessages","AppIntlProvider","locale","onError","children","messages","dayjs","NAVLogo","BostedUtlandFormFields","props","className","width","viewBox","fill","fillRule","d","PageIntro","title","padBottom","margin","tag","mapFomTomToDateRange","from","fom","to","tom","handleDateRangeValidationError","error","minDate","maxDate","ValidateDateError","dateIsBeforeMin","key","values","dato","prettifyDate","dateIsAfterMax","bostedUtlandUtils","isValidBostedUtland","bosted","landkode","undefined","mapBostedUtlandToFormValues","dateToISOString","mapFormValuesToBostedUtland","formValues","id","guid","ISOStringToDate","BostedUtlandFormErrors","dateHasNoValue","dateHasInvalidFormat","ValidateDateRangeError","fromDateIsAfterToDate","toDateIsBeforeFromDate","ValidateRequiredFieldError","noValue","Form","getTypedFormComponents","BostedUtlandForm","alleBosteder","onSubmit","onCancel","useIntl","FormikWrapper","initialValues","bostedToSubmit","Error","renderForm","formik","fomDateLimits","tomDateLimits","andreBosteder","map","filter","b","formErrorHandler","getFormErrorHandler","DateRangePicker","legend","fullscreenOverlay","allowRangesToStartAndStopOnSameDate","disabledDateRanges","fromInputProps","name","label","validate","value","getDateRangeValidator","required","min","max","toDate","validateFromDate","toInputProps","fromDate","validateToDate","CountrySelect","getRequiredFieldValidator","bem","bemUtils","BostedUtlandList","bosteder","onDelete","onEdit","getItemId","opphold","getItemTitle","getCountryName","labelRenderer","navn","element","onClick","prettifyDateExtended","items","BostedUtlandListAndDialog","labels","dialogWidth","sortFunc","sortItemsByFom","formRenderer","item","allItems","listRenderer","SubmitPreview","FormField","style","borderTop","paddingTop","padding","fontSize","JSON","stringify","FormValidationErrorMessages","validationErrors","formName","intlMessages","validationErrorIntlKeys","validationeMessages","fields","Object","keys","forEach","field","errorKey","intlKey","fieldName","errorPrefix","createFieldErrorIntlKey","showExplanation","showMissingTextSummary","FerieuttakFormFields","FormikExample","useState","singleFormValues","setSingleFormValues","listFormValues","setListFormValues","border","includeButtons","submitButtonLabel","date1YearAgo","date1YearFromNow","getListValidator","addLabel","listTitle","modalTitle","emptyListText","flat","console","log","ferieuttakUtils","isValidFerieuttak","ferieuttak","mapFerieuttakToFormValues","mapFormValuesToFerieuttak","FerieuttakFormErrors","FerieuttakForm","alleFerieuttak","defaultLabels","intervalTitle","okButton","cancelButton","formLabels","andreFerieuttak","f","ferieuttakToSubmit","onChange","setTimeout","validateField","dateError","FerieuttakList","getDateTitleString","uttak","FerieuttakListAndDialog","FosterbarnFormField","ferie","FosterbarnFormErrors","fornavn","ValidateStringError","stringHasNoValue","etternavn","fødselsnummer","ValidateFødselsnummerError","fødselsnummerIsNotAllowed","fødselsnummerIsNot11Chars","fødselsnummerIsInvalid","FosterbarnForm","fosterbarn","disallowedFødselsnumre","text","includeName","defaultText","form_etternavn_label","form_fornavn_label","form_fødselsnummer_label","txt","hasValue","isFosterbarn","Input","getFødselsnummerValidator","disallowedValues","inputMode","maxLength","columns","FosterbarnList","getBarnTitleString","barn","paddingRight","formatName","FosterbarnListAndDialog","texts","liste_legg_til_knapp","liste_tittel","modal_tittel","liste_tom_liste_tekst","TidsperiodeFormFields","FosterbarnExample","tidsperiodeUtils","isValidDateTidsperiode","tidsperiode","mapDateTidsperiodeToFormValues","mapFormValuesToDateTidsperiode","TidsperiodeFormErrors","TidsperiodeForm","alleTidsperioder","inlineLabels","dateTidsperiodeToSubmit","t","TidsperiodeList","TidsperiodeListAndDialog","formTitle","UtenlandsoppholdÅrsak","TidsperiodeExample","dateToday","UtenlandsoppholdFormFields","utenlandsoppholdUtils","isValidUtenlandsopphold","utenlandsopphold","mapFormValuesToUtenlandsopphold","barnInnlagtPerioder","mapUtenlandsoppholdToFormValues","erBarnetInnlagt","UtlandsoppholdFormErrors","ValidateYesOrNoError","yesOrNoIsUnanswered","ValidateListError","listIsEmpty","defaultFormValues","YesOrNo","UNANSWERED","UtenlandsoppholdForm","alleOpphold","registrerteTidsperioder","o","utils","utenlandsoppholdToSubmit","countryIsMemberOfEøsOrEfta","hasDateStringValues","includeInnlagtPerioderQuestion","YES","includeInnlagtQuestion","showÅrsakQuestion","length","YesOrNoQuestion","land","getYesOrNoValidator","RadioPanelGroup","radios","INNLAGT_DEKKET_NORGE","INNLAGT_DEKKET_ANNET_LAND","ANNET","UtenlandsoppholdList","UtenlandsoppholdListAndDialog","FraværÅrsak","UtenlandsoppholdExample","FraværListItem","ordinært","marginTop","extend","isSameOrAfter","isSameOrBefore","Weekday","fraværDagToFraværDateRange","fraværDag","fraværPeriodeToDateRange","fraOgMed","tilOgMed","FraværFieldValidationErrors","getWeekdayName","date","getDay","sunday","monday","tuesday","wednesday","thursday","friday","saturday","rangeCollideWithRanges","range","ranges","some","periode","fromDay","toDay","isBefore","isAfter","dateCollideWithRanges","timeText","timer","getHjemmePgaKoronaFormValueFromFraværÅrsak","smittevernhensyn","stengtSkoleBhg","NO","getÅrsakFromFraværFormValues","hjemmePgaKorona","mapFraværDagToFormValues","timerArbeidsdag","timerFravær","mapFraværPeriodeToFormValues","fraværPeriode","FraværDagerList","fraværDager","getFraværDagListItemTitle","basicHtmlTagRenderers","li","strong","p","em","FormattedHtmlMessage","getOptionsList","maksTid","newOptionElement","toString","replace","go","jsxList","tid","FraværTimerSelect","FraværDagForm","Select","bredde","FraværDagFormFields","validateErSammeÅr","maybeDateFrom","maybeDateTo","getFullYear","fra_og_til_er_ulike_år","validateNotHelgedag","maybeDate","dateErHelg","er_helg","validateNoCollisions","fraværPerioder","allFraværDagDateRanges","allFraværPeriodeDateRanges","hasDateCollision","dag","rangesWithoutCurrentDag","hasRangeCollision","rangesWithoutCurrentPeriode","dager_overlapper_med_andre_dager","getFraværÅrsakRadios","ÅrsakInfo","FraværDagFormErrors","dato_kolliderer_med_annet_fravær","ValidateNumberError","numberHasNoValue","fravær_timer_mer_enn_arbeidstimer","FraværDagFormView","dagDescription","dateRangesToDisable","helgedagerIkkeTillatt","maksArbeidstidPerDag","headerContent","ok","avbryt","tittel","antallArbeidstimer","fraværÅrsakRadios","isSame","fraværDagToSubmit","mapFormValuesToFraværDag","isFraværDag","valgtDato","datepickerUtils","getDateFromDateString","datepickerProps","dayPickerProps","initialMonth","disableWeekend","keepKeyUnaltered","validateFraværDagCollision","getDateValidator","DatePicker","description","maybeMaxValue","isString","parseFloat","toMaybeNumber","maybeValue","maybeValueFloat","FraværDagerListAndDialog","FraværPeriodeFormFields","formHeaderContent","fraværDagA","fraværDagB","FraværPeriodeFormErrors","fra_dato_kolliderer_med_annet_fravær","til_dato_kolliderer_med_annet_fravær","getFromDateValidator","helgedagerIkkeTillat","begrensTilSammeÅr","validateFraOgMedForCollision","getToDateValidator","validateTilOgMedForCollision","FraværPeriodeForm","periodeDescription","begrensTilSammeÅrAlertStripeTekst","tidsrom","fraværPeriodeToSubmit","mapFormValuesToFraværPeriode","isFraværPeriode","DateIntervalPicker","validateFraværPeriodeCollision","fraOgMed_tilOgMed","fromDatepickerProps","toDatepickerProps","type","FraværPerioderList","useTrashcan","FraværPerioderListAndDialog","fraværPeriodeA","fraværPeriodeB","BarnType","AnnetBarnFormFields","perioder","dager","FraværExample","fraværPeriodeSingleFormValues","setFraværPeriodeSingleFormValues","fraværDagSingleFormValues","setFraværDagSingleFormValues","listError","collisionError","annetBarnUtils","mapAnnetBarnToFormValues","annetBarn","fnr","fødselsdato","mapFormValuesToPartialAnnetBarn","isAnnetBarn","AnnetBarnFormErrors","fødselsnummerHasNoValue","AnnetBarnForm","visBarnTypeValg","annetBarnToSubmit","getStringValidator","placeholder","placeholderNavn","aldersGrenseText","showYearSelector","placeholderFnr","annet","AnnetBarnList","AnnetBarnListAndDialog","onAfterChange","OpptjeningAktivitet","AnnetBarnExample","date4YearsAgo","flatten","OpptjeningUtlandFormFields","opptjeningUtlandUtils","isValidOpptjeningUtland","opptjeningUtland","mapFormValuesToOpptjeningUtland","mapOpptjeningUtlandToFormValues","opptjeningType","OpptjeningUtlandFormErrors","OpptjeningUtlandForm","opptjening","opptjeningUtlandToSubmit","showOnlyEuAndEftaCountries","RadioGroup","checked","ARBEIDSTAKER","OpptjeningUtlandList","landNavn","arbeidsgiverType","toLocaleLowerCase","OpptjeningUtlandListAndDialog","alleOpptjening","Næringstype","VirksomhetFormField","OpptjeningUtlandExample","tabRoutes","path","renderContent","BostedUtlandExample","FerieuttakExample","DialogForms","setPath","activeRoute","find","r","evt","idx","tabs","active","isVirksomhet","virksomhet","erFiskerNæringstype","næringstype","FISKE","erVirksomhetRegnetSomNyoppstartet","oppstartsdato","startOf","cleanupVirksomhetFormValues","fiskerErPåBladB","fomDate","erPågående","hattVarigEndringAvNæringsinntektSiste4Kalenderår","næringsinntekt","harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene","blittYrkesaktivDato","varigEndringINæringsinntekt_dato","varigEndringINæringsinntekt_forklaring","varigEndringINæringsinntekt_inntektEtterEndring","registrertINorge","organisasjonsnummer","harRegnskapsfører","regnskapsfører_telefon","registrertILand","regnskapsfører_navn","mapVirksomhetToFormValues","MAKS_INNTEKT","VirksomhetFormErrors","navnPåVirksomheten","ValidateOrgNumberError","orgNumberHasInvalidFormat","numberHasInvalidFormat","numberIsTooSmall","numberIsTooLarge","stringIsTooLong","stringIsTooShort","ensureValidNæringsinntekt","visNæringsinntekt","getNumberFromNumberInputValue","VirksomhetForm","harFlereVirksomheter","skipOrgNumValidation","getText","virksomhetToSubmit","getNumberFromStringInput","inntektEtterVarigEndring","mapFormValuesToVirksomhet","setFieldValue","tomDate","includeValidationSummary","cleanup","JORDBRUK_SKOGBRUK","DAGMAMMA","ANNEN","useAlpha3Code","maxWidth","getOrgNumberValidator","disabled","Checkbox","afterOnChange","NumberInput","getNumberValidator","allowDecimals","maks","date3YearsAgo","Textarea","minLength","formatRegExp","mapVirksomhetToVirksomhetApiData","harBesvartFiskerPåBladB","erNyoppstartet","data","næringstyper","registrertIUtlandet","landnavn","formatDateToApiFormat","harFlereAktiveVirksomheter","yrkesaktivSisteTreFerdigliknedeÅrene","harHattVarigEndring","varigEndring","forklaring","inntektEtterEndring","regnskapsfører","telefon","prettifyApiDate","apiDato","apiStringDateToDate","DatoSvar","IntlLabelValue","intlLabelKey","labelKey","block","JaNeiSvar","harSvartJa","tagName","Sitat","display","paddingLeft","borderLeft","fontStyle","SummaryBlock","header","TallSvar","verdi","renderVirksomhetSummary","næring","erPåBladB","næringstekst","bladBTekst","getFiskerNæringTekst","join","tidsinfo","orgnr","VirksomhetSummary","erRegnetSomNyoppstartet","VirksomhetInfoAndDialog","renderEditButtons","infoRenderer","Date","VirksomhetExample","setFormValues","setHarFlereVirksomheter","apiVirksomhet","deleteLabel","editLabel","infoTitle","currentTarget","Intro","Texts","formMessages","push","paddingBottom","routes","isActiveRoute","pathname","indexOf","renderMenuItem","route","data-page","withRouter","history","location","onSelection","lenkeBem","classNames","modifierConditional","routeConfig","getRouteConfig","minWidth","DevPage","onChangeLocale","toggle","localeFromSessionStorage","getLocaleFromSessionStorage","App","React","setLocale","l","setLocaleInSessionStorage","Modal","setAppElement","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3d6409f7.chunk.js","sourcesContent":["const bostedUtlandMessages = {\n    nb: {\n        'bostedUtland.list.add': 'Legg til opphold',\n        'bostedUtland.form.tittel': 'Utenlandsopphold',\n        'bostedUtland.form.tidsperiode.spm': 'Tidsperiode',\n        'bostedUtland.form.tidsperiode.fraDato': 'Fra og med',\n        'bostedUtland.form.tidsperiode.tilDato': 'Til og med',\n        'bostedUtland.form.land.spm': 'Velg land',\n        'bostedUtland.form.ok': 'Legg til',\n        'bostedUtland.form.avbryt': 'Avbryt',\n        'bostedUtlandForm.fom.dateHasNoValue':\n            'Du må oppgi hvilken dato utenlandsoppholdet startet. Skriv inn eller velg dato.',\n        'bostedUtlandForm.fom.dateIsAfterMax':\n            'Datoen utenlandsoppholdet startet kan ikke være etter {dato}. Skriv inn eller velg dato fra datovelgeren.',\n        'bostedUtlandForm.fom.dateIsBeforeMin':\n            'Datoen utenlandsoppholdet startet kan ikke være før {dato}. Skriv inn eller velg sluttdato fra datovelgeren.',\n        'bostedUtlandForm.fom.dateHasInvalidFormat':\n            'Du må oppgi når utenlandsoppholdet startet i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'bostedUtlandForm.fom.fromDateIsAfterToDate':\n            'Datoen utenlandsoppholdet startet kan ikke være etter datoen det ble avsluttet. Skriv inn eller velg sluttdato fra datovelgeren.',\n        'bostedUtlandForm.tom.dateHasNoValue':\n            'Du må oppgi hvilken dato utenlandsoppholdet ble avsluttet. Skriv inn eller velg dato fra datovelgeren.',\n        'bostedUtlandForm.tom.dateIsAfterMax':\n            'Datoen utenlandsoppholdet ble avsluttet kan ikke være etter {dato}. Skriv inn eller velg dato fra datovelgeren.',\n        'bostedUtlandForm.tom.dateIsBeforeMin':\n            'Datoen utenlandsoppholdet ble avsluttet kan ikke være før {dato}. Skriv inn eller velg dato fra datovelgeren.',\n        'bostedUtlandForm.tom.dateHasInvalidFormat':\n            'Du må oppgi når utenlandsoppholdet ble avsluttet i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'bostedUtlandForm.tom.toDateIsBeforeFromDate':\n            'Datoen utenlandsoppholdet ble avsluttet kan ikke være før datoen det ble startet. Skriv inn eller velg sluttdato fra datovelgeren.',\n        'bostedUtlandForm.landkode.noValue': 'Du må velge land',\n    },\n    nn: {\n        'bostedUtland.list.add': 'Legg til opphald',\n        'bostedUtland.form.tittel': 'Utenlandsopphald',\n        'bostedUtland.form.tidsperiode.spm': 'Tidsperiode',\n        'bostedUtland.form.tidsperiode.fraDato': 'Frå og med',\n        'bostedUtland.form.tidsperiode.tilDato': 'Til og med',\n        'bostedUtland.form.land.spm': 'Velg land',\n        'bostedUtland.form.ok': 'Legg til',\n        'bostedUtland.form.avbryt': 'Avbryt',\n    },\n};\n\nexport default bostedUtlandMessages;\n","const ferieuttakMessages = {\n    nb: {\n        'ferieuttak.list.title': 'Registrer uttak av ferie',\n        'ferieuttak.list.fromDate': 'Fra og med',\n        'ferieuttak.list.toDate': 'Til og med',\n        'ferieuttak.list.intervalTitle': 'Velg tidsrom',\n        'ferieuttak.list.okButton': 'Ok',\n        'ferieuttak.list.cancelButton': 'Avbryt',\n        'ferieuttakForm.fom.dateHasNoValue':\n            'Du må oppgi når ferien startet. Skriv inn eller velg dato fra datovelgeren.',\n        'ferieuttakForm.fom.dateIsAfterMax':\n            'Datoen for når ferien startet kan ikke være etter dagens dato. Skriv inn eller velg dato fra datovelgeren.',\n        'ferieuttakForm.fom.dateIsBeforeMin':\n            'Datoen for når ferien startet kan ikke være før {dato}. Skriv inn eller velg sluttdato fra datovelgeren.',\n        'ferieuttakForm.fom.dateHasInvalidFormat':\n            'Du må oppgi dato for når ferien startet i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'ferieuttakForm.fom.fromDateIsAfterToDate':\n            'Startdatoen for ferien må være før sluttdatoen, eller på samme dag som sluttdatoen. Skriv inn eller velg dato fra datovelgeren.',\n        'ferieuttakForm.tom.dateHasNoValue':\n            'Du må oppgi når ferien sluttet. Skriv inn eller velg dato fra datovelgeren.',\n        'ferieuttakForm.tom.dateIsAfterMax': 'Du har lagt inn ferie som er utenfor søknadsperioden.',\n        'ferieuttakForm.tom.dateIsBeforeMin':\n            'Datoen for når ferien sluttet kan ikke være før {dato}. Skriv inn eller velg dato fra datovelgeren.',\n        'ferieuttakForm.tom.dateHasInvalidFormat':\n            'Du må oppgi dato for når ferien sluttet i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'ferieuttakForm.tom.toDateIsBeforeFromDate':\n            'Sluttdatoen for ferien kan ikke være før startdatoen. Skriv inn eller velg dato fra datovelgeren.',\n    },\n    nn: {\n        'ferieuttak.list.title': 'Registrer uttak av ferie',\n        'ferieuttak.list.fromDate': 'Frå og med',\n        'ferieuttak.list.toDate': 'Til og med',\n        'ferieuttak.list.intervalTitle': 'Velg tidsrom',\n        'ferieuttak.list.okButton': 'Ok',\n        'ferieuttak.list.cancelButton': 'Avbryt',\n    },\n};\n\nexport default ferieuttakMessages;\n","import intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { IntlShape } from 'react-intl';\nimport { FraværÅrsak } from './types';\n\nconst fraværMessages = {\n    nb: {\n        'fravær.årsak.STENGT_SKOLE_ELLER_BARNEHAGE': 'Skolen/barnehagen var stengt på grunn av koronasituasjonen.',\n        'fravær.årsak.SMITTEVERNHENSYN':\n            'Skolen/barnehagen var åpen, men barnet måtte være hjemme på grunn av særlige smittevernhensyn.',\n        'fravær.årsak.STENGT_SKOLE_ELLER_BARNEHAGE.kort': 'stengt skole/barnehage',\n        'fravær.årsak.SMITTEVERNHENSYN.kort': 'særlige smittevernhensyn',\n\n        'fravær.list.årsak': 'På grunn av {årsak}',\n        'fravær.form.validation.dateOutsideRange': 'Første gyldige dato er {fom}, og siste gyldige dato er {tom}',\n        'fravær.form.validation.fromDateAfterToDate': 'Fra-dato må være lik eller før til-dato',\n        'fravær.form.validation.toDateBeforeFromDate': 'Til-dato må være lik eller etter fra-dato',\n        'fravær.form.validation.fra_og_til_er_ulike_år': 'Fra og til dato må være i samme år',\n        'fravær.form.validation.timer_mer_enn_arbeidstimer':\n            'Antall timer med fravær kan ikke være mer enn antall timer du skulle ha jobbet denne dagen',\n        'fravær.form.validation.er_helg': 'Lørdag og søndag er ikke gyldig.',\n        'fieldvalidation.dager_overlapper_med_andre_dager':\n            'Én eller flere dager med fravær overlapper med andre dager med fravær.',\n        'fieldvalidation.fra_dato_kolliderer_med_annet_fravær':\n            'Fra og med datoen overlapper med allerede registrert fraværsdag',\n        'fieldvalidation.til_dato_kolliderer_med_annet_fravær':\n            'Til og med datoen overlapper med allerede registrert fraværsdag',\n        'fieldvalidation.dato_kolliderer_med_annet_fravær': 'Datoen overlapper med allerede registrert fraværsdag',\n        'info.smittevern.tittel': 'Hva menes med særlige smittevernhensyn?',\n        'info.smittevern.info.html':\n            'Når barnehagen eller skolen er åpen, men du må være hjemme med barnet ditt på grunn <strong>av særlige smittevernhensyn</strong>, kan du bruke omsorgsdager. Det er en lege som avgjør om det foreligger særlige smittevernhensyn. Det kan være smittevernhensyn til barnet eller andre familiemedlemmer som bor med barnet.',\n        'info.årsak.tittel': 'Hva om begge årsakene gjelder i perioden jeg har lagt inn?',\n        'info.årsak.info.1': `Hvis du har vært hjemme med barn både fordi barnehage/skole var stengt, og på grunn av særlige smittevernshensyn, må du legge inn flere perioder. Når du har lagt inn én periode og trykker OK, får du mulighet til å legge til flere perioder.`,\n        'info.årsak.info.2': `Eksempel:`,\n        'info.årsak.info.3': `1.-2. mars var du hjemme med barn fordi barnehage/skole var stengt. Da legger du inn 1.-2. mars som en periode. I tillegg var du hjemme 3.-5. mars på grunn av særlige smittevernshensyn. Da legger du inn 3.-5. mars som en egen periode.`,\n\n        'fravær.form.felles.hjemmePgaKorona':\n            'Var du hjemme med barn fordi barnehage/skole var stengt på grunn av koronaviruset, eller på grunn av særlige smittevernshensyn?',\n        'fravær.form.felles.årsak': 'Velg årsaken til at du var hjemme med barn i perioden du har lagt inn',\n        'fravær.form.felles.ok': 'Ok',\n        'fravær.form.felles.avbryt': 'Avbryt',\n        'fravær.form.periode.tittel': 'Periode med fravær fra jobb',\n        'fravær.form.periode.tidsrom': 'Velg tidsrom',\n        'fravær.form.periode.fom': 'Fra og med',\n        'fravær.form.periode.tom': 'Til og med',\n        'fravær.form.dag.tittel': 'Dag med delvis fravær fra jobb',\n        'fravær.form.dag.dato': 'Dato',\n        'fravær.form.dag.antallArbeidstimer': 'Antall timer du skulle ha jobbet denne dagen',\n        'fravær.form.dag.timerFravær': 'Antall timer du var borte fra jobb denne dagen',\n\n        'fraværDagForm.dato.dateHasNoValue': 'Du må oppgi dato for når du hadde delvis fravær.',\n        'fraværDagForm.dato.dateHasInvalidFormat':\n            'Du må oppgi dato for når du hadde delvis fravær i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'fraværDagForm.dato.dateIsAfterMax':\n            'Dato for når du hadde delvis fravær kan ikke være etter dagens dato. Skriv inn eller velg dato fra datovelgeren.',\n        'fraværDagForm.dato.dateIsBeforeMin':\n            'Datoen for når du hadde delvis fravær kan ikke være før {dato}. Skriv inn eller velg dato fra datovelgeren.',\n        'fraværDagForm.dato.er_helg':\n            'Dato for når du hadde delvis fravær må være en ukedag, det kan ikke være lørdag eller søndag.',\n        'fraværDagForm.dato.dato_kolliderer_med_annet_fravær': 'Datoen overlapper med allerede registrert fraværsdag',\n        'fraværDagForm.timerArbeidsdag.noValue': 'Du må velge antall timer du skulle ha jobbet denne dagen.',\n        'fraværDagForm.timerFravær.noValue': 'Du må velge antall timer du var borte fra jobb denne dagen',\n        'fraværDagForm.timerFravær.fravær_timer_mer_enn_arbeidstimer': 'Fravær kan ikke være høyere enn arbeidstimer',\n        'fraværDagForm.hjemmePgaKorona.yesOrNoIsUnanswered':\n            'Velg ja eller nei om du hjemme med barn fordi barnehage/skole var stengt på grunn av koronaviruset, eller på grunn av særlige smittevernshensyn.',\n        'fraværDagForm.årsak.noValue': 'Velg årsaken til at du var hjemme med barn i perioden du har lagt inn.',\n\n        'fraværPeriodeForm.fraOgMed.dateHasNoValue':\n            'Du må oppgi når perioden startet. Skriv inn eller velg dato fra datovelgeren.',\n        'fraværPeriodeForm.fraOgMed.dateIsAfterMax':\n            'Datoen for når perioden startet kan ikke være etter dagens dato. Skriv inn eller velg dato fra datovelgeren.',\n        'fraværPeriodeForm.fraOgMed.dateIsBeforeMin':\n            'Datoen for når perioden startet kan ikke være før {dato}. Skriv inn eller velg sluttdato fra datovelgeren.',\n        'fraværPeriodeForm.fraOgMed.dateHasInvalidFormat':\n            'Du må oppgi dato for når perioden startet i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'fraværPeriodeForm.fraOgMed.fromDateIsAfterToDate':\n            'Startdatoen for perioden må være før sluttdatoen, eller på samme dag som sluttdatoen. Skriv inn eller velg dato fra datovelgeren.',\n        'fraværPeriodeForm.tilOgMed.dateHasNoValue':\n            'Du må oppgi når perioden sluttet. Skriv inn eller velg dato fra datovelgeren.',\n        'fraværPeriodeForm.tilOgMed.dateIsAfterMax':\n            'Datoen for når perioden sluttet kan ikke være etter dagens dato. Skriv inn eller velg dato fra datovelgeren.',\n        'fraværPeriodeForm.tilOgMed.dateIsBeforeMin':\n            'Datoen for når perioden sluttet kan ikke være før {dato}. Skriv inn eller velg dato fra datovelgeren.',\n        'fraværPeriodeForm.tilOgMed.dateHasInvalidFormat':\n            'Du må oppgi dato for når perioden sluttet i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'fraværPeriodeForm.tilOgMed.toDateIsBeforeFromDate':\n            'Sluttdatoen for perioden kan ikke være før startdatoen. Skriv inn eller velg dato fra datovelgeren.',\n        'fraværPeriodeForm.fraOgMed.er_helg':\n            'Periodens fra-dato må være en ukedag, det kan ikke være lørdag eller søndag. Hvis perioden startet en lørdag eller søndag må du velge mandagen etter som startdato.',\n        'fraværPeriodeForm.fraOgMed.fra_og_til_er_ulike_år': 'Fra og til dato må være i samme år',\n        'fraværPeriodeForm.fraOgMed.fra_dato_kolliderer_med_annet_fravær':\n            'Fra og med datoen overlapper med allerede registrert fraværsdag.',\n        'fraværPeriodeForm.tilOgMed.er_helg':\n            'Periodens til-dato må være en ukedag, det kan ikke være lørdag eller søndag. Hvis perioden sluttet en lørdag eller søndag må du velge fredagen før som sluttdato.',\n        'fraværPeriodeForm.tilOgMed.fra_og_til_er_ulike_år': 'Fra og til dato må være i samme år',\n        'fraværPeriodeForm.tilOgMed.til_dato_kolliderer_med_annet_fravær':\n            'Til og med datoen overlapper med allerede registrert fraværsdag',\n        'fraværPeriodeForm.årsak.noValue': 'Velg årsaken til at du var hjemme med barn i perioden du har lagt inn.',\n        'fraværPeriodeForm.periode.dager_overlapper_med_andre_dager':\n            'Én eller flere dager med fravær overlapper med andre dager med fravær.',\n        'fraværPeriodeForm.hjemmePgaKorona.yesOrNoIsUnanswered':\n            'Velg ja eller nei om du hjemme med barn fordi barnehage/skole var stengt på grunn av koronaviruset, eller på grunn av særlige smittevernshensyn.',\n    },\n    nn: {\n        'fravær.list.årsak': 'På grunn av {årsak}',\n        'fravær.form.validation.dateOutsideRange': 'Første gyldige dato er {fom}, og siste gyldige dato er {tom}',\n        'fravær.form.validation.fromDateAfterToDate': 'Frå-datoen må vere lik eller før til-datoen',\n        'fravær.form.validation.toDateBeforeFromDate': 'Til-datoen må vere lik eller etter frå-datoen',\n        'fravær.form.validation.fra_og_til_er_ulike_år': 'Fra og til dato må vera i same år',\n        'fieldvalidation.dager_overlapper_med_andre_dager':\n            'Ein eller fleire dagar med fråvær overlappar andre dagar med fråvær.',\n        'fieldvalidation.fra_dato_kolliderer_med_annet_fravær':\n            'Frå og med datoen overlappar med allereie registrert fråværsdag',\n        'fieldvalidation.til_dato_kolliderer_med_annet_fravær':\n            'Til og med datoen overlappar med allereie registrert fråværsdag',\n        'fieldvalidation.dato_kolliderer_med_annet_fravær': 'Datoen overlappar med allereie registrert fråværsdag',\n        'fravær.form.validation.timer_mer_enn_arbeidstimer':\n            'Talet på timar med fråvær kan ikkje vere meir enn talet på timar du skulle ha jobba denne dagen',\n        'fravær.form.validation.er_helg': 'Laurdag og søndag er ikkje gyldig.',\n\n        'fravær.årsak.STENGT_SKOLE_ELLER_BARNEHAGE': 'Skolen/barnehagen var stengt på grunn av koronasituasjonen',\n        'fravær.årsak.SMITTEVERNHENSYN':\n            'Skolen/barnehagen var åpen, men barnet måtte være hjemme på grunn av særlige smittevernhensyn.',\n        'fravær.årsak.ORDINÆRT_FRAVÆR': 'Ordinært fravær',\n        'fravær.årsak.STENGT_SKOLE_ELLER_BARNEHAGE.kort': 'stengt skole/barnehage',\n        'fravær.årsak.SMITTEVERNHENSYN.kort': 'særlige smittevernhensyn',\n        'fravær.årsak.ORDINÆRT_FRAVÆR.kort': 'ordinært fravær',\n        'info.smittevern.tittel': 'Hva menes med særlige smittevernhensyn?',\n        'info.smittevern.info.html':\n            'Når barnehagen eller skolen er åpen, men du må være hjemme med barnet ditt på grunn <strong>av særlige smittevernhensyn</strong>, kan du bruke omsorgsdager. Det er en lege som avgjør om det foreligger særlige smittevernhensyn. Det kan være smittevernhensyn til barnet eller andre familiemedlemmer som bor med barnet.',\n        'info.årsak.tittel': 'Hva om begge årsakene gjelder i perioden jeg har lagt inn?',\n        'info.årsak.info.1': `Hvis du har vært hjemme med barn både fordi barnehage/skole var stengt, og på grunn av særlige smittevernshensyn, må du legge inn flere perioder. Når du har lagt inn én periode og trykker OK, får du mulighet til å legge til flere perioder.`,\n        'info.årsak.info.2': `Eksempel:`,\n        'info.årsak.info.3': `1.-2. mars var du hjemme med barn fordi barnehage/skole var stengt. Da legger du inn 1.-2. mars som en periode. I tillegg var du hjemme 3.-5. mars på grunn av særlige smittevernshensyn. Da legger du inn 3.-5. mars som en egen periode.`,\n    },\n};\n\nexport const getFraværÅrsakTekst = (årsak: FraværÅrsak, intl: IntlShape): string => {\n    return intlHelper(intl, `fravær.årsak.${årsak}`);\n};\n\nexport const getFraværÅrsakTekstKort = (årsak: FraværÅrsak, intl: IntlShape): string => {\n    return intlHelper(intl, `fravær.årsak.${årsak}.kort`);\n};\n\nexport default fraværMessages;\n","const utenlandsoppholdMessages = {\n    nb: {\n        'utenlandsopphold.list.add': '+ Legg til opphold',\n        'utenlandsopphold.form.tittel': 'Utenlandsopphold',\n        'utenlandsopphold.form.tidsperiode.spm': 'Velg tidsperiode for oppholdet',\n        'utenlandsopphold.form.tidsperiode.fraDato': 'Fra og med',\n        'utenlandsopphold.form.tidsperiode.tilDato': 'Til og med',\n        'utenlandsopphold.form.land.spm': 'Velg land',\n        'utenlandsopphold.form.erBarnetInnlagt.spm': 'Er, eller skal, barnet være innlagt i helseinstitusjon i {land}?',\n        'utenlandsopphold.form.perioderBarnetErInnlag.formTitle': 'Periode barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.addLabel': 'Legg til periode barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.modalTitle': 'Periode(r) barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.listTitle': 'Periode(r) barnet er innlagt',\n        'utenlandsopphold.form.årsak.spm': 'Hvordan dekkes utgiftene til innleggelsen?',\n        'utenlandsopphold.form.årsak.BARNET_INNLAGT_I_HELSEINSTITUSJON_FOR_NORSK_OFFENTLIG_REGNING':\n            'For norsk offentlig regning',\n        'utenlandsopphold.form.årsak.BARNET_INNLAGT_I_HELSEINSTITUSJON_DEKKET_ETTER_AVTALE_MED_ET_ANNET_LAND_OM_TRYGD':\n            'Etter trygdeavtale med et annet land',\n        'utenlandsopphold.form.årsak.ANNET': 'Jeg dekker utgiftene selv',\n        'utenlandsopphold.oppsummering.årsak.ANNET': 'Jeg dekker utgiftene selv',\n        'utenlandsopphold.form.ok': 'Legg til',\n        'utenlandsopphold.form.avbryt': 'Avbryt',\n        'utenlandsoppholdForm.fom.dateHasNoValue':\n            'Du må oppgi når utenlandsoppholdet startet. Skriv inn eller velg dato fra datovelgeren.',\n        'utenlandsoppholdForm.fom.dateIsAfterMax':\n            'Datoen for når utenlandsoppholdet startet kan ikke være etter dagens dato. Skriv inn eller velg dato fra datovelgeren.',\n        'utenlandsoppholdForm.fom.dateIsBeforeMin':\n            'Datoen for når utenlandsoppholdet startet kan ikke være før {dato}. Skriv inn eller velg sluttdato fra datovelgeren.',\n        'utenlandsoppholdForm.fom.dateHasInvalidFormat':\n            'Du må oppgi dato for når utenlandsoppholdet startet i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'utenlandsoppholdForm.fom.fromDateIsAfterToDate':\n            'Startdatoen for utenlandsoppholdet må være før sluttdatoen, eller på samme dag som sluttdatoen. Skriv inn eller velg dato fra datovelgeren.',\n        'utenlandsoppholdForm.tom.dateHasNoValue':\n            'Du må oppgi når utenlandsoppholdet sluttet. Skriv inn eller velg dato fra datovelgeren.',\n        'utenlandsoppholdForm.tom.dateIsAfterMax':\n            'Du har lagt inn et utenlandsopphold som er utenfor søknadsperioden.',\n        'utenlandsoppholdForm.tom.dateIsBeforeMin':\n            'Datoen for når utenlandsoppholdet sluttet kan ikke være før {dato}. Skriv inn eller velg dato fra datovelgeren.',\n        'utenlandsoppholdForm.tom.dateHasInvalidFormat':\n            'Du må oppgi dato for når utenlandsoppholdet sluttet i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'utenlandsoppholdForm.tom.toDateIsBeforeFromDate':\n            'Sluttdatoen for utenlandsoppholdet kan ikke være før startdatoen. Skriv inn eller velg dato fra datovelgeren.',\n        'utenlandsoppholdForm.landkode.noValue': 'Du må velge land.',\n        'utenlandsoppholdForm.årsak.noValue': 'Du må velge hvordan utgiftene til innleggelsen dekkes.',\n        'utenlandsoppholdForm.erBarnetInnlagt.yesOrNoIsUnanswered':\n            'Du må svare ja eller nei på om barnet er, eller skal være innlagt i helseinstitusjon i {land}.',\n        'utenlandsoppholdForm.barnInnlagtPerioder.listIsEmpty': 'Du har ikke lagt til periode for innleggelse.',\n    },\n    nn: {\n        'utenlandsopphold.list.add': 'Legg til opphald',\n        'utenlandsopphold.form.tittel': 'Utanlandsopphald',\n        'utenlandsopphold.form.tidsperiode.spm': 'Tidsperiode',\n        'utenlandsopphold.form.tidsperiode.fraDato': 'Frå og med',\n        'utenlandsopphold.form.tidsperiode.tilDato': 'Til og med',\n        'utenlandsopphold.form.land.spm': 'Vel land',\n        'utenlandsopphold.form.erBarnetInnlagt.spm': 'Er, eller skal, barnet bli lagt inn i helseinstitusjon i {land}?',\n        'utenlandsopphold.form.perioderBarnetErInnlag.formTitle': 'Perioden barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.addLabel': 'Legg til perioden barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.modalTitle': 'Perioden/periodane barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.listTitle': 'Perioden/periodane barnet er innlagt',\n        'utenlandsopphold.form.årsak.spm': 'Korleis blir utgiftene til innlegginga dekte?',\n        'utenlandsopphold.form.årsak.BARNET_INNLAGT_I_HELSEINSTITUSJON_FOR_NORSK_OFFENTLIG_REGNING':\n            'For norsk offentleg rekning',\n        'utenlandsopphold.form.årsak.BARNET_INNLAGT_I_HELSEINSTITUSJON_DEKKET_ETTER_AVTALE_MED_ET_ANNET_LAND_OM_TRYGD':\n            'Etter trygdeavtale med eit anna land',\n        'utenlandsopphold.form.årsak.ANNET': 'Eg dekkjer utgiftene sjølv',\n        'utenlandsopphold.oppsummering.årsak.ANNET': 'Eg dekkjer utgiftene sjølv',\n        'utenlandsopphold.form.ok': 'Legg til',\n        'utenlandsopphold.form.avbryt': 'Avbryt',\n    },\n};\n\nexport default utenlandsoppholdMessages;\n","const fosterbarnMessages = {\n    nb: {\n        'fosterbarn.form.etternavn_label': 'Etternavn',\n        'fosterbarn.form.fornavn_label': 'Fornavn',\n        'fosterbarn.form.fødselsnummer_label': 'Fødselsnummer',\n        'fosterbarn.list.legg_til_knapp': 'Legg til fosterbarn',\n        'fosterbarn.list.tittel': 'Registrerte fosterbarn',\n        'fosterbarn.modal.tittel': 'Fosterbarn',\n        'fosterbarnForm.fødselsnummer.fødselsnummerHasNoValue': 'Skriv inn barnets fødselsnummer',\n        'fosterbarnForm.fødselsnummer.fødselsnummerIsInvalid':\n            'Du har oppgitt et ugyldig fødselsnummer. Kontroller at du har tastet inn riktig.',\n        'fosterbarnForm.fødselsnummer.fødselsnummerIsNot11Chars':\n            'Du har oppgitt et ugyldig fødselsnummer. Et gyldig fødselsnummer består av 11 siffer.',\n        'fosterbarnForm.fødselsnummer.fødselsnummerIsNotAllowed':\n            'Du har oppgitt ditt eget fødselsnummer som barnets fødselsnummer. Skriv inn barnets fødselsnummer.',\n    },\n    nn: {\n        'fosterbarn.form.etternavn_label': 'Etternavn',\n        'fosterbarn.form.fornavn_label': 'Fornavn',\n        'fosterbarn.form.fødselsnummer_label': 'Fødselsnummer',\n        'fosterbarn.list.legg_til_knapp': 'Legg til fosterbarn',\n        'fosterbarn.list.tittel': 'Registrerte fosterbarn',\n        'fosterbarn.modal.tittel': 'Fosterbarn',\n    },\n};\n\nexport default fosterbarnMessages;\n","const virksomhetMessages = {\n    nb: {\n        'sifForms.virksomhet.næringstype_FISKE': 'Fisker',\n        'sifForms.virksomhet.næringstype_JORDBRUK_SKOGBRUK': 'Jordbruker',\n        'sifForms.virksomhet.næringstype_DAGMAMMA': 'Dagmamma eller familiebarnehage i eget hjem',\n        'sifForms.virksomhet.næringstype_ANNEN': 'Annet',\n        'sifForms.virksomhet.form_title': 'Opplysninger om virksomheten din',\n        'sifForms.virksomhet.form_title.flere': 'Opplysninger om den eldste virksomheten din',\n        'sifForms.virksomhet.hvilken_type_virksomhet': 'Hvilken type virksomhet har du?',\n        'sifForms.virksomhet.hvilken_type_virksomhet.flere': 'Hvilken type virksomhet er den eldste virksomheten din?',\n        'sifForms.virksomhet.hva_heter_virksomheten': 'Hva heter virksomheten?',\n        'sifForms.virksomhet.fisker_blad_b': 'Er du fisker på blad B?',\n        'sifForms.virksomhet.veileder_fisker.tittel': `Hvis du ikke har organiasjonsnummer`,\n        'sifForms.virksomhet.veileder_fisker': `Hvis du ikke har organisasjonsnummer, svarer du nei på spørsmålet \"Er {navnPåVirksomheten} registrert i Norge?\" I nedtrekkslisten velger du at virksomheten er registrert i Norge.`,\n        'sifForms.virksomhet.registert_i_norge': `Er {navnPåVirksomheten} registert i Norge?`,\n        'sifForms.virksomhet.registert_i_hvilket_land': `I hvilket land er {navnPåVirksomheten} registrert i?`,\n        'sifForms.virksomhet.organisasjonsnummer': 'Hva er organisasjonsnummeret?',\n        'sifForms.virksomhet.startdato': `Når startet du {navnPåVirksomheten}?`,\n        'sifForms.virksomhet.kalender_fom': 'Startdato',\n        'sifForms.virksomhet.kalender_tom': 'Eventuell sluttdato',\n        'sifForms.virksomhet.kalender_pågående': 'Er pågående',\n        'sifForms.virksomhet.nyoppstartet.næringsinntektFlere.header': 'Næringsresultat for alle virksomhetene dine',\n        'sifForms.virksomhet.nyoppstartet.næringsinntektFlere.info':\n            'Du har opplyst at du har flere næringsvirksomheter. Her skal du legge inn næringsresultatet totalt for alle virksomhetene du har.',\n        'sifForms.virksomhet.ikkeNyoppstartet.næringsinntektFlere.header': 'Næringsvirksomhetene dine',\n        'sifForms.virksomhet.ikkeNyoppstartet.næringsinntektFlere.info':\n            'Du har opplyst at du har flere næringsvirksomheter som selvstendig næringsdrivende. Nå skal du svare på spørsmål som gjelder alle virksomhetene dine.',\n        'sifForms.virksomhet.næringsinntekt': 'Næringsinntekt',\n        'sifForms.virksomhet.næringsinntekt.enVirksomhet.spm':\n            'Hva har du hatt i næringsresultat før skatt de siste 12 månedene?',\n        'sifForms.virksomhet.næringsinntekt.enVirksomhet.spm.description':\n            'Hvis virksomheten har vart i kortere tid enn 12 måneder, kan du bruke denne perioden og regne om til årsinntekt. Oppgi beløpet i hele kroner.',\n        'sifForms.virksomhet.næringsinntekt.flereVirksomheter.spm':\n            'Hva har du hatt totalt i næringsresultat før skatt de siste 12 månedene?',\n        'sifForms.virksomhet.næringsinntekt.flereVirksomheter.spm.description':\n            'Hvis virksomhetene har vart i kortere tid enn 12 måneder, kan du bruke denne perioden og regne om til årsinntekt. Oppgi beløpet i hele kroner.',\n        'sifForms.virksomhet.hvaErNæringsresultat.enVirksomhet.text':\n            'Næringsresultatet er inntekter du har i næringen din, minus utgifter og avskrivninger.',\n        'sifForms.virksomhet.hvaErNæringsresultat.flereVirksomheter.text':\n            'Næringsresultatet er inntekter du har i næringene din, minus utgifter og avskrivninger.',\n        'sifForms.virksomhet.hvaErNæringsresultat.title': 'Hva er næringsresultatet?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv':\n            'Har du begynt i arbeidslivet i løpet av de 3 siste ferdigliknede årene?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_info_title': 'Hva betyr dette?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_info':\n            'Du skal svare ja på spørsmålet hvis du før oppstart av næringsvirksomheten din hadde lav eller ingen inntekt.',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_dato': 'Oppgi dato for når du begynte i arbeidslivet',\n        'sifForms.virksomhet.varig_endring_spm':\n            'Har du hatt en varig endring i noen av arbeidsforholdene, virksomhetene eller arbeidssituasjonen din de siste fire årene?',\n        'sifForms.virksomhet.varig_endring_dato': 'Oppgi dato for endringen',\n        'sifForms.virksomhet.varig_endring_inntekt':\n            'Oppgi næringsinntekten din etter endringen. Oppgi årsinntekten i hele kroner.',\n        'sifForms.virksomhet.varig_endring_tekst':\n            'Her kan du skrive kort hva som har endret seg i arbeidsforholdene, virksomhetene eller arbeidssituasjonen din',\n        'sifForms.virksomhet.regnskapsfører_spm': 'Har du regnskapsfører?',\n        'sifForms.virksomhet.regnskapsfører_navn': 'Oppgi navnet til regnskapsfører',\n        'sifForms.virksomhet.regnskapsfører_telefon': 'Oppgi telefonnummeret til regnskapsfører',\n        'sifForms.virksomhet.veileder_innhenter_info.1':\n            'Vi henter inn opplysninger om virksomheten og inntekten din fra offentlige registre.',\n        'sifForms.virksomhet.veileder_innhenter_info.2': 'Vi tar kontakt med deg hvis vi trenger flere opplysninger.',\n\n        'sifForms.virksomhet.summary.tittel': 'Næringsvirksomhet som du har lagt inn:',\n        'sifForms.virksomhet.summary.navn': 'Navn',\n        'sifForms.virksomhet.summary.næringstype': 'Næringstype',\n        'sifForms.virksomhet.summary.varigEndring.dato': 'Dato for varig endring',\n        'sifForms.virksomhet.summary.varigEndring.næringsinntekt': 'Næringsinntekt etter endring',\n        'sifForms.virksomhet.summary.varigEndring.beskrivelse': 'Beskrivelse av endring',\n        'sifForms.virksomhet.summary.ikkeRegnskapsfører': 'Har ikke regnskapsfører.',\n        'sifForms.virksomhet.summary.tidsinfo.avsluttet': 'Startet {fraOgMed}, avsluttet {tilOgMed}.',\n        'sifForms.virksomhet.summary.tidsinfo.pågående': 'Startet {fraOgMed} (pågående).',\n        'sifForms.virksomhet.summary.fisker.påBladB': 'på Blad B',\n        'sifForms.virksomhet.summary.fisker.ikkePåBladB': 'ikke på Blad B',\n        'sifForms.virksomhet.summary.registrertILand': 'Registrert i {land}',\n        'sifForms.virksomhet.summary.registrertILand.orgnr': ' (organisasjonsnummer {orgnr})',\n        'sifForms.virksomhet.summary.yrkesaktiv.jaStartetDato': 'Ja, ble yrkesaktiv {dato}',\n        'sifForms.virksomhet.summary.næringsinntekst': 'Næringsinntekt:',\n        'sifForms.virksomhet.summary.regnskapsfører.header': 'Regnskapsfører',\n        'sifForms.virksomhet.summary.regnskapsfører.info': 'Ja, {navn}, telefon {telefon}',\n\n        'virksomhetForm.næringstyper.listIsEmpty': 'Velg hvilken type virksomhet du har fra listen.',\n        'virksomhetForm.fiskerErPåBladB.yesOrNoIsUnanswered':\n            'Du må svare ja eller nei på spørsmålet om du er fisker på Blad B.',\n        'virksomhetForm.navnPåVirksomheten.stringHasNoValue': 'Skriv inn navnet på virksomheten din.',\n        'virksomhetForm.registrertINorge.yesOrNoIsUnanswered':\n            'Du må svare ja eller nei på spørsmålet om virksomheten din er registrert i Norge.',\n        'virksomhetForm.registrertILand.noValue':\n            'Du må velge hvilket land virksomheten din er registrert i. Velg land fra listen.',\n        'virksomhetForm.organisasjonsnummer.orgNumberHasNoValue':\n            'Skriv inn organisasjonsnummeret. Et gyldig organsisasjonsnummer inneholder 9 siffer',\n        'virksomhetForm.organisasjonsnummer.orgNumberHasInvalidFormat':\n            'Du har oppgitt et ugyldig organisasjonsnummer. Oppgi et gyldig organsisasjonsnummer som inneholder 9 siffer.',\n        'virksomhetForm.fom.dateHasNoValue':\n            'Du må oppgi hvilken dato du startet virksomheten. Skriv inn eller velg startdato fra datovelgeren.',\n        'virksomhetForm.fom.dateIsAfterMax':\n            'Startdatoen for når du startet {navn} må være før dagens dato. Skriv inn eller velg startdato fra datovelgeren.',\n        'virksomhetForm.fom.dateHasInvalidFormat':\n            'Du må oppgi startdato for virksomheten i et gyldig format. Gyldig format er dd.mm.ååå.',\n        'virksomhetForm.fom.fromDateIsAfterToDate':\n            'Startdatoen for når du startet {navn} må være før sluttdatoen, eller på samme dag som sluttdatoen. Skriv inn eller velg dato fra datovelgeren.',\n        'virksomhetForm.tom.dateHasNoValue':\n            'Du må oppgi hvilken dato du avsluttet virksomheten. Skriv inn eller velg dato fra datovelgeren.',\n        'virksomhetForm.tom.dateIsBeforeMin':\n            'Sluttdatoen for når du avsluttet virksomheten kan ikke være før startdatoen. Skriv inn eller velg sluttdato fra datovelgeren.',\n        'virksomhetForm.tom.dateIsAfterMax':\n            'Sluttdatoen for når du avsluttet virksomheten kan ikke være etter dagens dato. Skriv inn eller velg sluttdato fra datovelgeren.',\n        'virksomhetForm.tom.dateHasInvalidFormat':\n            'Du må oppgi dato for når du avsluttet virksomheten i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'virksomhetForm.tom.toDateIsBeforeFromDate':\n            'Sluttdatoen for når du avsluttet virksomheten kan ikke være før startdatoen. Skriv inn eller velg sluttdato fra datovelgeren.',\n        'virksomhetForm.næringsinntekt.numberHasNoValue': 'Du må oppgi næringsinntekten i {navn}.',\n        'virksomhetForm.næringsinntekt.numberHasDecimals': 'Du må oppgi næringsinntekten i {navn} uten desimaler.',\n        'virksomhetForm.næringsinntekt.numberHasInvalidFormat':\n            'Du må oppgi et gyldig tall for næringsinntekten i {navn}. Et gyldig tall inneholder kun siffer.',\n        'virksomhetForm.næringsinntekt.numberIsTooSmall':\n            'Tallet du har oppgitt som næringsinntekt for {navn} er for lavt. Tallet kan ikke være lavere enn {min}.',\n        'virksomhetForm.næringsinntekt.numberIsTooLarge':\n            'Tallet du har oppgitt som næringsinntekt for {navn} er for høyt. Tallet kan ikke være høyere enn {maks}.',\n        'virksomhetForm.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene.yesOrNoIsUnanswered':\n            'Du må svare ja eller nei på spørsmålet om du har begynt arbeidslivet i løpet av de 3 siste ferdigliknede årene.',\n        'virksomhetForm.blittYrkesaktivDato.dateHasNoValue':\n            'Du må oppgi dato for når du begynte i arbeidslivet. Skriv inn eller velg dato fra datovelgeren.',\n        'virksomhetForm.blittYrkesaktivDato.dateHasInvalidFormat':\n            'Du må oppgi dato for når du begynte i arbeidslivet i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'virksomhetForm.blittYrkesaktivDato.dateIsAfterMax':\n            'Datoen for når du begynte i arbeidslivet kan ikke være etter dagens dato. Skriv inn eller velg dato fra datovelgeren.',\n        'virksomhetForm.blittYrkesaktivDato.dateIsBeforeMin':\n            'Datoen for når du begynte i arbeidslivet kan ikke være før {dato}. Skriv inn eller velg dato fra datovelgeren.',\n        'virksomhetForm.hattVarigEndringAvNæringsinntektSiste4Kalenderår.yesOrNoIsUnanswered':\n            'Du må svare ja eller nei på spørsmålet om du har hatt varig endring i næringsinntekten i de siste 4 kalenderårene.',\n        'virksomhetForm.varigEndringINæringsinntekt_dato.dateHasNoValue':\n            'Du må oppgi fra hvilken dato du fikk en varig endring i næringsinntekten i {navn}. Skriv inn eller velg dato fra datovelgeren.',\n        'virksomhetForm.varigEndringINæringsinntekt_dato.dateHasInvalidFormat':\n            'Du må oppgi dato for når du fikk varig endring i næringsinntekt i {navn} i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'virksomhetForm.varigEndringINæringsinntekt_dato.dateIsAfterMax':\n            'Datoen for når du fikk varig endring i næringsinntekt kan ikke være etter {dato}. Skriv inn eller velg dato fra datovelgeren.',\n        'virksomhetForm.varigEndringINæringsinntekt_dato.dateIsBeforeMin':\n            'Datoen for når du fikk varig endring i næringsinntekt kan ikke være før {dato}. Skriv inn eller velg dato fra datovelgeren.',\n        'virksomhetForm.varigEndringINæringsinntekt_inntektEtterEndring.numberHasNoValue':\n            'Du må oppgi inntekt etter inntektsendring for {navn}.',\n        'virksomhetForm.varigEndringINæringsinntekt_inntektEtterEndring.numberHasDecimals':\n            'Du må oppgi inntekt etter inntektsendring for {navn} uten desimaler.',\n        'virksomhetForm.varigEndringINæringsinntekt_inntektEtterEndring.numberHasInvalidFormat':\n            'Du må oppgi et gyldig tall for ny inntekt etter inntektsendring i {navn}. Et gyldig tall inneholder kun siffer.',\n        'virksomhetForm.varigEndringINæringsinntekt_inntektEtterEndring.numberIsTooLarge':\n            'Tallet du har oppgitt som ny inntekt etter inntektsendring for {navn} er for høyt. Tallet kan ikke være høyere enn {maks}.',\n        'virksomhetForm.varigEndringINæringsinntekt_inntektEtterEndring.numberIsTooSmall':\n            'Tallet du har oppgitt som ny inntekt etter inntektsendring for {navn} er for lavt. Tallet kan ikke være lavere enn {min}.',\n        'virksomhetForm.varigEndringINæringsinntekt_forklaring.stringHasNoValue':\n            'Skriv en forklaring på hvorfor du har hatt en varig endring i næringsinntekten for {navn}.',\n        'virksomhetForm.varigEndringINæringsinntekt_forklaring.stringIsTooLong':\n            'Du har brukt for mange tegn i forklaringen din. Teksten kan ikke inneholde flere enn {maks} tegn.',\n        'virksomhetForm.varigEndringINæringsinntekt_forklaring.stringIsTooShort':\n            'Du har brukt for få tegn i forklaringen din. Teksten må inneholde minst {min} tegn.',\n        'virksomhetForm.harRegnskapsfører.yesOrNoIsUnanswered':\n            'Du må svare ja eller nei på spørsmålet om du har regnskapsfører.',\n        'virksomhetForm.regnskapsfører_navn.stringHasNoValue': 'Skriv inn navnet på regnskapsføreren din.',\n        'virksomhetForm.regnskapsfører_navn.stringIsTooLong':\n            'Navnet på regnskapsfører kan ikke inneholde flere enn {maks} tegn.',\n        'virksomhetForm.regnskapsfører_navn.stringIsTooShort':\n            'Navnet på regnskapsfører må inneholde minst {min} tegn.',\n        'virksomhetForm.regnskapsfører_telefon.stringHasNoValue': 'Skriv inn telefonnummeret til regnskapsføreren din.',\n        'virksomhetForm.regnskapsfører_telefon.stringIsTooLong':\n            'Telefonnummeret til regnskapsfører kan ikke inneholde flere enn {maks} tegn.',\n        'virksomhetForm.regnskapsfører_telefon.stringIsTooShort':\n            'Telefonnummeret til regnskapsfører må inneholde minst {min} tegn.',\n        'virksomhetForm.regnskapsfører_telefon.stringHasInvalidFormat':\n            'Telefonnummeret du har lagt inn inneholder ugyldige tegn. Hvis du har limt inn telefonnummeret kan det være at du har fått med tegn som ikke vises. Prøv derfor å skrive det inn selv, i stedet for å lime det inn. Telefonnummeret kan kun inneholde tall, mellomrom og +-tegnet.',\n    },\n    nn: {\n        'sifForms.virksomhet.næringstype_FISKE': 'Fisker',\n        'sifForms.virksomhet.næringstype_JORDBRUK_SKOGBRUK': 'Jordbrukar',\n        'sifForms.virksomhet.næringstype_DAGMAMMA': 'Dagmamma eller familiebarnehage i eigen heim',\n        'sifForms.virksomhet.næringstype_ANNEN': 'Anna',\n        'sifForms.virksomhet.form_title': 'Opplysningar om verksemda di',\n        'sifForms.virksomhet.form_title.flere': 'Opplysningar om den eldste verksemda di',\n        'sifForms.virksomhet.hvilken_type_virksomhet': 'Kva type verksemd har du?',\n        'sifForms.virksomhet.hvilken_type_virksomhet.flere': 'Kva type er den eldste verksemda di?',\n        'sifForms.virksomhet.hva_heter_virksomheten': 'Kva heiter verksemda?',\n        'sifForms.virksomhet.fisker_blad_b': 'Er du fiskar på blad B?',\n        'sifForms.virksomhet.veileder_fisker.tittel': `Dersom du ikkje har organiasjonsnummer`,\n        'sifForms.virksomhet.veileder_fisker': `Dersom du ikkje har organisasjonsnummer, svarer du nei på spørsmålet \"Er {navnPåVirksomheten} registrert i Noreg?\". I nedtrekkslista vel du at verksemda er registrert i Noreg.`,\n        'sifForms.virksomhet.registert_i_norge': `Er {navnPåVirksomheten} registert i Noreg?`,\n        'sifForms.virksomhet.registert_i_hvilket_land': `I kva land er {navnPåVirksomheten} registrert?`,\n        'sifForms.virksomhet.organisasjonsnummer': 'Kva er organisasjonsnummeret?',\n        'sifForms.virksomhet.startdato': `Når starta du {navnPåVirksomheten}?`,\n        'sifForms.virksomhet.kalender_fom': 'Startdato',\n        'sifForms.virksomhet.kalender_tom': 'Eventuell sluttdato',\n        'sifForms.virksomhet.kalender_pågående': 'Er i gang',\n        'sifForms.virksomhet.nyoppstartet.næringsinntektFlere.header': 'Næringsresultat for alle verksemdene dine',\n        'sifForms.virksomhet.nyoppstartet.næringsinntektFlere.info':\n            'Du har opplyst at du har fleire næringsverksemder. Her skal du leggje inn næringsresultatet totalt for alle verksemdene du har.',\n        'sifForms.virksomhet.ikkeNyoppstartet.næringsinntektFlere.header': 'Næringsverksemdene dine',\n        'sifForms.virksomhet.ikkeNyoppstartet.næringsinntektFlere.info':\n            'Du har opplyst at du har fleire næringsverksemder som sjølvstendig næringsdrivande. Nå skal du svare på spørsmål som gjeld alle verksemdene dine.',\n        'sifForms.virksomhet.næringsinntekt.enVirksomhet.spm':\n            'Kva har du hatt i næringsresultat før skatt dei siste 12 månadene?',\n        'sifForms.virksomhet.næringsinntekt.enVirksomhet.spm.description':\n            'Dersom verksemda har vart i kortare tid enn 12 månader, kan du bruke denne perioden og rekne om til årsinntekt. Gi opp beløpet i heile kroner.',\n        'sifForms.virksomhet.næringsinntekt.flereVirksomheter.spm':\n            'Kva har du hatt totalt i næringsresultat før skatt dei siste 12 månadene?',\n        'sifForms.virksomhet.næringsinntekt.flereVirksomheter.spm.description':\n            'Dersom verksemdene har vart i kortare tid enn 12 månader, kan du bruke denne perioden og rekne om til årsinntekt. Gi opp beløpet i heile kroner.',\n        'sifForms.virksomhet.hvaErNæringsresultat.enVirksomhet.text':\n            'Næringsresultatet er inntekter du har i næringa di, minus utgifter og avskrivingar.',\n        'sifForms.virksomhet.hvaErNæringsresultat.flereVirksomheter.text':\n            'Næringsresultatet er inntekter du har i næringane dine, minus utgifter og avskrivingar.',\n        'sifForms.virksomhet.hvaErNæringsresultat.title': 'Kva er næringsresultatet?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv':\n            'Har du begynt i arbeidslivet i løpet av dei 3 siste ferdiglikna åra?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_info_title': 'Kva betyr dette?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_info':\n            'Du skal svare ja på spørsmålet dersom du før oppstart av næringsverksemda di hadde låg eller inga inntekt.',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_dato': 'Gi opp datoen for når du begynte i arbeidslivet',\n        'sifForms.virksomhet.varig_endring_spm':\n            'Har du hatt ei varig endring i nokre av arbeidsforholda, verksemdene eller arbeidssituasjonen din dei siste fire åra?',\n        'sifForms.virksomhet.varig_endring_dato': 'Gi opp datoen for endringa',\n        'sifForms.virksomhet.varig_endring_inntekt':\n            'Gi opp næringsinntekta di etter endringa. Gi opp årsinntekta i heile kroner.',\n        'sifForms.virksomhet.varig_endring_tekst':\n            'Her kan du skrive kort kva som har endra seg i arbeidsforholda, verksemdene eller arbeidssituasjonen din',\n        'sifForms.virksomhet.regnskapsfører_spm': 'Har du rekneskapsførar?',\n        'sifForms.virksomhet.regnskapsfører_navn': 'Gi opp namnet til rekneskapsføraren',\n        'sifForms.virksomhet.regnskapsfører_telefon': 'Gi opp telefonnummeret til rekneskapsføraren',\n        'sifForms.virksomhet.veileder_innhenter_info.1':\n            'Vi hentar inn opplysningar om verksemda og inntekta di frå offentlege register.',\n        'sifForms.virksomhet.veileder_innhenter_info.2': 'Vi tek kontakt med deg dersom vi treng fleire opplysningar',\n\n        'sifForms.virksomhet.summary.tittel': 'Næringsvirksomhet som du har lagt inn:',\n        'sifForms.virksomhet.summary.navn': 'Namn',\n        'sifForms.virksomhet.summary.næringstype': 'Næringstype',\n        'sifForms.virksomhet.summary.varigEndring.dato': 'Dato for varig endring',\n        'sifForms.virksomhet.summary.varigEndring.næringsinntekt': 'Næringsinntekt etter endring',\n        'sifForms.virksomhet.summary.varigEndring.beskrivelse': 'Skildring av endring',\n        'sifForms.virksomhet.summary.ikkeRegnskapsfører': 'Har ikkje regnskapsførar.',\n        'sifForms.virksomhet.summary.tidsinfo.avsluttet': 'Startet {fraOgMed}, avsluttet {tilOgMed}.',\n        'sifForms.virksomhet.summary.tidsinfo.pågående': 'Startet {fraOgMed} (pågåande).',\n        'sifForms.virksomhet.summary.fisker.påBladB': 'på Blad B',\n        'sifForms.virksomhet.summary.fisker.ikkePåBladB': 'ikkje på Blad B',\n        'sifForms.virksomhet.summary.registrertILand': 'Registrert i {land}',\n        'sifForms.virksomhet.summary.registrertILand.orgnr': ' (organisasjonsnummer {orgnr})',\n        'sifForms.virksomhet.summary.næringsinntekst': 'Næringsinntekt:',\n        'sifForms.virksomhet.summary.yrkesaktiv.jaStartetDato': 'Ja, vart yrkesaktiv {dato}',\n        'sifForms.virksomhet.summary.regnskapsfører.header': 'Regnskapsførar',\n        'sifForms.virksomhet.summary.regnskapsfører.info': 'Ja, {navn}, telefon {telefon}',\n    },\n};\nexport default virksomhetMessages;\n","const tidsperiodeMessages = {\n    nb: {\n        'tidsperiode.form.title': 'Tidsperiode',\n        'tidsperiode.form.fromDate': 'Fra og med',\n        'tidsperiode.form.toDate': 'Til og med',\n        'tidsperiode.form.okButton': 'Ok',\n        'tidsperiode.form.cancelButton': 'Avbryt',\n        'tidsperiodeForm.fom.dateHasNoValue':\n            'Du må oppgi når perioden startet. Skriv inn eller velg dato fra datovelgeren.',\n        'tidsperiodeForm.fom.dateIsAfterMax':\n            'Datoen for når perioden startet kan ikke være etter dagens dato. Skriv inn eller velg dato fra datovelgeren.',\n        'tidsperiodeForm.fom.dateIsBeforeMin':\n            'Datoen for når perioden startet kan ikke være før {dato}. Skriv inn eller velg sluttdato fra datovelgeren.',\n        'tidsperiodeForm.fom.dateHasInvalidFormat':\n            'Du må oppgi dato for når perioden startet i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'tidsperiodeForm.fom.fromDateIsAfterToDate':\n            'Startdatoen for perioden må være før sluttdatoen, eller på samme dag som sluttdatoen. Skriv inn eller velg dato fra datovelgeren.',\n        'tidsperiodeForm.tom.dateHasNoValue':\n            'Du må oppgi når perioden sluttet. Skriv inn eller velg dato fra datovelgeren.',\n        'tidsperiodeForm.tom.dateIsAfterMax':\n            'Datoen for når perioden sluttet kan ikke være etter dagens dato. Skriv inn eller velg dato fra datovelgeren.',\n        'tidsperiodeForm.tom.dateIsBeforeMin':\n            'Datoen for når perioden sluttet kan ikke være før {dato}. Skriv inn eller velg dato fra datovelgeren.',\n        'tidsperiodeForm.tom.dateHasInvalidFormat':\n            'Du må oppgi dato for når perioden sluttet i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'tidsperiodeForm.tom.toDateIsBeforeFromDate':\n            'Sluttdatoen for perioden kan ikke være før startdatoen. Skriv inn eller velg dato fra datovelgeren.',\n    },\n    nn: {\n        'tidsperiode.form.title': 'Tidsperiode',\n        'tidsperiode.form.fromDate': 'Frå og med',\n        'tidsperiode.form.toDate': 'Til og med',\n        'tidsperiode.form.okButton': 'Ok',\n        'tidsperiode.form.cancelButton': 'Avbryt',\n    },\n};\n\nexport default tidsperiodeMessages;\n","const annetBarnMessages = {\n    nb: {\n        'annetBarn.form.title': 'Legg til barn',\n        'annetBarn.form.fnr': 'Barnets fødselsnummer/D-nummer',\n        'annetBarn.form.fødselsdato': 'Barnets fødselsdato',\n        'annetBarn.form.navn': 'Barnets navn',\n        'annetBarn.form.okButton': 'Ok',\n        'annetBarn.form.cancelButton': 'Avbryt',\n        'annetBarn.list.født': 'Født',\n        'annetBarn.form.årsak.spm': 'Kryss av for årsaken til at du la til dette barnet selv:',\n        'annetBarn.form.årsak.FOSTERBARN': 'Barnet er mitt fosterbarn',\n        'annetBarn.form.årsak.ANNET': 'Annet',\n\n        'annetBarnForm.navn.stringHasNoValue': 'Skriv inn barnets navn',\n        'annetBarnForm.fødselsdato.dateHasNoValue':\n            'Du må oppgi barnets fødselsdato. Skriv inn eller velg dato fra datovelgeren.',\n        'annetBarnForm.fødselsdato.dateIsBeforeMin':\n            'Barnets fødselsdato kan ikke være før {dato}. Skriv inn eller velg startdato fra datovelgeren.',\n        'annetBarnForm.fødselsdato.dateIsAfterMax': 'Barnets fødselsdato kan ikke være etter dagens dato',\n        'annetBarnForm.fødselsdato.dateHasInvalidFormat':\n            'Du må oppgi barnets fødselsdato i et gyldig format. Gyldig format er dd.mm.ååå.',\n        'annetBarnForm.fnr.fødselsnummerHasNoValue': 'Skriv inn barnets fødselsnummer',\n        'annetBarnForm.fnr.fødselsnummerIsInvalid':\n            'Du har oppgitt et ugyldig fødselsnummer. Kontroller at du har tastet inn riktig.',\n        'annetBarnForm.fnr.fødselsnummerIsNot11Chars':\n            'Du har oppgitt et ugyldig fødselsnummer. Et gyldig fødselsnummer består av 11 siffer.',\n        'annetBarnForm.fnr.fødselsnummerIsNotAllowed':\n            'Du har oppgitt et fødselsnummer som du ikke kan bruke. Kontroller at du har tastet inn barnets fødselsnummer.',\n        'annetBarnForm.type.noValue': 'Du må krysse av for årsaken til at du la til dette barnet selv.',\n    },\n    nn: {\n        'annetBarn.form.title': 'Legg til barn',\n        'annetBarn.form.fnr': 'Fødselsnummeret/D-nummeret til barnet',\n        'annetBarn.form.fødselsdato': 'Fødselsdatoen til barnet',\n        'annetBarn.form.navn': 'Namnet til barnet',\n        'annetBarn.form.okButton': 'Ok',\n        'annetBarn.form.cancelButton': 'Avbryt',\n        'annetBarn.list.født': 'Født',\n    },\n};\n\nexport default annetBarnMessages;\n","const opptjeningUtlandMessages = {\n    nb: {\n        'opptjeningUtland.list.add': '+ Legg til jobb',\n        'opptjeningUtland.form.tittel': 'Jobbet i et annet EØS-land',\n        'opptjeningUtland.form.tidsperiode.spm': 'Velg tidsperiode for jobb',\n        'opptjeningUtland.form.tidsperiode.fraDato': 'Fra og med',\n        'opptjeningUtland.form.tidsperiode.tilDato': 'Til og med',\n        'opptjeningUtland.form.land.spm': 'Velg land',\n        'opptjeningUtland.form.opptjeningAktivitet.spm': 'Hva jobbet du som?',\n        'opptjeningUtland.form.opptjeningAktivitet.FRILANSER': 'Frilanser',\n        'opptjeningUtland.form.opptjeningAktivitet.ARBEIDSTAKER': 'Arbeidstaker',\n        'opptjeningUtland.form.arbeidsgiversNavn': ' Legg inn navn på arbeidsgiver',\n        'opptjeningUtland.form.oppdragsgiverNavn': ' Legg inn navn på oppdragsgiver',\n        'opptjeningUtland.form.ok': 'Legg til',\n        'opptjeningUtland.form.avbryt': 'Avbryt',\n        'opptjeningUtlandForm.fom.dateHasNoValue':\n            'Du må oppgi når du startet å jobbe. Skriv inn eller velg dato fra datovelgeren.',\n        'opptjeningUtlandForm.fom.dateIsAfterMax':\n            'Datoen for når du startet å jobbe kan ikke være etter dagens dato. Skriv inn eller velg dato fra datovelgeren.',\n        'opptjeningUtlandForm.fom.dateIsBeforeMin':\n            'Datoen for når du startet å jobbe kan ikke være før {dato}. Skriv inn eller velg sluttdato fra datovelgeren.',\n        'opptjeningUtlandForm.fom.dateHasInvalidFormat':\n            'Du må oppgi dato når du startet å jobbe i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'opptjeningUtlandForm.fom.fromDateIsAfterToDate':\n            'Startdatoen for jobb må være før sluttdatoen, eller på samme dag som sluttdatoen. Skriv inn eller velg dato fra datovelgeren.',\n        'opptjeningUtlandForm.tom.dateHasNoValue':\n            'Du må oppgi når du sluttet å jobbe. Skriv inn eller velg dato fra datovelgeren.',\n        'opptjeningUtlandForm.tom.dateIsAfterMax': 'Du har lagt inn et jobb som er utenfor søknadsperioden.',\n        'opptjeningUtlandForm.tom.dateIsBeforeMin':\n            'Datoen for når du sluttet å jobbe kan ikke være før {dato}. Skriv inn eller velg dato fra datovelgeren.',\n        'opptjeningUtlandForm.tom.dateHasInvalidFormat':\n            'Du må oppgi dato for når du sluttet å jobbe i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'opptjeningUtlandForm.tom.toDateIsBeforeFromDate':\n            'Sluttdatoen for jobb kan ikke være før startdatoen. Skriv inn eller velg dato fra datovelgeren.',\n        'opptjeningUtlandForm.landkode.noValue': 'Du må velge land.',\n        'opptjeningUtlandForm.type.noValue': 'Du må velge hva jobbet du som.',\n        'opptjeningUtlandForm.oppdragsgiverNavn.noValue': 'Du må skrive inn {opptjeningAktivitet} navn.',\n        'opptjeningUtlandForm.navn.noValue': 'Du må skrive inn navn.',\n        'opptjeningUtlandForm.opptjeningType.noValue': 'Du må oppgi hva jobbet du som.',\n    },\n    nn: {\n        'opptjeningUtland.list.add': '+ Legg til jobb',\n        'opptjeningUtland.form.tittel': 'Jobbet i et annet EØS-land',\n        'opptjeningUtland.form.tidsperiode.spm': 'Velg tidsperiode for jobb',\n        'opptjeningUtland.form.tidsperiode.fraDato': 'Fra og med',\n        'opptjeningUtland.form.tidsperiode.tilDato': 'Til og med',\n        'opptjeningUtland.form.land.spm': 'Velg land',\n        'opptjeningUtland.form.opptjeningAktivitet.spm': 'Hva jobbet du som?',\n        'opptjeningUtland.form.opptjeningAktivitet.FRILANSER': 'Frilanser',\n        'opptjeningUtland.form.opptjeningAktivitet.ARBEIDSTAKER': 'Arbeidstaker',\n        'opptjeningUtland.form.arbeidsgiversNavn': ' Legg inn navn på arbeidsgiver',\n        'opptjeningUtland.form.oppdragsgiverNavn': ' Legg inn navn på oppdragsgiver',\n        'opptjeningUtland.form.ok': 'Legg til',\n        'opptjeningUtland.form.avbryt': 'Avbryt',\n        'opptjeningUtlandForm.fom.dateHasNoValue':\n            'Du må oppgi når du startet å jobbe. Skriv inn eller velg dato fra datovelgeren.',\n        'opptjeningUtlandForm.fom.dateIsAfterMax':\n            'Datoen for når du startet å jobbe kan ikke være etter dagens dato. Skriv inn eller velg dato fra datovelgeren.',\n        'opptjeningUtlandForm.fom.dateIsBeforeMin':\n            'Datoen for når du startet å jobbe kan ikke være før {dato}. Skriv inn eller velg sluttdato fra datovelgeren.',\n        'opptjeningUtlandForm.fom.dateHasInvalidFormat':\n            'Du må oppgi dato når du startet å jobbe i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'opptjeningUtlandForm.fom.fromDateIsAfterToDate':\n            'Startdatoen for jobb må være før sluttdatoen, eller på samme dag som sluttdatoen. Skriv inn eller velg dato fra datovelgeren.',\n        'opptjeningUtlandForm.tom.dateHasNoValue':\n            'Du må oppgi når du sluttet å jobbe. Skriv inn eller velg dato fra datovelgeren.',\n        'opptjeningUtlandForm.tom.dateIsAfterMax': 'Du har lagt inn et jobb som er utenfor søknadsperioden.',\n        'opptjeningUtlandForm.tom.dateIsBeforeMin':\n            'Datoen for når du sluttet å jobbe kan ikke være før {dato}. Skriv inn eller velg dato fra datovelgeren.',\n        'opptjeningUtlandForm.tom.dateHasInvalidFormat':\n            'Du må oppgi dato for når du sluttet å jobbe i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'opptjeningUtlandForm.tom.toDateIsBeforeFromDate':\n            'Sluttdatoen for jobb kan ikke være før startdatoen. Skriv inn eller velg dato fra datovelgeren.',\n        'opptjeningUtlandForm.landkode.noValue': 'Du må velge land.',\n        'opptjeningUtlandForm.type.noValue': 'Du må velge hva jobbet du som.',\n        'opptjeningUtlandForm.oppdragsgiverNavn.noValue': 'Du må skrive inn {opptjeningAktivitet} navn.',\n        'opptjeningUtlandForm.navn.noValue': 'Du må skrive inn navn.',\n        'opptjeningUtlandForm.opptjeningType.noValue': 'Du må oppgi hva jobbet du som.',\n    },\n};\n\nexport default opptjeningUtlandMessages;\n","import bostedUtlandMessages from '../../../forms/bosted-utland/bostedUtlandMessages';\nimport ferieuttakMessages from '../../../forms/ferieuttak/ferieuttakMessages';\nimport fraværMessages from '../../../forms/fravær/fraværMessages';\nimport utenlandsoppholdMessages from '../../../forms/utenlandsopphold/utenlandsoppholdMessages';\nimport fosterbarnMessages from '../../../forms/fosterbarn/fosterbarnMessages';\nimport virksomhetMessages from '../../../forms/virksomhet/virksomhetMessages';\nimport tidsperiodeMessages from '../../../forms/tidsperiode/tidsperiodeMessages';\nimport annetBarnMessages from '../../../forms/annet-barn/annetBarnMessages';\nimport opptjeningUtlandMessages from '../../../forms/opptjening-utland/opptjeningUtlandMessages';\n\nconst commonNb = require('@navikt/sif-common-core/lib/i18n/common.nb.json');\nconst commonNn = require('@navikt/sif-common-core/lib/i18n/common.nn.json');\nconst validationNb = require('@navikt/sif-common-core/lib/i18n/validationErrors.nb.json');\nconst validationNn = require('@navikt/sif-common-core/lib/i18n/validationErrors.nn.json');\n\nconst bokmålstekster = {\n    ...commonNb,\n    ...validationNb,\n    ...bostedUtlandMessages.nb,\n    ...fraværMessages.nb,\n    ...ferieuttakMessages.nb,\n    ...fosterbarnMessages.nb,\n    ...utenlandsoppholdMessages.nb,\n    ...opptjeningUtlandMessages.nb,\n    ...tidsperiodeMessages.nb,\n    ...virksomhetMessages.nb,\n    ...annetBarnMessages.nb,\n    'common.fieldvalidation.ugyldigTall': 'Ugyldig tall',\n};\n\nconst nynorsktekster = {\n    ...commonNn,\n    ...validationNn,\n    ...bostedUtlandMessages.nn,\n    ...fraværMessages.nn,\n    ...ferieuttakMessages.nn,\n    ...fosterbarnMessages.nn,\n    ...utenlandsoppholdMessages.nn,\n    ...utenlandsoppholdMessages.nb,\n    ...tidsperiodeMessages.nn,\n    ...virksomhetMessages.nn,\n    ...annetBarnMessages.nn,\n    'common.fieldvalidation.ugyldigTall': 'Ugyldig tall',\n};\n\nexport const appMessages = {\n    nb: bokmålstekster,\n    nn: nynorsktekster,\n};\n","import * as React from 'react';\nimport { IntlProvider } from 'react-intl';\nimport '@formatjs/intl-pluralrules//locale-data/en';\nimport '@formatjs/intl-pluralrules//locale-data/nb';\nimport '@formatjs/intl-pluralrules//locale-data/nn';\nimport '@formatjs/intl-pluralrules/polyfill';\nimport { Locale } from '@navikt/sif-common-core/lib/types/Locale';\nimport { appMessages } from './messages';\nimport dayjs from 'dayjs';\nrequire('dayjs/locale/nb');\nrequire('dayjs/locale/nn');\n\nexport interface IntlProviderProps {\n    locale: Locale;\n    children: React.ReactNode;\n    onError?: (error: any) => void;\n}\n\nconst AppIntlProvider = ({ locale, onError, children }: IntlProviderProps) => {\n    const messages = locale === 'nb' ? appMessages.nb : appMessages.nn;\n    dayjs.locale(locale === 'nb' ? 'nb' : 'nn');\n    return (\n        <IntlProvider locale={locale} messages={messages} onError={onError}>\n            {children}\n        </IntlProvider>\n    );\n};\n\nexport default AppIntlProvider;\n","import React from 'react';\n\nfunction NAVLogo(props) {\n    return (\n        <svg className=\"prefix__navLogo\" width={90} viewBox=\"0 0 269 169\" {...props}>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <path\n                    fill=\"#C30000\"\n                    d=\"M125.31 168.942c-46.642 0-84.46-37.817-84.46-84.465C40.85 37.824 78.667 0 125.31 0c46.657 0 84.48 37.824 84.48 84.477 0 46.648-37.823 84.465-84.48 84.465zM0 121.359l17.265-42.73h16.589l-17.243 42.73zm213.044 0l17.044-42.73h9.044l-17.043 42.73zM246.564 121.359l17.04-42.73h4.803l-17.043 42.731z\"\n                />\n                <path\n                    fill=\"#FEFEFE\"\n                    d=\"M197.36 78.63h-15.016s-1.035 0-1.4.914l-8.31 25.439-8.304-25.44c-.366-.913-1.407-.913-1.407-.913h-28.872c-.625 0-1.149.522-1.149 1.143v8.639c0-6.853-7.292-9.782-11.562-9.782-9.562 0-15.963 6.298-17.956 15.873-.108-6.352-.636-8.628-2.347-10.96-.786-1.141-1.922-2.101-3.159-2.895-2.547-1.492-4.834-2.018-9.749-2.018h-5.77s-1.044 0-1.412.914l-5.25 13.013V79.773c0-.621-.52-1.143-1.145-1.143H61.198s-1.03 0-1.406.914l-5.459 13.53s-.545 1.354.701 1.354h5.133v25.784c0 .64.504 1.147 1.147 1.147h13.238c.624 0 1.144-.507 1.144-1.147V94.428h5.16c2.961 0 3.588.08 4.74.618.694.262 1.32.792 1.66 1.403.698 1.314.873 2.892.873 7.545v16.218c0 .64.514 1.147 1.15 1.147h12.687s1.434 0 2.001-1.416l2.812-6.95c3.74 5.237 9.893 8.366 17.541 8.366h1.671s1.443 0 2.014-1.416l4.897-12.128v12.397c0 .64.524 1.147 1.15 1.147h12.951s1.43 0 2.003-1.416c0 0 5.18-12.861 5.2-12.958h.008c.2-1.07-1.153-1.07-1.153-1.07h-4.623V83.847l14.545 36.096c.568 1.416 2 1.416 2 1.416h15.301s1.44 0 2.008-1.416l16.125-39.93c.558-1.383-1.057-1.383-1.057-1.383zm-64.458 27.285h-8.7c-3.463 0-6.28-2.804-6.28-6.271 0-3.461 2.817-6.283 6.28-6.283h2.433c3.454 0 6.267 2.822 6.267 6.283v6.27z\"\n                />\n            </g>\n        </svg>\n    );\n}\n\nexport default NAVLogo;\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { getTypedFormComponents, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport {\n    getDateRangeValidator,\n    getRequiredFieldValidator,\n    ValidateDateError,\n    ValidateDateRangeError,\n    ValidateRequiredFieldError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { handleDateRangeValidationError, mapFomTomToDateRange } from '../utils';\nimport bostedUtlandUtils from './bostedUtlandUtils';\nimport { BostedUtland, BostedUtlandFormValues } from './types';\n\nexport interface BostedUtlandFormLabels {\n    tittel: string;\n}\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    bosted?: BostedUtland;\n    alleBosteder?: BostedUtland[];\n    onSubmit: (values: BostedUtland) => void;\n    onCancel: () => void;\n}\n\nenum BostedUtlandFormFields {\n    fom = 'fom',\n    tom = 'tom',\n    landkode = 'landkode',\n}\n\ninterface DateLimits {\n    minDate: Date;\n    maxDate: Date;\n}\n\nexport const BostedUtlandFormErrors = {\n    [BostedUtlandFormFields.fom]: {\n        [ValidateDateError.dateHasNoValue]: 'bostedUtlandForm.fom.dateHasNoValue',\n        [ValidateDateError.dateIsAfterMax]: 'bostedUtlandForm.fom.dateIsAfterMax',\n        [ValidateDateError.dateIsBeforeMin]: 'bostedUtlandForm.fom.dateIsBeforeMin',\n        [ValidateDateError.dateHasInvalidFormat]: 'bostedUtlandForm.fom.dateHasInvalidFormat',\n        [ValidateDateRangeError.fromDateIsAfterToDate]: 'bostedUtlandForm.fom.fromDateIsAfterToDate',\n    },\n    [BostedUtlandFormFields.tom]: {\n        [ValidateDateError.dateHasNoValue]: 'bostedUtlandForm.tom.dateHasNoValue',\n        [ValidateDateError.dateIsAfterMax]: 'bostedUtlandForm.tom.dateIsAfterMax',\n        [ValidateDateError.dateIsBeforeMin]: 'bostedUtlandForm.tom.dateIsBeforeMin',\n        [ValidateDateError.dateHasInvalidFormat]: 'bostedUtlandForm.tom.dateHasInvalidFormat',\n        [ValidateDateRangeError.toDateIsBeforeFromDate]: 'bostedUtlandForm.tom.toDateIsBeforeFromDate',\n    },\n    [BostedUtlandFormFields.landkode]: {\n        [ValidateRequiredFieldError.noValue]: 'bostedUtlandForm.landkode.noValue',\n    },\n};\n\nconst Form = getTypedFormComponents<BostedUtlandFormFields, BostedUtlandFormValues, ValidationError>();\n\nconst BostedUtlandForm = ({ maxDate, minDate, bosted, alleBosteder = [], onSubmit, onCancel }: Props) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: BostedUtlandFormValues) => {\n        const bostedToSubmit = bostedUtlandUtils.mapFormValuesToBostedUtland(formValues, bosted?.id);\n        if (bostedUtlandUtils.isValidBostedUtland(bostedToSubmit)) {\n            onSubmit(bostedToSubmit);\n        } else {\n            throw new Error('BostedUtlandForm: Formvalues is not a valid BostedUtland on submit.');\n        }\n    };\n\n    return (\n        <Form.FormikWrapper\n            initialValues={bostedUtlandUtils.mapBostedUtlandToFormValues(bosted || {})}\n            onSubmit={onFormikSubmit}\n            renderForm={(formik) => {\n                const { values } = formik;\n                const fomDateLimits: DateLimits = {\n                    minDate,\n                    maxDate: ISOStringToDate(values.tom) || maxDate,\n                };\n                const tomDateLimits: DateLimits = {\n                    minDate: ISOStringToDate(values.fom) || minDate,\n                    maxDate: maxDate,\n                };\n\n                const andreBosteder =\n                    bosted === undefined\n                        ? alleBosteder.map(mapFomTomToDateRange)\n                        : alleBosteder.filter((b) => b.id !== bosted.id).map(mapFomTomToDateRange);\n\n                return (\n                    <Form.Form onCancel={onCancel} formErrorHandler={getFormErrorHandler(intl, 'bostedUtlandForm')}>\n                        <Systemtittel tag=\"h1\">\n                            <FormattedMessage id=\"bostedUtland.form.tittel\" />\n                        </Systemtittel>\n\n                        <FormBlock>\n                            <Form.DateRangePicker\n                                legend={intlHelper(intl, 'bostedUtland.form.tidsperiode.spm')}\n                                fullscreenOverlay={true}\n                                minDate={minDate}\n                                maxDate={maxDate}\n                                allowRangesToStartAndStopOnSameDate={false}\n                                disabledDateRanges={andreBosteder}\n                                fromInputProps={{\n                                    name: BostedUtlandFormFields.fom,\n                                    label: intlHelper(intl, 'bostedUtland.form.tidsperiode.fraDato'),\n                                    validate: (value) => {\n                                        const error = getDateRangeValidator({\n                                            required: true,\n                                            min: fomDateLimits.minDate,\n                                            max: fomDateLimits.maxDate,\n                                            toDate: ISOStringToDate(values.tom),\n                                        }).validateFromDate(value);\n                                        return handleDateRangeValidationError(\n                                            error,\n                                            fomDateLimits.minDate,\n                                            fomDateLimits.maxDate\n                                        );\n                                    },\n                                }}\n                                toInputProps={{\n                                    name: BostedUtlandFormFields.tom,\n                                    label: intlHelper(intl, 'bostedUtland.form.tidsperiode.tilDato'),\n                                    validate: (value) => {\n                                        const error = getDateRangeValidator({\n                                            required: true,\n                                            min: tomDateLimits.minDate,\n                                            max: tomDateLimits.maxDate,\n                                            fromDate: ISOStringToDate(values.fom),\n                                        }).validateToDate(value);\n                                        return handleDateRangeValidationError(\n                                            error,\n                                            tomDateLimits.minDate,\n                                            tomDateLimits.maxDate\n                                        );\n                                    },\n                                }}\n                            />\n                        </FormBlock>\n                        <FormBlock>\n                            <Form.CountrySelect\n                                name={BostedUtlandFormFields.landkode}\n                                label={intlHelper(intl, 'bostedUtland.form.land.spm')}\n                                validate={getRequiredFieldValidator()}\n                            />\n                        </FormBlock>\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default BostedUtlandForm;\n","import React from 'react';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { Ingress, Undertittel } from 'nav-frontend-typografi';\n\ninterface Props {\n    title: string;\n    children: React.ReactNode;\n}\n\nconst PageIntro = ({ title, children }: Props) => (\n    <>\n        <Box padBottom=\"xl\" margin=\"m\">\n            <Box padBottom={children ? 'm' : 'none'}>\n                <Undertittel>{title}</Undertittel>\n            </Box>\n            {children && <Ingress tag=\"div\">{children}</Ingress>}\n        </Box>\n    </>\n);\n\nexport default PageIntro;\n","import { DateRange, prettifyDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    ValidateDateError,\n    ValidateDateRangeError,\n    ValidateRequiredFieldError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport { DateTidsperiode } from '../tidsperiode';\n\nexport const mapFomTomToDateRange = ({ fom, tom }: DateTidsperiode): DateRange => ({\n    from: fom,\n    to: tom,\n});\n\nexport const handleDateRangeValidationError = (\n    error: ValidateDateError | ValidateDateRangeError | ValidateRequiredFieldError | undefined,\n    minDate: Date | undefined,\n    maxDate: Date | undefined\n): ValidationError | undefined => {\n    if (minDate && error === ValidateDateError.dateIsBeforeMin) {\n        return {\n            key: error,\n            values: { dato: prettifyDate(minDate) },\n        };\n    }\n    if (maxDate && error === ValidateDateError.dateIsAfterMax) {\n        return {\n            key: error,\n            values: { dato: prettifyDate(maxDate) },\n        };\n    }\n    return error;\n};\n","import { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { guid } from 'nav-frontend-js-utils';\nimport { BostedUtland, BostedUtlandFormValues } from './types';\n\nconst isValidBostedUtland = (bosted: Partial<BostedUtland>): bosted is BostedUtland => {\n    const { fom, landkode, tom } = bosted;\n    return fom !== undefined && landkode !== undefined && tom !== undefined;\n};\n\nconst mapFormValuesToBostedUtland = (\n    formValues: BostedUtlandFormValues,\n    id: string | undefined\n): Partial<BostedUtland> => {\n    return {\n        id: id || guid(),\n        fom: ISOStringToDate(formValues.fom),\n        tom: ISOStringToDate(formValues.tom),\n        landkode: formValues.landkode,\n    };\n};\n\nconst mapBostedUtlandToFormValues = ({ fom, tom, landkode }: Partial<BostedUtland>): BostedUtlandFormValues => {\n    return {\n        fom: dateToISOString(fom),\n        tom: dateToISOString(tom),\n        landkode,\n    };\n};\n\nconst bostedUtlandUtils = {\n    isValidBostedUtland,\n    mapBostedUtlandToFormValues,\n    mapFormValuesToBostedUtland,\n};\n\nexport default bostedUtlandUtils;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { getCountryName } from '@navikt/sif-common-formik';\nimport { BostedUtland } from './types';\nimport './bostedUtlandList.less';\n\ninterface Props {\n    bosteder: BostedUtland[];\n    onEdit?: (opphold: BostedUtland) => void;\n    onDelete?: (opphold: BostedUtland) => void;\n}\n\nconst bem = bemUtils('bostedUtlandList');\n\nconst BostedUtlandList = ({ bosteder, onDelete, onEdit }: Props) => {\n    const intl = useIntl();\n    const renderBostedUtlandLabel = (opphold: BostedUtland): React.ReactNode => {\n        const navn = getCountryName(opphold.landkode, intl.locale);\n        return (\n            <div className={bem.element('label')}>\n                <span className={bem.element('land')}>\n                    {onEdit && <ActionLink onClick={() => onEdit(opphold)}>{navn}</ActionLink>}\n                    {!onEdit && <span>{navn}</span>}\n                </span>\n                <span className={bem.element('dato')}>\n                    {prettifyDateExtended(opphold.fom)} - {prettifyDateExtended(opphold.tom)}\n                </span>\n            </div>\n        );\n    };\n\n    return (\n        <ItemList<BostedUtland>\n            getItemId={(opphold) => opphold.id}\n            getItemTitle={(opphold) => getCountryName(opphold.landkode, intl.locale)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderBostedUtlandLabel}\n            items={bosteder}\n        />\n    );\n};\n\nexport default BostedUtlandList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList,\n    ModalFormAndListLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport BostedUtlandForm from './BostedUtlandForm';\nimport BostedUtlandListe from './BostedUtlandList';\nimport { BostedUtland } from './types';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames, ValidationError> {\n    name: FieldNames;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction BostedUtlandListAndDialog<FieldNames>({ name, minDate, maxDate, validate, labels }: Props<FieldNames>) {\n    return (\n        <FormikModalFormAndList<FieldNames, BostedUtland, ValidationError>\n            name={name}\n            labels={labels}\n            validate={validate}\n            dialogWidth=\"narrow\"\n            sortFunc={sortItemsByFom}\n            formRenderer={({ onSubmit, onCancel, item, allItems }) => (\n                <BostedUtlandForm\n                    bosted={item}\n                    alleBosteder={allItems}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    onSubmit={onSubmit}\n                    onCancel={onCancel}\n                />\n            )}\n            listRenderer={({ items, onEdit, onDelete }) => (\n                <BostedUtlandListe bosteder={items} onEdit={onEdit} onDelete={onDelete} />\n            )}\n        />\n    );\n}\n\nexport default BostedUtlandListAndDialog;\n","import React from 'react';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport Panel from 'nav-frontend-paneler';\n\ninterface Props {\n    values?: any;\n}\n\nfunction SubmitPreview({ values }: Props) {\n    return (\n        <Box margin=\"xl\">\n            <div style={{ borderTop: '1px dashed #59514B', paddingTop: '1rem', margin: '0 -1rem' }}>\n                <Box margin=\"m\">\n                    {values && (\n                        <Panel style={{ padding: '1rem' }}>\n                            <pre style={{ margin: 0, fontSize: '.8rem' }}>{JSON.stringify(values, null, 2)}</pre>\n                        </Panel>\n                    )}\n                    {values === undefined && <Panel style={{ padding: '1rem' }}>Ingen data</Panel>}\n                </Box>\n            </div>\n        </Box>\n    );\n}\n\nexport default SubmitPreview;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { date1YearAgo, date1YearFromNow } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport flat from 'flat';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport BostedUtlandForm, { BostedUtlandFormErrors } from '../../../forms/bosted-utland/BostedUtlandForm';\nimport BostedUtlandListAndDialog from '../../../forms/bosted-utland/BostedUtlandListAndDialog';\nimport bostedUtlandMessages from '../../../forms/bosted-utland/bostedUtlandMessages';\nimport { BostedUtland } from '../../../forms/bosted-utland/types';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\n\nenum FormField {\n    'bosted' = 'bosted',\n}\n\ninterface FormValues {\n    [FormField.bosted]: BostedUtland[];\n}\nconst initialValues: FormValues = { bosted: [] };\n\nconst FormikExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<BostedUtland> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues, ValidationError>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                formErrorHandler={getFormErrorHandler(intl)}>\n                                <BostedUtlandListAndDialog<FormField>\n                                    name={FormField.bosted}\n                                    minDate={date1YearAgo}\n                                    maxDate={date1YearFromNow}\n                                    validate={getListValidator({ required: true })}\n                                    labels={{\n                                        addLabel: 'Legg til bosted',\n                                        listTitle: 'Registrerte bosteder',\n                                        modalTitle: 'Bosted',\n                                        emptyListText: 'Ingen bosteder er lagt til',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrorIntlKeys={flat(BostedUtlandFormErrors)}\n                    intlMessages={bostedUtlandMessages}\n                />\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <DialogFormWrapper>\n                    <Panel border={true}>\n                        <BostedUtlandForm\n                            minDate={date1YearAgo}\n                            maxDate={date1YearFromNow}\n                            onSubmit={setSingleFormValues}\n                            onCancel={() => console.log('cancel me')}\n                        />\n                    </Panel>\n                    <SubmitPreview values={singleFormValues} />\n                </DialogFormWrapper>\n            </Box>\n\n            <MessagesPreview title=\"Alle tekster\" messages={bostedUtlandMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default FormikExample;\n","import React from 'react';\nimport { MessageFileFormat } from '@navikt/sif-common-core/lib/dev-utils/intl/devIntlUtils';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\nconst createFieldErrorIntlKey = (error: ValidationError, fieldName: string, errorPrefix?: string): string =>\n    `${errorPrefix ? `${errorPrefix}.` : ''}${fieldName}.${error}`;\n\nexport type ValidationErrorMessagesDocType = {\n    fields: { [key: string]: string[] };\n};\n\ninterface Props {\n    formName?: string;\n    validationErrors?: ValidationErrorMessagesDocType;\n    validationErrorIntlKeys?: { [key: string]: string };\n    intlMessages: MessageFileFormat;\n}\n\nconst FormValidationErrorMessages: React.FunctionComponent<Props> = ({\n    validationErrors,\n    formName,\n    intlMessages,\n    validationErrorIntlKeys,\n}) => {\n    const validationeMessages: MessageFileFormat = {\n        nb: {},\n        nn: {},\n    };\n\n    if (validationErrors) {\n        const fields = validationErrors.fields;\n\n        Object.keys(fields).forEach((field) =>\n            Object.keys(fields[field]).forEach((errorKey) => {\n                const error = fields[field][errorKey];\n                const intlKey = createFieldErrorIntlKey(error, field, formName);\n                validationeMessages['nb'][intlKey] = intlMessages['nb'][intlKey];\n                validationeMessages['nn'][intlKey] = intlMessages['nn'][intlKey];\n            })\n        );\n    }\n\n    if (validationErrorIntlKeys) {\n        Object.keys(validationErrorIntlKeys).forEach((key) => {\n            const intlKey = validationErrorIntlKeys[key];\n            validationeMessages['nb'][intlKey] = intlMessages['nb'][intlKey];\n            validationeMessages['nn'][intlKey] = intlMessages['nn'][intlKey];\n        });\n    }\n    return (\n        <MessagesPreview\n            title=\"Feilmeldinger\"\n            messages={validationeMessages}\n            showExplanation={false}\n            showMissingTextSummary={false}\n        />\n    );\n};\n\nexport default FormValidationErrorMessages;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { DateRange, prettifyDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { getTypedFormComponents, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport {\n    getDateRangeValidator,\n    ValidateDateError,\n    ValidateDateRangeError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { handleDateRangeValidationError, mapFomTomToDateRange } from '../utils';\nimport ferieuttakUtils from './ferieuttakUtils';\nimport { Ferieuttak, FerieuttakFormValues } from './types';\n\nexport interface FerieuttakFormLabels {\n    title: string;\n    fromDate: string;\n    toDate: string;\n    intervalTitle: string;\n    okButton: string;\n    cancelButton: string;\n}\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    ferieuttak?: Partial<Ferieuttak>;\n    alleFerieuttak?: Ferieuttak[];\n    labels?: Partial<FerieuttakFormLabels>;\n    onSubmit: (values: Ferieuttak) => void;\n    onCancel: () => void;\n}\n\nenum FerieuttakFormFields {\n    tom = 'tom',\n    fom = 'fom',\n}\n\nexport const FerieuttakFormErrors = {\n    [FerieuttakFormFields.fom]: {\n        [ValidateDateError.dateHasNoValue]: 'ferieuttakForm.fom.dateHasNoValue',\n        [ValidateDateRangeError.fromDateIsAfterToDate]: 'ferieuttakForm.fom.fromDateIsAfterToDate',\n        [ValidateDateError.dateHasInvalidFormat]: 'ferieuttakForm.fom.dateHasInvalidFormat',\n        [ValidateDateError.dateIsBeforeMin]: 'ferieuttakForm.fom.dateIsBeforeMin',\n        [ValidateDateError.dateIsAfterMax]: 'ferieuttakForm.fom.dateIsAfterMax',\n    },\n    [FerieuttakFormFields.tom]: {\n        [ValidateDateError.dateHasNoValue]: 'ferieuttakForm.tom.dateHasNoValue',\n        [ValidateDateRangeError.toDateIsBeforeFromDate]: 'ferieuttakForm.tom.toDateIsBeforeFromDate',\n        [ValidateDateError.dateHasInvalidFormat]: 'ferieuttakForm.tom.dateHasInvalidFormat',\n        [ValidateDateError.dateIsBeforeMin]: 'ferieuttakForm.tom.dateIsBeforeMin',\n        [ValidateDateError.dateIsAfterMax]: 'ferieuttakForm.tom.dateIsAfterMax',\n    },\n};\n\nconst Form = getTypedFormComponents<FerieuttakFormFields, FerieuttakFormValues, ValidationError>();\n\nconst FerieuttakForm = ({ maxDate, minDate, labels, ferieuttak, alleFerieuttak = [], onSubmit, onCancel }: Props) => {\n    const intl = useIntl();\n    const onFormikSubmit = (formValues: FerieuttakFormValues) => {\n        const ferieuttakToSubmit = ferieuttakUtils.mapFormValuesToFerieuttak(formValues, ferieuttak?.id);\n        if (ferieuttakUtils.isValidFerieuttak(ferieuttakToSubmit)) {\n            onSubmit({ ...ferieuttak, ...ferieuttakToSubmit });\n        } else {\n            throw new Error('FerieuttakForm: Formvalues is not a valid Ferieuttak on submit.');\n        }\n    };\n\n    const defaultLabels: FerieuttakFormLabels = {\n        title: intlHelper(intl, 'ferieuttak.list.title'),\n        fromDate: intlHelper(intl, 'ferieuttak.list.fromDate'),\n        toDate: intlHelper(intl, 'ferieuttak.list.toDate'),\n        intervalTitle: intlHelper(intl, 'ferieuttak.list.intervalTitle'),\n        okButton: intlHelper(intl, 'ferieuttak.list.okButton'),\n        cancelButton: intlHelper(intl, 'ferieuttak.list.cancelButton'),\n    };\n\n    const formLabels: FerieuttakFormLabels = { ...defaultLabels, ...labels };\n\n    const andreFerieuttak: DateRange[] | undefined =\n        ferieuttak === undefined\n            ? alleFerieuttak.map(mapFomTomToDateRange)\n            : alleFerieuttak.filter((f) => f.id !== ferieuttak.id).map(mapFomTomToDateRange);\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={ferieuttakUtils.mapFerieuttakToFormValues(ferieuttak || {})}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => (\n                    <Form.Form onCancel={onCancel} formErrorHandler={getFormErrorHandler(intl, 'ferieuttakForm')}>\n                        <Systemtittel tag=\"h1\">{formLabels.title}</Systemtittel>\n                        <FormBlock>\n                            <Form.DateRangePicker\n                                legend={formLabels.intervalTitle}\n                                fullscreenOverlay={true}\n                                minDate={minDate}\n                                maxDate={maxDate}\n                                allowRangesToStartAndStopOnSameDate={true}\n                                disabledDateRanges={andreFerieuttak}\n                                fromInputProps={{\n                                    label: formLabels.fromDate,\n                                    name: FerieuttakFormFields.fom,\n                                    validate: (value) => {\n                                        const error = getDateRangeValidator({\n                                            required: true,\n                                            min: minDate,\n                                            max: maxDate,\n                                            toDate: ISOStringToDate(formik.values.tom),\n                                        }).validateFromDate(value);\n                                        return handleDateRangeValidationError(error, minDate, maxDate);\n                                    },\n                                    onChange: () => {\n                                        setTimeout(() => {\n                                            formik.validateField(FerieuttakFormFields.tom);\n                                        });\n                                    },\n                                }}\n                                toInputProps={{\n                                    label: formLabels.toDate,\n                                    name: FerieuttakFormFields.tom,\n                                    validate: (value) => {\n                                        const dateError = getDateRangeValidator({\n                                            required: true,\n                                            min: minDate,\n                                            max: maxDate,\n                                            fromDate: ISOStringToDate(formik.values.fom),\n                                        }).validateToDate(value);\n                                        switch (dateError) {\n                                            case ValidateDateError.dateIsBeforeMin:\n                                                return {\n                                                    key: dateError,\n                                                    values: { dato: prettifyDate(minDate) },\n                                                };\n                                            case ValidateDateError.dateIsAfterMax:\n                                                return {\n                                                    key: dateError,\n                                                    values: { dato: prettifyDate(maxDate) },\n                                                };\n                                            default:\n                                                return dateError;\n                                        }\n                                    },\n                                    onChange: () => {\n                                        setTimeout(() => {\n                                            formik.validateField(FerieuttakFormFields.fom);\n                                        });\n                                    },\n                                }}\n                            />\n                        </FormBlock>\n                    </Form.Form>\n                )}\n            />\n        </>\n    );\n};\n\nexport default FerieuttakForm;\n","import { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Ferieuttak, FerieuttakFormValues } from './types';\n\nexport const isValidFerieuttak = (ferieuttak: Partial<Ferieuttak>): ferieuttak is Ferieuttak => {\n    return ferieuttak.fom !== undefined && ferieuttak.tom !== undefined;\n};\n\nconst mapFormValuesToFerieuttak = (formValues: FerieuttakFormValues, id: string | undefined): Partial<Ferieuttak> => {\n    return {\n        id: id || guid(),\n        fom: ISOStringToDate(formValues.fom),\n        tom: ISOStringToDate(formValues.tom),\n    };\n};\n\nconst mapFerieuttakToFormValues = ({ fom, tom }: Partial<Ferieuttak>): FerieuttakFormValues => {\n    return {\n        fom: dateToISOString(fom),\n        tom: dateToISOString(tom),\n    };\n};\n\nconst ferieuttakUtils = {\n    isValidFerieuttak,\n    mapFerieuttakToFormValues,\n    mapFormValuesToFerieuttak,\n};\n\nexport default ferieuttakUtils;\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { Ferieuttak } from './types';\n\ninterface Props {\n    ferieuttak: Ferieuttak[];\n    onEdit?: (opphold: Ferieuttak) => void;\n    onDelete?: (opphold: Ferieuttak) => void;\n}\n\nconst FerieuttakList = ({ ferieuttak = [], onDelete, onEdit }: Props) => {\n    const getDateTitleString = (uttak: Ferieuttak) =>\n        `${prettifyDateExtended(uttak.fom)} - ${prettifyDateExtended(uttak.tom)}`;\n\n    const renderFerieuttakLabel = (uttak: Ferieuttak): React.ReactNode => {\n        const title = getDateTitleString(uttak);\n        return (\n            <>\n                {onEdit && <ActionLink onClick={() => onEdit(uttak)}>{title}</ActionLink>}\n                {!onEdit && <span>{title}</span>}\n            </>\n        );\n    };\n\n    return (\n        <ItemList<Ferieuttak>\n            getItemId={(uttak) => uttak.id}\n            getItemTitle={(uttak) => getDateTitleString(uttak)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderFerieuttakLabel}\n            items={ferieuttak.filter((uttak) => uttak.id !== undefined)}\n        />\n    );\n};\n\nexport default FerieuttakList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList,\n    ModalFormAndListLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport FerieuttakForm from './FerieuttakForm';\nimport FerieuttakList from './FerieuttakList';\nimport { Ferieuttak } from './types';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames, ValidationError> {\n    name: FieldNames;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction FerieuttakListAndDialog<FieldNames>({ name, minDate, maxDate, validate, labels }: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, Ferieuttak, ValidationError>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                sortFunc={sortItemsByFom}\n                formRenderer={({ onSubmit, onCancel, item, allItems }) => (\n                    <FerieuttakForm\n                        ferieuttak={item}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                        alleFerieuttak={allItems}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FerieuttakList ferieuttak={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FerieuttakListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { date1YearAgo, date1YearFromNow } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport flat from 'flat';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport FerieuttakForm, { FerieuttakFormErrors } from '../../../forms/ferieuttak/FerieuttakForm';\nimport FerieuttakListAndDialog from '../../../forms/ferieuttak/FerieuttakListAndDialog';\nimport ferieuttakMessages from '../../../forms/ferieuttak/ferieuttakMessages';\nimport { Ferieuttak } from '../../../forms/ferieuttak/types';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\nenum FormField {\n    'ferie' = 'ferie',\n}\n\ninterface FormValues {\n    [FormField.ferie]: Ferieuttak[];\n}\nconst initialValues: FormValues = { ferie: [] };\n\nconst FormikExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<Ferieuttak> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues, ValidationError>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                formErrorHandler={getFormErrorHandler(intl)}>\n                                <FerieuttakListAndDialog<FormField>\n                                    name={FormField.ferie}\n                                    minDate={date1YearAgo}\n                                    maxDate={date1YearFromNow}\n                                    validate={getListValidator({ required: true })}\n                                    labels={{\n                                        addLabel: 'Legg til ferie',\n                                        listTitle: 'Registrerte ferier',\n                                        modalTitle: 'Ferie',\n                                        emptyListText: 'Ingen ferier er lagt til',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrorIntlKeys={flat(FerieuttakFormErrors)}\n                    intlMessages={ferieuttakMessages}\n                />\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <FerieuttakForm\n                        minDate={date1YearAgo}\n                        maxDate={date1YearFromNow}\n                        ferieuttak={{}}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                    />\n                </Panel>\n                <SubmitPreview values={singleFormValues} />\n            </DialogFormWrapper>\n\n            <MessagesPreview messages={ferieuttakMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default FormikExample;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport Tiles from '@navikt/sif-common-core/lib/components/tiles/Tiles';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport {\n    getFødselsnummerValidator,\n    getRequiredFieldValidator,\n    ValidateFødselsnummerError,\n    ValidateStringError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { Fosterbarn, isFosterbarn } from './types';\n\ninterface FosterbarnFormText {\n    form_fødselsnummer_label: string;\n    form_fornavn_label: string;\n    form_etternavn_label: string;\n}\n\ninterface Props {\n    fosterbarn?: Partial<Fosterbarn>;\n    onSubmit: (values: Fosterbarn) => void;\n    onCancel: () => void;\n    disallowedFødselsnumre?: string[];\n    includeName?: boolean;\n    text?: FosterbarnFormText;\n}\n\nenum FosterbarnFormField {\n    fødselsnummer = 'fødselsnummer',\n    fornavn = 'fornavn',\n    etternavn = 'etternavn',\n}\n\ntype FormValues = Partial<Fosterbarn>;\n\nexport const FosterbarnFormErrors = {\n    [FosterbarnFormField.fornavn]: {\n        [ValidateStringError.stringHasNoValue]: 'fosterbarnForm.fornavn.stringHasNoValue',\n    },\n    [FosterbarnFormField.etternavn]: {\n        [ValidateStringError.stringHasNoValue]: 'fosterbarnForm.etternavn.stringHasNoValue',\n    },\n    [FosterbarnFormField.fødselsnummer]: {\n        [ValidateStringError.stringHasNoValue]: 'fosterbarnForm.fødselsnummer.stringHasNoValue',\n        [ValidateFødselsnummerError.fødselsnummerIsNotAllowed]:\n            'fosterbarnForm.fødselsnummer.fødselsnummerIsNotAllowed',\n        [ValidateFødselsnummerError.fødselsnummerIsNot11Chars]:\n            'fosterbarnForm.fødselsnummer.fødselsnummerIsNot11Chars',\n        [ValidateFødselsnummerError.fødselsnummerIsInvalid]: 'fosterbarnForm.fødselsnummer.fødselsnummerIsInvalid',\n    },\n};\n\nconst Form = getTypedFormComponents<FosterbarnFormField, FormValues, ValidationError>();\n\nconst FosterbarnForm = ({\n    fosterbarn: initialValues = { fornavn: '', etternavn: '', fødselsnummer: '' },\n    disallowedFødselsnumre,\n    text,\n    includeName,\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n    const onFormikSubmit = (formValues: FormValues) => {\n        if (isFosterbarn(formValues, includeName)) {\n            onSubmit({ ...formValues, id: initialValues.id || guid() });\n        } else {\n            throw new Error('Fosterbarn skjema: Formvalues is not a valid Fosterbarn on submit.');\n        }\n    };\n\n    const defaultText: FosterbarnFormText = {\n        form_etternavn_label: intlHelper(intl, 'fosterbarn.form.etternavn_label'),\n        form_fornavn_label: intlHelper(intl, 'fosterbarn.form.fornavn_label'),\n        form_fødselsnummer_label: intlHelper(intl, 'fosterbarn.form.fødselsnummer_label'),\n    };\n\n    const txt = { ...defaultText, ...text };\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={initialValues}\n                onSubmit={onFormikSubmit}\n                renderForm={() => (\n                    <Form.Form onCancel={onCancel} formErrorHandler={getFormErrorHandler(intl, 'fosterbarnForm')}>\n                        <Systemtittel tag=\"h1\">Fosterbarn</Systemtittel>\n                        <FormBlock>\n                            <Form.Input\n                                name={FosterbarnFormField.fødselsnummer}\n                                label={txt.form_fødselsnummer_label}\n                                validate={getFødselsnummerValidator({\n                                    required: true,\n                                    disallowedValues: disallowedFødselsnumre,\n                                })}\n                                inputMode=\"numeric\"\n                                maxLength={11}\n                                style={{ width: '11rem' }}\n                            />\n                        </FormBlock>\n                        {includeName && (\n                            <Tiles columns={2}>\n                                <FormBlock>\n                                    <Form.Input\n                                        name={FosterbarnFormField.fornavn}\n                                        label={txt.form_fornavn_label}\n                                        validate={getRequiredFieldValidator()}\n                                    />\n                                </FormBlock>\n                                <FormBlock>\n                                    <Form.Input\n                                        name={FosterbarnFormField.etternavn}\n                                        label={txt.form_etternavn_label}\n                                        validate={getRequiredFieldValidator()}\n                                    />\n                                </FormBlock>\n                            </Tiles>\n                        )}\n                    </Form.Form>\n                )}\n            />\n        </>\n    );\n};\n\nexport default FosterbarnForm;\n","import { hasValue } from '@navikt/sif-common-formik/lib/validation/validationUtils';\n\nexport interface Fosterbarn {\n    id?: string;\n    fødselsnummer: string;\n    fornavn?: string;\n    etternavn?: string;\n}\n\nexport const isFosterbarn = (fosterbarn: Partial<Fosterbarn>, includeName?: boolean): fosterbarn is Fosterbarn => {\n    const { fornavn, etternavn, fødselsnummer } = fosterbarn;\n    if (includeName) {\n        return hasValue(fornavn) && hasValue(etternavn) && hasValue(fødselsnummer);\n    }\n    return hasValue(fødselsnummer);\n};\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { formatName } from '@navikt/sif-common-core/lib/utils/personUtils';\nimport { Fosterbarn } from './types';\n\ninterface Props {\n    fosterbarn: Fosterbarn[];\n    onEdit?: (opphold: Fosterbarn) => void;\n    onDelete?: (opphold: Fosterbarn) => void;\n}\n\nconst FosterbarnList = ({ fosterbarn = [], onDelete, onEdit }: Props) => {\n    const getBarnTitleString = (barn: Fosterbarn) => {\n        return (\n            <>\n                <span style={{ paddingRight: '1rem' }}>{barn.fødselsnummer}</span>{' '}\n                {barn.fornavn && barn.etternavn && <span>{formatName(barn.fornavn, barn.etternavn)}</span>}\n            </>\n        );\n    };\n    const renderFosterbarnLabel = (barn: Fosterbarn): React.ReactNode => {\n        return (\n            <>\n                {onEdit && <ActionLink onClick={() => onEdit(barn)}>{getBarnTitleString(barn)}</ActionLink>}\n                {!onEdit && <span>{getBarnTitleString(barn)}</span>}\n            </>\n        );\n    };\n\n    return (\n        <ItemList<Fosterbarn>\n            getItemId={(barn) => barn.id}\n            getItemTitle={(barn) =>\n                barn.fornavn && barn.etternavn ? formatName(barn.fornavn, barn.etternavn) : barn.fødselsnummer\n            }\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderFosterbarnLabel}\n            items={fosterbarn.filter((barn) => barn.id !== undefined)}\n        />\n    );\n};\n\nexport default FosterbarnList;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { FormikModalFormAndList, TypedFormInputValidationProps } from '@navikt/sif-common-formik';\nimport FosterbarnForm from './FosterbarnForm';\nimport FosterbarnList from './FosterbarnList';\nimport { Fosterbarn } from './types';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\nexport interface FosterbarnListAndDialogText {\n    liste_legg_til_knapp: string;\n    liste_tittel?: string;\n    liste_tom_liste_tekst?: string;\n    modal_tittel: string;\n}\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames, ValidationError> {\n    name: FieldNames;\n    texts?: FosterbarnListAndDialogText;\n    includeName?: boolean;\n    disallowedFødselsnumre?: string[];\n}\n\nfunction FosterbarnListAndDialog<FieldNames>({\n    name,\n    validate,\n    texts,\n    includeName,\n    disallowedFødselsnumre,\n}: Props<FieldNames>) {\n    const intl = useIntl();\n\n    const defaultText: FosterbarnListAndDialogText = {\n        liste_legg_til_knapp: intlHelper(intl, 'fosterbarn.list.legg_til_knapp'),\n        liste_tittel: intlHelper(intl, 'fosterbarn.list.tittel'),\n        modal_tittel: intlHelper(intl, 'fosterbarn.modal.tittel'),\n    };\n\n    const txt = { ...defaultText, ...texts };\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, Fosterbarn, ValidationError>\n                name={name}\n                labels={{\n                    addLabel: txt.liste_legg_til_knapp,\n                    modalTitle: txt.modal_tittel,\n                    emptyListText: txt.liste_tom_liste_tekst,\n                    listTitle: txt.liste_tittel,\n                }}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                formRenderer={({ onSubmit, onCancel, item }) => (\n                    <FosterbarnForm\n                        fosterbarn={item}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                        includeName={includeName}\n                        disallowedFødselsnumre={disallowedFødselsnumre}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FosterbarnList fosterbarn={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FosterbarnListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport flat from 'flat';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { Fosterbarn } from '../../../forms/fosterbarn';\nimport FosterbarnForm, { FosterbarnFormErrors } from '../../../forms/fosterbarn/FosterbarnForm';\nimport FosterbarnListAndDialog from '../../../forms/fosterbarn/FosterbarnListAndDialog';\nimport fosterbarnMessages from '../../../forms/fosterbarn/fosterbarnMessages';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\n\nenum FormField {\n    'fosterbarn' = 'fosterbarn',\n}\n\ninterface FormValues {\n    [FormField.fosterbarn]: Fosterbarn[];\n}\nconst initialValues: FormValues = { fosterbarn: [] };\n\nconst FosterbarnExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<Fosterbarn> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues, ValidationError>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                formErrorHandler={getFormErrorHandler(intl)}>\n                                <FosterbarnListAndDialog<FormField>\n                                    name={FormField.fosterbarn}\n                                    validate={getListValidator({ required: true })}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrorIntlKeys={flat(FosterbarnFormErrors)}\n                    intlMessages={fosterbarnMessages}\n                />\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <FosterbarnForm\n                        fosterbarn={{}}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                    />\n                </Panel>\n                <SubmitPreview values={singleFormValues} />\n            </DialogFormWrapper>\n\n            <MessagesPreview messages={fosterbarnMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default FosterbarnExample;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { getTypedFormComponents, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport {\n    getDateRangeValidator,\n    ValidateDateError,\n    ValidateDateRangeError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { handleDateRangeValidationError, mapFomTomToDateRange } from '../utils';\nimport tidsperiodeUtils from './tidsperiodeUtils';\nimport { DateTidsperiode, DateTidsperiodeFormValues } from './types';\n\nexport interface TidsperiodeFormLabels {\n    title?: string;\n    fromDate: string;\n    toDate: string;\n    intervalTitle?: string;\n    okButton: string;\n    cancelButton: string;\n}\n\ninterface Props {\n    minDate?: Date;\n    maxDate?: Date;\n    tidsperiode?: Partial<DateTidsperiode>;\n    alleTidsperioder?: DateTidsperiode[];\n    formLabels?: Partial<TidsperiodeFormLabels>;\n    onSubmit: (values: DateTidsperiode) => void;\n    onCancel: () => void;\n}\n\nenum TidsperiodeFormFields {\n    tom = 'tom',\n    fom = 'fom',\n}\n\nexport const TidsperiodeFormErrors = {\n    [TidsperiodeFormFields.fom]: {\n        [ValidateDateError.dateHasNoValue]: 'tidsperiodeForm.fom.dateHasNoValue',\n        [ValidateDateRangeError.fromDateIsAfterToDate]: 'tidsperiodeForm.fom.fromDateIsAfterToDate',\n        [ValidateDateError.dateHasInvalidFormat]: 'tidsperiodeForm.fom.dateHasInvalidFormat',\n        [ValidateDateError.dateIsBeforeMin]: 'tidsperiodeForm.fom.dateIsBeforeMin',\n        [ValidateDateError.dateIsAfterMax]: 'tidsperiodeForm.fom.dateIsAfterMax',\n    },\n    [TidsperiodeFormFields.tom]: {\n        [ValidateDateError.dateHasNoValue]: 'tidsperiodeForm.tom.dateHasNoValue',\n        [ValidateDateRangeError.toDateIsBeforeFromDate]: 'tidsperiodeForm.tom.toDateIsBeforeFromDate',\n        [ValidateDateError.dateHasInvalidFormat]: 'tidsperiodeForm.tom.dateHasInvalidFormat',\n        [ValidateDateError.dateIsBeforeMin]: 'tidsperiodeForm.tom.dateIsBeforeMin',\n        [ValidateDateError.dateIsAfterMax]: 'tidsperiodeForm.tom.dateIsAfterMax',\n    },\n};\n\nconst Form = getTypedFormComponents<TidsperiodeFormFields, DateTidsperiodeFormValues, ValidationError>();\n\nconst TidsperiodeForm = ({\n    maxDate,\n    minDate,\n    formLabels,\n    tidsperiode,\n    alleTidsperioder = [],\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: DateTidsperiodeFormValues) => {\n        const dateTidsperiodeToSubmit = tidsperiodeUtils.mapFormValuesToDateTidsperiode(formValues, tidsperiode?.id);\n        if (tidsperiodeUtils.isValidDateTidsperiode(dateTidsperiodeToSubmit)) {\n            onSubmit(dateTidsperiodeToSubmit);\n        } else {\n            throw new Error('TidsperiodeForm: Formvalues is not a valid Tidsperiode on submit.');\n        }\n    };\n\n    const defaultLabels: TidsperiodeFormLabels = {\n        title: intlHelper(intl, 'tidsperiode.form.title'),\n        fromDate: intlHelper(intl, 'tidsperiode.form.fromDate'),\n        toDate: intlHelper(intl, 'tidsperiode.form.toDate'),\n        okButton: intlHelper(intl, 'tidsperiode.form.okButton'),\n        cancelButton: intlHelper(intl, 'tidsperiode.form.cancelButton'),\n    };\n\n    const inlineLabels: TidsperiodeFormLabels = { ...defaultLabels, ...formLabels };\n\n    console.log({ minDate, maxDate });\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={tidsperiodeUtils.mapDateTidsperiodeToFormValues(tidsperiode || {})}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => {\n                    const disabledDateRanges =\n                        tidsperiode === undefined\n                            ? alleTidsperioder.map(mapFomTomToDateRange)\n                            : alleTidsperioder.filter((t) => t.id !== tidsperiode.id).map(mapFomTomToDateRange);\n\n                    return (\n                        <Form.Form onCancel={onCancel} formErrorHandler={getFormErrorHandler(intl, 'tidsperiodeForm')}>\n                            <Systemtittel tag=\"h1\">{inlineLabels.title}</Systemtittel>\n                            <FormBlock>\n                                <Form.DateRangePicker\n                                    legend={inlineLabels.intervalTitle}\n                                    fullscreenOverlay={true}\n                                    minDate={minDate}\n                                    maxDate={maxDate}\n                                    disabledDateRanges={disabledDateRanges}\n                                    fromInputProps={{\n                                        label: inlineLabels.fromDate,\n                                        name: TidsperiodeFormFields.fom,\n                                        validate: (value) => {\n                                            const error = getDateRangeValidator({\n                                                required: true,\n                                                min: minDate,\n                                                max: maxDate,\n                                                toDate: ISOStringToDate(formik.values.tom),\n                                            }).validateFromDate(value);\n                                            return handleDateRangeValidationError(error, minDate, maxDate);\n                                        },\n                                        onChange: () => {\n                                            setTimeout(() => {\n                                                formik.validateField(TidsperiodeFormFields.tom);\n                                            });\n                                        },\n                                    }}\n                                    toInputProps={{\n                                        label: inlineLabels.toDate,\n                                        name: TidsperiodeFormFields.tom,\n                                        validate: getDateRangeValidator({\n                                            required: true,\n                                            min: minDate,\n                                            max: maxDate,\n                                            fromDate: ISOStringToDate(formik.values.fom),\n                                        }).validateToDate,\n                                        onChange: () => {\n                                            setTimeout(() => {\n                                                formik.validateField(TidsperiodeFormFields.fom);\n                                            });\n                                        },\n                                    }}\n                                />\n                            </FormBlock>\n                        </Form.Form>\n                    );\n                }}\n            />\n        </>\n    );\n};\n\nexport default TidsperiodeForm;\n","import { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { guid } from 'nav-frontend-js-utils';\nimport { DateTidsperiode, DateTidsperiodeFormValues } from './types';\n\nconst isValidDateTidsperiode = (tidsperiode: Partial<DateTidsperiode>): tidsperiode is DateTidsperiode => {\n    return tidsperiode.fom !== undefined && tidsperiode.tom !== undefined;\n};\n\nconst mapFormValuesToDateTidsperiode = (\n    formValues: DateTidsperiodeFormValues,\n    id: string | undefined\n): Partial<DateTidsperiode> => {\n    return {\n        id: id || guid(),\n        fom: ISOStringToDate(formValues.fom),\n        tom: ISOStringToDate(formValues.tom),\n    };\n};\n\nconst mapDateTidsperiodeToFormValues = ({ fom, tom }: Partial<DateTidsperiode>): DateTidsperiodeFormValues => {\n    return {\n        fom: dateToISOString(fom),\n        tom: dateToISOString(tom),\n    };\n};\n\nconst tidsperiodeUtils = {\n    isValidDateTidsperiode,\n    mapDateTidsperiodeToFormValues,\n    mapFormValuesToDateTidsperiode,\n};\n\nexport default tidsperiodeUtils;\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { DateTidsperiode } from './types';\n\ninterface Props {\n    tidsperiode: DateTidsperiode[];\n    onEdit?: (opphold: DateTidsperiode) => void;\n    onDelete?: (opphold: DateTidsperiode) => void;\n}\n\nconst TidsperiodeList = ({ tidsperiode = [], onDelete, onEdit }: Props) => {\n    const getDateTitleString = (uttak: DateTidsperiode) =>\n        `${prettifyDateExtended(uttak.fom)} - ${prettifyDateExtended(uttak.tom)}`;\n\n    const renderTidsperiodeLabel = (uttak: DateTidsperiode): React.ReactNode => {\n        const title = getDateTitleString(uttak);\n        return (\n            <>\n                {onEdit && <ActionLink onClick={() => onEdit(uttak)}>{title}</ActionLink>}\n                {!onEdit && <span>{title}</span>}\n            </>\n        );\n    };\n\n    return (\n        <ItemList<DateTidsperiode>\n            getItemId={(uttak) => uttak.id}\n            getItemTitle={(uttak) => getDateTitleString(uttak)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderTidsperiodeLabel}\n            items={tidsperiode.filter((uttak) => uttak.id !== undefined)}\n        />\n    );\n};\n\nexport default TidsperiodeList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList,\n    ModalFormAndListLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport TidsperiodeForm from './TidsperiodeForm';\nimport TidsperiodeList from './TidsperiodeList';\nimport { DateTidsperiode } from './types';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames, ValidationError> {\n    name: FieldNames;\n    formTitle?: string;\n    minDate?: Date;\n    maxDate?: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction TidsperiodeListAndDialog<FieldNames>({\n    name,\n    minDate,\n    maxDate,\n    validate,\n    labels,\n    formTitle,\n}: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, DateTidsperiode, ValidationError>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                sortFunc={sortItemsByFom}\n                formRenderer={({ onSubmit, onCancel, item, allItems }) => (\n                    <TidsperiodeForm\n                        tidsperiode={item}\n                        alleTidsperioder={allItems}\n                        formLabels={formTitle ? { title: formTitle } : undefined}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => {\n                    return <TidsperiodeList tidsperiode={items} onEdit={onEdit} onDelete={onDelete} />;\n                }}\n            />\n        </>\n    );\n}\n\nexport default TidsperiodeListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { date1YearAgo, date1YearFromNow, dateToday } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport flat from 'flat';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { DateTidsperiode } from '../../../forms/tidsperiode';\nimport TidsperiodeForm, { TidsperiodeFormErrors } from '../../../forms/tidsperiode/TidsperiodeForm';\nimport TidsperiodeListAndDialog from '../../../forms/tidsperiode/TidsperiodeListAndDialog';\nimport tidsperiodeMessages from '../../../forms/tidsperiode/tidsperiodeMessages';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\n\nenum FormField {\n    'tidsperiode' = 'tidsperiode',\n}\n\ninterface FormValues {\n    [FormField.tidsperiode]: DateTidsperiode[];\n}\nconst initialValues: FormValues = { tidsperiode: [] };\n\nconst TidsperiodeExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<DateTidsperiode> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues, ValidationError>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                formErrorHandler={getFormErrorHandler(intl)}>\n                                <TidsperiodeListAndDialog<FormField>\n                                    name={FormField.tidsperiode}\n                                    minDate={date1YearAgo}\n                                    maxDate={dateToday}\n                                    validate={getListValidator({ required: true })}\n                                    labels={{\n                                        addLabel: 'Legg til periode',\n                                        listTitle: 'Registrerte periode',\n                                        modalTitle: 'Periode',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrorIntlKeys={flat(TidsperiodeFormErrors)}\n                    intlMessages={tidsperiodeMessages}\n                />\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <TidsperiodeForm\n                        minDate={date1YearAgo}\n                        maxDate={date1YearFromNow}\n                        tidsperiode={{}}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                    />\n                </Panel>\n                <SubmitPreview values={singleFormValues} />\n            </DialogFormWrapper>\n\n            <MessagesPreview messages={tidsperiodeMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default TidsperiodeExample;\n","import { YesOrNo } from '@navikt/sif-common-formik/lib';\n\nexport enum UtenlandsoppholdÅrsak {\n    'INNLAGT_DEKKET_NORGE' = 'BARNET_INNLAGT_I_HELSEINSTITUSJON_FOR_NORSK_OFFENTLIG_REGNING',\n    'INNLAGT_DEKKET_ANNET_LAND' = 'BARNET_INNLAGT_I_HELSEINSTITUSJON_DEKKET_ETTER_AVTALE_MED_ET_ANNET_LAND_OM_TRYGD',\n    'ANNET' = 'ANNET',\n}\n\nexport interface UtenlandsoppholdInnlagtPeriode {\n    fom: Date;\n    tom: Date;\n}\n\nexport interface Utenlandsopphold {\n    id?: string;\n    fom: Date;\n    tom: Date;\n    landkode: string;\n    erBarnetInnlagt?: YesOrNo;\n    barnInnlagtPerioder?: UtenlandsoppholdInnlagtPeriode[];\n    årsak?: UtenlandsoppholdÅrsak;\n}\n\nexport type UtenlandsoppholdFormValues = Partial<\n    Omit<Utenlandsopphold, 'id' | 'fom' | 'tom' | 'barnInnlagtPerioder'> & {\n        fom?: string;\n        tom?: string;\n        barnInnlagtPerioder?: UtenlandsoppholdInnlagtPeriode[];\n    }\n>;\n","import { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Utenlandsopphold, UtenlandsoppholdFormValues } from './types';\n\nconst isValidUtenlandsopphold = (utenlandsopphold: Partial<Utenlandsopphold>): utenlandsopphold is Utenlandsopphold => {\n    return (\n        utenlandsopphold.fom !== undefined &&\n        utenlandsopphold.tom !== undefined &&\n        utenlandsopphold.landkode !== undefined\n    );\n};\n\nconst mapFormValuesToUtenlandsopphold = (\n    formValues: UtenlandsoppholdFormValues,\n    id: string | undefined\n): Partial<Utenlandsopphold> => {\n    const { barnInnlagtPerioder } = formValues;\n    return {\n        ...formValues,\n        id: id || guid(),\n        fom: ISOStringToDate(formValues.fom),\n        tom: ISOStringToDate(formValues.tom),\n        barnInnlagtPerioder,\n    };\n};\n\nconst mapUtenlandsoppholdToFormValues = ({\n    fom,\n    tom,\n    erBarnetInnlagt,\n    barnInnlagtPerioder,\n    landkode,\n    årsak,\n}: Partial<Utenlandsopphold>): UtenlandsoppholdFormValues => ({\n    fom: dateToISOString(fom),\n    tom: dateToISOString(tom),\n    erBarnetInnlagt,\n    landkode,\n    årsak,\n    barnInnlagtPerioder,\n});\n\nconst utenlandsoppholdUtils = {\n    isValidUtenlandsopphold,\n    mapFormValuesToUtenlandsopphold,\n    mapUtenlandsoppholdToFormValues,\n};\nexport default utenlandsoppholdUtils;\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { countryIsMemberOfEøsOrEfta } from '@navikt/sif-common-core/lib/utils/countryUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { DateRange, getCountryName, ISOStringToDate, YesOrNo } from '@navikt/sif-common-formik';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport {\n    getDateRangeValidator,\n    getListValidator,\n    getRequiredFieldValidator,\n    getYesOrNoValidator,\n    ValidateDateError,\n    ValidateDateRangeError,\n    ValidateListError,\n    ValidateRequiredFieldError,\n    ValidateYesOrNoError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport { hasValue } from '@navikt/sif-common-formik/lib/validation/validationUtils';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport TidsperiodeListAndDialog from '../tidsperiode/TidsperiodeListAndDialog';\nimport { handleDateRangeValidationError, mapFomTomToDateRange } from '../utils';\nimport { Utenlandsopphold, UtenlandsoppholdFormValues, UtenlandsoppholdÅrsak } from './types';\nimport utils from './utenlandsoppholdUtils';\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    opphold?: Utenlandsopphold;\n    alleOpphold?: Utenlandsopphold[];\n    onSubmit: (values: Utenlandsopphold) => void;\n    onCancel: () => void;\n}\n\nenum UtenlandsoppholdFormFields {\n    fom = 'fom',\n    tom = 'tom',\n    landkode = 'landkode',\n    årsak = 'årsak',\n    erBarnetInnlagt = 'erBarnetInnlagt',\n    barnInnlagtPerioder = 'barnInnlagtPerioder',\n}\n\nexport const UtlandsoppholdFormErrors = {\n    [UtenlandsoppholdFormFields.fom]: {\n        [ValidateDateError.dateHasNoValue]: 'utenlandsoppholdForm.fom.dateHasNoValue',\n        [ValidateDateRangeError.fromDateIsAfterToDate]: 'utenlandsoppholdForm.fom.fromDateIsAfterToDate',\n        [ValidateDateError.dateHasInvalidFormat]: 'utenlandsoppholdForm.fom.dateHasInvalidFormat',\n        [ValidateDateError.dateIsBeforeMin]: 'utenlandsoppholdForm.fom.dateIsBeforeMin',\n        [ValidateDateError.dateIsAfterMax]: 'utenlandsoppholdForm.fom.dateIsAfterMax',\n    },\n    [UtenlandsoppholdFormFields.tom]: {\n        [ValidateDateError.dateHasNoValue]: 'utenlandsoppholdForm.tom.dateHasNoValue',\n        [ValidateDateRangeError.toDateIsBeforeFromDate]: 'utenlandsoppholdForm.tom.toDateIsBeforeFromDate',\n        [ValidateDateError.dateHasInvalidFormat]: 'utenlandsoppholdForm.tom.dateHasInvalidFormat',\n        [ValidateDateError.dateIsBeforeMin]: 'utenlandsoppholdForm.tom.dateIsBeforeMin',\n        [ValidateDateError.dateIsAfterMax]: 'utenlandsoppholdForm.tom.dateIsAfterMax',\n    },\n    [UtenlandsoppholdFormFields.landkode]: {\n        [ValidateRequiredFieldError.noValue]: 'utenlandsoppholdForm.landkode.noValue',\n    },\n    [UtenlandsoppholdFormFields.årsak]: { [ValidateRequiredFieldError.noValue]: 'utenlandsoppholdForm.årsak.noValue' },\n    [UtenlandsoppholdFormFields.erBarnetInnlagt]: {\n        [ValidateYesOrNoError.yesOrNoIsUnanswered]: 'utenlandsoppholdForm.erBarnetInnlagt.yesOrNoIsUnanswered',\n    },\n    [UtenlandsoppholdFormFields.barnInnlagtPerioder]: {\n        [ValidateListError.listIsEmpty]: 'utenlandsoppholdForm.barnInnlagtPerioder.listIsEmpty',\n    },\n};\n\nconst defaultFormValues: UtenlandsoppholdFormValues = {\n    fom: undefined,\n    tom: undefined,\n    landkode: undefined,\n    erBarnetInnlagt: YesOrNo.UNANSWERED,\n    barnInnlagtPerioder: [],\n    årsak: undefined,\n};\n\nconst Form = getTypedFormComponents<UtenlandsoppholdFormFields, UtenlandsoppholdFormValues, ValidationError>();\n\nconst UtenlandsoppholdForm = ({ maxDate, minDate, opphold, alleOpphold = [], onSubmit, onCancel }: Props) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: Partial<UtenlandsoppholdFormValues>) => {\n        const utenlandsoppholdToSubmit = utils.mapFormValuesToUtenlandsopphold(formValues, opphold?.id);\n        if (utils.isValidUtenlandsopphold(utenlandsoppholdToSubmit)) {\n            onSubmit({\n                ...utenlandsoppholdToSubmit,\n                årsak: countryIsMemberOfEøsOrEfta(utenlandsoppholdToSubmit.landkode) ? undefined : formValues.årsak,\n            });\n        } else {\n            throw new Error('UtenlandsoppholdForm: Formvalues is not a valid Utenlandsopphold on submit.');\n        }\n    };\n\n    const registrerteTidsperioder: DateRange[] | undefined =\n        opphold === undefined\n            ? alleOpphold.map(mapFomTomToDateRange)\n            : alleOpphold.filter((o) => o.id !== opphold.id).map(mapFomTomToDateRange);\n\n    const initialValues = opphold ? utils.mapUtenlandsoppholdToFormValues(opphold) : defaultFormValues;\n    return (\n        <Form.FormikWrapper\n            initialValues={initialValues}\n            onSubmit={onFormikSubmit}\n            renderForm={(formik) => {\n                const {\n                    values: { fom, tom, landkode, erBarnetInnlagt, barnInnlagtPerioder = [] },\n                } = formik;\n\n                const hasDateStringValues = hasValue(fom) && hasValue(tom);\n\n                const includeInnlagtPerioderQuestion =\n                    hasDateStringValues && landkode !== undefined && erBarnetInnlagt === YesOrNo.YES;\n\n                const includeInnlagtQuestion: boolean =\n                    landkode !== undefined && hasValue(landkode) && !countryIsMemberOfEøsOrEfta(landkode);\n\n                const showÅrsakQuestion = barnInnlagtPerioder.length > 0;\n\n                return (\n                    <Form.Form\n                        includeButtons={true}\n                        onCancel={onCancel}\n                        formErrorHandler={getFormErrorHandler(intl, 'utenlandsoppholdForm')}>\n                        <Systemtittel tag=\"h1\">\n                            <FormattedMessage id=\"utenlandsopphold.form.tittel\" />\n                        </Systemtittel>\n                        <FormBlock>\n                            <Form.DateRangePicker\n                                legend={intlHelper(intl, 'utenlandsopphold.form.tidsperiode.spm')}\n                                fullscreenOverlay={true}\n                                disabledDateRanges={registrerteTidsperioder}\n                                minDate={minDate}\n                                maxDate={maxDate}\n                                fromInputProps={{\n                                    name: UtenlandsoppholdFormFields.fom,\n                                    label: intlHelper(intl, 'utenlandsopphold.form.tidsperiode.fraDato'),\n                                    validate: (value) => {\n                                        const error = getDateRangeValidator({\n                                            required: true,\n                                            min: minDate,\n                                            max: maxDate,\n                                            toDate: ISOStringToDate(tom),\n                                        }).validateFromDate(value);\n                                        return handleDateRangeValidationError(error, minDate, maxDate);\n                                    },\n                                }}\n                                toInputProps={{\n                                    name: UtenlandsoppholdFormFields.tom,\n                                    label: intlHelper(intl, 'utenlandsopphold.form.tidsperiode.tilDato'),\n                                    validate: (value) => {\n                                        const error = getDateRangeValidator({\n                                            required: true,\n                                            min: minDate,\n                                            max: maxDate,\n                                            fromDate: ISOStringToDate(fom),\n                                        }).validateToDate(value);\n                                        return handleDateRangeValidationError(error, minDate, maxDate);\n                                    },\n                                }}\n                            />\n                        </FormBlock>\n                        {hasDateStringValues && (\n                            <FormBlock>\n                                <Form.CountrySelect\n                                    name={UtenlandsoppholdFormFields.landkode}\n                                    label={intlHelper(intl, 'utenlandsopphold.form.land.spm')}\n                                    validate={getRequiredFieldValidator()}\n                                />\n                            </FormBlock>\n                        )}\n\n                        {includeInnlagtQuestion && landkode && hasDateStringValues && (\n                            <>\n                                <FormBlock>\n                                    <Form.YesOrNoQuestion\n                                        name={UtenlandsoppholdFormFields.erBarnetInnlagt}\n                                        legend={intlHelper(intl, 'utenlandsopphold.form.erBarnetInnlagt.spm', {\n                                            land: getCountryName(landkode, intl.locale),\n                                        })}\n                                        validate={(value) => {\n                                            const error = getYesOrNoValidator()(value);\n                                            return error\n                                                ? {\n                                                      key: error,\n                                                      values: { land: getCountryName(landkode, intl.locale) },\n                                                  }\n                                                : undefined;\n                                        }}\n                                    />\n                                </FormBlock>\n                                {includeInnlagtPerioderQuestion && (\n                                    <FormBlock margin=\"l\">\n                                        <TidsperiodeListAndDialog\n                                            name={UtenlandsoppholdFormFields.barnInnlagtPerioder}\n                                            minDate={ISOStringToDate(fom)}\n                                            maxDate={ISOStringToDate(tom)}\n                                            validate={getListValidator({ required: true })}\n                                            formTitle={intlHelper(\n                                                intl,\n                                                'utenlandsopphold.form.perioderBarnetErInnlag.formTitle'\n                                            )}\n                                            labels={{\n                                                addLabel: intlHelper(\n                                                    intl,\n                                                    'utenlandsopphold.form.perioderBarnetErInnlag.addLabel'\n                                                ),\n                                                modalTitle: intlHelper(\n                                                    intl,\n                                                    'utenlandsopphold.form.perioderBarnetErInnlag.modalTitle'\n                                                ),\n                                                listTitle: intlHelper(\n                                                    intl,\n                                                    'utenlandsopphold.form.perioderBarnetErInnlag.listTitle'\n                                                ),\n                                            }}\n                                        />\n                                    </FormBlock>\n                                )}\n                                {showÅrsakQuestion && (\n                                    <>\n                                        <FormBlock>\n                                            <Form.RadioPanelGroup\n                                                legend={intlHelper(intl, 'utenlandsopphold.form.årsak.spm', {\n                                                    land: getCountryName(landkode, intl.locale),\n                                                })}\n                                                name={UtenlandsoppholdFormFields.årsak}\n                                                validate={getRequiredFieldValidator()}\n                                                radios={[\n                                                    {\n                                                        value: UtenlandsoppholdÅrsak.INNLAGT_DEKKET_NORGE,\n                                                        label: intlHelper(\n                                                            intl,\n                                                            `utenlandsopphold.form.årsak.${UtenlandsoppholdÅrsak.INNLAGT_DEKKET_NORGE}`\n                                                        ),\n                                                    },\n                                                    {\n                                                        value: UtenlandsoppholdÅrsak.INNLAGT_DEKKET_ANNET_LAND,\n                                                        label: intlHelper(\n                                                            intl,\n                                                            `utenlandsopphold.form.årsak.${UtenlandsoppholdÅrsak.INNLAGT_DEKKET_ANNET_LAND}`,\n                                                            { land: getCountryName(landkode, intl.locale) }\n                                                        ),\n                                                    },\n                                                    {\n                                                        value: UtenlandsoppholdÅrsak.ANNET,\n                                                        label: intlHelper(\n                                                            intl,\n                                                            `utenlandsopphold.form.årsak.${UtenlandsoppholdÅrsak.ANNET}`\n                                                        ),\n                                                    },\n                                                ]}\n                                            />\n                                        </FormBlock>\n                                    </>\n                                )}\n                            </>\n                        )}\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default UtenlandsoppholdForm;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { getCountryName } from '@navikt/sif-common-formik';\nimport { Utenlandsopphold } from './types';\nimport './utenlandsoppholdList.less';\n\ninterface Props {\n    utenlandsopphold: Utenlandsopphold[];\n    onEdit?: (opphold: Utenlandsopphold) => void;\n    onDelete?: (opphold: Utenlandsopphold) => void;\n}\n\nconst bem = bemUtils('utenlandsoppholdList');\n\nconst UtenlandsoppholdList = ({ utenlandsopphold, onDelete, onEdit }: Props) => {\n    const intl = useIntl();\n    const renderUtenlandsoppholdLabel = (opphold: Utenlandsopphold): React.ReactNode => {\n        const navn = getCountryName(opphold.landkode, intl.locale);\n        return (\n            <div className={bem.element('label')}>\n                <span className={bem.element('land')}>\n                    {onEdit && <ActionLink onClick={() => onEdit(opphold)}>{navn}</ActionLink>}\n                    {!onEdit && <span>{navn}</span>}\n                </span>\n                <span className={bem.element('dato')}>\n                    {prettifyDateExtended(opphold.fom)} - {prettifyDateExtended(opphold.tom)}\n                </span>\n            </div>\n        );\n    };\n\n    return (\n        <ItemList<Utenlandsopphold>\n            getItemId={(opphold) => opphold.id}\n            getItemTitle={(opphold) => getCountryName(opphold.landkode, intl.locale)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderUtenlandsoppholdLabel}\n            items={utenlandsopphold}\n        />\n    );\n};\n\nexport default UtenlandsoppholdList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList,\n    ModalFormAndListLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport { Utenlandsopphold } from './types';\nimport UtenlandsoppholdForm from './UtenlandsoppholdForm';\nimport UtenlandsoppholdListe from './UtenlandsoppholdList';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames, ValidationError> {\n    name: FieldNames;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction UtenlandsoppholdListAndDialog<FieldNames>({ name, minDate, maxDate, validate, labels }: Props<FieldNames>) {\n    return (\n        <FormikModalFormAndList<FieldNames, Utenlandsopphold, ValidationError>\n            name={name}\n            labels={labels}\n            validate={validate}\n            dialogWidth=\"narrow\"\n            sortFunc={sortItemsByFom}\n            formRenderer={({ onSubmit, onCancel, item, allItems }) => (\n                <UtenlandsoppholdForm\n                    opphold={item}\n                    alleOpphold={allItems}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    onSubmit={onSubmit}\n                    onCancel={onCancel}\n                />\n            )}\n            listRenderer={({ items, onEdit, onDelete }) => (\n                <UtenlandsoppholdListe utenlandsopphold={items} onEdit={onEdit} onDelete={onDelete} />\n            )}\n        />\n    );\n}\n\nexport default UtenlandsoppholdListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { date1YearAgo, date1YearFromNow } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport flat from 'flat';\nimport Panel from 'nav-frontend-paneler';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { Utenlandsopphold } from '../../../forms/utenlandsopphold/types';\nimport UtenlandsoppholdForm, { UtlandsoppholdFormErrors } from '../../../forms/utenlandsopphold/UtenlandsoppholdForm';\nimport UtenlandsoppholdListAndDialog from '../../../forms/utenlandsopphold/UtenlandsoppholdListAndDialog';\nimport utenlandsoppholdMessages from '../../../forms/utenlandsopphold/utenlandsoppholdMessages';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\n\nenum FormField {\n    'utenlandsopphold' = 'utenlandsopphold',\n}\n\ninterface FormValues {\n    [FormField.utenlandsopphold]: Utenlandsopphold[];\n}\nconst initialValues: FormValues = {\n    utenlandsopphold: [],\n};\n\nconst UtenlandsoppholdExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<Utenlandsopphold> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues, ValidationError>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                formErrorHandler={getFormErrorHandler(intl)}>\n                                <UtenlandsoppholdListAndDialog\n                                    minDate={date1YearAgo}\n                                    maxDate={date1YearFromNow}\n                                    name={FormField.utenlandsopphold}\n                                    validate={getListValidator({ required: true })}\n                                    labels={{\n                                        addLabel: 'Legg til utenlandsopphold',\n                                        listTitle: 'Registrerte utenlandsopphold',\n                                        modalTitle: 'Utenlandsopphold',\n                                        emptyListText: 'Ingen utenlandsopphold er lagt til',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrorIntlKeys={flat(UtlandsoppholdFormErrors)}\n                    intlMessages={utenlandsoppholdMessages}\n                />\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <UtenlandsoppholdForm\n                        opphold={initialValues.utenlandsopphold[0]}\n                        minDate={date1YearAgo}\n                        maxDate={date1YearFromNow}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                    />\n                    <SubmitPreview values={singleFormValues} />\n                </Panel>\n            </DialogFormWrapper>\n\n            <MessagesPreview messages={utenlandsoppholdMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default UtenlandsoppholdExample;\n","import { YesOrNo } from '@navikt/sif-common-core/lib/types/YesOrNo';\n\nexport enum FraværÅrsak {\n    'stengtSkoleBhg' = 'STENGT_SKOLE_ELLER_BARNEHAGE',\n    'smittevernhensyn' = 'SMITTEVERNHENSYN',\n    'ordinært' = 'ORDINÆRT_FRAVÆR',\n}\n\nexport interface FraværPeriode {\n    id?: string;\n    fraOgMed: Date;\n    tilOgMed: Date;\n    årsak: FraværÅrsak;\n}\n\nexport type FraværPeriodeFormValues = Partial<{\n    id: string;\n    fraOgMed: string;\n    tilOgMed: string;\n    hjemmePgaKorona: YesOrNo;\n    årsak: FraværÅrsak;\n}>;\n\nexport interface FraværDag {\n    id?: string;\n    dato: Date;\n    timerArbeidsdag: string;\n    timerFravær: string;\n    årsak: FraværÅrsak;\n}\n\nexport type FraværDagFormValues = Partial<\n    Omit<FraværDag, 'dato'> & {\n        dato: string;\n        hjemmePgaKorona: YesOrNo;\n        årsak?: FraværÅrsak;\n    }\n>;\n","import ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { getFraværÅrsakTekstKort } from './fraværMessages';\nimport { FraværÅrsak } from './types';\n\ninterface Props {\n    title: string;\n    årsak?: FraværÅrsak;\n    onEdit?: () => void;\n}\n\nconst FraværListItem: React.FunctionComponent<Props> = ({ title, årsak, onEdit }: Props) => {\n    const intl = useIntl();\n    return (\n        <div style={{ padding: '.5rem 0' }}>\n            <div>{onEdit ? <ActionLink onClick={() => onEdit()}>{title}</ActionLink> : { title }}</div>\n            {årsak && årsak !== FraværÅrsak.ordinært && (\n                <div style={{ marginTop: '.25rem' }}>\n                    <FormattedMessage\n                        id={`fravær.list.årsak`}\n                        values={{ årsak: getFraværÅrsakTekstKort(årsak, intl) }}\n                    />\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default FraværListItem;\n","import { YesOrNo } from '@navikt/sif-common-core/lib/types/YesOrNo';\nimport { DateRange } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport dayjs from 'dayjs';\nimport isSameOrAfter from 'dayjs/plugin/isSameOrAfter';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\nimport { isString } from 'formik';\nimport { guid } from 'nav-frontend-js-utils';\nimport { FraværDag, FraværDagFormValues, FraværPeriode, FraværPeriodeFormValues, FraværÅrsak } from './types';\n\ndayjs.extend(isSameOrAfter);\ndayjs.extend(isSameOrBefore);\n\nexport const isFraværDag = (fraværDag: Partial<FraværDag>): fraværDag is FraværDag => {\n    return (\n        fraværDag.dato !== undefined &&\n        fraværDag.timerArbeidsdag !== undefined &&\n        fraværDag.timerFravær !== undefined &&\n        fraværDag.årsak !== undefined\n    );\n};\n\nexport const isFraværPeriode = (fraværPeriode: Partial<FraværPeriode>): fraværPeriode is FraværPeriode => {\n    return (\n        fraværPeriode.fraOgMed !== undefined &&\n        fraværPeriode.tilOgMed !== undefined &&\n        fraværPeriode.årsak !== undefined\n    );\n};\n\nexport const fraværDagToFraværDateRange = (fraværDag: FraværDag): DateRange => ({\n    from: fraværDag.dato,\n    to: fraværDag.dato,\n});\n\nexport const fraværPeriodeToDateRange = (fraværDag: FraværPeriode): DateRange => ({\n    from: fraværDag.fraOgMed,\n    to: fraværDag.tilOgMed,\n});\n\nexport enum Weekday {\n    monday = 'monday',\n    tuesday = 'tuesday',\n    wednesday = 'wednesday',\n    thursday = 'thursday',\n    friday = 'friday',\n    saturday = 'saturday',\n    sunday = 'sunday',\n}\n\nexport const getWeekdayName = (date: Date): Weekday | undefined => {\n    switch (date.getDay()) {\n        case 0:\n            return Weekday.sunday;\n        case 1:\n            return Weekday.monday;\n        case 2:\n            return Weekday.tuesday;\n        case 3:\n            return Weekday.wednesday;\n        case 4:\n            return Weekday.thursday;\n        case 5:\n            return Weekday.friday;\n        case 6:\n            return Weekday.saturday;\n        default:\n            return undefined;\n    }\n};\n\nexport const dateErHelg = (date: Date) =>\n    getWeekdayName(date) === Weekday.saturday || getWeekdayName(date) === Weekday.sunday;\n\nexport const rangeCollideWithRanges = (range: DateRange, ranges: DateRange[] = []): boolean => {\n    if (!range || !range.from || !range.to || ranges.length === 0) {\n        return false;\n    }\n    return ranges.some((periode) => {\n        const fromDay = dayjs(range.from);\n        const toDay = dayjs(range.to);\n        const { from, to } = periode;\n        if (fromDay.isBefore(from) && toDay.isAfter(to)) return true;\n        if (fromDay.isSameOrAfter(from, 'day') && fromDay.isSameOrBefore(to, 'day')) return true;\n        if (toDay.isSameOrAfter(from, 'day') && toDay.isSameOrBefore(to, 'day')) return true;\n    });\n};\n\nexport const dateCollideWithRanges = (date: Date | undefined, ranges: DateRange[] = []): boolean => {\n    if (!date || ranges.length === 0) {\n        return false;\n    }\n    return ranges.some((range) => {\n        return dayjs(date).isSameOrAfter(range.from, 'day') && dayjs(date).isSameOrBefore(range.to, 'day');\n    });\n};\n\nexport const timeText = (timer: string): string =>\n    timer === '0' || timer === '0.5' || timer === '1' ? 'time' : 'timer';\n\nexport const dateRangeToFomTom = (dateRange: DateRange): { fom: Date; tom: Date } => ({\n    fom: dateRange.from,\n    tom: dateRange.to,\n});\nexport const toMaybeNumber = (timerArbeidsdag: string | undefined): number | undefined => {\n    if (timerArbeidsdag && isString(timerArbeidsdag)) {\n        return parseFloat(timerArbeidsdag);\n    }\n    return undefined;\n};\n\nexport const getHjemmePgaKoronaFormValueFromFraværÅrsak = (årsak?: FraværÅrsak): YesOrNo => {\n    if (årsak === undefined) {\n        return YesOrNo.UNANSWERED;\n    }\n    return årsak === FraværÅrsak.smittevernhensyn || årsak === FraværÅrsak.stengtSkoleBhg ? YesOrNo.YES : YesOrNo.NO;\n};\n\nexport const getÅrsakFromFraværFormValues = (formValues: FraværDagFormValues | FraværPeriodeFormValues): FraværÅrsak =>\n    formValues.hjemmePgaKorona === YesOrNo.YES && formValues.årsak ? formValues.årsak : FraværÅrsak.ordinært;\n\nexport const mapFormValuesToFraværDag = (\n    formValues: FraværDagFormValues,\n    id: string | undefined\n): Partial<FraværDag> => {\n    return {\n        id: id || guid(),\n        timerArbeidsdag: formValues.timerArbeidsdag,\n        timerFravær: formValues.timerFravær,\n        dato: ISOStringToDate(formValues.dato),\n        årsak: getÅrsakFromFraværFormValues(formValues),\n    };\n};\n\nexport const mapFraværDagToFormValues = (fraværDag: Partial<FraværDag>): FraværDagFormValues => {\n    return {\n        timerArbeidsdag: fraværDag.timerArbeidsdag,\n        timerFravær: fraværDag.timerFravær,\n        dato: fraværDag.dato ? dateToISOString(fraværDag.dato) : '',\n        hjemmePgaKorona: getHjemmePgaKoronaFormValueFromFraværÅrsak(fraværDag.årsak),\n        årsak: fraværDag.årsak,\n    };\n};\n\nexport const mapFormValuesToFraværPeriode = (\n    formValues: FraværPeriodeFormValues,\n    id: string | undefined\n): Partial<FraværPeriode> => {\n    return {\n        id: id || guid(),\n        fraOgMed: ISOStringToDate(formValues.fraOgMed),\n        tilOgMed: ISOStringToDate(formValues.tilOgMed),\n        årsak: getÅrsakFromFraværFormValues(formValues),\n    };\n};\n\nexport const mapFraværPeriodeToFormValues = (fraværPeriode: Partial<FraværPeriode>): FraværPeriodeFormValues => {\n    return {\n        fraOgMed: fraværPeriode.fraOgMed ? dateToISOString(fraværPeriode.fraOgMed) : '',\n        tilOgMed: fraværPeriode.tilOgMed ? dateToISOString(fraværPeriode.tilOgMed) : '',\n        hjemmePgaKorona: getHjemmePgaKoronaFormValueFromFraværÅrsak(fraværPeriode.årsak),\n        årsak: fraværPeriode.årsak,\n    };\n};\n","import { DateRange } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { ValidationFunction } from '@navikt/sif-common-formik/lib/validation/types';\nimport {\n    dateCollideWithRanges,\n    dateErHelg,\n    fraværDagToFraværDateRange,\n    fraværPeriodeToDateRange,\n    rangeCollideWithRanges,\n} from './fraværUtilities';\nimport { FraværDag, FraværPeriode } from './types';\n\nexport enum FraværFieldValidationErrors {\n    fravær_timer_mer_enn_arbeidstimer = 'fravær_timer_mer_enn_arbeidstimer',\n    fra_og_til_er_ulike_år = 'fra_og_til_er_ulike_år',\n    er_helg = 'er_helg',\n    fra_dato_kolliderer_med_annet_fravær = 'fra_dato_kolliderer_med_annet_fravær',\n    til_dato_kolliderer_med_annet_fravær = 'til_dato_kolliderer_med_annet_fravær',\n    dato_kolliderer_med_annet_fravær = 'dato_kolliderer_med_annet_fravær',\n    dager_overlapper_med_andre_dager = 'dager_overlapper_med_andre_dager',\n}\n\nexport const validateLessOrEqualTo =\n    (maybeMaxValue: number | undefined): ValidationFunction<any> =>\n    (maybeValue: string | undefined) => {\n        const maybeValueFloat: number | undefined = maybeValue ? parseFloat(maybeValue) : undefined;\n        if (maybeMaxValue && maybeValueFloat) {\n            return maybeValueFloat <= maybeMaxValue\n                ? undefined\n                : FraværFieldValidationErrors.fravær_timer_mer_enn_arbeidstimer;\n        }\n        return undefined;\n    };\n\nexport const validateErSammeÅr = (maybeDateFrom: string | undefined, maybeDateTo: string | undefined) => {\n    const fromDate = ISOStringToDate(maybeDateFrom);\n    const toDate = ISOStringToDate(maybeDateTo);\n    if (fromDate && toDate && fromDate.getFullYear() !== toDate.getFullYear()) {\n        return FraværFieldValidationErrors.fra_og_til_er_ulike_år;\n    }\n    return undefined;\n};\n\nexport const validateNotHelgedag = (maybeDate: string | undefined): FraværFieldValidationErrors | undefined => {\n    const date = ISOStringToDate(maybeDate);\n    return date && dateErHelg(date) ? FraværFieldValidationErrors.er_helg : undefined;\n};\n\nexport const validateFraværPeriodeCollision = (\n    from: Date | undefined,\n    to: Date | undefined,\n    ranges: DateRange[] | undefined\n): FraværFieldValidationErrors | undefined => {\n    if (!from || !to || (ranges || []).length === 0) {\n        return undefined;\n    }\n    return rangeCollideWithRanges({ from, to }, ranges)\n        ? FraværFieldValidationErrors.dager_overlapper_med_andre_dager\n        : undefined;\n};\n\nexport const validateFraOgMedForCollision = (\n    date: Date | undefined,\n    ranges: DateRange[] | undefined\n): FraværFieldValidationErrors | undefined => {\n    if (!date || (ranges || []).length === 0) {\n        return undefined;\n    }\n    return dateCollideWithRanges(date, ranges)\n        ? FraværFieldValidationErrors.fra_dato_kolliderer_med_annet_fravær\n        : undefined;\n};\n\nexport const validateTilOgMedForCollision = (\n    date: Date | undefined,\n    ranges: DateRange[] | undefined\n): FraværFieldValidationErrors | undefined => {\n    if (!date || (ranges || []).length === 0) {\n        return undefined;\n    }\n    return dateCollideWithRanges(date, ranges)\n        ? FraværFieldValidationErrors.til_dato_kolliderer_med_annet_fravær\n        : undefined;\n};\n\nexport const validateFraværDagCollision = (\n    date: Date | undefined,\n    ranges: DateRange[] | undefined\n): FraværFieldValidationErrors | undefined => {\n    if (!date || (ranges || []).length === 0) {\n        return undefined;\n    }\n    return dateCollideWithRanges(date, ranges)\n        ? FraværFieldValidationErrors.dato_kolliderer_med_annet_fravær\n        : undefined;\n};\n\nexport const validateNoCollisions = (\n    fraværDager: FraværDag[],\n    fraværPerioder: FraværPeriode[]\n): FraværFieldValidationErrors.dager_overlapper_med_andre_dager | undefined => {\n    if (fraværPerioder.length === 0 && fraværDager.length === 0) {\n        return undefined;\n    }\n\n    const allFraværDagDateRanges = fraværDager.map(fraværDagToFraværDateRange);\n    const allFraværPeriodeDateRanges = fraværPerioder.map(fraværPeriodeToDateRange);\n\n    const hasDateCollision = fraværDager.some((dag) => {\n        const rangesWithoutCurrentDag = [\n            ...fraværDager.filter((d) => d !== dag).map(fraværDagToFraværDateRange),\n            ...allFraværPeriodeDateRanges,\n        ];\n        return dateCollideWithRanges(dag.dato, rangesWithoutCurrentDag);\n    });\n\n    const hasRangeCollision = fraværPerioder.some((periode) => {\n        const rangesWithoutCurrentPeriode = [\n            ...allFraværDagDateRanges,\n            ...fraværPerioder.filter((p) => p !== periode).map(fraværPeriodeToDateRange),\n        ];\n        return rangeCollideWithRanges(fraværPeriodeToDateRange(periode), rangesWithoutCurrentPeriode);\n    });\n    return hasDateCollision || hasRangeCollision\n        ? FraværFieldValidationErrors.dager_overlapper_med_andre_dager\n        : undefined;\n};\n","import React from 'react';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport FraværListItem from './FraværListItem';\nimport { timeText } from './fraværUtilities';\nimport { FraværDag } from './types';\n\ninterface Props {\n    fraværDager: FraværDag[];\n    onEdit?: (fraværDag: FraværDag) => void;\n    onDelete?: (fraværDag: FraværDag) => void;\n}\n\nconst FraværDagerList = ({ fraværDager = [], onDelete, onEdit }: Props) => {\n    const getFraværDagListItemTitle = (fraværDag: FraværDag) =>\n        `${prettifyDateExtended(fraværDag.dato)}:\n        Skulle jobbet ${fraværDag.timerArbeidsdag} ${timeText(fraværDag.timerArbeidsdag)}.\n        Borte fra jobb ${fraværDag.timerFravær}  ${timeText(fraværDag.timerFravær)}.`;\n\n    const renderFraværDagLabel = (fraværDag: FraværDag): React.ReactNode => {\n        const title = getFraværDagListItemTitle(fraværDag);\n        return (\n            <FraværListItem\n                title={title}\n                årsak={fraværDag.årsak}\n                onEdit={onEdit ? () => onEdit(fraværDag) : undefined}\n            />\n        );\n    };\n\n    return (\n        <ItemList<FraværDag>\n            getItemId={(fraværDag) => fraværDag.id}\n            getItemTitle={(fraværDag) => getFraværDagListItemTitle(fraværDag)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderFraværDagLabel}\n            items={fraværDager.filter((fraværDag) => fraværDag.id !== undefined)}\n        />\n    );\n};\n\nexport default FraværDagerList;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\ninterface Props {\n    id: string;\n    value?: Record<string, string | number | boolean | null | undefined | Date>;\n}\n\nconst basicHtmlTagRenderers = {\n    li: (value: string) => <li>{value}</li>,\n    strong: (value: string) => <strong>{value}</strong>,\n    p: (value: string) => <p>{value}</p>,\n    em: (value: string) => <em>{value}</em>,\n};\n\nconst FormattedHtmlMessage = ({ id, value }: Props) => (\n    <FormattedMessage id={id} values={{ ...value, ...basicHtmlTagRenderers }} />\n);\n\nexport default FormattedHtmlMessage;\n","import React from 'react';\nimport { TypedFormInputValidationProps } from '@navikt/sif-common-formik/lib';\nimport { FraværDagForm, FraværDagFormFields } from './FraværDagForm';\nimport { timeText } from './fraværUtilities';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\ninterface Props extends TypedFormInputValidationProps<any, ValidationError> {\n    name: FraværDagFormFields;\n    label?: string;\n    maksTid?: number;\n}\n\nconst getOptionsList: (maksTid: number) => JSX.Element[] = (maksTid: number) => {\n    const newOptionElement = (t: number): JSX.Element => {\n        return (\n            <option key={t} value={t}>\n                {t.toString(10).replace('.', ',')} {timeText(t.toString(10))}\n            </option>\n        );\n    };\n    const go = (jsxList: JSX.Element[], tid: number): JSX.Element[] => {\n        return tid >= maksTid\n            ? [...jsxList, newOptionElement(tid)]\n            : go([...jsxList, newOptionElement(tid)], tid + 0.5);\n    };\n    return go([], 0.5);\n};\n\nconst FraværTimerSelect = ({ name, validate, label, maksTid }: Props) => {\n    return (\n        <FraværDagForm.Select bredde=\"s\" label={label || 'Antall timer'} name={name} validate={validate}>\n            <option />\n            {getOptionsList(maksTid || 7.5)}\n        </FraværDagForm.Select>\n    );\n};\n\nexport default FraværTimerSelect;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport ExpandableInfo from '@navikt/sif-common-core/lib/components/expandable-content/ExpandableInfo';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { YesOrNo } from '@navikt/sif-common-core/lib/types/YesOrNo';\nimport { DateRange, dateToday } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport datepickerUtils from '@navikt/sif-common-formik/lib/components/formik-datepicker/datepickerUtils';\nimport { FormikDatepickerProps } from '@navikt/sif-common-formik/lib/components/formik-datepicker/FormikDatepicker';\nimport {\n    getDateValidator,\n    getRequiredFieldValidator,\n    getYesOrNoValidator,\n    ValidateDateError,\n    ValidateNumberError,\n    ValidateRequiredFieldError,\n    ValidateYesOrNoError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport dayjs from 'dayjs';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport FormattedHtmlMessage from '../components/formatted-html-message/FormattedHtmlMessage';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport FraværTimerSelect from './FraværTimerSelect';\nimport { isFraværDag, mapFormValuesToFraværDag, mapFraværDagToFormValues, toMaybeNumber } from './fraværUtilities';\nimport {\n    FraværFieldValidationErrors,\n    validateFraværDagCollision,\n    validateLessOrEqualTo,\n    validateNotHelgedag,\n} from './fraværValidationUtils';\nimport { getFraværÅrsakRadios } from './fraværÅrsakRadios';\nimport { FraværDag, FraværDagFormValues } from './types';\nimport ÅrsakInfo from './ÅrsakInfo';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\nexport interface FraværDagFormLabels {\n    tittel: string;\n    dato: string;\n    antallArbeidstimer: string;\n    timerFravær: string;\n    hjemmePgaKorona: string;\n    årsak: string;\n    ok: string;\n    avbryt: string;\n}\n\ninterface Props {\n    fraværDag?: Partial<FraværDag>;\n    dagDescription?: JSX.Element;\n    minDate: Date;\n    maxDate: Date;\n    dateRangesToDisable?: DateRange[];\n    helgedagerIkkeTillatt?: boolean;\n    headerContent?: JSX.Element;\n    maksArbeidstidPerDag?: number;\n    onSubmit: (values: FraværDag) => void;\n    onCancel: () => void;\n}\n\nexport enum FraværDagFormFields {\n    dato = 'dato',\n    timerArbeidsdag = 'timerArbeidsdag',\n    timerFravær = 'timerFravær',\n    hjemmePgaKorona = 'hjemmePgaKorona',\n    årsak = 'årsak',\n}\n\nexport const FraværDagFormErrors = {\n    [FraværDagFormFields.dato]: {\n        [ValidateDateError.dateHasNoValue]: 'fraværDagForm.dato.dateHasNoValue',\n        [ValidateDateError.dateHasInvalidFormat]: 'fraværDagForm.dato.dateHasInvalidFormat',\n        [ValidateDateError.dateIsAfterMax]: 'fraværDagForm.dato.dateIsAfterMax',\n        [ValidateDateError.dateIsBeforeMin]: 'fraværDagForm.dato.dateIsBeforeMin',\n        [FraværFieldValidationErrors.er_helg]: 'fraværDagForm.dato.er_helg',\n        [FraværFieldValidationErrors.dato_kolliderer_med_annet_fravær]:\n            'fraværDagForm.dato.dato_kolliderer_med_annet_fravær',\n    },\n    [FraværDagFormFields.timerArbeidsdag]: {\n        [ValidateNumberError.numberHasNoValue]: 'fraværDagForm.timerArbeidsdag.numberHasNoValue',\n    },\n    [FraværDagFormFields.timerFravær]: {\n        [ValidateNumberError.numberHasNoValue]: 'fraværDagForm.timerFravær.numbverHasNoValue',\n        [FraværFieldValidationErrors.fravær_timer_mer_enn_arbeidstimer]:\n            'fraværDagForm.timerFravær.fravær_timer_mer_enn_arbeidstimer',\n    },\n    [FraværDagFormFields.hjemmePgaKorona]: {\n        [ValidateYesOrNoError.yesOrNoIsUnanswered]: 'fraværDagForm.hjemmePgaKorona.yesOrNoIsUnanswered',\n    },\n    [FraværDagFormFields.årsak]: { [ValidateRequiredFieldError.noValue]: 'fraværDagForm.årsak.noValue' },\n};\n\nexport const FraværDagFormName = 'fraværDagForm';\n\nexport const FraværDagForm = getTypedFormComponents<FraværDagFormFields, FraværDagFormValues, ValidationError>();\n\nconst FraværDagFormView = ({\n    fraværDag = {\n        dato: undefined,\n        timerArbeidsdag: undefined,\n        timerFravær: undefined,\n        årsak: undefined,\n    },\n    dagDescription,\n    maxDate,\n    minDate,\n    dateRangesToDisable,\n    helgedagerIkkeTillatt,\n    maksArbeidstidPerDag,\n    headerContent,\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n    const onFormikSubmit = (formValues: FraværDagFormValues) => {\n        const fraværDagToSubmit = mapFormValuesToFraværDag(formValues, fraværDag.id);\n        if (isFraværDag(fraværDagToSubmit)) {\n            onSubmit(fraværDagToSubmit);\n        } else {\n            throw new Error('FraværDagFOrm: Formvalues is not a valid FraværDag on submit.');\n        }\n    };\n\n    const formLabels: FraværDagFormLabels = {\n        ok: intlHelper(intl, 'fravær.form.felles.ok'),\n        avbryt: intlHelper(intl, 'fravær.form.felles.avbryt'),\n        årsak: intlHelper(intl, 'fravær.form.felles.årsak'),\n        tittel: intlHelper(intl, 'fravær.form.dag.tittel'),\n        dato: intlHelper(intl, 'fravær.form.dag.dato'),\n        antallArbeidstimer: intlHelper(intl, 'fravær.form.dag.antallArbeidstimer'),\n        timerFravær: intlHelper(intl, 'fravær.form.dag.timerFravær'),\n        hjemmePgaKorona: intlHelper(intl, 'fravær.form.felles.hjemmePgaKorona'),\n    };\n    const fraværÅrsakRadios = getFraværÅrsakRadios(intl);\n    const disabledDateRanges = dateRangesToDisable\n        ? dateRangesToDisable.filter((range) => {\n              const { dato } = fraværDag;\n              return !(dato && dayjs(dato).isSame(range.from, 'day') && dayjs(dato).isSame(range.to, 'day'));\n          })\n        : undefined;\n\n    return (\n        <>\n            <FraværDagForm.FormikWrapper\n                initialValues={mapFraværDagToFormValues(fraværDag)}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => {\n                    const { values } = formik;\n                    const valgtDato = datepickerUtils.getDateFromDateString(values.dato);\n                    const datepickerProps: FormikDatepickerProps<FraværDagFormFields, ValidationError> = {\n                        label: formLabels.dato,\n                        name: FraværDagFormFields.dato,\n                        fullscreenOverlay: true,\n                        dayPickerProps: {\n                            initialMonth: dayjs(dateToday).isAfter(maxDate) ? maxDate : dateToday,\n                        },\n                        minDate,\n                        maxDate,\n                        disableWeekend: helgedagerIkkeTillatt || false,\n                        disabledDateRanges,\n                        validate: (value): ValidationError | undefined => {\n                            if (helgedagerIkkeTillatt && validateNotHelgedag(value)) {\n                                return {\n                                    key: FraværDagFormErrors.dato.er_helg,\n                                    keepKeyUnaltered: true,\n                                };\n                            }\n                            if (validateFraværDagCollision(valgtDato, disabledDateRanges)) {\n                                return {\n                                    key: FraværDagFormErrors.dato.dato_kolliderer_med_annet_fravær,\n                                    keepKeyUnaltered: true,\n                                };\n                            }\n                            return getDateValidator({ required: true, min: minDate, max: maxDate })(value);\n                        },\n                        onChange: () => {\n                            setTimeout(() => {\n                                formik.validateField(FraværDagFormFields.dato);\n                            });\n                        },\n                    };\n\n                    return (\n                        <FraværDagForm.Form\n                            onCancel={onCancel}\n                            formErrorHandler={getFormErrorHandler(intl, 'fraværDagForm')}>\n                            <Systemtittel tag=\"h1\">{formLabels.tittel}</Systemtittel>\n                            {headerContent && <Box>{headerContent}</Box>}\n                            <FormBlock>\n                                <FraværDagForm.DatePicker {...datepickerProps} description={dagDescription} />\n                            </FormBlock>\n                            <FormBlock>\n                                <FraværTimerSelect\n                                    name={FraværDagFormFields.timerArbeidsdag}\n                                    validate={getRequiredFieldValidator()}\n                                    label={formLabels.antallArbeidstimer}\n                                    maksTid={maksArbeidstidPerDag}\n                                />\n                            </FormBlock>\n                            <FormBlock>\n                                <FraværTimerSelect\n                                    name={FraværDagFormFields.timerFravær}\n                                    validate={(value) => {\n                                        if (validateLessOrEqualTo(toMaybeNumber(values.timerArbeidsdag))(value)) {\n                                            return {\n                                                key: FraværDagFormErrors.timerFravær.fravær_timer_mer_enn_arbeidstimer,\n                                                keepKeyUnaltered: true,\n                                            };\n                                        }\n                                        return getRequiredFieldValidator()(value);\n                                    }}\n                                    label={formLabels.timerFravær}\n                                    maksTid={maksArbeidstidPerDag}\n                                />\n                            </FormBlock>\n                            <FormBlock>\n                                <FraværDagForm.YesOrNoQuestion\n                                    legend={formLabels.hjemmePgaKorona}\n                                    name={FraværDagFormFields.hjemmePgaKorona}\n                                    validate={getYesOrNoValidator()}\n                                    description={\n                                        <ExpandableInfo title={intlHelper(intl, 'info.smittevern.tittel')}>\n                                            <FormattedHtmlMessage id=\"info.smittevern.info.html\" />\n                                        </ExpandableInfo>\n                                    }\n                                />\n                            </FormBlock>\n                            {values.hjemmePgaKorona === YesOrNo.YES && (\n                                <FormBlock>\n                                    <FraværDagForm.RadioPanelGroup\n                                        legend={formLabels.årsak}\n                                        name={FraværDagFormFields.årsak}\n                                        validate={getRequiredFieldValidator()}\n                                        radios={fraværÅrsakRadios}\n                                        description={<ÅrsakInfo />}\n                                    />\n                                </FormBlock>\n                            )}\n                        </FraværDagForm.Form>\n                    );\n                }}\n            />\n        </>\n    );\n};\n\nexport default FraværDagFormView;\n","import intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { RadioPanelProps } from 'nav-frontend-skjema';\nimport { IntlShape } from 'react-intl';\nimport { FraværÅrsak } from './types';\n\nexport const getFraværÅrsakRadios = (intl: IntlShape): RadioPanelProps[] => [\n    {\n        label: intlHelper(intl, `fravær.årsak.${FraværÅrsak.stengtSkoleBhg}`),\n        value: FraværÅrsak.stengtSkoleBhg,\n    },\n    {\n        label: intlHelper(intl, `fravær.årsak.${FraværÅrsak.smittevernhensyn}`),\n        value: FraværÅrsak.smittevernhensyn,\n    },\n];\n","import ExpandableInfo from '@navikt/sif-common-core/lib/components/expandable-content/ExpandableInfo';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { Element } from 'nav-frontend-typografi';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormattedHtmlMessage from '../components/formatted-html-message/FormattedHtmlMessage';\n\nconst ÅrsakInfo: React.FunctionComponent = () => {\n    const intl = useIntl();\n    return (\n        <ExpandableInfo title={intlHelper(intl, 'info.årsak.tittel')}>\n            <p style={{ marginTop: '0' }}>\n                <FormattedHtmlMessage id=\"info.årsak.info.1\" />\n            </p>\n            <Element tag=\"h3\">\n                <FormattedHtmlMessage id=\"info.årsak.info.2\" />\n            </Element>\n            <FormattedHtmlMessage id=\"info.årsak.info.3\" />\n        </ExpandableInfo>\n    );\n};\n\nexport default ÅrsakInfo;\n","import React from 'react';\nimport { DateRange, sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList,\n    ModalFormAndListLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport FraværDagerList from './FraværDagerList';\nimport FraværDagFormView from './FraværDagForm';\nimport { FraværDag } from './types';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames, ValidationError> {\n    name: FieldNames;\n    minDate: Date;\n    maxDate: Date;\n    dagDescription?: JSX.Element;\n    labels: ModalFormAndListLabels;\n    formHeaderContent?: JSX.Element;\n    dateRangesToDisable?: DateRange[];\n    helgedagerIkkeTillatt?: boolean;\n    maksArbeidstidPerDag?: number;\n}\n\nfunction FraværDagerListAndDialog<FieldNames>({\n    name,\n    minDate,\n    maxDate,\n    validate,\n    dagDescription,\n    labels,\n    formHeaderContent,\n    dateRangesToDisable,\n    helgedagerIkkeTillatt,\n    maksArbeidstidPerDag,\n}: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, FraværDag, ValidationError>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                sortFunc={(fraværDagA: FraværDag, fraværDagB: FraværDag) =>\n                    sortItemsByFom({ fom: fraværDagA.dato }, { fom: fraværDagB.dato })\n                }\n                formRenderer={({ onSubmit, onCancel, item }) => (\n                    <FraværDagFormView\n                        fraværDag={item}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        headerContent={formHeaderContent}\n                        dagDescription={dagDescription}\n                        dateRangesToDisable={dateRangesToDisable}\n                        helgedagerIkkeTillatt={helgedagerIkkeTillatt}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                        maksArbeidstidPerDag={maksArbeidstidPerDag}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FraværDagerList fraværDager={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FraværDagerListAndDialog;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport ExpandableInfo from '@navikt/sif-common-core/lib/components/expandable-content/ExpandableInfo';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { YesOrNo } from '@navikt/sif-common-core/lib/types/YesOrNo';\nimport { DateRange, dateToday } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { getTypedFormComponents, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport {\n    getDateRangeValidator,\n    getRequiredFieldValidator,\n    getYesOrNoValidator,\n    ValidateDateError,\n    ValidateDateRangeError,\n    ValidateRequiredFieldError,\n    ValidateYesOrNoError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport dayjs from 'dayjs';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport FormattedHtmlMessage from '../components/formatted-html-message/FormattedHtmlMessage';\nimport { isFraværPeriode, mapFormValuesToFraværPeriode, mapFraværPeriodeToFormValues } from './fraværUtilities';\nimport {\n    FraværFieldValidationErrors,\n    validateErSammeÅr,\n    validateFraOgMedForCollision,\n    validateFraværPeriodeCollision,\n    validateNotHelgedag,\n    validateTilOgMedForCollision,\n} from './fraværValidationUtils';\nimport { getFraværÅrsakRadios } from './fraværÅrsakRadios';\nimport { FraværPeriode, FraværPeriodeFormValues } from './types';\nimport ÅrsakInfo from './ÅrsakInfo';\nimport { handleDateRangeValidationError } from '../utils';\nimport AlertStripe from 'nav-frontend-alertstriper';\n\nexport interface FraværPeriodeFormLabels {\n    tittel: string;\n    tidsrom: string;\n    fom: string;\n    tom: string;\n    hjemmePgaKorona: string;\n    årsak: string;\n    ok: string;\n    avbryt: string;\n}\n\ninterface Props {\n    fraværPeriode?: Partial<FraværPeriode>;\n    periodeDescription?: JSX.Element;\n    minDate: Date;\n    maxDate: Date;\n    dateRangesToDisable?: DateRange[];\n    helgedagerIkkeTillat?: boolean;\n    begrensTilSammeÅr?: boolean;\n    begrensTilSammeÅrAlertStripeTekst?: string;\n    headerContent?: JSX.Element;\n    onSubmit: (values: FraværPeriode) => void;\n    onCancel: () => void;\n}\n\nenum FraværPeriodeFormFields {\n    fraOgMed = 'fraOgMed',\n    tilOgMed = 'tilOgMed',\n    årsak = 'årsak',\n    hjemmePgaKorona = 'hjemmePgaKorona',\n}\n\nexport const FraværPeriodeFormErrors = {\n    [FraværPeriodeFormFields.fraOgMed]: {\n        [ValidateDateError.dateHasNoValue]: 'fraværPeriodeForm.fraOgMed.dateHasNoValue',\n        [ValidateDateError.dateIsAfterMax]: 'fraværPeriodeForm.fraOgMed.dateIsAfterMax',\n        [ValidateDateError.dateIsBeforeMin]: 'fraværPeriodeForm.fraOgMed.dateIsBeforeMin',\n        [ValidateDateError.dateHasInvalidFormat]: 'fraværPeriodeForm.fraOgMed.dateHasInvalidFormat',\n        [ValidateDateRangeError.fromDateIsAfterToDate]: 'fraværPeriodeForm.fraOgMed.fromDateIsAfterToDate',\n        [FraværFieldValidationErrors.er_helg]: 'fraværPeriodeForm.fraOgMed.er_helg',\n        [FraværFieldValidationErrors.fra_og_til_er_ulike_år]: 'fraværPeriodeForm.fraOgMed.fra_og_til_er_ulike_år',\n        [FraværFieldValidationErrors.fra_dato_kolliderer_med_annet_fravær]:\n            'fraværPeriodeForm.fraOgMed.fra_dato_kolliderer_med_annet_fravær',\n    },\n    [FraværPeriodeFormFields.tilOgMed]: {\n        [ValidateDateError.dateHasNoValue]: 'fraværPeriodeForm.tilOgMed.dateHasNoValue',\n        [ValidateDateError.dateIsAfterMax]: 'fraværPeriodeForm.tilOgMed.dateIsAfterMax',\n        [ValidateDateError.dateIsBeforeMin]: 'fraværPeriodeForm.tilOgMed.dateIsBeforeMin',\n        [ValidateDateError.dateHasInvalidFormat]: 'fraværPeriodeForm.tilOgMed.dateHasInvalidFormat',\n        [ValidateDateRangeError.toDateIsBeforeFromDate]: 'fraværPeriodeForm.tilOgMed.toDateIsBeforeFromDate',\n        [FraværFieldValidationErrors.er_helg]: 'fraværPeriodeForm.tilOgMed.er_helg',\n        [FraværFieldValidationErrors.fra_og_til_er_ulike_år]: 'fraværPeriodeForm.tilOgMed.fra_og_til_er_ulike_år',\n        [FraværFieldValidationErrors.til_dato_kolliderer_med_annet_fravær]:\n            'fraværPeriodeForm.tilOgMed.til_dato_kolliderer_med_annet_fravær',\n    },\n    [FraværPeriodeFormFields.årsak]: {\n        [ValidateRequiredFieldError.noValue]: 'fraværPeriodeForm.årsak.noValue',\n    },\n    [FraværPeriodeFormFields.hjemmePgaKorona]: {\n        [ValidateYesOrNoError.yesOrNoIsUnanswered]: 'fraværPeriodeForm.årsak.yesOrNoIsUnanswered',\n    },\n    ['fraOgMed_tilOgMed']: {\n        [FraværFieldValidationErrors.dager_overlapper_med_andre_dager]:\n            'fraværPeriodeForm.periode.dager_overlapper_med_andre_dager',\n    },\n};\n\nexport const FraværPeriodeFormName = 'fraværPeriodeForm';\n\nconst Form = getTypedFormComponents<FraværPeriodeFormFields, FraværPeriodeFormValues, ValidationError>();\n\nconst FraværPeriodeForm = ({\n    fraværPeriode = {},\n    periodeDescription,\n    maxDate,\n    minDate,\n    dateRangesToDisable,\n    helgedagerIkkeTillat,\n    headerContent,\n    begrensTilSammeÅr,\n    begrensTilSammeÅrAlertStripeTekst,\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: FraværPeriodeFormValues) => {\n        const fraværPeriodeToSubmit = mapFormValuesToFraværPeriode(formValues, fraværPeriode.id);\n        if (isFraværPeriode(fraværPeriodeToSubmit)) {\n            onSubmit(fraværPeriodeToSubmit);\n        } else {\n            throw new Error('FraværPeriodeForm: Formvalues is not a valid FraværPeriode on submit.');\n        }\n    };\n\n    const formLabels: FraværPeriodeFormLabels = {\n        ok: intlHelper(intl, 'fravær.form.felles.ok'),\n        avbryt: intlHelper(intl, 'fravær.form.felles.avbryt'),\n        årsak: intlHelper(intl, 'fravær.form.felles.årsak'),\n        tittel: intlHelper(intl, 'fravær.form.periode.tittel'),\n        tidsrom: intlHelper(intl, 'fravær.form.periode.tidsrom'),\n        hjemmePgaKorona: intlHelper(intl, 'fravær.form.felles.hjemmePgaKorona'),\n        fom: intlHelper(intl, 'fravær.form.periode.fom'),\n        tom: intlHelper(intl, 'fravær.form.periode.tom'),\n    };\n    const fraværÅrsakRadios = getFraværÅrsakRadios(intl);\n\n    const disabledDateRanges = dateRangesToDisable\n        ? dateRangesToDisable.filter((range) => {\n              const { fraOgMed, tilOgMed } = fraværPeriode;\n              return !(\n                  fraOgMed &&\n                  tilOgMed &&\n                  dayjs(fraOgMed).isSame(range.from, 'day') &&\n                  dayjs(tilOgMed).isSame(range.to, 'day')\n              );\n          })\n        : undefined;\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={mapFraværPeriodeToFormValues(fraværPeriode)}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => {\n                    const { fraOgMed, tilOgMed } = formik.values;\n                    const fromDate: Date | undefined = ISOStringToDate(fraOgMed);\n                    const toDate: Date | undefined = ISOStringToDate(tilOgMed);\n                    return (\n                        <Form.Form\n                            onCancel={onCancel}\n                            formErrorHandler={getFormErrorHandler(intl, 'fraværPeriodeForm')}>\n                            <Systemtittel tag=\"h1\">{formLabels.tittel}</Systemtittel>\n                            {headerContent && <Box margin=\"l\">{headerContent}</Box>}\n                            <FormBlock>\n                                <Form.DateIntervalPicker\n                                    legend={formLabels.tidsrom}\n                                    description={periodeDescription}\n                                    validate={() => {\n                                        const err = validateFraværPeriodeCollision(\n                                            fromDate,\n                                            toDate,\n                                            disabledDateRanges\n                                        );\n                                        if (err) {\n                                            return {\n                                                key: FraværPeriodeFormErrors.fraOgMed_tilOgMed\n                                                    .dager_overlapper_med_andre_dager,\n                                                keepKeyUnaltered: true,\n                                            };\n                                        }\n                                    }}\n                                    fromDatepickerProps={{\n                                        label: formLabels.fom,\n                                        name: FraværPeriodeFormFields.fraOgMed,\n                                        fullscreenOverlay: true,\n                                        minDate: minDate,\n                                        maxDate: toDate || maxDate,\n                                        disableWeekend: helgedagerIkkeTillat || false,\n                                        disabledDateRanges,\n                                        dayPickerProps: {\n                                            initialMonth:\n                                                fromDate || toDate || dayjs(dateToday).isAfter(maxDate)\n                                                    ? maxDate\n                                                    : dateToday,\n                                        },\n                                        validate: getFromDateValidator({\n                                            begrensTilSammeÅr,\n                                            minDate,\n                                            maxDate,\n                                            helgedagerIkkeTillat,\n                                            disabledDateRanges,\n                                            toDate,\n                                            tilOgMed,\n                                        }),\n                                        onChange: () => {\n                                            setTimeout(() => {\n                                                formik.validateField(FraværPeriodeFormFields.fraOgMed);\n                                                formik.validateField(FraværPeriodeFormFields.tilOgMed);\n                                            });\n                                        },\n                                    }}\n                                    toDatepickerProps={{\n                                        label: formLabels.tom,\n                                        name: FraværPeriodeFormFields.tilOgMed,\n                                        fullscreenOverlay: true,\n                                        minDate: fromDate || minDate,\n                                        maxDate,\n                                        disableWeekend: helgedagerIkkeTillat || false,\n                                        disabledDateRanges,\n                                        dayPickerProps: {\n                                            initialMonth:\n                                                toDate || fromDate || dayjs(dateToday).isAfter(maxDate)\n                                                    ? maxDate\n                                                    : dateToday,\n                                        },\n                                        validate: getToDateValidator({\n                                            begrensTilSammeÅr,\n                                            disabledDateRanges,\n                                            fraOgMed,\n                                            fromDate,\n                                            helgedagerIkkeTillat,\n                                            maxDate,\n                                            minDate,\n                                        }),\n                                        onChange: () => {\n                                            setTimeout(() => {\n                                                formik.validateField(FraværPeriodeFormFields.fraOgMed);\n                                                formik.validateField(FraværPeriodeFormFields.tilOgMed);\n                                            });\n                                        },\n                                    }}\n                                />\n                                {begrensTilSammeÅr &&\n                                    begrensTilSammeÅrAlertStripeTekst &&\n                                    validateErSammeÅr(fraOgMed, tilOgMed) && (\n                                        <AlertStripe type=\"advarsel\">{begrensTilSammeÅrAlertStripeTekst}</AlertStripe>\n                                    )}\n                            </FormBlock>\n                            <FormBlock>\n                                <Form.YesOrNoQuestion\n                                    legend={formLabels.hjemmePgaKorona}\n                                    name={FraværPeriodeFormFields.hjemmePgaKorona}\n                                    validate={getYesOrNoValidator()}\n                                    description={\n                                        <ExpandableInfo title={intlHelper(intl, 'info.smittevern.tittel')}>\n                                            <FormattedHtmlMessage id=\"info.smittevern.info.html\" />\n                                        </ExpandableInfo>\n                                    }\n                                />\n                            </FormBlock>\n\n                            {formik.values.hjemmePgaKorona === YesOrNo.YES && (\n                                <FormBlock>\n                                    <Form.RadioPanelGroup\n                                        legend={formLabels.årsak}\n                                        name={FraværPeriodeFormFields.årsak}\n                                        validate={getRequiredFieldValidator()}\n                                        radios={fraværÅrsakRadios}\n                                        description={<ÅrsakInfo />}\n                                    />\n                                </FormBlock>\n                            )}\n                        </Form.Form>\n                    );\n                }}\n            />\n        </>\n    );\n};\n\nconst getFromDateValidator =\n    ({\n        helgedagerIkkeTillat,\n        begrensTilSammeÅr,\n        tilOgMed,\n        toDate,\n        disabledDateRanges,\n        minDate,\n        maxDate,\n    }: {\n        helgedagerIkkeTillat?: boolean;\n        begrensTilSammeÅr?: boolean;\n        tilOgMed?: string;\n        toDate?: Date;\n        disabledDateRanges?: DateRange[];\n        minDate?: Date;\n        maxDate?: Date;\n    }) =>\n    (value): ValidationError | undefined => {\n        if (helgedagerIkkeTillat && validateNotHelgedag(value)) {\n            return {\n                key: FraværPeriodeFormErrors.fraOgMed.er_helg,\n                keepKeyUnaltered: true,\n            };\n        }\n        if (begrensTilSammeÅr && validateErSammeÅr(value, tilOgMed)) {\n            return {\n                key: FraværPeriodeFormErrors.fraOgMed.fra_og_til_er_ulike_år,\n                keepKeyUnaltered: true,\n            };\n        }\n        if (validateFraOgMedForCollision(toDate, disabledDateRanges)) {\n            return {\n                key: FraværPeriodeFormErrors.fraOgMed.fra_dato_kolliderer_med_annet_fravær,\n                keepKeyUnaltered: true,\n            };\n        }\n        const dateError = getDateRangeValidator({\n            required: true,\n            min: minDate,\n            max: maxDate,\n            toDate,\n        }).validateFromDate(value);\n\n        return handleDateRangeValidationError(dateError, minDate, maxDate);\n    };\n\nconst getToDateValidator =\n    ({\n        helgedagerIkkeTillat,\n        begrensTilSammeÅr,\n        fraOgMed,\n        fromDate,\n        disabledDateRanges,\n        minDate,\n        maxDate,\n    }: {\n        helgedagerIkkeTillat?: boolean;\n        begrensTilSammeÅr?: boolean;\n        fraOgMed?: string;\n        fromDate?: Date;\n        disabledDateRanges?: DateRange[];\n        minDate?: Date;\n        maxDate?: Date;\n    }) =>\n    (value) => {\n        if (helgedagerIkkeTillat && validateNotHelgedag(value)) {\n            return {\n                key: FraværPeriodeFormErrors.tilOgMed.er_helg,\n                keepKeyUnaltered: true,\n            };\n        }\n        if (begrensTilSammeÅr && validateErSammeÅr(fraOgMed, value)) {\n            return {\n                key: FraværPeriodeFormErrors.tilOgMed.fra_og_til_er_ulike_år,\n                keepKeyUnaltered: true,\n            };\n        }\n        if (validateTilOgMedForCollision(fromDate, disabledDateRanges)) {\n            return {\n                key: FraværPeriodeFormErrors.tilOgMed.til_dato_kolliderer_med_annet_fravær,\n                keepKeyUnaltered: true,\n            };\n        }\n        const dateError = getDateRangeValidator({\n            required: true,\n            min: minDate,\n            max: maxDate,\n            fromDate,\n        }).validateToDate(value);\n        return handleDateRangeValidationError(dateError, minDate, maxDate);\n    };\nexport default FraværPeriodeForm;\n","import React from 'react';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { FraværPeriode } from './types';\nimport FraværListItem from './FraværListItem';\n\ninterface Props {\n    fraværPerioder: FraværPeriode[];\n    onEdit?: (fraværPeriode: FraværPeriode) => void;\n    onDelete?: (fraværPeriode: FraværPeriode) => void;\n    useTrashcan?: boolean;\n}\n\nconst FraværPerioderList = ({ fraværPerioder = [], onDelete, onEdit, useTrashcan }: Props) => {\n    const getDateTitleString = (fraværPeriode: FraværPeriode) =>\n        `${prettifyDateExtended(fraværPeriode.fraOgMed)} - ${prettifyDateExtended(fraværPeriode.tilOgMed)}`;\n\n    const renderFraværPeriodeLabel = (fraværPeriode: FraværPeriode): React.ReactNode => {\n        const title = getDateTitleString(fraværPeriode);\n        return (\n            <FraværListItem\n                title={title}\n                årsak={fraværPeriode.årsak}\n                onEdit={onEdit ? () => onEdit(fraværPeriode) : undefined}\n            />\n        );\n    };\n\n    return (\n        <ItemList<FraværPeriode>\n            getItemId={(fraværPeriode) => fraværPeriode.id}\n            getItemTitle={(fraværPeriode) => getDateTitleString(fraværPeriode)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderFraværPeriodeLabel}\n            items={fraværPerioder.filter((fraværPeriode) => fraværPeriode.id !== undefined)}\n            useTrashcan={useTrashcan || false}\n        />\n    );\n};\n\nexport default FraværPerioderList;\n","import React from 'react';\nimport { DateRange, sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList,\n    ModalFormAndListLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport FraværPeriodeForm from './FraværPeriodeForm';\nimport FraværPerioderList from './FraværPerioderList';\nimport { FraværPeriode } from './types';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames, ValidationError> {\n    name: FieldNames;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n    periodeDescription?: JSX.Element;\n    formHeaderContent?: JSX.Element;\n    dateRangesToDisable?: DateRange[];\n    begrensTilSammeÅr?: boolean;\n    helgedagerIkkeTillat?: boolean;\n    begrensTilSammeÅrAlertStripeTekst?: string;\n}\n\nfunction FraværPerioderListAndDialog<FieldNames>({\n    name,\n    minDate,\n    maxDate,\n    dateRangesToDisable,\n    periodeDescription,\n    formHeaderContent,\n    begrensTilSammeÅr = true,\n    begrensTilSammeÅrAlertStripeTekst,\n    validate,\n    labels,\n    helgedagerIkkeTillat,\n}: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, FraværPeriode, ValidationError>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                sortFunc={(fraværPeriodeA: FraværPeriode, fraværPeriodeB: FraværPeriode) =>\n                    sortItemsByFom({ fom: fraværPeriodeA.fraOgMed }, { fom: fraværPeriodeB.tilOgMed })\n                }\n                formRenderer={({ onSubmit, onCancel, item }) => (\n                    <FraværPeriodeForm\n                        fraværPeriode={item}\n                        periodeDescription={periodeDescription}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        headerContent={formHeaderContent}\n                        dateRangesToDisable={dateRangesToDisable}\n                        helgedagerIkkeTillat={helgedagerIkkeTillat}\n                        begrensTilSammeÅr={begrensTilSammeÅr}\n                        begrensTilSammeÅrAlertStripeTekst={begrensTilSammeÅrAlertStripeTekst}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FraværPerioderList fraværPerioder={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FraværPerioderListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { date1YearAgo, date1YearFromNow, dateToday } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport flat from 'flat';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { FraværDag, FraværPeriode } from '../../../forms/fravær';\nimport FraværDagerListAndDialog from '../../../forms/fravær/FraværDagerListAndDialog';\nimport FraværDagFormView, { FraværDagFormErrors } from '../../../forms/fravær/FraværDagForm';\nimport fraværMessages from '../../../forms/fravær/fraværMessages';\nimport FraværPeriodeForm, { FraværPeriodeFormErrors } from '../../../forms/fravær/FraværPeriodeForm';\nimport FraværPerioderListAndDialog from '../../../forms/fravær/FraværPerioderListAndDialog';\nimport { fraværDagToFraværDateRange, fraværPeriodeToDateRange } from '../../../forms/fravær/fraværUtilities';\nimport { FraværFieldValidationErrors, validateNoCollisions } from '../../../forms/fravær/fraværValidationUtils';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\n\nenum FormField {\n    perioder = 'perioder',\n    dager = 'dager',\n}\n\ninterface FormValues {\n    [FormField.perioder]: FraværPeriode[];\n    [FormField.dager]: FraværDag[];\n}\n\nconst initialValues: FormValues = { [FormField.perioder]: [], [FormField.dager]: [] };\n\nconst FraværExample: React.FunctionComponent = () => {\n    const [fraværPeriodeSingleFormValues, setFraværPeriodeSingleFormValues] = useState<\n        Partial<FraværPeriode> | undefined\n    >(undefined);\n    const [fraværDagSingleFormValues, setFraværDagSingleFormValues] = useState<Partial<FraværDag> | undefined>(\n        undefined\n    );\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={(formik) => {\n                        const { values } = formik;\n                        const dateRangesToDisable = [\n                            ...values.perioder.map(fraværPeriodeToDateRange),\n                            ...values.dager.map(fraværDagToFraværDateRange),\n                        ];\n                        return (\n                            <TypedFormikForm<FormValues, ValidationError | FraværFieldValidationErrors>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                formErrorHandler={getFormErrorHandler(intl)}>\n                                <FormBlock>\n                                    <FraværPerioderListAndDialog<FormField>\n                                        name={FormField.perioder}\n                                        minDate={date1YearAgo}\n                                        maxDate={dateToday}\n                                        periodeDescription={\n                                            <p style={{ marginTop: '.5rem' }}>\n                                                Du kan kun søke for ett og samme år i en søknad. Får å søke for flere\n                                                år, må du sende en søknad for hvert år.\n                                            </p>\n                                        }\n                                        validate={(value) => {\n                                            const listError = getListValidator({ required: true })(value);\n                                            if (listError) {\n                                                return listError;\n                                            }\n                                            const collisionError = validateNoCollisions(values.dager, values.perioder);\n                                            if (collisionError) {\n                                                return collisionError;\n                                            }\n                                        }}\n                                        labels={{\n                                            addLabel: 'Legg til periode',\n                                            modalTitle: 'Fravær hele dager',\n                                        }}\n                                        dateRangesToDisable={dateRangesToDisable}\n                                        helgedagerIkkeTillat={true}\n                                    />\n                                </FormBlock>\n                                <FormBlock>\n                                    <FraværDagerListAndDialog<FormField>\n                                        name={FormField.dager}\n                                        minDate={date1YearAgo}\n                                        maxDate={dateToday}\n                                        validate={(value) => {\n                                            const listError = getListValidator({ required: true })(value);\n                                            if (listError) {\n                                                return listError;\n                                            }\n                                            const collisionError = validateNoCollisions(values.dager, values.perioder);\n                                            if (collisionError) {\n                                                return collisionError;\n                                            }\n                                        }}\n                                        labels={{\n                                            addLabel: 'Legg til dag med delvis fravær',\n                                            listTitle: 'Dager med delvis fravær',\n                                            modalTitle: 'Fravær deler av dag',\n                                            emptyListText: 'Ingen dager er lagt til',\n                                        }}\n                                        dateRangesToDisable={dateRangesToDisable}\n                                        helgedagerIkkeTillatt={true}\n                                        maksArbeidstidPerDag={24}\n                                    />\n                                </FormBlock>\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrorIntlKeys={flat(FraværPeriodeFormErrors)}\n                    intlMessages={fraværMessages}\n                />\n                <FormValidationErrorMessages\n                    validationErrorIntlKeys={flat(FraværDagFormErrors)}\n                    intlMessages={fraværMessages}\n                />\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialoger</Undertittel>\n            </Box>\n\n            <FormBlock>\n                <DialogFormWrapper>\n                    <Panel border={true}>\n                        <FraværPeriodeForm\n                            minDate={date1YearAgo}\n                            maxDate={date1YearFromNow}\n                            fraværPeriode={{}}\n                            onSubmit={setFraværPeriodeSingleFormValues}\n                            onCancel={() => {\n                                // tslint:disable-next-line:no-console\n                                return console.log('cancel me');\n                            }}\n                        />\n                    </Panel>\n                    <SubmitPreview values={fraværPeriodeSingleFormValues} />\n                </DialogFormWrapper>\n            </FormBlock>\n\n            <FormBlock>\n                <DialogFormWrapper>\n                    <Panel border={true}>\n                        <FraværDagFormView\n                            minDate={date1YearAgo}\n                            maxDate={date1YearFromNow}\n                            fraværDag={{}}\n                            onSubmit={setFraværDagSingleFormValues}\n                            onCancel={() => {\n                                // tslint:disable-next-line:no-console\n                                return console.log('cancel me');\n                            }}\n                        />\n                    </Panel>\n                    <SubmitPreview values={fraværDagSingleFormValues} />\n                </DialogFormWrapper>\n            </FormBlock>\n\n            <MessagesPreview messages={fraværMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default FraværExample;\n","export enum BarnType {\n    'fosterbarn' = 'FOSTERBARN',\n    'annet' = 'ANNET',\n}\nexport interface AnnetBarn {\n    id?: string;\n    fnr: string;\n    fødselsdato: Date;\n    navn: string;\n    type?: BarnType;\n}\n\nexport type AnnetBarnFormValues = Partial<\n    Omit<AnnetBarn, 'fødselsdato' | 'id'> & {\n        fødselsdato: string;\n    }\n>;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { prettifyDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport {\n    getDateValidator,\n    getFødselsnummerValidator,\n    getRequiredFieldValidator,\n    getStringValidator,\n    ValidateDateError,\n    ValidateFødselsnummerError,\n    ValidateRequiredFieldError,\n    ValidateStringError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport annetBarnUtils from './annetBarnUtils';\nimport { AnnetBarn, AnnetBarnFormValues, BarnType } from './types';\n\nexport interface AnnetBarnFormLabels {\n    title: string;\n    fnr: string;\n    placeholderFnr?: string;\n    fødselsdato: string;\n    navn: string;\n    placeholderNavn?: string;\n    okButton: string;\n    cancelButton: string;\n    aldersGrenseText?: string;\n    visBarnTypeValg?: string;\n}\n\nenum AnnetBarnFormFields {\n    fnr = 'fnr',\n    fødselsdato = 'fødselsdato',\n    navn = 'navn',\n    type = 'type',\n}\n\nexport const AnnetBarnFormErrors = {\n    [AnnetBarnFormFields.navn]: { [ValidateStringError.stringHasNoValue]: 'annetBarnForm.navn.stringHasNoValue' },\n    [AnnetBarnFormFields.fødselsdato]: {\n        [ValidateDateError.dateHasNoValue]: 'annetBarnForm.fødselsdato.dateHasNoValue',\n        [ValidateDateError.dateIsBeforeMin]: 'annetBarnForm.fødselsdato.dateIsBeforeMin',\n        [ValidateDateError.dateIsAfterMax]: 'annetBarnForm.fødselsdato.dateIsAfterMax',\n        [ValidateDateError.dateHasInvalidFormat]: 'annetBarnForm.fødselsdato.dateHasInvalidFormat',\n    },\n    [AnnetBarnFormFields.fnr]: {\n        [ValidateFødselsnummerError.fødselsnummerHasNoValue]: 'annetBarnForm.fnr.fødselsnummerHasNoValue',\n        [ValidateFødselsnummerError.fødselsnummerIsInvalid]: 'annetBarnForm.fnr.fødselsnummerIsInvalid',\n        [ValidateFødselsnummerError.fødselsnummerIsNot11Chars]: 'annetBarnForm.fnr.fødselsnummerIsNot11Chars',\n        [ValidateFødselsnummerError.fødselsnummerIsNotAllowed]: 'annetBarnForm.fnr.fødselsnummerIsNotAllowed',\n    },\n    [AnnetBarnFormFields.type]: {\n        [ValidateRequiredFieldError.noValue]: 'annetBarnForm.type.noValue',\n    },\n};\n\ninterface Props {\n    annetBarn?: Partial<AnnetBarn>;\n    labels?: Partial<AnnetBarnFormLabels>;\n    minDate: Date;\n    maxDate: Date;\n    disallowedFødselsnumre?: string[];\n    visBarnTypeValg?: boolean;\n    onSubmit: (values: AnnetBarn) => void;\n    onCancel: () => void;\n}\n\nconst Form = getTypedFormComponents<AnnetBarnFormFields, AnnetBarnFormValues, ValidationError>();\n\nconst AnnetBarnForm = ({\n    annetBarn = { fnr: '', navn: '', fødselsdato: undefined, id: undefined, type: undefined },\n    labels,\n    minDate,\n    maxDate,\n    disallowedFødselsnumre,\n    visBarnTypeValg,\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: AnnetBarnFormValues) => {\n        const annetBarnToSubmit = annetBarnUtils.mapFormValuesToPartialAnnetBarn(formValues, annetBarn.id);\n        if (annetBarnUtils.isAnnetBarn(annetBarnToSubmit)) {\n            onSubmit(annetBarnToSubmit);\n        } else {\n            throw new Error('AnnetBarnForm: Formvalues is not a valid AnnetBarn on submit.');\n        }\n    };\n\n    const defaultLabels: AnnetBarnFormLabels = {\n        title: intlHelper(intl, 'annetBarn.form.title'),\n        fnr: intlHelper(intl, 'annetBarn.form.fnr'),\n        fødselsdato: intlHelper(intl, 'annetBarn.form.fødselsdato'),\n        navn: intlHelper(intl, 'annetBarn.form.navn'),\n        okButton: intlHelper(intl, 'annetBarn.form.okButton'),\n        cancelButton: intlHelper(intl, 'annetBarn.form.cancelButton'),\n    };\n\n    const formLabels: AnnetBarnFormLabels = { ...defaultLabels, ...labels };\n\n    return (\n        <Form.FormikWrapper\n            initialValues={annetBarnUtils.mapAnnetBarnToFormValues(annetBarn)}\n            onSubmit={onFormikSubmit}\n            renderForm={() => (\n                <Form.Form onCancel={onCancel} formErrorHandler={getFormErrorHandler(intl, 'annetBarnForm')}>\n                    <Systemtittel tag=\"h1\">{formLabels.title}</Systemtittel>\n                    <FormBlock>\n                        <Form.Input\n                            name={AnnetBarnFormFields.navn}\n                            label={formLabels.navn}\n                            validate={getStringValidator({ required: true })}\n                            placeholder={formLabels.placeholderNavn}\n                        />\n                    </FormBlock>\n                    <FormBlock>\n                        <Form.DatePicker\n                            name={AnnetBarnFormFields.fødselsdato}\n                            label={\n                                formLabels.aldersGrenseText\n                                    ? `${formLabels.fødselsdato} ${formLabels.aldersGrenseText}`\n                                    : `${formLabels.fødselsdato}`\n                            }\n                            validate={(value) => {\n                                const dateError = getDateValidator({ required: true, min: minDate, max: maxDate })(\n                                    value\n                                );\n                                if (dateError === ValidateDateError.dateIsBeforeMin) {\n                                    return {\n                                        key: dateError,\n                                        values: { dato: prettifyDate(minDate) },\n                                    };\n                                }\n                                return dateError;\n                            }}\n                            maxDate={maxDate}\n                            minDate={minDate}\n                            showYearSelector={true}\n                        />\n                    </FormBlock>\n\n                    <FormBlock>\n                        <Form.Input\n                            name={AnnetBarnFormFields.fnr}\n                            label={formLabels.fnr}\n                            validate={getFødselsnummerValidator({\n                                required: true,\n                                disallowedValues: disallowedFødselsnumre,\n                            })}\n                            inputMode=\"numeric\"\n                            maxLength={11}\n                            placeholder={formLabels.placeholderFnr}\n                        />\n                    </FormBlock>\n                    {visBarnTypeValg && (\n                        <FormBlock>\n                            <Form.RadioPanelGroup\n                                name={AnnetBarnFormFields.type}\n                                legend={intlHelper(intl, 'annetBarn.form.årsak.spm')}\n                                radios={[\n                                    {\n                                        label: intlHelper(intl, 'annetBarn.form.årsak.FOSTERBARN'),\n                                        value: BarnType.fosterbarn,\n                                    },\n                                    {\n                                        label: intlHelper(intl, 'annetBarn.form.årsak.ANNET'),\n                                        value: BarnType.annet,\n                                    },\n                                ]}\n                                validate={getRequiredFieldValidator()}\n                            />\n                        </FormBlock>\n                    )}\n                </Form.Form>\n            )}\n        />\n    );\n};\n\nexport default AnnetBarnForm;\n","import { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { hasValue } from '@navikt/sif-common-formik/lib/validation/validationUtils';\nimport { guid } from 'nav-frontend-js-utils';\nimport { AnnetBarn, AnnetBarnFormValues } from './types';\n\nconst isAnnetBarn = (annetBarn: Partial<AnnetBarn>): annetBarn is AnnetBarn => {\n    const { fnr, navn, fødselsdato } = annetBarn;\n    return hasValue(fnr) && hasValue(navn) && hasValue(fødselsdato);\n};\n\nconst mapFormValuesToPartialAnnetBarn = (\n    formValues: AnnetBarnFormValues,\n    id: string | undefined\n): Partial<AnnetBarn> => {\n    return {\n        ...formValues,\n        id: id || guid(),\n        fødselsdato: ISOStringToDate(formValues.fødselsdato),\n    };\n};\n\nconst mapAnnetBarnToFormValues = (annetBarn: Partial<AnnetBarn>): AnnetBarnFormValues => {\n    return {\n        fnr: annetBarn.fnr,\n        navn: annetBarn.navn,\n        fødselsdato: dateToISOString(annetBarn.fødselsdato),\n        type: annetBarn.type,\n    };\n};\n\nconst annetBarnUtils = {\n    mapAnnetBarnToFormValues,\n    mapFormValuesToPartialAnnetBarn,\n    isAnnetBarn,\n};\n\nexport default annetBarnUtils;\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { AnnetBarn } from './types';\nimport './annetBarnList.less';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { useIntl } from 'react-intl';\n\ninterface Props {\n    annetBarn: AnnetBarn[];\n    onEdit?: (annetBarn: AnnetBarn) => void;\n    onDelete?: (annetBarn: AnnetBarn) => void;\n}\n\nconst bem = bemUtils('annetBarnList');\n\nconst AnnetBarnList = ({ annetBarn = [], onDelete, onEdit }: Props) => {\n    const intl = useIntl();\n    const renderAnnetBarnLabel = (annetBarn: AnnetBarn): React.ReactNode => {\n        return (\n            <div className={bem.element('label')}>\n                <span className={bem.element('dato')}>{prettifyDate(annetBarn.fødselsdato)}</span>\n                <span className={bem.element('navn')}>\n                    {onEdit && <ActionLink onClick={() => onEdit(annetBarn)}>{annetBarn.navn}</ActionLink>}\n                </span>\n                <span className={bem.element('type')}>\n                    {annetBarn.type && <> ({intlHelper(intl, `annetBarn.form.årsak.${annetBarn.type}`)})</>}\n                </span>\n                {!onEdit && <span>{annetBarn.navn}</span>}\n            </div>\n        );\n    };\n\n    return (\n        <ItemList<AnnetBarn>\n            getItemId={(annetBarn) => annetBarn.id}\n            getItemTitle={(annetBarn) => annetBarn.navn}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderAnnetBarnLabel}\n            items={annetBarn.filter((annetBarn) => annetBarn.id !== undefined)}\n        />\n    );\n};\n\nexport default AnnetBarnList;\n","import React from 'react';\nimport {\n    FormikModalFormAndList,\n    ModalFormAndListLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport AnnetBarnForm from './AnnetBarnForm';\nimport AnnetBarnList from './AnnetBarnList';\nimport { AnnetBarn } from './types';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames, ValidationError> {\n    name: FieldNames;\n    labels: ModalFormAndListLabels;\n    minDate: Date;\n    maxDate: Date;\n    disallowedFødselsnumre?: string[];\n    aldersGrenseText?: string;\n    placeholderFnr?: string;\n    placeholderNavn?: string;\n    visBarnTypeValg?: boolean;\n    onAfterChange?: (andreBarn: AnnetBarn[]) => void;\n}\n\nfunction AnnetBarnListAndDialog<FieldNames>({\n    name,\n    validate,\n    labels,\n    minDate,\n    maxDate,\n    disallowedFødselsnumre,\n    aldersGrenseText,\n    placeholderFnr,\n    placeholderNavn,\n    visBarnTypeValg,\n    onAfterChange,\n}: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, AnnetBarn, ValidationError>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                formRenderer={({ onSubmit, onCancel, item }) => (\n                    <AnnetBarnForm\n                        annetBarn={item}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        disallowedFødselsnumre={\n                            item && item.fnr\n                                ? disallowedFødselsnumre?.filter((fnr) => fnr !== item.fnr)\n                                : disallowedFødselsnumre\n                        }\n                        visBarnTypeValg={visBarnTypeValg}\n                        labels={{\n                            aldersGrenseText: aldersGrenseText,\n                            placeholderFnr: placeholderFnr,\n                            placeholderNavn: placeholderNavn,\n                        }}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <AnnetBarnList annetBarn={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n                onAfterChange={onAfterChange}\n            />\n        </>\n    );\n}\n\nexport default AnnetBarnListAndDialog;\n","import React, { useState } from 'react';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { date4YearsAgo, dateToday } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport flatten from 'flat';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport AnnetBarnForm, { AnnetBarnFormErrors } from '../../../forms/annet-barn/AnnetBarnForm';\nimport AnnetBarnListAndDialog from '../../../forms/annet-barn/AnnetBarnListAndDialog';\nimport annetBarnMessages from '../../../forms/annet-barn/annetBarnMessages';\nimport { AnnetBarn } from '../../../forms/annet-barn/types';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\nenum FormField {\n    'annetBarn' = 'annetBarn',\n}\n\ninterface FormValues {\n    [FormField.annetBarn]: AnnetBarn[];\n}\nconst initialValues: FormValues = { annetBarn: [] };\n\nconst AnnetBarnExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<AnnetBarn> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const visBarnTypeValg = true;\n    const annetBarn = listFormValues?.[FormField.annetBarn];\n    const disallowedFødselsnumre = annetBarn ? annetBarn.map((barn) => barn.fnr) : undefined;\n\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues, ValidationError>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\">\n                                <AnnetBarnListAndDialog<FormField>\n                                    name={FormField.annetBarn}\n                                    validate={getListValidator({ required: true })}\n                                    labels={{\n                                        addLabel: 'Legg til barn',\n                                        listTitle: 'Registrerte barn',\n                                        modalTitle: 'Legg til barn',\n                                        emptyListText: 'Ingen barn er lagt til',\n                                    }}\n                                    minDate={date4YearsAgo}\n                                    maxDate={dateToday}\n                                    visBarnTypeValg={visBarnTypeValg}\n                                    disallowedFødselsnumre={disallowedFødselsnumre}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrorIntlKeys={flatten(AnnetBarnFormErrors)}\n                    formName={'annetBarn'}\n                    intlMessages={annetBarnMessages}\n                />\n            </Box>\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <AnnetBarnForm\n                        annetBarn={{}}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                        minDate={date4YearsAgo}\n                        maxDate={dateToday}\n                    />\n                </Panel>\n                <SubmitPreview values={singleFormValues} />\n            </DialogFormWrapper>\n\n            <MessagesPreview messages={annetBarnMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default AnnetBarnExample;\n","export enum OpptjeningAktivitet {\n    'ARBEIDSTAKER' = 'ARBEIDSTAKER',\n    'FRILANSER' = 'FRILANSER',\n}\n\nexport interface OpptjeningUtland {\n    id?: string;\n    fom: Date;\n    tom: Date;\n    landkode: string;\n    opptjeningType: OpptjeningAktivitet;\n    navn: string;\n}\n\nexport type OpptjeningUtlandFormValues = Partial<\n    Omit<OpptjeningUtland, 'id' | 'fom' | 'tom'> & {\n        fom?: string;\n        tom?: string;\n    }\n>;\n","import { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { guid } from 'nav-frontend-js-utils';\nimport { OpptjeningUtland, OpptjeningUtlandFormValues } from './types';\n\nconst isValidOpptjeningUtland = (opptjeningUtland: Partial<OpptjeningUtland>): opptjeningUtland is OpptjeningUtland => {\n    return (\n        opptjeningUtland.fom !== undefined &&\n        opptjeningUtland.tom !== undefined &&\n        opptjeningUtland.landkode !== undefined\n    );\n};\n\nconst mapFormValuesToOpptjeningUtland = (\n    formValues: OpptjeningUtlandFormValues,\n    id: string | undefined\n): Partial<OpptjeningUtland> => {\n    return {\n        ...formValues,\n        id: id || guid(),\n        fom: ISOStringToDate(formValues.fom),\n        tom: ISOStringToDate(formValues.tom),\n    };\n};\n\nconst mapOpptjeningUtlandToFormValues = ({\n    fom,\n    tom,\n    landkode,\n    opptjeningType: type,\n    navn,\n}: Partial<OpptjeningUtland>): OpptjeningUtlandFormValues => ({\n    fom: dateToISOString(fom),\n    tom: dateToISOString(tom),\n    landkode,\n    opptjeningType: type,\n    navn,\n});\n\nconst opptjeningUtlandUtils = {\n    isValidOpptjeningUtland,\n    mapFormValuesToOpptjeningUtland,\n    mapOpptjeningUtlandToFormValues,\n};\nexport default opptjeningUtlandUtils;\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { ISOStringToDate } from '@navikt/sif-common-formik';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport {\n    getDateRangeValidator,\n    getRequiredFieldValidator,\n    ValidateDateError,\n    ValidateDateRangeError,\n    ValidateRequiredFieldError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport { hasValue } from '@navikt/sif-common-formik/lib/validation/validationUtils';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { handleDateRangeValidationError } from '../utils';\nimport { OpptjeningUtlandFormValues, OpptjeningUtland, OpptjeningAktivitet } from './types';\nimport utils from './opptjeningUtlandUtils';\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    opptjening?: OpptjeningUtland;\n    alleOpptjening?: OpptjeningUtland[];\n    onSubmit: (values: OpptjeningUtland) => void;\n    onCancel: () => void;\n}\n\nenum OpptjeningUtlandFormFields {\n    fom = 'fom',\n    tom = 'tom',\n    landkode = 'landkode',\n    opptjeningType = 'opptjeningType',\n    navn = 'navn',\n}\n\nexport const OpptjeningUtlandFormErrors = {\n    [OpptjeningUtlandFormFields.fom]: {\n        [ValidateDateError.dateHasNoValue]: 'opptjeningUtlandForm.fom.dateHasNoValue',\n        [ValidateDateRangeError.fromDateIsAfterToDate]: 'opptjeningUtlandForm.fom.fromDateIsAfterToDate',\n        [ValidateDateError.dateHasInvalidFormat]: 'opptjeningUtlandForm.fom.dateHasInvalidFormat',\n        [ValidateDateError.dateIsBeforeMin]: 'opptjeningUtlandForm.fom.dateIsBeforeMin',\n        [ValidateDateError.dateIsAfterMax]: 'opptjeningUtlandForm.fom.dateIsAfterMax',\n    },\n    [OpptjeningUtlandFormFields.tom]: {\n        [ValidateDateError.dateHasNoValue]: 'opptjeningUtlandForm.tom.dateHasNoValue',\n        [ValidateDateRangeError.toDateIsBeforeFromDate]: 'opptjeningUtlandForm.tom.toDateIsBeforeFromDate',\n        [ValidateDateError.dateHasInvalidFormat]: 'opptjeningUtlandForm.tom.dateHasInvalidFormat',\n        [ValidateDateError.dateIsBeforeMin]: 'opptjeningUtlandForm.tom.dateIsBeforeMin',\n        [ValidateDateError.dateIsAfterMax]: 'opptjeningUtlandForm.tom.dateIsAfterMax',\n    },\n    [OpptjeningUtlandFormFields.landkode]: {\n        [ValidateRequiredFieldError.noValue]: 'opptjeningUtlandForm.landkode.noValue',\n    },\n    [OpptjeningUtlandFormFields.opptjeningType]: {\n        [ValidateRequiredFieldError.noValue]: 'opptjeningUtlandForm.type.noValue',\n    },\n    [OpptjeningUtlandFormFields.navn]: {\n        [ValidateRequiredFieldError.noValue]: 'opptjeningUtlandForm.navn.noValue',\n    },\n};\n\nconst defaultFormValues: OpptjeningUtlandFormValues = {\n    fom: undefined,\n    tom: undefined,\n    landkode: undefined,\n    opptjeningType: undefined,\n    navn: undefined,\n};\n\nconst Form = getTypedFormComponents<OpptjeningUtlandFormFields, OpptjeningUtlandFormValues, ValidationError>();\n\nconst OpptjeningUtlandForm = ({ maxDate, minDate, opptjening, onSubmit, onCancel }: Props) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: Partial<OpptjeningUtlandFormValues>) => {\n        const opptjeningUtlandToSubmit = utils.mapFormValuesToOpptjeningUtland(formValues, opptjening?.id);\n        if (utils.isValidOpptjeningUtland(opptjeningUtlandToSubmit)) {\n            onSubmit({\n                ...opptjeningUtlandToSubmit,\n            });\n        } else {\n            throw new Error('OpptjeningUtlandForm: Formvalues is not a valid Opptjening Utland on submit.');\n        }\n    };\n\n    const initialValues = opptjening ? utils.mapOpptjeningUtlandToFormValues(opptjening) : defaultFormValues;\n\n    return (\n        <Form.FormikWrapper\n            initialValues={initialValues}\n            onSubmit={onFormikSubmit}\n            renderForm={(formik) => {\n                const {\n                    values: { fom, tom, opptjeningType },\n                } = formik;\n\n                const hasDateStringValues = hasValue(fom) && hasValue(tom);\n\n                return (\n                    <Form.Form\n                        includeButtons={true}\n                        onCancel={onCancel}\n                        formErrorHandler={getFormErrorHandler(intl, 'opptjeningUtlandForm')}>\n                        <Systemtittel tag=\"h1\">\n                            <FormattedMessage id=\"opptjeningUtland.form.tittel\" />\n                        </Systemtittel>\n                        <FormBlock>\n                            <Form.DateRangePicker\n                                legend={intlHelper(intl, 'opptjeningUtland.form.tidsperiode.spm')}\n                                fullscreenOverlay={true}\n                                minDate={minDate}\n                                maxDate={maxDate}\n                                fromInputProps={{\n                                    name: OpptjeningUtlandFormFields.fom,\n                                    label: intlHelper(intl, 'opptjeningUtland.form.tidsperiode.fraDato'),\n                                    validate: (value) => {\n                                        const error = getDateRangeValidator({\n                                            required: true,\n                                            min: minDate,\n                                            max: maxDate,\n                                            toDate: ISOStringToDate(tom),\n                                        }).validateFromDate(value);\n                                        return handleDateRangeValidationError(error, minDate, maxDate);\n                                    },\n                                }}\n                                toInputProps={{\n                                    name: OpptjeningUtlandFormFields.tom,\n                                    label: intlHelper(intl, 'opptjeningUtland.form.tidsperiode.tilDato'),\n                                    validate: (value) => {\n                                        const error = getDateRangeValidator({\n                                            required: true,\n                                            min: minDate,\n                                            max: maxDate,\n                                            fromDate: ISOStringToDate(fom),\n                                        }).validateToDate(value);\n                                        return handleDateRangeValidationError(error, minDate, maxDate);\n                                    },\n                                }}\n                            />\n                        </FormBlock>\n                        {hasDateStringValues && (\n                            <>\n                                <FormBlock>\n                                    <Form.CountrySelect\n                                        name={OpptjeningUtlandFormFields.landkode}\n                                        label={intlHelper(intl, 'opptjeningUtland.form.land.spm')}\n                                        validate={getRequiredFieldValidator()}\n                                        showOnlyEuAndEftaCountries={true}\n                                    />\n                                </FormBlock>\n                                <FormBlock>\n                                    <Form.RadioGroup\n                                        legend={intlHelper(intl, 'opptjeningUtland.form.opptjeningAktivitet.spm')}\n                                        name={OpptjeningUtlandFormFields.opptjeningType}\n                                        radios={Object.keys(OpptjeningAktivitet).map((opptjeningType) => ({\n                                            label: intlHelper(\n                                                intl,\n                                                `opptjeningUtland.form.opptjeningAktivitet.${opptjeningType}`\n                                            ),\n                                            value: opptjeningType,\n                                        }))}\n                                        validate={getRequiredFieldValidator()}\n                                        checked={opptjeningType}\n                                    />\n                                </FormBlock>\n                                {opptjeningType && (\n                                    <FormBlock>\n                                        <Form.Input\n                                            label={intlHelper(\n                                                intl,\n                                                `opptjeningUtland.form.${\n                                                    opptjeningType === OpptjeningAktivitet.ARBEIDSTAKER\n                                                        ? 'arbeidsgiversNavn'\n                                                        : 'oppdragsgiverNavn'\n                                                }`\n                                            )}\n                                            name={OpptjeningUtlandFormFields.navn}\n                                            validate={getRequiredFieldValidator()}\n                                            bredde=\"XL\"\n                                        />\n                                    </FormBlock>\n                                )}\n                            </>\n                        )}\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default OpptjeningUtlandForm;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { getCountryName } from '@navikt/sif-common-formik';\nimport { OpptjeningUtland } from './types';\nimport './opptjeningUtlandList.less';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\n\ninterface Props {\n    utenlandsopphold: OpptjeningUtland[];\n    onEdit?: (opphold: OpptjeningUtland) => void;\n    onDelete?: (opphold: OpptjeningUtland) => void;\n}\n\nconst bem = bemUtils('opptjeningUtlandList');\n\nconst OpptjeningUtlandList = ({ utenlandsopphold, onDelete, onEdit }: Props) => {\n    const intl = useIntl();\n    const renderOpptjeningUtlandLabel = (opptjening: OpptjeningUtland): React.ReactNode => {\n        const landNavn = getCountryName(opptjening.landkode, intl.locale);\n        const arbeidsgiverType = intlHelper(\n            intl,\n            `opptjeningUtland.form.opptjeningAktivitet.${opptjening.opptjeningType}`\n        ).toLocaleLowerCase();\n        return (\n            <div className={bem.element('label')}>\n                <span className={bem.element('land')}>\n                    {onEdit && (\n                        <ActionLink\n                            onClick={() =>\n                                onEdit(opptjening)\n                            }>{`Jobbet i ${landNavn} som ${arbeidsgiverType} hos ${opptjening.navn}`}</ActionLink>\n                    )}\n                    {!onEdit && <span>{`${landNavn} ${arbeidsgiverType} ${opptjening.navn}`}</span>}\n                </span>\n                <span className={bem.element('dato')}>\n                    {prettifyDateExtended(opptjening.fom)} - {prettifyDateExtended(opptjening.tom)}\n                </span>\n            </div>\n        );\n    };\n\n    return (\n        <ItemList<OpptjeningUtland>\n            getItemId={(opptjening) => opptjening.id}\n            getItemTitle={(opptjening) => getCountryName(opptjening.landkode, intl.locale)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderOpptjeningUtlandLabel}\n            items={utenlandsopphold}\n        />\n    );\n};\n\nexport default OpptjeningUtlandList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList,\n    ModalFormAndListLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport { OpptjeningUtland } from './types';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport OpptjeningUtlandForm from './OpptjeningUtlandForm';\nimport OpptjeningUtlandList from './OpptjeningUtlandList';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames, ValidationError> {\n    name: FieldNames;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction OpptjeningUtlandListAndDialog<FieldNames>({ name, minDate, maxDate, validate, labels }: Props<FieldNames>) {\n    return (\n        <FormikModalFormAndList<FieldNames, OpptjeningUtland, ValidationError>\n            name={name}\n            labels={labels}\n            validate={validate}\n            dialogWidth=\"narrow\"\n            sortFunc={sortItemsByFom}\n            formRenderer={({ onSubmit, onCancel, item, allItems }) => (\n                <OpptjeningUtlandForm\n                    opptjening={item}\n                    alleOpptjening={allItems}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    onSubmit={onSubmit}\n                    onCancel={onCancel}\n                />\n            )}\n            listRenderer={({ items, onEdit, onDelete }) => (\n                <OpptjeningUtlandList utenlandsopphold={items} onEdit={onEdit} onDelete={onDelete} />\n            )}\n        />\n    );\n}\n\nexport default OpptjeningUtlandListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { date1YearAgo, date1YearFromNow } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport flat from 'flat';\nimport Panel from 'nav-frontend-paneler';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\nimport { OpptjeningUtland } from '../../../forms/opptjening-utland';\nimport OpptjeningUtlandListAndDialog from '../../../forms/opptjening-utland/OpptjeningUtlandListAndDialog';\nimport OpptjeningUtlandForm, {\n    OpptjeningUtlandFormErrors,\n} from '../../../forms/opptjening-utland/OpptjeningUtlandForm';\nimport opptjeningUtlandMessages from '../../../forms/opptjening-utland/opptjeningUtlandMessages';\n\nenum FormField {\n    'opptjeningUtland' = 'opptjeningUtland',\n}\n\ninterface FormValues {\n    [FormField.opptjeningUtland]: OpptjeningUtland[];\n}\nconst initialValues: FormValues = {\n    opptjeningUtland: [],\n};\n\nconst OpptjeningUtlandExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<OpptjeningUtland> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues, ValidationError>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                formErrorHandler={getFormErrorHandler(intl)}>\n                                <OpptjeningUtlandListAndDialog\n                                    minDate={date1YearAgo}\n                                    maxDate={date1YearFromNow}\n                                    name={FormField.opptjeningUtland}\n                                    validate={getListValidator({ required: true })}\n                                    labels={{\n                                        addLabel: 'Legg til jobb i annet EØS-land',\n                                        listTitle: 'Registrerte jobb i annet EØS-land',\n                                        modalTitle: 'Jobb i annet EØS-land',\n                                        emptyListText: 'Ingen jobb i annet EØS-land er lagt til',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrorIntlKeys={flat(OpptjeningUtlandFormErrors)}\n                    intlMessages={opptjeningUtlandMessages}\n                />\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <OpptjeningUtlandForm\n                        opptjening={initialValues.opptjeningUtland[0]}\n                        minDate={date1YearAgo}\n                        maxDate={date1YearFromNow}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                    />\n                    <SubmitPreview values={singleFormValues} />\n                </Panel>\n            </DialogFormWrapper>\n\n            <MessagesPreview messages={opptjeningUtlandMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default OpptjeningUtlandExample;\n","import { ApiStringDate } from '@navikt/sif-common-core/lib/types/ApiStringDate';\nimport { YesOrNo } from '@navikt/sif-common-core/lib/types/YesOrNo';\n\nexport enum Næringstype {\n    'FISKE' = 'FISKE',\n    'JORDBRUK_SKOGBRUK' = 'JORDBRUK_SKOGBRUK',\n    'DAGMAMMA' = 'DAGMAMMA',\n    'ANNEN' = 'ANNEN',\n}\n\nexport enum VirksomhetFormField {\n    'næringstype' = 'næringstype',\n    'fiskerErPåBladB' = 'fiskerErPåBladB',\n    'fom' = 'fom',\n    'tom' = 'tom',\n    'næringsinntekt' = 'næringsinntekt',\n    'erPågående' = 'erPågående',\n    'navnPåVirksomheten' = 'navnPåVirksomheten',\n    'organisasjonsnummer' = 'organisasjonsnummer',\n    'registrertINorge' = 'registrertINorge',\n    'registrertILand' = 'registrertILand',\n    'harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene' = 'harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene',\n    'blittYrkesaktivDato' = 'blittYrkesaktivDato',\n    'hattVarigEndringAvNæringsinntektSiste4Kalenderår' = 'hattVarigEndringAvNæringsinntektSiste4Kalenderår',\n    'varigEndringINæringsinntekt_dato' = 'varigEndringINæringsinntekt_dato',\n    'varigEndringINæringsinntekt_inntektEtterEndring' = 'varigEndringINæringsinntekt_inntektEtterEndring',\n    'varigEndringINæringsinntekt_forklaring' = 'varigEndringINæringsinntekt_forklaring',\n    'endretNæringsinntektInformasjon' = 'endretNæringsinntektInformasjon',\n    'harRegnskapsfører' = 'harRegnskapsfører',\n    'regnskapsfører' = 'regnskapsfører',\n    'regnskapsfører_navn' = 'regnskapsfører_navn',\n    'regnskapsfører_telefon' = 'regnskapsfører_telefon',\n}\n\nexport interface Virksomhet {\n    id?: string;\n    [VirksomhetFormField.næringstype]: Næringstype;\n    [VirksomhetFormField.fiskerErPåBladB]?: YesOrNo;\n    [VirksomhetFormField.fom]: Date;\n    [VirksomhetFormField.tom]?: Date;\n    [VirksomhetFormField.næringsinntekt]?: number;\n    [VirksomhetFormField.erPågående]?: boolean;\n    [VirksomhetFormField.navnPåVirksomheten]: string;\n    [VirksomhetFormField.organisasjonsnummer]?: string;\n    [VirksomhetFormField.registrertINorge]: YesOrNo;\n    [VirksomhetFormField.registrertILand]?: string;\n    [VirksomhetFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene]?: YesOrNo;\n    [VirksomhetFormField.blittYrkesaktivDato]?: Date;\n    [VirksomhetFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår]?: YesOrNo;\n    [VirksomhetFormField.varigEndringINæringsinntekt_dato]?: Date;\n    [VirksomhetFormField.varigEndringINæringsinntekt_inntektEtterEndring]?: number;\n    [VirksomhetFormField.varigEndringINæringsinntekt_forklaring]?: string;\n    [VirksomhetFormField.harRegnskapsfører]: YesOrNo;\n    [VirksomhetFormField.regnskapsfører_navn]?: string;\n    [VirksomhetFormField.regnskapsfører_telefon]?: string;\n}\nexport type VirksomhetFormValues = Partial<\n    Omit<\n        Virksomhet,\n        | 'fom'\n        | 'tom'\n        | 'blittYrkesaktivDato'\n        | 'næringsinntekt'\n        | 'varigEndringINæringsinntekt_dato'\n        | 'varigEndringINæringsinntekt_inntektEtterEndring'\n    > & {\n        [VirksomhetFormField.fom]: string;\n        [VirksomhetFormField.tom]?: string;\n        [VirksomhetFormField.blittYrkesaktivDato]?: string;\n        [VirksomhetFormField.næringsinntekt]?: string;\n        [VirksomhetFormField.varigEndringINæringsinntekt_dato]?: string;\n        [VirksomhetFormField.varigEndringINæringsinntekt_inntektEtterEndring]?: string;\n    }\n>;\n\nexport const isVirksomhet = (virksomhet: Partial<Virksomhet>): virksomhet is Virksomhet => {\n    return virksomhet !== undefined;\n};\n\nexport interface VirksomhetApiData {\n    næringstyper: Næringstype[];\n    fiskerErPåBladB?: boolean;\n    fraOgMed: ApiStringDate;\n    tilOgMed?: ApiStringDate | null;\n    erNyoppstartet: boolean;\n    næringsinntekt?: number;\n    navnPåVirksomheten: string;\n    organisasjonsnummer?: string;\n    registrertINorge: boolean;\n    registrertIUtlandet?: {\n        landkode: string;\n        landnavn: string;\n    };\n    yrkesaktivSisteTreFerdigliknedeÅrene?: {\n        oppstartsdato: ApiStringDate;\n    };\n    varigEndring?: {\n        dato: ApiStringDate;\n        inntektEtterEndring: number;\n        forklaring: string;\n    };\n    regnskapsfører?: {\n        navn: string;\n        telefon: string;\n    };\n    harFlereAktiveVirksomheter: boolean;\n}\n","/* eslint-disable react/display-name */\nimport React, { useState } from 'react';\nimport Tabs from 'nav-frontend-tabs';\nimport 'nav-frontend-tabs-style';\nimport PageIntro from '../../components/page-intro/PageIntro';\nimport { RouteConfig } from '../../config/routeConfig';\nimport BostedUtlandExample from './BostedUtlandExample';\nimport FerieuttakExample from './FerieuttakExample';\nimport FosterbarnExample from './FosterbarnExample';\nimport TidsperiodeExample from './TidsperiodeExample';\nimport UtenlandsoppholdIPeriodenExample from './UtenlandsoppholdExample';\nimport FraværExample from './FraværExample';\nimport AnnetBarnExample from './AnnetBarnExample';\nimport OpptjeningUtlandExample from './OpptjeningUtlandExample';\n\nconst tabRoutes: RouteConfig[] = [\n    {\n        path: 'fravær',\n        renderContent: () => <FraværExample />,\n        title: 'Fravær',\n    },\n    {\n        path: 'tidsrom',\n        renderContent: () => <TidsperiodeExample />,\n        title: 'Tidsperiode',\n    },\n    {\n        path: 'utenlandsopphold',\n        renderContent: () => <UtenlandsoppholdIPeriodenExample />,\n        title: 'Utenlandsopphold i perioden',\n    },\n    {\n        path: 'bosted-utland',\n        renderContent: () => <BostedUtlandExample />,\n        title: 'Bosted utland',\n    },\n    {\n        path: 'ferieuttak',\n        renderContent: () => <FerieuttakExample />,\n        title: 'Ferieuttak i perioden',\n    },\n    {\n        path: 'fosterbarn',\n        renderContent: () => <FosterbarnExample />,\n        title: 'Fosterbarn',\n    },\n    {\n        path: 'annetbarn',\n        renderContent: () => <AnnetBarnExample />,\n        title: 'Annet Barn',\n    },\n    {\n        path: 'opptjening-utland',\n        renderContent: () => <OpptjeningUtlandExample />,\n        title: 'Opptjening i utlandet',\n    },\n];\n\nconst DialogForms = () => {\n    const [path, setPath] = useState(tabRoutes[0].path);\n    const activeRoute = tabRoutes.find((r) => {\n        return r.path === path;\n    });\n    return (\n        <>\n            <PageIntro title=\"Dialogskjema\">\n                Skjema for ferieuttak i perioden, utenlandsopphold i perioden og bosted i utlandet.\n            </PageIntro>\n            <Tabs\n                onChange={(evt, idx) => setPath(tabRoutes[idx].path)}\n                tabs={tabRoutes.map((r) => ({\n                    label: r.title,\n                    active: r.path === path ? 'true' : 'false',\n                }))}\n            />\n            {activeRoute && activeRoute.renderContent()}\n        </>\n    );\n};\n\nexport default DialogForms;\n","import { YesOrNo } from '@navikt/sif-common-core/lib/types/YesOrNo';\nimport { date4YearsAgo } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { getNumberFromStringInput } from '@navikt/sif-common-formik/lib/validation/validationUtils';\nimport dayjs from 'dayjs';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Næringstype, Virksomhet, VirksomhetFormValues } from './types';\n\nexport const harFiskerNæringstype = (næringstyper: Næringstype[]): boolean =>\n    næringstyper.find((n) => n === Næringstype.FISKE) !== undefined;\n\nexport const erFiskerNæringstype = (næringstype?: Næringstype): boolean =>\n    næringstype ? næringstype === Næringstype.FISKE : false;\n\nexport const erVirksomhetRegnetSomNyoppstartet = (oppstartsdato: Date) => {\n    return dayjs(oppstartsdato).startOf('day').isAfter(date4YearsAgo);\n};\n\nexport const cleanupVirksomhetFormValues = (formValues: VirksomhetFormValues): VirksomhetFormValues => {\n    const values: VirksomhetFormValues = { ...formValues };\n\n    if (erFiskerNæringstype(values.næringstype) === false) {\n        values.fiskerErPåBladB = YesOrNo.UNANSWERED;\n    }\n    const fomDate = ISOStringToDate(values.fom);\n    const tomDate = ISOStringToDate(values.tom);\n\n    if (tomDate) {\n        values.erPågående = undefined;\n    }\n\n    if (fomDate && erVirksomhetRegnetSomNyoppstartet(fomDate)) {\n        values.hattVarigEndringAvNæringsinntektSiste4Kalenderår = YesOrNo.UNANSWERED;\n    }\n    if (fomDate && erVirksomhetRegnetSomNyoppstartet(fomDate) === false) {\n        values.næringsinntekt = undefined;\n        values.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene = YesOrNo.UNANSWERED;\n    }\n    if (values.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene !== YesOrNo.YES) {\n        values.blittYrkesaktivDato = undefined;\n    }\n    if (values.hattVarigEndringAvNæringsinntektSiste4Kalenderår !== YesOrNo.YES) {\n        values.varigEndringINæringsinntekt_dato = undefined;\n        values.varigEndringINæringsinntekt_forklaring = undefined;\n        values.varigEndringINæringsinntekt_inntektEtterEndring = undefined;\n    }\n    if (values.registrertINorge === YesOrNo.NO) {\n        values.organisasjonsnummer = undefined;\n        values.harRegnskapsfører = YesOrNo.UNANSWERED;\n        values.regnskapsfører_telefon = undefined;\n    }\n    if (values.registrertINorge === YesOrNo.YES) {\n        values.registrertILand = undefined;\n    }\n    if (values.harRegnskapsfører !== YesOrNo.YES) {\n        values.regnskapsfører_navn = undefined;\n        values.regnskapsfører_telefon = undefined;\n    }\n    return values;\n};\n\nexport const mapFormValuesToVirksomhet = (\n    formValues: VirksomhetFormValues,\n    id: string | undefined\n): Partial<Virksomhet> => {\n    const næringsinntekt = getNumberFromStringInput(formValues.næringsinntekt);\n    const inntektEtterVarigEndring = getNumberFromStringInput(\n        formValues.varigEndringINæringsinntekt_inntektEtterEndring\n    );\n\n    return {\n        ...formValues,\n        id: id || guid(),\n        fom: ISOStringToDate(formValues.fom),\n        tom: ISOStringToDate(formValues.tom),\n        blittYrkesaktivDato: ISOStringToDate(formValues.blittYrkesaktivDato),\n        næringsinntekt,\n        varigEndringINæringsinntekt_dato: ISOStringToDate(formValues.varigEndringINæringsinntekt_dato),\n        varigEndringINæringsinntekt_inntektEtterEndring: inntektEtterVarigEndring,\n    };\n};\n\nexport const mapVirksomhetToFormValues = (virksomhet: Virksomhet): VirksomhetFormValues => {\n    return {\n        ...virksomhet,\n        fom: dateToISOString(virksomhet.fom),\n        tom: dateToISOString(virksomhet.tom),\n        blittYrkesaktivDato: dateToISOString(virksomhet.blittYrkesaktivDato),\n        næringsinntekt: virksomhet.næringsinntekt ? `${virksomhet.næringsinntekt}` : undefined,\n        varigEndringINæringsinntekt_dato: dateToISOString(virksomhet.varigEndringINæringsinntekt_dato),\n        varigEndringINæringsinntekt_inntektEtterEndring: virksomhet.varigEndringINæringsinntekt_inntektEtterEndring\n            ? `${virksomhet.varigEndringINæringsinntekt_inntektEtterEndring}`\n            : undefined,\n    };\n};\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport CounsellorPanel from '@navikt/sif-common-core/lib/components/counsellor-panel/CounsellorPanel';\nimport ExpandableInfo from '@navikt/sif-common-core/lib/components/expandable-content/ExpandableInfo';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport ResponsivePanel from '@navikt/sif-common-core/lib/components/responsive-panel/ResponsivePanel';\nimport { date3YearsAgo, date4YearsAgo, dateToday, prettifyDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport {\n    getNumberFromNumberInputValue,\n    getTypedFormComponents,\n    ISOStringToDate,\n    YesOrNo,\n} from '@navikt/sif-common-formik/lib';\nimport {\n    getDateRangeValidator,\n    getDateValidator,\n    getNumberValidator,\n    getOrgNumberValidator,\n    getRequiredFieldValidator,\n    getStringValidator,\n    getYesOrNoValidator,\n    ValidateDateError,\n    ValidateDateRangeError,\n    ValidateNumberError,\n    ValidateOrgNumberError,\n    ValidateRequiredFieldError,\n    ValidateStringError,\n    ValidateYesOrNoError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport { FormikProps } from 'formik';\nimport { Systemtittel, Undertittel } from 'nav-frontend-typografi';\nimport { isVirksomhet, Næringstype, Virksomhet, VirksomhetFormField, VirksomhetFormValues } from './types';\nimport {\n    cleanupVirksomhetFormValues,\n    erVirksomhetRegnetSomNyoppstartet,\n    erFiskerNæringstype,\n    mapFormValuesToVirksomhet,\n    mapVirksomhetToFormValues,\n} from './virksomhetUtils';\nimport { handleDateRangeValidationError } from '../utils';\n\ninterface Props {\n    virksomhet?: Virksomhet;\n    skipOrgNumValidation?: boolean;\n    harFlereVirksomheter?: boolean;\n    onSubmit: (oppdrag: Virksomhet) => void;\n    onCancel: () => void;\n}\n\nconst MAKS_INNTEKT = 999999999;\n\nexport const VirksomhetFormErrors = {\n    [VirksomhetFormField.næringstype]: {\n        [ValidateRequiredFieldError.noValue]: 'virksomhetForm.næringstype.noValue',\n    },\n    [VirksomhetFormField.fiskerErPåBladB]: {\n        [ValidateYesOrNoError.yesOrNoIsUnanswered]: 'virksomhetForm.fiskerErPåBladB.yesOrNoIsUnanswered',\n    },\n    [VirksomhetFormField.navnPåVirksomheten]: {\n        [ValidateStringError.stringHasNoValue]: 'virksomhetForm.navnPåVirksomheten.stringHasNoValue',\n    },\n    [VirksomhetFormField.registrertINorge]: {\n        [ValidateYesOrNoError.yesOrNoIsUnanswered]: 'virksomhetForm.registrertINorge.yesOrNoIsUnanswered',\n    },\n    [VirksomhetFormField.registrertILand]: {\n        [ValidateRequiredFieldError.noValue]: 'virksomhetForm.registrertILand.noValue',\n    },\n    [VirksomhetFormField.organisasjonsnummer]: {\n        [ValidateOrgNumberError.orgNumberHasInvalidFormat]:\n            'virksomhetForm.organisasjonsnummer.orgNumberHasInvalidFormat',\n    },\n    [VirksomhetFormField.fom]: {\n        [ValidateDateError.dateHasNoValue]: 'virksomhetForm.fom.dateHasNoValue',\n        [ValidateDateError.dateIsAfterMax]: 'virksomhetForm.fom.dateIsAfterMax',\n        [ValidateDateError.dateHasInvalidFormat]: 'virksomhetForm.fom.dateHasInvalidFormat',\n        [ValidateDateRangeError.fromDateIsAfterToDate]: 'virksomhetForm.fom.fromDateIsAfterToDate',\n    },\n    [VirksomhetFormField.tom]: {\n        [ValidateDateError.dateHasNoValue]: 'virksomhetForm.tom.dateHasNoValue',\n        [ValidateDateError.dateIsBeforeMin]: 'virksomhetForm.tom.dateIsBeforeMin',\n        [ValidateDateError.dateIsAfterMax]: 'virksomhetForm.tom.dateIsAfterMax',\n        [ValidateDateError.dateHasInvalidFormat]: 'virksomhetForm.tom.dateHasInvalidFormat',\n        [ValidateDateRangeError.toDateIsBeforeFromDate]: 'virksomhetForm.tom.toDateIsBeforeFromDate',\n    },\n    [VirksomhetFormField.næringsinntekt]: {\n        [ValidateNumberError.numberHasInvalidFormat]: 'virksomhetForm.næringsinntekt.numberHasInvalidFormat',\n        [ValidateNumberError.numberIsTooSmall]: 'virksomhetForm.næringsinntekt.numberIsTooSmall',\n        [ValidateNumberError.numberIsTooLarge]: 'virksomhetForm.næringsinntekt.numberIsTooLarge',\n    },\n    [VirksomhetFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene]: {\n        [ValidateYesOrNoError.yesOrNoIsUnanswered]:\n            'virksomhetForm.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene.yesOrNoIsUnanswered',\n    },\n    [VirksomhetFormField.blittYrkesaktivDato]: {\n        [ValidateDateError.dateHasNoValue]: 'virksomhetForm.blittYrkesaktivDato.dateHasNoValue',\n        [ValidateDateError.dateHasInvalidFormat]: 'virksomhetForm.blittYrkesaktivDato.dateHasInvalidFormat',\n        [ValidateDateError.dateIsAfterMax]: 'virksomhetForm.blittYrkesaktivDato.dateIsAfterMax',\n        [ValidateDateError.dateIsBeforeMin]: 'virksomhetForm.blittYrkesaktivDato.dateIsBeforeMin',\n    },\n    [VirksomhetFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår]: {\n        [ValidateYesOrNoError.yesOrNoIsUnanswered]:\n            'virksomhetForm.hattVarigEndringAvNæringsinntektSiste4Kalenderår.yesOrNoIsUnanswered',\n    },\n    [VirksomhetFormField.varigEndringINæringsinntekt_dato]: {\n        [ValidateDateError.dateHasNoValue]: 'virksomhetForm.varigEndringINæringsinntekt_dato.dateHasNoValue',\n        [ValidateDateError.dateHasInvalidFormat]:\n            'virksomhetForm.varigEndringINæringsinntekt_dato.dateHasInvalidFormat',\n        [ValidateDateError.dateIsAfterMax]: 'virksomhetForm.varigEndringINæringsinntekt_dato.dateIsAfterMax',\n        [ValidateDateError.dateIsBeforeMin]: 'virksomhetForm.varigEndringINæringsinntekt_dato.dateIsBeforeMin',\n    },\n    [VirksomhetFormField.varigEndringINæringsinntekt_inntektEtterEndring]: {\n        [ValidateNumberError.numberHasNoValue]:\n            'virksomhetForm.varigEndringINæringsinntekt_inntektEtterEndring.numberHasNoValue',\n        [ValidateNumberError.numberHasInvalidFormat]:\n            'virksomhetForm.varigEndringINæringsinntekt_inntektEtterEndring.numberHasInvalidFormat',\n        [ValidateNumberError.numberIsTooLarge]:\n            'virksomhetForm.varigEndringINæringsinntekt_inntektEtterEndring.numberIsTooLarge',\n        [ValidateNumberError.numberIsTooSmall]:\n            'virksomhetForm.varigEndringINæringsinntekt_inntektEtterEndring.numberIsTooSmall',\n    },\n    [VirksomhetFormField.varigEndringINæringsinntekt_forklaring]: {\n        [ValidateStringError.stringHasNoValue]:\n            'virksomhetForm.varigEndringINæringsinntekt_forklaring.stringHasNoValue',\n        [ValidateStringError.stringIsTooLong]: 'virksomhetForm.varigEndringINæringsinntekt_forklaring.stringIsTooLong',\n        [ValidateStringError.stringIsTooShort]:\n            'virksomhetForm.varigEndringINæringsinntekt_forklaring.stringIsTooShort',\n    },\n    [VirksomhetFormField.harRegnskapsfører]: {\n        [ValidateYesOrNoError.yesOrNoIsUnanswered]: 'virksomhetForm.harRegnskapsfører.yesOrNoIsUnanswered',\n    },\n    [VirksomhetFormField.regnskapsfører_navn]: {\n        [ValidateStringError.stringHasNoValue]: 'virksomhetForm.regnskapsfører_navn.stringHasNoValue',\n        [ValidateStringError.stringIsTooLong]: 'virksomhetForm.regnskapsfører_navn.stringIsTooLong',\n        [ValidateStringError.stringIsTooShort]: 'virksomhetForm.regnskapsfører_navn.stringIsTooShort',\n    },\n    [VirksomhetFormField.regnskapsfører_telefon]: {\n        [ValidateStringError.stringHasNoValue]: 'virksomhetForm.regnskapsfører_telefon.stringHasNoValue',\n        [ValidateStringError.stringIsTooLong]: 'virksomhetForm.regnskapsfører_telefon.stringIsTooLong',\n        [ValidateStringError.stringIsTooShort]: 'virksomhetForm.regnskapsfører_telefon.stringIsTooShort',\n    },\n};\n\nconst Form = getTypedFormComponents<VirksomhetFormField, VirksomhetFormValues, ValidationError>();\n\nconst visNæringsinntekt = (values: VirksomhetFormValues): boolean => {\n    const fomDate = ISOStringToDate(values.fom);\n    return fomDate !== undefined && erVirksomhetRegnetSomNyoppstartet(fomDate);\n};\n\nconst ensureValidNæringsinntekt = (values: VirksomhetFormValues): number | undefined => {\n    if (visNæringsinntekt(values)) {\n        return getNumberFromNumberInputValue(values.næringsinntekt);\n    }\n    return undefined;\n};\n\nconst VirksomhetForm = ({ virksomhet, harFlereVirksomheter, onSubmit, onCancel, skipOrgNumValidation }: Props) => {\n    const intl = useIntl();\n    const getText = (key: string, value?: any): string => intlHelper(intl, `${key}`, value);\n\n    const onFormikSubmit = (values: VirksomhetFormValues) => {\n        const virksomhetToSubmit = mapFormValuesToVirksomhet(values, virksomhet?.id);\n        if (isVirksomhet(virksomhetToSubmit)) {\n            onSubmit({\n                ...virksomhetToSubmit,\n                næringsinntekt: ensureValidNæringsinntekt(values),\n            });\n        } else {\n            throw new Error('VirksomhetForm: Formvalues is not a valid Virksomhet on submit.');\n        }\n    };\n\n    return (\n        <Form.FormikWrapper\n            initialValues={virksomhet ? mapVirksomhetToFormValues(virksomhet) : {}}\n            onSubmit={onFormikSubmit}\n            renderForm={(formik: FormikProps<VirksomhetFormValues>) => {\n                const { values, setFieldValue } = formik;\n                const { navnPåVirksomheten = 'virksomheten', næringstype } = values;\n                const fomDate = ISOStringToDate(values.fom);\n                const tomDate = ISOStringToDate(values.tom);\n                return (\n                    <Form.Form\n                        includeValidationSummary={true}\n                        onCancel={onCancel}\n                        formErrorHandler={getFormErrorHandler(intl, 'virksomhetForm')}\n                        cleanup={cleanupVirksomhetFormValues}>\n                        <Box padBottom=\"l\">\n                            <Systemtittel tag=\"h1\">\n                                {harFlereVirksomheter\n                                    ? getText('sifForms.virksomhet.form_title.flere')\n                                    : getText('sifForms.virksomhet.form_title')}\n                            </Systemtittel>\n                        </Box>\n\n                        <Form.RadioPanelGroup\n                            name={VirksomhetFormField.næringstype}\n                            legend={getText('sifForms.virksomhet.hvilken_type_virksomhet')}\n                            radios={[\n                                {\n                                    value: Næringstype.FISKE,\n                                    label: getText(`sifForms.virksomhet.næringstype_${Næringstype.FISKE}`),\n                                },\n                                {\n                                    value: Næringstype.JORDBRUK_SKOGBRUK,\n                                    label: getText(`sifForms.virksomhet.næringstype_${Næringstype.JORDBRUK_SKOGBRUK}`),\n                                },\n                                {\n                                    value: Næringstype.DAGMAMMA,\n                                    label: getText(`sifForms.virksomhet.næringstype_${Næringstype.DAGMAMMA}`),\n                                },\n                                {\n                                    value: Næringstype.ANNEN,\n                                    label: getText(`sifForms.virksomhet.næringstype_${Næringstype.ANNEN}`),\n                                },\n                            ]}\n                            validate={getRequiredFieldValidator()}\n                        />\n\n                        {erFiskerNæringstype(næringstype) && (\n                            <Box margin=\"xl\">\n                                <Form.YesOrNoQuestion\n                                    name={VirksomhetFormField.fiskerErPåBladB}\n                                    legend={getText('sifForms.virksomhet.fisker_blad_b')}\n                                    validate={getYesOrNoValidator()}\n                                />\n                            </Box>\n                        )}\n\n                        <Box margin=\"xl\">\n                            <Form.Input\n                                name={VirksomhetFormField.navnPåVirksomheten}\n                                label={getText('sifForms.virksomhet.hva_heter_virksomheten')}\n                                validate={getStringValidator({ required: true })}\n                                maxLength={50}\n                            />\n                        </Box>\n\n                        <Box margin=\"xl\">\n                            <Form.YesOrNoQuestion\n                                name={VirksomhetFormField.registrertINorge}\n                                legend={getText('sifForms.virksomhet.registert_i_norge', { navnPåVirksomheten })}\n                                validate={getYesOrNoValidator()}\n                                description={\n                                    erFiskerNæringstype(næringstype) ? (\n                                        <ExpandableInfo\n                                            title={intlHelper(intl, 'sifForms.virksomhet.veileder_fisker.tittel')}>\n                                            <FormattedMessage\n                                                id=\"sifForms.virksomhet.veileder_fisker\"\n                                                values={{ navnPåVirksomheten }}\n                                            />\n                                        </ExpandableInfo>\n                                    ) : undefined\n                                }\n                            />\n                        </Box>\n\n                        {values.registrertINorge === YesOrNo.NO && (\n                            <Box margin=\"xl\">\n                                <Form.CountrySelect\n                                    name={VirksomhetFormField.registrertILand}\n                                    label={getText('sifForms.virksomhet.registert_i_hvilket_land', {\n                                        navnPåVirksomheten,\n                                    })}\n                                    validate={getRequiredFieldValidator()}\n                                    useAlpha3Code={true}\n                                />\n                            </Box>\n                        )}\n\n                        {values.registrertINorge === YesOrNo.YES && (\n                            <Box margin=\"xl\">\n                                <Form.Input\n                                    name={VirksomhetFormField.organisasjonsnummer}\n                                    label={getText('sifForms.virksomhet.organisasjonsnummer')}\n                                    style={{ maxWidth: '10rem' }}\n                                    maxLength={9}\n                                    validate={\n                                        skipOrgNumValidation ? undefined : getOrgNumberValidator({ required: true })\n                                    }\n                                />\n                            </Box>\n                        )}\n\n                        {(values.registrertINorge === YesOrNo.YES || values.registrertINorge === YesOrNo.NO) && (\n                            <Box margin=\"xl\">\n                                <Form.DateRangePicker\n                                    legend={getText('sifForms.virksomhet.startdato', { navnPåVirksomheten })}\n                                    showYearSelector={true}\n                                    maxDate={dateToday}\n                                    fromInputProps={{\n                                        label: getText('sifForms.virksomhet.kalender_fom'),\n                                        name: VirksomhetFormField.fom,\n                                        validate: (value) => {\n                                            const error = getDateRangeValidator({\n                                                required: true,\n                                                max: dateToday,\n                                                toDate: tomDate,\n                                            }).validateFromDate(value);\n                                            if (error === ValidateDateError.dateIsAfterMax) {\n                                                return {\n                                                    key: error,\n                                                    values: { dato: prettifyDate(dateToday) },\n                                                };\n                                            }\n                                            return error;\n                                        },\n                                    }}\n                                    toInputProps={{\n                                        label: getText('sifForms.virksomhet.kalender_tom'),\n                                        name: VirksomhetFormField.tom,\n                                        disabled: values.erPågående === true,\n                                        validate:\n                                            values.erPågående === true\n                                                ? undefined\n                                                : (value) => {\n                                                      const error = getDateRangeValidator({\n                                                          required: true,\n                                                          max: dateToday,\n                                                          fromDate: fomDate,\n                                                      }).validateToDate(value);\n                                                      return handleDateRangeValidationError(\n                                                          error,\n                                                          undefined,\n                                                          dateToday\n                                                      );\n                                                  },\n                                    }}\n                                />\n                                <Form.Checkbox\n                                    label={getText('sifForms.virksomhet.kalender_pågående')}\n                                    name={VirksomhetFormField.erPågående}\n                                    afterOnChange={(checked) => {\n                                        if (checked) {\n                                            setFieldValue(VirksomhetFormField.tom, undefined);\n                                        }\n                                    }}\n                                />\n                            </Box>\n                        )}\n\n                        {fomDate && (\n                            <>\n                                {harFlereVirksomheter && (\n                                    <Box margin=\"xxl\">\n                                        {erVirksomhetRegnetSomNyoppstartet(fomDate) ? (\n                                            <>\n                                                <Undertittel>\n                                                    {getText(\n                                                        'sifForms.virksomhet.nyoppstartet.næringsinntektFlere.header'\n                                                    )}\n                                                </Undertittel>\n                                                <p>\n                                                    {getText(\n                                                        'sifForms.virksomhet.nyoppstartet.næringsinntektFlere.info'\n                                                    )}\n                                                </p>\n                                            </>\n                                        ) : (\n                                            <>\n                                                <Undertittel>\n                                                    {getText(\n                                                        'sifForms.virksomhet.ikkeNyoppstartet.næringsinntektFlere.header'\n                                                    )}\n                                                </Undertittel>\n                                                <p>\n                                                    {getText(\n                                                        'sifForms.virksomhet.ikkeNyoppstartet.næringsinntektFlere.info'\n                                                    )}\n                                                </p>\n                                            </>\n                                        )}\n                                    </Box>\n                                )}\n\n                                {/* Nyoppstartet  */}\n                                {erVirksomhetRegnetSomNyoppstartet(fomDate) && (\n                                    <>\n                                        <Box margin=\"xl\">\n                                            <Form.NumberInput\n                                                name={VirksomhetFormField.næringsinntekt}\n                                                label={\n                                                    harFlereVirksomheter\n                                                        ? getText(\n                                                              'sifForms.virksomhet.næringsinntekt.flereVirksomheter.spm'\n                                                          )\n                                                        : getText('sifForms.virksomhet.næringsinntekt.enVirksomhet.spm')\n                                                }\n                                                maxLength={10}\n                                                style={{ maxWidth: '10rem' }}\n                                                validate={(value) => {\n                                                    const error = getNumberValidator({\n                                                        required: true,\n                                                        min: 0,\n                                                        max: MAKS_INNTEKT,\n                                                        allowDecimals: false,\n                                                    })(value);\n                                                    return error\n                                                        ? {\n                                                              key: error,\n                                                              values: {\n                                                                  navn: navnPåVirksomheten,\n                                                                  maks: MAKS_INNTEKT,\n                                                                  min: 0,\n                                                              },\n                                                          }\n                                                        : undefined;\n                                                }}\n                                                description={\n                                                    <>\n                                                        {harFlereVirksomheter\n                                                            ? getText(\n                                                                  'sifForms.virksomhet.næringsinntekt.flereVirksomheter.spm.description'\n                                                              )\n                                                            : getText(\n                                                                  'sifForms.virksomhet.næringsinntekt.enVirksomhet.spm.description'\n                                                              )}\n                                                        <ExpandableInfo\n                                                            title={getText(\n                                                                'sifForms.virksomhet.hvaErNæringsresultat.title'\n                                                            )}>\n                                                            {harFlereVirksomheter\n                                                                ? getText(\n                                                                      'sifForms.virksomhet.hvaErNæringsresultat.flereVirksomheter.text'\n                                                                  )\n                                                                : getText(\n                                                                      'sifForms.virksomhet.hvaErNæringsresultat.enVirksomhet.text'\n                                                                  )}\n                                                        </ExpandableInfo>\n                                                    </>\n                                                }\n                                            />\n                                        </Box>\n                                        <Box margin=\"xl\">\n                                            <Form.YesOrNoQuestion\n                                                name={\n                                                    VirksomhetFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene\n                                                }\n                                                legend={getText('sifForms.virksomhet.har_blitt_yrkesaktiv')}\n                                                validate={getYesOrNoValidator()}\n                                                description={\n                                                    <ExpandableInfo\n                                                        title={getText(\n                                                            'sifForms.virksomhet.har_blitt_yrkesaktiv_info_title'\n                                                        )}>\n                                                        {getText('sifForms.virksomhet.har_blitt_yrkesaktiv_info')}\n                                                    </ExpandableInfo>\n                                                }\n                                            />\n                                        </Box>\n                                        {values.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene ===\n                                            YesOrNo.YES && (\n                                            <FormBlock margin=\"m\">\n                                                <ResponsivePanel>\n                                                    <Form.DatePicker\n                                                        name={VirksomhetFormField.blittYrkesaktivDato}\n                                                        label={getText('sifForms.virksomhet.har_blitt_yrkesaktiv_dato')}\n                                                        showYearSelector={true}\n                                                        minDate={date3YearsAgo}\n                                                        maxDate={dateToday}\n                                                        validate={getDateValidator({\n                                                            required: true,\n                                                            max: dateToday,\n                                                            min: date3YearsAgo,\n                                                        })}\n                                                    />\n                                                </ResponsivePanel>\n                                            </FormBlock>\n                                        )}\n                                    </>\n                                )}\n\n                                {/* Ikke nyoppstartet */}\n                                {erVirksomhetRegnetSomNyoppstartet(fomDate) === false && (\n                                    <>\n                                        <Box margin=\"xl\">\n                                            <Form.YesOrNoQuestion\n                                                name={\n                                                    VirksomhetFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår\n                                                }\n                                                legend={getText('sifForms.virksomhet.varig_endring_spm')}\n                                                validate={getYesOrNoValidator()}\n                                            />\n                                        </Box>\n                                        {values.hattVarigEndringAvNæringsinntektSiste4Kalenderår === YesOrNo.YES && (\n                                            <>\n                                                <Box margin=\"xl\">\n                                                    <Form.DatePicker\n                                                        name={VirksomhetFormField.varigEndringINæringsinntekt_dato}\n                                                        label={getText('sifForms.virksomhet.varig_endring_dato')}\n                                                        validate={(value) => {\n                                                            const error = getDateValidator({\n                                                                required: true,\n                                                                min: date4YearsAgo,\n                                                                max: dateToday,\n                                                            })(value);\n                                                            if (error) {\n                                                                return {\n                                                                    key: error,\n                                                                    values: {\n                                                                        navn: navnPåVirksomheten,\n                                                                        min: prettifyDate(date4YearsAgo),\n                                                                        max: prettifyDate(dateToday),\n                                                                    },\n                                                                };\n                                                            }\n                                                        }}\n                                                        minDate={date4YearsAgo}\n                                                        maxDate={dateToday}\n                                                    />\n                                                </Box>\n                                                <Box margin=\"xl\">\n                                                    <Form.NumberInput\n                                                        name={\n                                                            VirksomhetFormField.varigEndringINæringsinntekt_inntektEtterEndring\n                                                        }\n                                                        label={getText('sifForms.virksomhet.varig_endring_inntekt')}\n                                                        maxLength={10}\n                                                        style={{ maxWidth: '10rem' }}\n                                                        validate={(value) => {\n                                                            const error = getNumberValidator({\n                                                                required: true,\n                                                                min: 0,\n                                                                max: MAKS_INNTEKT,\n                                                                allowDecimals: false,\n                                                            })(value);\n                                                            return error\n                                                                ? {\n                                                                      key: error,\n                                                                      values: {\n                                                                          navn: navnPåVirksomheten,\n                                                                          min: 0,\n                                                                          maks: MAKS_INNTEKT,\n                                                                      },\n                                                                  }\n                                                                : undefined;\n                                                        }}\n                                                    />\n                                                </Box>\n                                                <Box margin=\"xl\">\n                                                    <Form.Textarea\n                                                        name={\n                                                            VirksomhetFormField.varigEndringINæringsinntekt_forklaring\n                                                        }\n                                                        label={getText('sifForms.virksomhet.varig_endring_tekst')}\n                                                        maxLength={1000}\n                                                        validate={(value) => {\n                                                            const error = getStringValidator({\n                                                                required: true,\n                                                                minLength: 5,\n                                                                maxLength: 1000,\n                                                            })(value);\n                                                            return error\n                                                                ? {\n                                                                      key: error,\n                                                                      values: {\n                                                                          navn: navnPåVirksomheten,\n                                                                          min: 5,\n                                                                          maks: 1000,\n                                                                      },\n                                                                  }\n                                                                : undefined;\n                                                        }}\n                                                    />\n                                                </Box>\n                                            </>\n                                        )}\n                                    </>\n                                )}\n\n                                {values.registrertINorge === YesOrNo.YES && (\n                                    <>\n                                        <Box margin=\"xl\">\n                                            <Form.YesOrNoQuestion\n                                                name={VirksomhetFormField.harRegnskapsfører}\n                                                legend={getText('sifForms.virksomhet.regnskapsfører_spm')}\n                                                validate={getYesOrNoValidator()}\n                                            />\n                                        </Box>\n                                        {values.harRegnskapsfører === YesOrNo.YES && (\n                                            <FormBlock margin=\"m\">\n                                                <ResponsivePanel>\n                                                    <Form.Input\n                                                        name={VirksomhetFormField.regnskapsfører_navn}\n                                                        label={getText('sifForms.virksomhet.regnskapsfører_navn')}\n                                                        validate={(value) => {\n                                                            const error = getStringValidator({\n                                                                required: true,\n                                                                minLength: 2,\n                                                                maxLength: 50,\n                                                            })(value);\n\n                                                            return error\n                                                                ? {\n                                                                      key: error,\n                                                                      values: {\n                                                                          navn: navnPåVirksomheten,\n                                                                          min: 2,\n                                                                          maks: 1000,\n                                                                      },\n                                                                  }\n                                                                : undefined;\n                                                        }}\n                                                        maxLength={50}\n                                                    />\n                                                    <Box margin=\"xl\">\n                                                        <Form.Input\n                                                            name={VirksomhetFormField.regnskapsfører_telefon}\n                                                            label={getText(\n                                                                'sifForms.virksomhet.regnskapsfører_telefon'\n                                                            )}\n                                                            validate={(value) => {\n                                                                const error = getStringValidator({\n                                                                    required: true,\n                                                                    minLength: 5,\n                                                                    maxLength: 15,\n                                                                    formatRegExp: /^[\\w+\\s()]+$/,\n                                                                })(value);\n\n                                                                return error\n                                                                    ? {\n                                                                          key: error,\n                                                                          values: {\n                                                                              navn: navnPåVirksomheten,\n                                                                              min: 5,\n                                                                              maks: 15,\n                                                                          },\n                                                                      }\n                                                                    : undefined;\n                                                            }}\n                                                            maxLength={15}\n                                                        />\n                                                    </Box>\n                                                </ResponsivePanel>\n                                            </FormBlock>\n                                        )}\n                                    </>\n                                )}\n                                {values.harRegnskapsfører === YesOrNo.YES && (\n                                    <Box margin=\"xl\">\n                                        <CounsellorPanel>\n                                            {getText('sifForms.virksomhet.veileder_innhenter_info.1')}\n                                            <br />\n                                            {getText('sifForms.virksomhet.veileder_innhenter_info.2')}\n                                        </CounsellorPanel>\n                                    </Box>\n                                )}\n                            </>\n                        )}\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default VirksomhetForm;\n","import { formatDateToApiFormat } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { YesOrNo, getCountryName } from '@navikt/sif-common-formik/lib';\nimport { Virksomhet, VirksomhetApiData } from './types';\nimport { erFiskerNæringstype, erVirksomhetRegnetSomNyoppstartet } from './virksomhetUtils';\n\nexport const mapVirksomhetToVirksomhetApiData = (\n    locale: string,\n    virksomhet: Virksomhet,\n    harFlereVirksomheter?: boolean,\n    harBesvartFiskerPåBladB?: boolean\n): VirksomhetApiData => {\n    const registrertINorge = virksomhet.registrertINorge === YesOrNo.YES;\n    const harRegnskapsfører = virksomhet.harRegnskapsfører === YesOrNo.YES;\n    const erNyoppstartet = erVirksomhetRegnetSomNyoppstartet(virksomhet.fom);\n\n    const data: VirksomhetApiData = {\n        næringstyper: [virksomhet.næringstype],\n        navnPåVirksomheten: virksomhet.navnPåVirksomheten,\n        registrertINorge,\n        ...(registrertINorge\n            ? {\n                  organisasjonsnummer: virksomhet.organisasjonsnummer,\n              }\n            : {\n                  registrertIUtlandet: virksomhet.registrertILand\n                      ? {\n                            landkode: virksomhet.registrertILand,\n                            landnavn: getCountryName(virksomhet.registrertILand, locale),\n                        }\n                      : undefined,\n              }),\n        fraOgMed: formatDateToApiFormat(virksomhet.fom),\n        tilOgMed: virksomhet.erPågående || virksomhet.tom === undefined ? null : formatDateToApiFormat(virksomhet.tom),\n        erNyoppstartet,\n        harFlereAktiveVirksomheter: harFlereVirksomheter === true ? true : false,\n    };\n\n    if (erFiskerNæringstype(virksomhet.næringstype) && harBesvartFiskerPåBladB !== true) {\n        data.fiskerErPåBladB = virksomhet.fiskerErPåBladB === YesOrNo.YES;\n    }\n\n    /** Bedrift regnet som nyoppstartet  */\n    if (erNyoppstartet === true) {\n        data.næringsinntekt = virksomhet.næringsinntekt;\n        const harBlittAktiv = virksomhet.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene === YesOrNo.YES;\n        if (harBlittAktiv && virksomhet.blittYrkesaktivDato) {\n            data.yrkesaktivSisteTreFerdigliknedeÅrene = {\n                oppstartsdato: formatDateToApiFormat(virksomhet.blittYrkesaktivDato),\n            };\n        }\n    }\n\n    /** Bedrift ikke regnet som nyoppstartet  */\n    if (erNyoppstartet === false) {\n        const harHattVarigEndring = virksomhet.hattVarigEndringAvNæringsinntektSiste4Kalenderår === YesOrNo.YES;\n        const {\n            varigEndringINæringsinntekt_dato,\n            varigEndringINæringsinntekt_forklaring,\n            varigEndringINæringsinntekt_inntektEtterEndring,\n        } = virksomhet;\n        if (\n            harHattVarigEndring &&\n            varigEndringINæringsinntekt_dato &&\n            varigEndringINæringsinntekt_inntektEtterEndring !== undefined &&\n            varigEndringINæringsinntekt_forklaring\n        ) {\n            data.varigEndring = {\n                dato: formatDateToApiFormat(varigEndringINæringsinntekt_dato),\n                forklaring: varigEndringINæringsinntekt_forklaring,\n                inntektEtterEndring: varigEndringINæringsinntekt_inntektEtterEndring,\n            };\n        }\n    }\n\n    if (harRegnskapsfører && virksomhet.regnskapsfører_navn && virksomhet.regnskapsfører_telefon) {\n        data.regnskapsfører = {\n            navn: virksomhet.regnskapsfører_navn,\n            telefon: virksomhet.regnskapsfører_telefon,\n        };\n    }\n\n    return data;\n};\n","import React from 'react';\nimport { ApiStringDate } from '@navikt/sif-common-core/lib/types/ApiStringDate';\nimport { apiStringDateToDate, prettifyDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\n\ninterface Props {\n    apiDato: ApiStringDate;\n}\nexport const prettifyApiDate = (apiDato: ApiStringDate): string => prettifyDate(apiStringDateToDate(apiDato));\n\nconst DatoSvar: React.FunctionComponent<Props> = ({ apiDato }) => <>{prettifyApiDate(apiDato)}</>;\n\nexport default DatoSvar;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\n\ninterface Props {\n    labelKey: string;\n}\n\nconst bem = bemUtils('summaryLabelValue');\n\nconst IntlLabelValue: React.FunctionComponent<Props> = ({ labelKey: intlLabelKey, children }) => {\n    const intl = useIntl();\n    return (\n        <div className={bem.block}>\n            <span className={bem.element('label')}>{intlHelper(intl, intlLabelKey)}:</span>{' '}\n            <span className={bem.element('value')}>{children}</span>\n        </div>\n    );\n};\n\nexport default IntlLabelValue;\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\ninterface Props {\n    harSvartJa?: boolean;\n}\n\nconst JaNeiSvar: React.FunctionComponent<Props> = ({ harSvartJa }) => {\n    return <FormattedMessage id={harSvartJa === true ? 'Ja' : 'Nei'} tagName=\"span\" />;\n};\n\nexport default JaNeiSvar;\n","import React from 'react';\n\nconst Sitat: React.FunctionComponent = ({ children }) => (\n    <span\n        style={{\n            display: 'block',\n            paddingLeft: '.5rem',\n            margin: '0.5rem 0',\n            borderLeft: '2px solid #C6C2BF',\n            fontStyle: 'italic',\n        }}>\n        {children}\n    </span>\n);\n\nexport default Sitat;\n","import React from 'react';\nimport ContentWithHeader from '@navikt/sif-common-core/lib/components/content-with-header/ContentWithHeader';\nimport Box, { BoxMargin } from '@navikt/sif-common-core/lib/components/box/Box';\n\ninterface Props {\n    header: string;\n    margin?: BoxMargin;\n}\n\nconst SummaryBlock: React.FunctionComponent<Props> = ({ header, margin = 'l', children }) => (\n    <Box margin={margin}>\n        <ContentWithHeader header={header}>{children}</ContentWithHeader>\n    </Box>\n);\n\nexport default SummaryBlock;\n","import React from 'react';\nimport { FormattedNumber } from 'react-intl';\n\ninterface Props {\n    verdi?: number;\n}\n\nconst TallSvar: React.FunctionComponent<Props> = ({ verdi }) =>\n    verdi !== undefined ? <FormattedNumber value={verdi} /> : null;\n\nexport default TallSvar;\n","import React from 'react';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport TextareaSummary from '@navikt/sif-common-core/lib/components/textarea-summary/TextareaSummary';\nimport { apiStringDateToDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport DatoSvar, { prettifyApiDate } from '../components/summary/DatoSvar';\nimport IntlLabelValue from '../components/summary/IntlLabelValue';\nimport JaNeiSvar from '../components/summary/JaNeiSvar';\nimport Sitat from '../components/summary/Sitat';\nimport SummaryBlock from '../components/summary/SummaryBlock';\nimport TallSvar from '../components/summary/TallSvar';\nimport { Næringstype, VirksomhetApiData } from './types';\nimport { erVirksomhetRegnetSomNyoppstartet } from './virksomhetUtils';\n\ninterface Props {\n    virksomhet: VirksomhetApiData;\n    harFlereVirksomheter?: boolean;\n}\n\nconst getFiskerNæringTekst = (intl: IntlShape, erPåBladB: boolean) => {\n    const næringstekst = intlHelper(intl, `sifForms.virksomhet.næringstype_${Næringstype.FISKE}`);\n    const bladBTekst = erPåBladB\n        ? intlHelper(intl, 'sifForms.virksomhet.summary.fisker.påBladB')\n        : intlHelper(intl, 'sifForms.virksomhet.summary.fisker.ikkePåBladB');\n    return `${næringstekst} (${bladBTekst})`;\n};\n\nexport const renderVirksomhetSummary = (virksomhet: VirksomhetApiData, intl: IntlShape) => {\n    const land = virksomhet.registrertIUtlandet ? virksomhet.registrertIUtlandet.landnavn : 'Norge';\n\n    const næringstyper = virksomhet.næringstyper\n        .map((næring) =>\n            næring === Næringstype.FISKE && virksomhet.fiskerErPåBladB !== undefined\n                ? getFiskerNæringTekst(intl, virksomhet.fiskerErPåBladB)\n                : intlHelper(intl, `sifForms.virksomhet.næringstype_${næring}`)\n        )\n        .join(', ');\n\n    const tidsinfo = virksomhet.tilOgMed\n        ? intlHelper(intl, 'sifForms.virksomhet.summary.tidsinfo.avsluttet', {\n              fraOgMed: prettifyApiDate(virksomhet.fraOgMed),\n              tilOgMed: prettifyApiDate(virksomhet.tilOgMed),\n          })\n        : intlHelper(intl, 'sifForms.virksomhet.summary.tidsinfo.pågående', {\n              fraOgMed: prettifyApiDate(virksomhet.fraOgMed),\n          });\n\n    return (\n        <>\n            <IntlLabelValue labelKey=\"sifForms.virksomhet.summary.navn\">\n                {virksomhet.navnPåVirksomheten}.\n            </IntlLabelValue>\n            <IntlLabelValue labelKey=\"sifForms.virksomhet.summary.næringstype\">{næringstyper}. </IntlLabelValue>\n            <div>\n                <FormattedMessage id=\"sifForms.virksomhet.summary.registrertILand\" values={{ land }} />\n                {virksomhet.registrertINorge && (\n                    <FormattedMessage\n                        id=\"sifForms.virksomhet.summary.registrertILand.orgnr\"\n                        values={{ orgnr: virksomhet.organisasjonsnummer }}\n                    />\n                )}\n                . <br />\n                {tidsinfo}\n            </div>\n        </>\n    );\n};\n\nconst VirksomhetSummary: React.FunctionComponent<Props> = ({ virksomhet, harFlereVirksomheter }) => {\n    const intl = useIntl();\n    const erRegnetSomNyoppstartet = erVirksomhetRegnetSomNyoppstartet(apiStringDateToDate(virksomhet.fraOgMed));\n\n    return (\n        <>\n            {renderVirksomhetSummary(virksomhet, intl)}\n\n            {virksomhet.næringsinntekt !== undefined && (\n                <SummaryBlock\n                    header={intlHelper(\n                        intl,\n                        harFlereVirksomheter\n                            ? 'sifForms.virksomhet.næringsinntekt.flereVirksomheter.spm'\n                            : 'sifForms.virksomhet.næringsinntekt.enVirksomhet.spm'\n                    )}>\n                    <FormattedMessage id=\"sifForms.virksomhet.summary.næringsinntekst\" />\n                    {` `}\n                    <TallSvar verdi={virksomhet.næringsinntekt} />\n                </SummaryBlock>\n            )}\n\n            {erRegnetSomNyoppstartet === true && (\n                <>\n                    <SummaryBlock header={intlHelper(intl, 'sifForms.virksomhet.har_blitt_yrkesaktiv')}>\n                        {virksomhet.yrkesaktivSisteTreFerdigliknedeÅrene === undefined && (\n                            <JaNeiSvar harSvartJa={virksomhet.yrkesaktivSisteTreFerdigliknedeÅrene !== undefined} />\n                        )}\n                        {virksomhet.yrkesaktivSisteTreFerdigliknedeÅrene !== undefined && (\n                            <FormattedMessage\n                                id=\"sifForms.virksomhet.summary.yrkesaktiv.jaStartetDato\"\n                                values={{\n                                    dato: prettifyApiDate(\n                                        virksomhet.yrkesaktivSisteTreFerdigliknedeÅrene.oppstartsdato\n                                    ),\n                                }}\n                            />\n                        )}\n                    </SummaryBlock>\n                </>\n            )}\n\n            {erRegnetSomNyoppstartet === false && (\n                <>\n                    <SummaryBlock header={intlHelper(intl, 'sifForms.virksomhet.varig_endring_spm')}>\n                        <JaNeiSvar harSvartJa={virksomhet.varigEndring !== undefined} />\n                    </SummaryBlock>\n                    {virksomhet.varigEndring && (\n                        <>\n                            <SummaryBlock header={intlHelper(intl, 'sifForms.virksomhet.summary.varigEndring.dato')}>\n                                <DatoSvar apiDato={virksomhet.varigEndring.dato} />\n                            </SummaryBlock>\n                            <SummaryBlock\n                                header={intlHelper(intl, 'sifForms.virksomhet.summary.varigEndring.næringsinntekt')}>\n                                <TallSvar verdi={virksomhet.varigEndring.inntektEtterEndring} />\n                            </SummaryBlock>\n                            <SummaryBlock\n                                header={intlHelper(intl, 'sifForms.virksomhet.summary.varigEndring.beskrivelse')}>\n                                <Sitat>\n                                    <TextareaSummary text={virksomhet.varigEndring.forklaring} />\n                                </Sitat>\n                            </SummaryBlock>\n                        </>\n                    )}\n                </>\n            )}\n\n            {/* Regnskapsfører */}\n            {virksomhet.registrertINorge && (\n                <SummaryBlock header={intlHelper(intl, 'sifForms.virksomhet.regnskapsfører_spm')}>\n                    {virksomhet.regnskapsfører === undefined && <JaNeiSvar harSvartJa={false} />}\n                    {virksomhet.regnskapsfører !== undefined && (\n                        <FormattedMessage\n                            id=\"sifForms.virksomhet.summary.regnskapsfører.info\"\n                            values={{\n                                navn: virksomhet.regnskapsfører.navn,\n                                telefon: virksomhet.regnskapsfører.telefon,\n                            }}\n                        />\n                    )}\n                </SummaryBlock>\n            )}\n        </>\n    );\n};\n\nexport default VirksomhetSummary;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport {\n    FormikModalFormAndInfo,\n    ModalFormAndInfoLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport { mapVirksomhetToVirksomhetApiData } from './mapVirksomhetToApiData';\nimport { Virksomhet } from './types';\nimport VirksomhetForm from './VirksomhetForm';\nimport VirksomhetSummary from './VirksomhetSummary';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames, ValidationError> {\n    name: FieldNames;\n    labels: ModalFormAndInfoLabels;\n    skipOrgNumValidation?: boolean;\n    harFlereVirksomheter?: boolean;\n    onAfterChange?: (virksomhet: Virksomhet) => void;\n}\n\nfunction VirksomhetInfoAndDialog<FieldNames>({\n    name,\n    labels,\n    skipOrgNumValidation,\n    harFlereVirksomheter,\n    validate,\n    onAfterChange,\n}: Props<FieldNames>) {\n    const intl = useIntl();\n    return (\n        <FormikModalFormAndInfo<FieldNames, Virksomhet, ValidationError>\n            name={name}\n            validate={validate}\n            labels={labels}\n            dialogWidth=\"narrow\"\n            renderEditButtons={true}\n            formRenderer={({ onSubmit, onCancel, data }) => (\n                <VirksomhetForm\n                    virksomhet={data}\n                    harFlereVirksomheter={harFlereVirksomheter}\n                    onSubmit={onSubmit}\n                    onCancel={onCancel}\n                    skipOrgNumValidation={skipOrgNumValidation}\n                />\n            )}\n            infoRenderer={({ data }) => (\n                <VirksomhetSummary\n                    virksomhet={mapVirksomhetToVirksomhetApiData(intl.locale, data, harFlereVirksomheter)}\n                    harFlereVirksomheter={harFlereVirksomheter}\n                />\n            )}\n            onAfterChange={onAfterChange}\n        />\n    );\n}\n\nexport default VirksomhetInfoAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { TypedFormikForm, TypedFormikWrapper, YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport flat from 'flat';\nimport Panel from 'nav-frontend-paneler';\nimport { Checkbox } from 'nav-frontend-skjema';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { VirksomhetFormErrors } from '../../../forms';\nimport { mapVirksomhetToVirksomhetApiData } from '../../../forms/virksomhet/mapVirksomhetToApiData';\nimport { isVirksomhet, Næringstype, Virksomhet } from '../../../forms/virksomhet/types';\nimport VirksomhetInfoAndDialog from '../../../forms/virksomhet/VirksomhetInfoAndDialog';\nimport virksomhetMessages from '../../../forms/virksomhet/virksomhetMessages';\nimport VirksomhetSummary from '../../../forms/virksomhet/VirksomhetSummary';\nimport PageIntro from '../../components/page-intro/PageIntro';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\n\nenum FormField {\n    'virksomhet' = 'virksomhet',\n}\n\nexport const mockVirksomhet: Virksomhet = {\n    id: '024782550-1402-01448-04932-71872390929312',\n    næringstype: Næringstype.FISKE,\n    fiskerErPåBladB: YesOrNo.YES,\n    navnPåVirksomheten: 'Virksomhet AS',\n    registrertINorge: YesOrNo.YES,\n    organisasjonsnummer: '123123123',\n    fom: new Date('2007-02-01T00:00:00.000Z'),\n    erPågående: true,\n    næringsinntekt: 20000,\n    harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene: YesOrNo.YES,\n    blittYrkesaktivDato: new Date(),\n    hattVarigEndringAvNæringsinntektSiste4Kalenderår: YesOrNo.YES,\n    varigEndringINæringsinntekt_dato: new Date('2019-12-09T00:00:00.000Z'),\n    varigEndringINæringsinntekt_inntektEtterEndring: 200000,\n    varigEndringINæringsinntekt_forklaring: 'Jeg fikk flere barn',\n    harRegnskapsfører: YesOrNo.YES,\n    regnskapsfører_navn: 'Regnskapsefører Truls',\n    regnskapsfører_telefon: '98219409',\n};\n\ninterface FormValues {\n    [FormField.virksomhet]?: Virksomhet;\n}\n\nconst initialValues: FormValues = {};\n\nconst VirksomhetExample = () => {\n    const [formValues, setFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const [harFlereVirksomheter, setHarFlereVirksomheter] = useState<boolean>(false);\n    const intl = useIntl();\n\n    const { virksomhet } = formValues || {};\n\n    const apiVirksomhet =\n        virksomhet && isVirksomhet(virksomhet) ? mapVirksomhetToVirksomhetApiData(intl.locale, virksomhet) : undefined;\n    return (\n        <>\n            <PageIntro title=\"Næringsvirksomhet\">Skjema som brukes for på registrere en næringsvirksomhet.</PageIntro>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues, ValidationError>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                formErrorHandler={getFormErrorHandler(intl)}>\n                                <VirksomhetInfoAndDialog<FormField>\n                                    name={FormField.virksomhet}\n                                    harFlereVirksomheter={harFlereVirksomheter}\n                                    validate={getListValidator({ required: true })}\n                                    labels={{\n                                        addLabel: harFlereVirksomheter ? 'Registrer virksomhet' : 'Legg til',\n                                        deleteLabel: 'Fjern',\n                                        editLabel: 'Endre',\n                                        infoTitle: 'Virksomhet',\n                                        modalTitle: 'Virksomhet',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <Box margin=\"l\">\n                    <hr />\n                    <Panel style={{ padding: '1rem' }}>\n                        <Box padBottom=\"m\">Varianter:</Box>\n                        <Box margin=\"m\">\n                            <Checkbox\n                                label=\"Bruker har flere virksomheter\"\n                                checked={harFlereVirksomheter}\n                                onChange={(evt) => setHarFlereVirksomheter(evt.currentTarget.checked)}\n                            />\n                        </Box>\n                    </Panel>\n                </Box>\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrorIntlKeys={flat(VirksomhetFormErrors)}\n                    intlMessages={virksomhetMessages}\n                />\n            </Box>\n\n            {apiVirksomhet && (\n                <>\n                    <Box margin=\"xxl\" padBottom=\"l\">\n                        <Undertittel>Oppsummering av api data</Undertittel>\n                    </Box>\n                    <Panel border={true}>\n                        <VirksomhetSummary virksomhet={apiVirksomhet} harFlereVirksomheter={harFlereVirksomheter} />\n                    </Panel>\n                </>\n            )}\n        </>\n    );\n};\n\nexport default VirksomhetExample;\n","import React from 'react';\nimport PageIntro from './components/page-intro/PageIntro';\n\nconst Intro = () => (\n    <>\n        <PageIntro title=\"SIF-common guide\">\n            Dette er starten på en enkel guide til komponenter og konsepter i SIF-common, og som kan brukes i\n            søknadsapplikasjonene til kapittel 9. Vi legger det vi trenger, etter hvert som vi ser at vi trenger det :)\n        </PageIntro>\n    </>\n);\n\nexport default Intro;\n","import React from 'react';\nimport { MessageFileFormat } from '@navikt/sif-common-core/lib/dev-utils/intl/devIntlUtils';\nimport bostedUtlandMessages from '../../../forms/bosted-utland/bostedUtlandMessages';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport MessagePreviewExplanation from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagePreviewExplanation';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport ferieuttakMessages from '../../../forms/ferieuttak/ferieuttakMessages';\nimport fosterbarnMessages from '../../../forms/fosterbarn/fosterbarnMessages';\nimport fraværMessages from '../../../forms/fravær/fraværMessages';\nimport tidsperiodeMessages from '../../../forms/tidsperiode/tidsperiodeMessages';\nimport utenlandsoppholdMessages from '../../../forms/utenlandsopphold/utenlandsoppholdMessages';\nimport virksomhetMessages from '../../../forms/virksomhet/virksomhetMessages';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport annetBarnMessages from '../../../forms/annet-barn/annetBarnMessages';\n\nconst Texts = () => {\n    const formMessages: { title: string; messages: MessageFileFormat }[] = [];\n    formMessages.push({ title: 'Bosted utland', messages: bostedUtlandMessages });\n    formMessages.push({ title: 'Ferieuttak', messages: ferieuttakMessages });\n    formMessages.push({ title: 'Fosterbarn', messages: fosterbarnMessages });\n    formMessages.push({ title: 'Fravær', messages: fraværMessages });\n    formMessages.push({ title: 'Tidsperiode', messages: tidsperiodeMessages });\n    formMessages.push({ title: 'Utenlandsopphold', messages: utenlandsoppholdMessages });\n    formMessages.push({ title: 'Næringsvirksomhet (selvstendig næringsdrivende)', messages: virksomhetMessages });\n    formMessages.push({ title: 'Annet barn', messages: annetBarnMessages });\n    return (\n        <div>\n            <Box>\n                <MessagePreviewExplanation />\n            </Box>\n            {formMessages.map(({ title, messages }) => {\n                return (\n                    <div key={title}>\n                        <FormBlock margin=\"none\" paddingBottom=\"xl\">\n                            <MessagesPreview\n                                messages={messages}\n                                title={title}\n                                showExplanation={false}\n                                showMissingTextSummary={true}\n                            />\n                        </FormBlock>\n                    </div>\n                );\n            })}\n        </div>\n    );\n};\n\nexport default Texts;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport DialogForms from '../examples/dialog-forms/DialogForms';\nimport VirksomhetExample from '../examples/virksomhet-example/VirksomhetExample';\nimport Intro from '../Intro';\nimport Texts from '../examples/texts/Texts';\n\nexport interface RouteConfig {\n    path: string;\n    title: string;\n    renderContent: () => React.ReactNode;\n}\n\nexport const routes: RouteConfig[] = [\n    {\n        path: 'frontpage',\n        title: 'Forside',\n        renderContent: () => <Intro />,\n    },\n    {\n        path: 'dialog-forms',\n        title: 'Dialogskjema',\n        renderContent: () => <DialogForms />,\n    },\n    {\n        path: 'næring',\n        title: 'Næringsvirksomhet',\n        renderContent: () => <VirksomhetExample />,\n    },\n    {\n        path: 'texts',\n        title: 'Tekster',\n        renderContent: () => <Texts />,\n    },\n];\n\nexport const isActiveRoute = (path: string, pathname: string): boolean => {\n    return pathname.indexOf(path) >= 0;\n};\n\nexport const getRouteConfig = (pathname: string): RouteConfig | undefined => {\n    return routes.find((f) => isActiveRoute(f.path, pathname));\n};\n","import * as React from 'react';\nimport { Button, Menu, MenuItem, Wrapper } from 'react-aria-menubutton';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { NedChevron } from 'nav-frontend-chevron';\nimport { isActiveRoute, RouteConfig, routes } from '../../config/routeConfig';\nimport './headerMenu.less';\n\nconst renderMenuItem = (route: RouteConfig) => {\n    return (\n        <li key={route.path}>\n            <MenuItem className=\"headerMenu__menu__item\">\n                <div data-page={route.path}>{route.title}</div>\n            </MenuItem>\n        </li>\n    );\n};\n\ntype Props = RouteComponentProps;\n\nconst HeaderMenu = ({ history }: Props) => {\n    const {\n        location: { pathname },\n    } = history;\n\n    const toggle = (element: any) => {\n        const r = element.props ? element.props['data-page'] : undefined;\n        if (r) {\n            history.push(r);\n        }\n    };\n    const route = routes.find((r) => isActiveRoute(r.path, pathname)) || routes[0];\n    return (\n        <div className=\"headerMenu\">\n            <Wrapper className=\"headerMenu__wrapper\" onSelection={toggle}>\n                <Button className=\"headerMenu__button\">\n                    <div className=\"headerMenu__button__label\">{route ? route.title : 'Velg'}</div>\n                    <div className=\"headerMenu__button__chevron\">\n                        <NedChevron />\n                    </div>\n                </Button>\n                <Menu className=\"headerMenu__menu\">\n                    <ul>{routes.map(renderMenuItem)}</ul>\n                </Menu>\n            </Wrapper>\n        </div>\n    );\n};\nexport default withRouter(HeaderMenu);\n","import React from 'react';\nimport { Link, withRouter, RouteComponentProps } from 'react-router-dom';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport 'nav-frontend-lenker-style';\nimport { isActiveRoute, routes } from '../../config/routeConfig';\n\nconst lenkeBem = bemUtils('lenke');\n\nconst LeftMenu = ({\n    history: {\n        location: { pathname },\n    },\n}: RouteComponentProps) => {\n    return (\n        <div className=\"leftMenu\">\n            {routes.map((route) => (\n                <Link\n                    key={route.path}\n                    to={route.path}\n                    className={lenkeBem.classNames(\n                        lenkeBem.block,\n                        lenkeBem.modifierConditional('active', isActiveRoute(route.path, pathname))\n                    )}>\n                    {route.title}\n                </Link>\n            ))}\n        </div>\n    );\n};\n\nexport default withRouter(LeftMenu);\n","import React from 'react';\nimport MediaQuery from 'react-responsive';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport HeaderMenu from './components/header-menu/HeaderMenu';\nimport LeftMenu from './components/left-menu/LeftMenu';\nimport { getRouteConfig } from './config/routeConfig';\nimport Intro from './Intro';\n\ntype Props = RouteComponentProps;\n\nconst DevContent = ({\n    history: {\n        location: { pathname },\n    },\n}: Props) => {\n    const routeConfig = getRouteConfig(pathname);\n    return (\n        <>\n            <MediaQuery minWidth={1072}>\n                <aside className=\"asideContent\">\n                    <LeftMenu />\n                </aside>\n                <article style={{ maxWidth: '1000px' }} className=\"mainContent\">\n                    {routeConfig ? routeConfig.renderContent() : <Intro />}\n                </article>\n            </MediaQuery>\n            <MediaQuery maxWidth={1071}>\n                <aside className=\"asideContentTop\">\n                    <HeaderMenu />\n                </aside>\n                <article style={{ maxWidth: '1000px' }} className=\"mainContent\">\n                    {routeConfig ? routeConfig.renderContent() : <Intro />}\n                </article>\n            </MediaQuery>\n        </>\n    );\n};\n\nexport default withRouter(DevContent);\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { HashRouter } from 'react-router-dom';\nimport LanguageToggle from '@navikt/sif-common-core/lib/components/language-toggle/LanguageToggle';\nimport { Locale } from '@navikt/sif-common-core/lib/types/Locale';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport NAVLogo from './components/svg/NAVLogo';\nimport DevContent from './DevContent';\nimport './styles/dev.less';\n\ninterface Props {\n    onChangeLocale: (locale: Locale) => void;\n}\n\nconst DevPage = ({ onChangeLocale }: Props) => {\n    const intl = useIntl();\n    return (\n        <main className=\"devPage\">\n            <header className=\"header\">\n                <span className=\"navLogo\">\n                    <NAVLogo />\n                </span>\n                <span className=\"header__title\">\n                    <Systemtittel>Sykdom i familien - sif-common-forms</Systemtittel>\n                </span>\n                <span className=\"languageToggler\">\n                    <LanguageToggle toggle={onChangeLocale} locale={intl.locale as Locale} />\n                </span>\n            </header>\n            <div className=\"contentWrapper\">\n                <HashRouter>\n                    <DevContent />\n                </HashRouter>\n            </div>\n        </main>\n    );\n};\n\nexport default DevPage;\n","import * as React from 'react';\nimport '@formatjs/intl-pluralrules//locale-data/nb';\nimport '@formatjs/intl-pluralrules//locale-data/nn';\nimport '@formatjs/intl-pluralrules/polyfill';\nimport { Locale } from '@navikt/sif-common-core/lib/types/Locale';\nimport { getLocaleFromSessionStorage, setLocaleInSessionStorage } from '@navikt/sif-common-core/lib/utils/localeUtils';\nimport 'nav-frontend-skjema-style';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport AppIntlProvider from './dev/components/app-intl-provider/AppIntlProvider';\nimport DevPage from './dev/DevPage';\nimport '@navikt/sif-common-core/lib/styles/globalStyles.less';\n\nconst localeFromSessionStorage = getLocaleFromSessionStorage();\n\nconst App = () => {\n    const [locale, setLocale] = React.useState(localeFromSessionStorage || 'nb');\n    return (\n        <Normaltekst tag=\"div\">\n            <AppIntlProvider locale={locale as Locale}>\n                <DevPage\n                    onChangeLocale={(l: Locale) => {\n                        setLocaleInSessionStorage(l);\n                        setLocale(l);\n                    }}\n                />\n            </AppIntlProvider>\n        </Normaltekst>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Modal from 'react-modal';\nimport App from './App';\n\nModal.setAppElement('#root');\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}