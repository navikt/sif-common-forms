{"version":3,"sources":["forms/bosted-utland/bostedUtlandMessages.ts","forms/ferieuttak/ferieuttakMessages.ts","forms/fravær/fraværMessages.ts","forms/utenlandsopphold/utenlandsoppholdMessages.ts","forms/fosterbarn/fosterbarnMessages.ts","forms/virksomhet/virksomhetMessages.ts","forms/tidsperiode/tidsperiodeMessages.ts","forms/annet-barn/annetBarnMessages.ts","dev/components/app-intl-provider/messages.ts","dev/components/app-intl-provider/AppIntlProvider.tsx","dev/components/svg/NAVLogo.tsx","forms/bosted-utland/BostedUtlandForm.tsx","dev/components/page-intro/PageIntro.tsx","forms/utils/index.ts","forms/bosted-utland/bostedUtlandUtils.ts","forms/bosted-utland/BostedUtlandList.tsx","forms/bosted-utland/BostedUtlandListAndDialog.tsx","dev/components/submit-preview/SubmitPreview.tsx","dev/examples/dialog-forms/BostedUtlandExample.tsx","dev/components/validation-error-messages/ValidationErrorMessages.tsx","forms/ferieuttak/FerieuttakForm.tsx","forms/ferieuttak/ferieuttakUtils.ts","forms/ferieuttak/FerieuttakList.tsx","forms/ferieuttak/FerieuttakListAndDialog.tsx","dev/examples/dialog-forms/FerieuttakExample.tsx","forms/fosterbarn/FosterbarnForm.tsx","forms/fosterbarn/types.ts","forms/fosterbarn/FosterbarnList.tsx","forms/fosterbarn/FosterbarnListAndDialog.tsx","dev/examples/dialog-forms/FosterbarnExample.tsx","forms/tidsperiode/TidsperiodeForm.tsx","forms/tidsperiode/tidsperiodeUtils.ts","forms/tidsperiode/TidsperiodeList.tsx","forms/tidsperiode/TidsperiodeListAndDialog.tsx","dev/examples/dialog-forms/TidsperiodeExample.tsx","forms/utenlandsopphold/types.ts","forms/utenlandsopphold/utenlandsoppholdUtils.ts","forms/utenlandsopphold/UtenlandsoppholdForm.tsx","forms/utenlandsopphold/UtenlandsoppholdList.tsx","forms/utenlandsopphold/UtenlandsoppholdListAndDialog.tsx","dev/examples/dialog-forms/UtenlandsoppholdExample.tsx","forms/fravær/types.ts","forms/fravær/FraværListItem.tsx","forms/fravær/fraværUtilities.ts","forms/fravær/fraværValidationUtils.ts","forms/fravær/FraværDagerList.tsx","forms/components/formatted-html-message/FormattedHtmlMessage.tsx","forms/fravær/FraværTimerSelect.tsx","forms/fravær/FraværDagForm.tsx","forms/fravær/fraværÅrsakRadios.ts","forms/fravær/ÅrsakInfo.tsx","forms/fravær/FraværDagerListAndDialog.tsx","forms/fravær/FraværPeriodeForm.tsx","forms/fravær/FraværPerioderList.tsx","forms/fravær/FraværPerioderListAndDialog.tsx","dev/examples/dialog-forms/FraværExample.tsx","forms/annet-barn/AnnetBarnForm.tsx","forms/annet-barn/annetBarnUtils.ts","forms/annet-barn/AnnetBarnList.tsx","forms/annet-barn/AnnetBarnListAndDialog.tsx","dev/examples/dialog-forms/AnnetBarnExample.tsx","forms/virksomhet/types.ts","dev/examples/dialog-forms/DialogForms.tsx","forms/virksomhet/virksomhetUtils.ts","forms/virksomhet/mapVirksomhetToApiData.ts","forms/virksomhet/VirksomhetForm.tsx","forms/components/summary/DatoSvar.tsx","forms/components/summary/IntlLabelValue.tsx","forms/components/summary/JaNeiSvar.tsx","forms/components/summary/Sitat.tsx","forms/components/summary/SummaryBlock.tsx","forms/components/summary/TallSvar.tsx","forms/virksomhet/VirksomhetSummary.tsx","forms/virksomhet/VirksomhetInfoAndDialog.tsx","dev/examples/virksomhet-example/VirksomhetExample.tsx","dev/Intro.tsx","dev/examples/texts/Texts.tsx","dev/config/routeConfig.tsx","dev/components/header-menu/HeaderMenu.tsx","dev/components/left-menu/LeftMenu.tsx","dev/DevContent.tsx","dev/DevPage.tsx","App.tsx","index.tsx"],"names":["bostedUtlandMessages","nb","nn","ferieuttakMessages","getFraværÅrsakTekstKort","årsak","intl","intlHelper","fraværMessages","utenlandsoppholdMessages","fosterbarnMessages","virksomhetMessages","tidsperiodeMessages","annetBarnMessages","commonNb","require","commonNn","validationNb","validationNn","appMessages","AppIntlProvider","locale","onError","children","messages","dayjs","NAVLogo","BostedUtlandFormFields","props","className","width","viewBox","fill","fillRule","d","PageIntro","title","padBottom","margin","tag","mapFomTomToDateRange","from","fom","to","tom","bostedUtlandUtils","isValidBostedUtland","bosted","landkode","undefined","mapBostedUtlandToFormValues","dateToISOString","mapFormValuesToBostedUtland","formValues","id","guid","ISOStringToDate","BostedUtlandFormErrorKeys","fields","Object","keys","ValidateDateError","ValidateDateInRangeError","fromDateIsAfterToDate","toDateIsBeforeFromDate","ValidateRequiredFieldError","BostedUtlandFormName","Form","getTypedFormComponents","BostedUtlandForm","maxDate","minDate","alleBosteder","onSubmit","onCancel","useIntl","FormikWrapper","initialValues","bostedToSubmit","Error","renderForm","formik","values","fomDateLimits","tomDateLimits","andreBosteder","map","filter","b","fieldErrorRenderer","getFieldErrorRenderer","summaryFieldErrorRenderer","getSummaryFieldErrorRenderer","DateRangePicker","legend","fullscreenOverlay","allowRangesToStartAndStopOnSameDate","disabledDateRanges","fromInputProps","name","label","validate","getDateRangeValidator","validateFromDate","required","min","max","toDate","toInputProps","validateToDate","fromDate","CountrySelect","getRequiredFieldValidator","bem","bemUtils","BostedUtlandList","bosteder","onDelete","onEdit","getItemId","opphold","getItemTitle","getCountryName","labelRenderer","navn","element","onClick","prettifyDateExtended","items","BostedUtlandListAndDialog","labels","dialogWidth","sortFunc","sortItemsByFom","formRenderer","item","allItems","listRenderer","SubmitPreview","FormField","style","borderTop","paddingTop","padding","fontSize","JSON","stringify","FormValidationErrorMessages","validationErrors","formName","intlMessages","validationeMessages","forEach","field","errorKey","error","intlKey","createFieldErrorIntlKey","showExplanation","showMissingTextSummary","FerieuttakFormFields","FormikExample","useState","singleFormValues","setSingleFormValues","listFormValues","setListFormValues","border","includeButtons","submitButtonLabel","date1YearAgo","date1YearFromNow","getListValidator","addLabel","listTitle","modalTitle","emptyListText","console","log","ferieuttakUtils","isValidFerieuttak","ferieuttak","mapFerieuttakToFormValues","mapFormValuesToFerieuttak","FerieuttakFormErrorKeys","FerieuttakFormName","FerieuttakForm","alleFerieuttak","defaultLabels","intervalTitle","okButton","cancelButton","formLabels","andreFerieuttak","f","ferieuttakToSubmit","onChange","setTimeout","validateField","FerieuttakList","getDateTitleString","uttak","FerieuttakListAndDialog","FosterbarnFormField","ferie","FosterbarnFormErrorKeys","fornavn","etternavn","fødselsnummer","ValidateFødselsnummerError","FosterbarnFormName","FosterbarnForm","fosterbarn","disallowedFødselsnumre","text","includeName","defaultText","form_etternavn_label","form_fornavn_label","form_fødselsnummer_label","txt","hasValue","isFosterbarn","Input","getFødselsnummerValidator","disallowedValues","inputMode","maxLength","columns","FosterbarnList","getBarnTitleString","barn","paddingRight","formatName","FosterbarnListAndDialog","texts","liste_legg_til_knapp","liste_tittel","modal_tittel","liste_tom_liste_tekst","TidsperiodeFormFields","FosterbarnExample","tidsperiodeUtils","isValidDateTidsperiode","tidsperiode","mapDateTidsperiodeToFormValues","mapFormValuesToDateTidsperiode","TidsperiodeFormErrorKeys","TidsperiodeFormName","TidsperiodeForm","alleTidsperioder","inlineLabels","dateTidsperiodeToSubmit","t","TidsperiodeList","TidsperiodeListAndDialog","formTitle","UtenlandsoppholdÅrsak","TidsperiodeExample","UtenlandsoppholdFormFields","utenlandsoppholdUtils","isValidUtenlandsopphold","utenlandsopphold","mapFormValuesToUtenlandsopphold","barnInnlagtPerioder","mapUtenlandsoppholdToFormValues","erBarnetInnlagt","UtlandsoppholdFormErrorKeys","validateYesOrNoIsAnsweredError","ValidateListError","listIsEmpty","listHasTooFewItems","defaultFormValues","YesOrNo","UNANSWERED","UtenlandsoppholdFormName","UtenlandsoppholdForm","alleOpphold","registrerteTidsperioder","o","utils","utenlandsoppholdToSubmit","countryIsMemberOfEøsOrEfta","hasDateStringValues","fomDate","tomDate","includeInnlagtPerioderQuestion","YES","includeInnlagtQuestion","showÅrsakQuestion","length","areAllQuestionsAnswered","dayPickerProps","initialMonth","dateToday","YesOrNoQuestion","land","getYesOrNoValidator","RadioPanelGroup","radios","value","INNLAGT_DEKKET_NORGE","INNLAGT_DEKKET_ANNET_LAND","ANNET","UtenlandsoppholdList","UtenlandsoppholdListAndDialog","FraværÅrsak","UtenlandsoppholdExample","FraværListItem","ordinært","marginTop","extend","isSameOrAfter","isSameOrBefore","Weekday","fraværDagToFraværDateRange","fraværDag","dato","fraværPeriodeToDateRange","fraOgMed","tilOgMed","FraværFieldValidationErrors","getWeekdayName","date","getDay","sunday","monday","tuesday","wednesday","thursday","friday","saturday","rangeCollideWithRanges","range","ranges","some","periode","fromDay","toDay","isBefore","isAfter","dateCollideWithRanges","timeText","timer","getHjemmePgaKoronaFormValueFromFraværÅrsak","smittevernhensyn","stengtSkoleBhg","NO","getÅrsakFromFraværFormValues","hjemmePgaKorona","mapFraværDagToFormValues","timerArbeidsdag","timerFravær","mapFraværPeriodeToFormValues","fraværPeriode","FraværDagerList","fraværDager","getFraværDagListItemTitle","basicHtmlTagRenderers","li","strong","p","em","FormattedHtmlMessage","getOptionsList","maksTid","newOptionElement","toString","replace","go","jsxList","tid","FraværTimerSelect","FraværDagForm","Select","bredde","FraværDagFormFields","validateErSammeÅr","maybeDateFrom","maybeDateTo","getFullYear","fra_og_til_er_ulike_år","validateNotHelgedag","maybeDate","dateErHelg","er_helg","validateNoCollisions","fraværPerioder","allFraværDagDateRanges","allFraværPeriodeDateRanges","hasDateCollision","dag","rangesWithoutCurrentDag","hasRangeCollision","rangesWithoutCurrentPeriode","dager_overlapper_med_andre_dager","getFraværÅrsakRadios","ÅrsakInfo","FraværDagFormErrorKeys","dato_kolliderer_med_annet_fravær","fravær_timer_mer_enn_arbeidstimer","FraværDagFormName","FraværDagFormView","dagDescription","dateRangesToDisable","helgedagerIkkeTillatt","maksArbeidstidPerDag","headerContent","ok","avbryt","tittel","antallArbeidstimer","fraværÅrsakRadios","isSame","fraværDagToSubmit","mapFormValuesToFraværDag","isFraværDag","valgtDato","datepickerUtils","getDateFromDateString","datepickerProps","disableWeekend","validateAll","getDateValidator","validateFraværDagCollision","DatePicker","description","maybeMaxValue","isString","parseFloat","toMaybeNumber","maybeValue","maybeValueFloat","FraværDagerListAndDialog","FraværPeriodeFormFields","formHeaderContent","fraværDagA","fraværDagB","FraværPeriodeFormErrorKeys","fra_dato_kolliderer_med_annet_fravær","til_dato_kolliderer_med_annet_fravær","FraværPeriodeFormName","FraværPeriodeForm","periodeDescription","helgedagerIkkeTillat","begrensTilSammeÅr","tidsrom","fraværPeriodeToSubmit","mapFormValuesToFraværPeriode","isFraværPeriode","DateIntervalPicker","validateFraværPeriodeCollision","fromDatepickerProps","validations","push","validateFraOgMedForCollision","toDatepickerProps","validateTilOgMedForCollision","FraværPerioderList","useTrashcan","FraværPerioderListAndDialog","fraværPeriodeA","fraværPeriodeB","AnnetBarnFormFields","perioder","dager","FraværExample","fraværPeriodeSingleFormValues","setFraværPeriodeSingleFormValues","fraværDagSingleFormValues","setFraværDagSingleFormValues","annetBarnUtils","mapAnnetBarnToFormValues","annetBarn","fnr","fødselsdato","mapFormValuesToPartialAnnetBarn","isAnnetBarn","AnnetBarnFormErrorKeys","AnnetBarnFormName","AnnetBarnForm","annetBarnToSubmit","placeholder","placeholderNavn","aldersGrenseText","showYearSelector","placeholderFnr","AnnetBarnList","prettifyDate","AnnetBarnListAndDialog","Næringstype","VirksomhetFormField","AnnetBarnExample","date4YearsAgo","tabRoutes","path","renderContent","BostedUtlandExample","FerieuttakExample","DialogForms","setPath","activeRoute","find","r","evt","idx","tabs","active","isVirksomhet","virksomhet","harFiskerNæringstype","næringstyper","n","FISKE","erVirksomhetRegnetSomNyoppstartet","oppstartsdato","startOf","mapVirksomhetToFormValues","blittYrkesaktivDato","varigEndringINæringsinntekt_dato","mapVirksomhetToVirksomhetApiData","harBesvartFiskerPåBladB","registrertINorge","harRegnskapsfører","erNyoppstartet","data","navnPåVirksomheten","organisasjonsnummer","registrertIUtlandet","registrertILand","landnavn","formatDateToApiFormat","erPågående","fiskerErPåBladB","næringsinntekt","harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene","yrkesaktivSisteTreFerdigliknedeÅrene","harHattVarigEndring","hattVarigEndringAvNæringsinntektSiste4Kalenderår","varigEndringINæringsinntekt_forklaring","varigEndringINæringsinntekt_inntektEtterEndring","varigEndring","forklaring","inntektEtterEndring","regnskapsfører_navn","regnskapsfører_telefon","regnskapsfører","telefon","MAKS_INNTEKT","VirksomhetFormName","ensureValidNæringsinntekt","visNæringsinntekt","VirksomhetForm","harFlereVirksomheter","skipOrgNumValidation","getText","key","virksomhetToSubmit","setFieldValue","includeValidationSummary","CheckboxPanelGroup","checkboxes","JORDBRUK_SKOGBRUK","DAGMAMMA","ANNEN","useAlpha3Code","maxWidth","getOrgNumberValidator","disabled","Checkbox","afterOnChange","checked","NumberInput","getNumberValidator","date3YearsAgo","Textarea","getStringValidator","prettifyApiDate","apiDato","apiStringDateToDate","DatoSvar","IntlLabelValue","intlLabelKey","labelKey","block","JaNeiSvar","harSvartJa","tagName","Sitat","display","paddingLeft","borderLeft","fontStyle","SummaryBlock","header","TallSvar","verdi","renderVirksomhetSummary","næring","erPåBladB","næringstekst","bladBTekst","getFiskerNæringTekst","join","tidsinfo","orgnr","VirksomhetSummary","erRegnetSomNyoppstartet","VirksomhetInfoAndDialog","onAfterChange","renderEditButtons","infoRenderer","Date","VirksomhetExample","setFormValues","setHarFlereVirksomheter","apiVirksomhet","deleteLabel","editLabel","infoTitle","currentTarget","Intro","Texts","formMessages","paddingBottom","routes","isActiveRoute","pathname","indexOf","renderMenuItem","route","data-page","withRouter","history","location","onSelection","lenkeBem","classNames","modifierConditional","routeConfig","getRouteConfig","minWidth","DevPage","onChangeLocale","toggle","localeFromSessionStorage","getLocaleFromSessionStorage","App","React","setLocale","l","setLocaleInSessionStorage","Modal","setAppElement","ReactDOM","render","document","getElementById"],"mappings":"+XAuBeA,EAvBc,CACzBC,GAAI,CACA,wBAAyB,mBACzB,2BAA4B,mBAC5B,oCAAqC,cACrC,wCAAyC,aACzC,wCAAyC,aACzC,6BAA8B,YAC9B,uBAAwB,WACxB,2BAA4B,UAEhCC,GAAI,CACA,wBAAyB,mBACzB,2BAA4B,mBAC5B,oCAAqC,cACrC,wCAAyC,gBACzC,wCAAyC,aACzC,6BAA8B,YAC9B,uBAAwB,WACxB,2BAA4B,WCQrBC,EA3BY,CACvBF,GAAI,CACA,wBAAyB,2BACzB,2BAA4B,aAC5B,yBAA0B,aAC1B,gCAAiC,eACjC,2BAA4B,KAC5B,+BAAgC,SAChC,sCAAuC,uBACvC,8CAA+C,kEAC/C,iDAAkD,mDAClD,kDAAmD,mDAEvDC,GAAI,CACA,wBAAyB,2BACzB,2BAA4B,gBAC5B,yBAA0B,aAC1B,gCAAiC,eACjC,2BAA4B,KAC5B,+BAAgC,SAChC,sCAAuC,uBACvC,8CAA+C,kEAC/C,iDAAkD,mDAClD,kDAAmD,oD,gBCkE9CE,EAA0B,SAACC,EAAoBC,GACxD,OAAOC,IAAWD,EAAD,6BAAuBD,EAAvB,WAGNG,EAzFQ,CACnBP,GAAI,CACA,kDAA6C,iEAC7C,sCACI,gHACJ,uDAAkD,yBAClD,2CAAsC,8BAEtC,0BAAqB,4BACrB,qCAAmC,uBACnC,6CAA2C,kEAC3C,gDAA8C,mDAC9C,iDAA+C,kDAC/C,sDAAiD,8CACjD,uDACI,mGACJ,oCAAkC,yCAClC,mDACI,kFACJ,0DACI,qEACJ,0DACI,qEACJ,sDAAoD,0DACpD,yBAA0B,6CAC1B,4BACI,0VACJ,uBAAqB,gEACrB,uBAAoB,6QACpB,uBAAoB,YACpB,uBAAoB,mPAEpB,wCACI,2IACJ,iCAA4B,2EAC5B,2BAAyB,KACzB,+BAA6B,SAC7B,gCAA8B,iCAC9B,iCAA+B,eAC/B,6BAA2B,aAC3B,6BAA2B,aAC3B,4BAA0B,oCAC1B,0BAAwB,OACxB,wCAAsC,+CACtC,oCAA+B,kDAEnCC,GAAI,CACA,0BAAqB,4BACrB,qCAAmC,uBACnC,6CAA2C,kEAC3C,gDAA8C,uDAC9C,iDAA+C,sDAC/C,sDAAiD,0CACjD,mDACI,mFACJ,0DACI,2EACJ,0DACI,wEACJ,sDAAoD,6DACpD,uDACI,8GACJ,oCAAkC,wCAElC,kDAA6C,gEAC7C,sCACI,gHACJ,2CAAgC,wBAChC,uDAAkD,yBAClD,2CAAsC,8BACtC,gDAAqC,wBACrC,yBAA0B,6CAC1B,4BACI,0VACJ,uBAAqB,gEACrB,uBAAoB,6QACpB,uBAAoB,YACpB,uBAAoB,qPClCbO,EA/CkB,CAC7BR,GAAI,CACA,4BAA6B,qBAC7B,+BAAgC,mBAChC,wCAAyC,iCACzC,4CAA6C,aAC7C,4CAA6C,aAC7C,iCAAkC,YAClC,4CAA6C,sEAC7C,yDAA0D,4BAC1D,wDAAyD,qCACzD,0DAA2D,+BAC3D,yDAA0D,+BAC1D,qCAAmC,6CACnC,+FACI,8BACJ,kHACI,uCACJ,uCAAqC,4BACrC,+CAA6C,4BAC7C,2BAA4B,WAC5B,+BAAgC,UAEpCC,GAAI,CACA,4BAA6B,mBAC7B,+BAAgC,mBAChC,wCAAyC,cACzC,4CAA6C,gBAC7C,4CAA6C,aAC7C,iCAAkC,WAClC,4CAA6C,mEAC7C,yDAA0D,6BAC1D,wDAAyD,sCACzD,0DAA2D,uCAC3D,yDAA0D,uCAC1D,qCAAmC,gDACnC,+FACI,8BACJ,kHACI,uCACJ,uCAAqC,gCACrC,+CAA6C,gCAC7C,2BAA4B,WAC5B,+BAAgC,WCxBzBQ,EAnBY,CACvBT,GAAI,CACA,kCAAmC,YACnC,gCAAiC,UACjC,yCAAuC,mBACvC,iCAAkC,sBAClC,yBAA0B,yBAC1B,0BAA2B,cAE/BC,GAAI,CACA,kCAAmC,YACnC,gCAAiC,UACjC,yCAAuC,mBACvC,iCAAkC,sBAClC,yBAA0B,yBAC1B,0BAA2B,eCiIpBS,EAhJY,CACvBV,GAAI,CACA,2CAAyC,SACzC,uDAAqD,aACrD,8CAA4C,8CAC5C,2CAAyC,QACzC,iCAAkC,mCAClC,uCAAwC,8CACxC,8CAA+C,kCAC/C,oDAAqD,0DACrD,6CAA8C,0BAC9C,oCAAqC,6BACrC,6CAA6C,sCAC7C,sCAAsC,iMACtC,wCAAwC,gDACxC,+CAA+C,8DAC/C,0CAA2C,gCAC3C,gCAAgC,6CAChC,mCAAoC,YACpC,mCAAoC,sBACpC,8CAAyC,oBACzC,iEAA+D,iDAC/D,+DACI,0IACJ,oDAAkD,+BAClD,kDACI,0KACJ,wCACI,oFACJ,6CACI,0JACJ,6CACI,+FACJ,mDAAiD,+BACjD,2CACI,gFACJ,sDAAuD,mBACvD,gDACI,+HACJ,gDAAiD,kDACjD,wCACI,+HACJ,yCAA0C,2BAC1C,4CACI,sFACJ,0CACI,gHACJ,4CAA0C,4BAC1C,6CAA2C,qCAC3C,gDAA8C,8CAC9C,gDACI,uFACJ,gDAAiD,6DAEjD,qCAAsC,4CACtC,mCAAoC,OACpC,6CAA2C,iBAC3C,gDAAiD,yBACjD,6DAA2D,kCAC3D,uDAAwD,yBACxD,oDAAkD,8BAClD,iDAAkD,4CAClD,sDAAiD,uCACjD,gDAA8C,eAC9C,oDAAkD,oBAClD,8CAA+C,sBAC/C,oDAAqD,iCACrD,uDAAwD,4BACxD,iDAA+C,qBAC/C,uDAAqD,oBACrD,qDAAmD,iCAEvDC,GAAI,CACA,2CAAyC,SACzC,uDAAqD,aACrD,8CAA4C,+CAC5C,2CAAyC,OACzC,iCAAkC,+BAClC,uCAAwC,0CACxC,8CAA+C,4BAC/C,oDAAqD,uCACrD,6CAA8C,wBAC9C,oCAAqC,6BACrC,6CAA6C,yCAC7C,sCAAsC,8LACtC,wCAAwC,gDACxC,+CAA+C,oDAC/C,0CAA2C,gCAC3C,gCAAgC,4CAChC,mCAAoC,YACpC,mCAAoC,sBACpC,8CAAyC,YACzC,iEAA+D,+CAC/D,+DACI,wIACJ,oDAAkD,6BAClD,kDACI,yKACJ,wCACI,oNACJ,6CACI,4JACJ,6CACI,4FACJ,mDAAiD,+BACjD,2CACI,6EACJ,sDAAuD,mBACvD,gDACI,+HACJ,gDAAiD,qDACjD,wCACI,2HACJ,yCAA0C,6BAC1C,4CACI,qFACJ,0CACI,2GACJ,4CAA0C,6BAC1C,6CAA2C,yCAC3C,gDAA8C,kDAC9C,gDACI,qFACJ,gDAAiD,6DAEjD,qCAAsC,4CACtC,mCAAoC,OACpC,6CAA2C,iBAC3C,gDAAiD,yBACjD,6DAA2D,kCAC3D,uDAAwD,uBACxD,oDAAkD,+BAClD,iDAAkD,4CAClD,sDAAiD,uCACjD,gDAA8C,eAC9C,oDAAkD,qBAClD,8CAA+C,sBAC/C,oDAAqD,iCACrD,iDAA+C,qBAC/C,uDAAwD,6BACxD,uDAAqD,oBACrD,qDAAmD,kCCpH5CU,EAzBa,CACxBX,GAAI,CACA,yBAA0B,cAC1B,4BAA6B,aAC7B,0BAA2B,aAC3B,4BAA6B,KAC7B,gCAAiC,SACjC,uCAAwC,uBACxC,+CAAgD,kEAChD,kDAAmD,mDACnD,mDAAoD,mDAExDC,GAAI,CACA,yBAA0B,cAC1B,4BAA6B,gBAC7B,0BAA2B,aAC3B,4BAA6B,KAC7B,gCAAiC,SACjC,uCAAwC,uBACxC,+CAAgD,kEAChD,kDAAmD,uDACnD,mDAAoD,sDCG7CW,EAxBW,CACtBZ,GAAI,CACA,uBAAwB,gBACxB,qBAAsB,oCACtB,gCAA8B,yBAC9B,sBAAuB,eACvB,0BAA2B,KAC3B,8BAA+B,SAC/B,qCAAsC,uBACtC,yBAAuB,UACvB,oCAAqC,yCAEzCC,GAAI,CACA,uBAAwB,gBACxB,qBAAsB,2CACtB,gCAA8B,8BAC9B,sBAAuB,oBACvB,0BAA2B,KAC3B,8BAA+B,SAC/B,qCAAsC,uBACtC,yBAAuB,YCXzBY,EAAWC,EAAQ,KACnBC,EAAWD,EAAQ,KACnBE,EAAeF,EAAQ,KACvBG,EAAeH,EAAQ,KA8BhBI,EAAc,CACvBlB,GA7BgB,uIACba,GACAG,GACAjB,EAAqBC,IACrBO,EAAeP,IACfE,EAAmBF,IACnBS,EAAmBT,IACnBQ,EAAyBR,IACzBW,EAAoBX,IACpBU,EAAmBV,IACnBY,EAAkBZ,IAVL,IAWhB,qCAAsC,iBAmBtCC,GAhBgB,uIACbc,GACAE,GACAlB,EAAqBE,IACrBM,EAAeN,IACfC,EAAmBD,IACnBQ,EAAmBR,IACnBO,EAAyBP,IACzBU,EAAoBV,IACpBS,EAAmBT,IACnBW,EAAkBX,IAVL,IAWhB,qCAAsC,kB,wBC9B1Ca,EAAQ,KACRA,EAAQ,KAQR,IAUeK,EAVS,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,OAAQC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,SAClCC,EAAsB,OAAXH,EAAkBF,EAAYlB,GAAKkB,EAAYjB,GAEhE,OADAuB,IAAMJ,OAAkB,OAAXA,EAAkB,KAAO,MAElC,cAAC,IAAD,CAAcA,OAAQA,EAAQG,SAAUA,EAAUF,QAASA,EAA3D,SACKC,K,kCCJEG,I,ECeVC,EDfUD,EAjBf,SAAiBE,GACb,OACI,6CAAKC,UAAU,kBAAkBC,MAAO,GAAIC,QAAQ,eAAkBH,GAAtE,aACI,oBAAGI,KAAK,OAAOC,SAAS,UAAxB,UACI,sBACID,KAAK,UACLE,EAAE,0SAEN,sBACIF,KAAK,UACLE,EAAE,soC,qFEQPC,EAXG,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOb,EAAV,EAAUA,SAAV,OACd,mCACI,eAAC,IAAD,CAAKc,UAAU,KAAKC,OAAO,IAA3B,UACI,cAAC,IAAD,CAAKD,UAAWd,EAAW,IAAM,OAAjC,SACI,cAAC,cAAD,UAAca,MAEjBb,GAAY,cAAC,UAAD,CAASgB,IAAI,MAAb,SAAoBhB,U,wICZhCiB,GAAuB,SAAC,GAAD,MAA+C,CAC/EC,KADgC,EAAGC,IAEnCC,GAFgC,EAAQC,M,SCgC7BC,GANW,CACtBC,oBA1BwB,SAACC,GAA2D,IAC5EL,EAAuBK,EAAvBL,IAAKM,EAAkBD,EAAlBC,SAAUJ,EAAQG,EAARH,IACvB,YAAeK,IAARP,QAAkCO,IAAbD,QAAkCC,IAARL,GAyBtDM,4BAVgC,SAAC,GAA2E,IAAzER,EAAwE,EAAxEA,IAAKE,EAAmE,EAAnEA,IAAKI,EAA8D,EAA9DA,SAC7C,MAAO,CACHN,IAAKS,0BAAgBT,GACrBE,IAAKO,0BAAgBP,GACrBI,aAOJI,4BAvBgC,SAChCC,EACAC,GAEA,MAAO,CACHA,GAAIA,GAAMC,kBACVb,IAAKc,0BAAgBH,EAAWX,KAChCE,IAAKY,0BAAgBH,EAAWT,KAChCI,SAAUK,EAAWL,a,SHiBxBrB,K,UAAAA,E,UAAAA,E,qBAAAA,M,KAWE,IAAM8B,GAA4B,CACrCC,QAAM,oBACD/B,EAAuBe,IADtB,uBAEKiB,OAAOC,KAAKC,uBAFjB,CAGEC,4BAAyBC,yBAH3B,eAKDpC,EAAuBiB,IALtB,uBAMKe,OAAOC,KAAKC,uBANjB,CAOEC,4BAAyBE,0BAP3B,eASDrC,EAAuBqB,SAAWW,OAAOC,KAAKK,gCAT7C,IAaGC,GAAuB,uBAE9BC,GAAOC,mCAuFEC,GArFU,SAAC,GAAgF,IAA9EC,EAA6E,EAA7EA,QAASC,EAAoE,EAApEA,QAASxB,EAA2D,EAA3DA,OAA2D,IAAnDyB,oBAAmD,MAApC,GAAoC,EAAhCC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,SACzEpE,EAAOqE,cAWb,OACI,cAACR,GAAKS,cAAN,CACIC,cAAehC,GAAkBK,4BAA4BH,GAAU,IACvE0B,SAZe,SAACpB,GACpB,IAAMyB,EAAiBjC,GAAkBO,4BAA4BC,EAA9C,OAA0DN,QAA1D,IAA0DA,OAA1D,EAA0DA,EAAQO,IACzF,IAAIT,GAAkBC,oBAAoBgC,GAGtC,MAAM,IAAIC,MAAM,uEAFhBN,EAASK,IAUTE,WAAY,SAACC,GAAY,IACbC,EAAWD,EAAXC,OACFC,EAA4B,CAC9BZ,UACAD,QAASd,0BAAgB0B,EAAOtC,MAAQ0B,GAEtCc,EAA4B,CAC9Bb,QAASf,0BAAgB0B,EAAOxC,MAAQ6B,EACxCD,QAASA,GAGPe,OACSpC,IAAXF,EACMyB,EAAac,IAAI9C,IACjBgC,EAAae,QAAO,SAACC,GAAD,OAAOA,EAAElC,KAAOP,EAAOO,MAAIgC,IAAI9C,IAE7D,OACI,eAAC2B,GAAKA,KAAN,CACIO,SAAUA,EACVe,mBAAoBC,iCAAsBpF,EAAM4D,IAChDyB,0BAA2BC,wCAA6BtF,EAAM4D,IAHlE,UAII,cAAC,eAAD,CAAc3B,IAAI,KAAlB,SACI,cAAC,KAAD,CAAkBe,GAAG,+BAGzB,cAAC,KAAD,UACI,cAACa,GAAK0B,gBAAN,CACIC,OAAQvF,IAAWD,EAAM,qCACzByF,mBAAmB,EACnBxB,QAASA,EACTD,QAASA,EACT0B,qCAAqC,EACrCC,mBAAoBZ,EACpBa,eAAgB,CACZC,KAAMxE,EAAuBe,IAC7B0D,MAAO7F,IAAWD,EAAM,yCACxB+F,SAAUC,yBAAsBC,iBAAiB,CAC7CC,UAAU,EACVC,IAAKtB,EAAcZ,QACnBmC,IAAKvB,EAAcb,QACnBqC,OAAQnD,0BAAgB0B,EAAOtC,QAGvCgE,aAAc,CACVT,KAAMxE,EAAuBiB,IAC7BwD,MAAO7F,IAAWD,EAAM,yCACxB+F,SAAUC,yBAAsBO,eAAe,CAC3CL,UAAU,EACVC,IAAKrB,EAAcb,QACnBmC,IAAKtB,EAAcd,QACnBwC,SAAUtD,0BAAgB0B,EAAOxC,YAKjD,cAAC,KAAD,UACI,cAACyB,GAAK4C,cAAN,CACIZ,KAAMxE,EAAuBqB,SAC7BoD,MAAO7F,IAAWD,EAAM,8BACxB+F,SAAUW,kD,4DI1HpCC,I,OAAMC,KAAS,qBA+BNC,GA7BU,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,SAAUC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,OACtChH,EAAOqE,cAgBb,OACI,cAAC,KAAD,CACI4C,UAAW,SAACC,GAAD,OAAaA,EAAQlE,IAChCmE,aAAc,SAACD,GAAD,OAAaE,yBAAeF,EAAQxE,SAAU1C,EAAKe,SACjEgG,SAAUA,EACVC,OAAQA,EACRK,cArBwB,SAACH,GAC7B,IAAMI,EAAOF,yBAAeF,EAAQxE,SAAU1C,EAAKe,QACnD,OACI,sBAAKQ,UAAWoF,GAAIY,QAAQ,SAA5B,UACI,uBAAMhG,UAAWoF,GAAIY,QAAQ,QAA7B,UACKP,GAAU,cAAC,KAAD,CAAYQ,QAAS,kBAAMR,EAAOE,IAAlC,SAA6CI,KACtDN,GAAU,+BAAOM,OAEvB,uBAAM/F,UAAWoF,GAAIY,QAAQ,QAA7B,UACKE,+BAAqBP,EAAQ9E,KADlC,MAC2CqF,+BAAqBP,EAAQ5E,YAa5EoF,MAAOZ,KCCJa,OAzBf,YAAiH,IAAhE9B,EAA+D,EAA/DA,KAAM5B,EAAyD,EAAzDA,QAASD,EAAgD,EAAhDA,QAAS+B,EAAuC,EAAvCA,SAAU6B,EAA6B,EAA7BA,OAC/E,OACI,cAAC,yBAAD,CACI/B,KAAMA,EACN+B,OAAQA,EACR7B,SAAUA,EACV8B,YAAY,SACZC,SAAUC,iBACVC,aAAc,gBAAG7D,EAAH,EAAGA,SAAUC,EAAb,EAAaA,SAAU6D,EAAvB,EAAuBA,KAAMC,EAA7B,EAA6BA,SAA7B,OACV,cAAC,GAAD,CACIzF,OAAQwF,EACR/D,aAAcgE,EACdjE,QAASA,EACTD,QAASA,EACTG,SAAUA,EACVC,SAAUA,KAGlB+D,aAAc,gBAAGT,EAAH,EAAGA,MAAOV,EAAV,EAAUA,OAAQD,EAAlB,EAAkBA,SAAlB,OACV,cAAC,GAAD,CAAmBD,SAAUY,EAAOV,OAAQA,EAAQD,SAAUA,QCZ/DqB,ICAVC,GDAUD,GAjBf,YAA2C,IAAlBxD,EAAiB,EAAjBA,OACrB,OACI,cAAC,IAAD,CAAK5C,OAAO,KAAZ,SACI,qBAAKsG,MAAO,CAAEC,UAAW,qBAAsBC,WAAY,OAAQxG,OAAQ,WAA3E,SACI,eAAC,IAAD,CAAKA,OAAO,IAAZ,UACK4C,GACG,cAAC,KAAD,CAAO0D,MAAO,CAAEG,QAAS,QAAzB,SACI,qBAAKH,MAAO,CAAEtG,OAAQ,EAAG0G,SAAU,SAAnC,SAA+CC,KAAKC,UAAUhE,EAAQ,KAAM,YAGxEjC,IAAXiC,GAAwB,cAAC,KAAD,CAAO0D,MAAO,CAAEG,QAAS,QAAzB,gCEwB9BI,GA3BqD,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,iBAAkBC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,aACzFC,EAAyC,CAC3CtJ,GAAI,GACJC,GAAI,IAGFwD,EAAS0F,EAAiB1F,OAWhC,OATAC,OAAOC,KAAKF,GAAQ8F,SAAQ,SAACC,GAAD,OACxB9F,OAAOC,KAAKF,EAAO+F,IAAQD,SAAQ,SAACE,GAChC,IAAMC,EAAQjG,EAAO+F,GAAOC,GACtBE,EAAUC,mCAAwBF,EAAOF,EAAOJ,GACtDE,EAAmB,GAAOK,GAAWN,EAAY,GAAOM,GACxDL,EAAmB,GAAOK,GAAWN,EAAY,GAAOM,SAK5D,cAAC,IAAD,CACIxH,MAAM,gBACNZ,SAAU+H,EACVO,iBAAiB,EACjBC,wBAAwB,M,SDZ/BpB,K,iBAAAA,Q,KAOL,I,GEOKqB,GFPCnF,GAA4B,CAAE9B,OAAQ,IAuE7BkH,GArEO,WAAO,IAAD,EACwBC,wBAA4CjH,GADpE,mBACjBkH,EADiB,KACCC,EADD,OAEoBF,wBAA0CjH,GAF9D,mBAEjBoH,EAFiB,KAEDC,EAFC,KAGlBhK,EAAOqE,cACb,OACI,qCACI,cAAC,IAAD,CAAKtC,UAAU,IAAf,SACI,cAAC,cAAD,gCAEJ,eAAC,KAAD,CAAOkI,QAAQ,EAAf,UACI,cAAC,qBAAD,CACI1F,cAAeA,GACfJ,SAAU6F,EACVtF,WAAY,WACR,OACI,cAAC,kBAAD,CACIwF,gBAAgB,EAChBC,kBAAkB,iBAClBhF,mBAAoBC,iCAAsBpF,EAAM,oBAChDqF,0BAA2BC,wCAA6BtF,EAAM,oBAJlE,SAKI,cAAC,GAAD,CACI6F,KAAMwC,GAAU5F,OAChBwB,QAASmG,eACTpG,QAASqG,mBACTtE,SAAUuE,4BAAiB,CAAEpE,UAAU,IACvC0B,OAAQ,CACJ2C,SAAU,kBACVC,UAAW,uBACXC,WAAY,SACZC,cAAe,qCAOvC,cAAC,GAAD,CAAe9F,OAAQmF,OAE3B,cAAC,IAAD,CAAK/H,OAAO,MAAMD,UAAU,IAA5B,SACI,cAAC,GAAD,CACI+G,iBAAkB3F,GAClB4F,SAAUnF,GACVoF,aAActJ,MAItB,cAAC,IAAD,CAAKsC,OAAO,MAAMD,UAAU,IAA5B,SACI,cAAC,cAAD,2BAGJ,cAAC,IAAD,CAAKC,OAAO,MAAMD,UAAU,IAA5B,SACI,eAAC,KAAD,WACI,cAAC,KAAD,CAAOkI,QAAQ,EAAf,SACI,cAAC,GAAD,CACIhG,QAASmG,eACTpG,QAASqG,mBACTlG,SAAU2F,EACV1F,SAAU,kBAAMuG,QAAQC,IAAI,kBAGpC,cAAC,GAAD,CAAehG,OAAQiF,SAI/B,cAAC,IAAD,CAAiB/H,MAAM,eAAeZ,SAAUxB,EAAsB8J,iBAAiB,QGrEpFqB,GANS,CACpBC,kBApB6B,SAACC,GAC9B,YAA0BpI,IAAnBoI,EAAW3I,UAAwCO,IAAnBoI,EAAWzI,KAoBlD0I,0BAT8B,SAAC,GAA6D,IAA3D5I,EAA0D,EAA1DA,IAAKE,EAAqD,EAArDA,IACtC,MAAO,CACHF,IAAKS,0BAAgBT,GACrBE,IAAKO,0BAAgBP,KAOzB2I,0BAlB8B,SAAClI,EAAkCC,GACjE,MAAO,CACHA,GAAIA,GAAMC,kBACVb,IAAKc,0BAAgBH,EAAWX,KAChCE,IAAKY,0BAAgBH,EAAWT,S,SD2BnCoH,K,UAAAA,E,WAAAA,Q,KAKE,IAAMwB,GAA0B,CACnC9H,QAAM,sBACDsG,GAAqBtH,IADpB,uBAC8BiB,OAAOC,KAAKC,uBAD1C,CAC8DC,4BAAyBC,yBADvF,gBAEDiG,GAAqBpH,IAFpB,uBAGKe,OAAOC,KAAKC,uBAHjB,CAIEC,4BAAyBE,0BAJ3B,KASGyH,GAAqB,iBAE5BtH,GAAOC,mCAwFEsH,GAtFQ,SAAC,GAA8F,IAA5FpH,EAA2F,EAA3FA,QAASC,EAAkF,EAAlFA,QAAS2D,EAAyE,EAAzEA,OAAQmD,EAAiE,EAAjEA,WAAiE,IAArDM,sBAAqD,MAApC,GAAoC,EAAhClH,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,SACrFpE,EAAOqE,cAUPiH,EAAsC,CACxCxJ,MAAO7B,IAAWD,EAAM,yBACxBwG,SAAUvG,IAAWD,EAAM,4BAC3BqG,OAAQpG,IAAWD,EAAM,0BACzBuL,cAAetL,IAAWD,EAAM,iCAChCwL,SAAUvL,IAAWD,EAAM,4BAC3ByL,aAAcxL,IAAWD,EAAM,iCAG7B0L,EAAgC,2BAAQJ,GAAkB1D,GAE1D+D,OACahJ,IAAfoI,EACMM,EAAerG,IAAI9C,IACnBmJ,EAAepG,QAAO,SAAC2G,GAAD,OAAOA,EAAE5I,KAAO+H,EAAW/H,MAAIgC,IAAI9C,IAEnE,OACI,mCACI,cAAC,GAAKoC,cAAN,CACIC,cAAesG,GAAgBG,0BAA0BD,GAAc,IACvE5G,SA7BW,SAACpB,GACpB,IAAM8I,EAAqBhB,GAAgBI,0BAA0BlI,EAA1C,OAAsDgI,QAAtD,IAAsDA,OAAtD,EAAsDA,EAAY/H,IAC7F,IAAI6H,GAAgBC,kBAAkBe,GAGlC,MAAM,IAAIpH,MAAM,mEAFhBN,EAAS,2BAAK4G,GAAec,KA2BzBnH,WAAY,SAACC,GAAD,OACR,eAAC,GAAKd,KAAN,CACIO,SAAUA,EACVe,mBAAoBC,iCAAsBpF,EAAMmL,IAChD9F,0BAA2BC,wCAA6BtF,EAAMmL,IAHlE,UAII,cAAC,eAAD,CAAclJ,IAAI,KAAlB,SAAwByJ,EAAW5J,QACnC,cAAC,KAAD,UACI,cAAC,GAAKyD,gBAAN,CACIC,OAAQkG,EAAWH,cACnB9F,mBAAmB,EACnBxB,QAASA,EACTD,QAASA,EACT0B,qCAAqC,EACrCC,mBAAoBgG,EACpB/F,eAAgB,CACZE,MAAO4F,EAAWlF,SAClBX,KAAM6D,GAAqBtH,IAC3B2D,SAAUC,yBAAsBC,iBAAiB,CAC7CC,UAAU,EACVC,IAAKlC,EACLmC,IAAKpC,EACLqC,OAAQnD,0BAAgByB,EAAOC,OAAOtC,OAE1CwJ,SAAU,WACNC,YAAW,WACPpH,EAAOqH,cAActC,GAAqBpH,UAItDgE,aAAc,CACVR,MAAO4F,EAAWrF,OAClBR,KAAM6D,GAAqBpH,IAE3ByD,SAAUC,yBAAsBO,eAAe,CAC3CL,UAAU,EACVC,IAAKlC,EACLmC,IAAKpC,EACLwC,SAAUtD,0BAAgByB,EAAOC,OAAOxC,OAE5C0J,SAAU,WACNC,YAAW,WACPpH,EAAOqH,cAActC,GAAqBtH,uBE7FvE6J,GA1BQ,SAAC,GAAkD,IAAD,IAA/ClB,kBAA+C,MAAlC,GAAkC,EAA9BhE,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,OAC3CkF,EAAqB,SAACC,GAAD,gBACpB1E,+BAAqB0E,EAAM/J,KADP,cACiBqF,+BAAqB0E,EAAM7J,OAYvE,OACI,cAAC,KAAD,CACI2E,UAAW,SAACkF,GAAD,OAAWA,EAAMnJ,IAC5BmE,aAAc,SAACgF,GAAD,OAAWD,EAAmBC,IAC5CpF,SAAUA,EACVC,OAAQA,EACRK,cAhBsB,SAAC8E,GAC3B,IAAMrK,EAAQoK,EAAmBC,GACjC,OACI,qCACKnF,GAAU,cAAC,KAAD,CAAYQ,QAAS,kBAAMR,EAAOmF,IAAlC,SAA2CrK,KACpDkF,GAAU,+BAAOlF,QAYvB4F,MAAOqD,EAAW9F,QAAO,SAACkH,GAAD,YAAwBxJ,IAAbwJ,EAAMnJ,SCYvCoJ,ICvBV/D,GDuBU+D,GA3Bf,YAA+G,IAAhEvG,EAA+D,EAA/DA,KAAM5B,EAAyD,EAAzDA,QAASD,EAAgD,EAAhDA,QAAS+B,EAAuC,EAAvCA,SAAU6B,EAA6B,EAA7BA,OAC7E,OACI,mCACI,cAAC,yBAAD,CACI/B,KAAMA,EACN+B,OAAQA,EACRC,YAAY,SACZ9B,SAAUA,EACV+B,SAAUC,iBACVC,aAAc,gBAAG7D,EAAH,EAAGA,SAAUC,EAAb,EAAaA,SAAU6D,EAAvB,EAAuBA,KAAMC,EAA7B,EAA6BA,SAA7B,OACV,cAAC,GAAD,CACI6C,WAAY9C,EACZhE,QAASA,EACTD,QAASA,EACTG,SAAUA,EACVC,SAAUA,EACViH,eAAgBnD,KAGxBC,aAAc,gBAAGT,EAAH,EAAGA,MAAOV,EAAV,EAAUA,OAAQD,EAAlB,EAAkBA,SAAlB,OACV,cAAC,GAAD,CAAgBgE,WAAYrD,EAAOV,OAAQA,EAAQD,SAAUA,W,SChB5EsB,K,eAAAA,Q,KAOL,I,GCMKgE,GDNC9H,GAA4B,CAAE+H,MAAO,IAuE5B3C,GArEO,WAAO,IAAD,EACwBC,wBAA0CjH,GADlE,mBACjBkH,EADiB,KACCC,EADD,OAEoBF,wBAA0CjH,GAF9D,mBAEjBoH,EAFiB,KAEDC,EAFC,KAGlBhK,EAAOqE,cACb,OACI,qCACI,cAAC,IAAD,CAAKtC,UAAU,IAAf,SACI,cAAC,cAAD,gCAEJ,eAAC,KAAD,CAAOkI,QAAQ,EAAf,UACI,cAAC,qBAAD,CACI1F,cAAeA,GACfJ,SAAU6F,EACVtF,WAAY,WACR,OACI,cAAC,kBAAD,CACIwF,gBAAgB,EAChBC,kBAAkB,iBAClBhF,mBAAoBC,iCAAsBpF,EAAM,qBAChDqF,0BAA2BC,wCAA6BtF,EAAM,qBAJlE,SAKI,cAAC,GAAD,CACI6F,KAAMwC,GAAUiE,MAChBrI,QAASmG,eACTpG,QAASqG,mBACTtE,SAAUuE,4BAAiB,CAAEpE,UAAU,IACvC0B,OAAQ,CACJ2C,SAAU,iBACVC,UAAW,qBACXC,WAAY,QACZC,cAAe,mCAOvC,cAAC,GAAD,CAAe9F,OAAQmF,OAG3B,cAAC,IAAD,CAAK/H,OAAO,MAAMD,UAAU,IAA5B,SACI,cAAC,GAAD,CACI+G,iBAAkBoC,GAClBnC,SAAUoC,GACVnC,aAAcnJ,MAItB,cAAC,IAAD,CAAKmC,OAAO,MAAMD,UAAU,IAA5B,SACI,cAAC,cAAD,2BAGJ,eAAC,KAAD,WACI,cAAC,KAAD,CAAOkI,QAAQ,EAAf,SACI,cAAC,GAAD,CACIhG,QAASmG,eACTpG,QAASqG,mBACTU,WAAY,GACZ5G,SAAU2F,EACV1F,SAAU,kBAAMuG,QAAQC,IAAI,kBAGpC,cAAC,GAAD,CAAehG,OAAQiF,OAG3B,cAAC,IAAD,CAAiB3I,SAAUrB,EAAoB2J,iBAAiB,Q,wCC5DvE6C,K,uCAAAA,E,kBAAAA,E,uBAAAA,Q,KAQE,IAAME,GAA0B,CACnCnJ,QAAM,sBACDiJ,GAAoBG,QADnB,aACiCnJ,OAAOC,KAAKK,iCAD7C,gBAED0I,GAAoBI,UAFnB,aAEmCpJ,OAAOC,KAAKK,iCAF/C,gBAGD0I,GAAoBK,mBAHnB,uBAIKrJ,OAAOC,KAAKK,gCAJjB,aAKKN,OAAOC,KAAKqJ,wCALjB,KAUGC,GAAqB,iBAE5B/I,GAAOC,mCA4EE+I,GA1EQ,SAAC,GAOV,IAAD,IANTC,WAAYvI,OAMH,MANmB,CAAEiI,QAAS,GAAIC,UAAW,GAAIC,mBAAe,IAMhE,EALTK,EAKS,EALTA,4BACAC,EAIS,EAJTA,KACAC,EAGS,EAHTA,YACA9I,EAES,EAFTA,SACAC,EACS,EADTA,SAEMpE,EAAOqE,cASP6I,EAAkC,CACpCC,qBAAsBlN,IAAWD,EAAM,mCACvCoN,mBAAoBnN,IAAWD,EAAM,iCACrCqN,8BAA0BpN,IAAWD,EAAM,2CAGzCsN,EAAG,2BAAQJ,GAAgBF,GAEjC,OACI,mCACI,cAAC,GAAK1I,cAAN,CACIC,cAAeA,EACfJ,SApBW,SAACpB,GACpB,IC3DoB,SAAC+J,EAAiCG,GAAqD,IACvGT,EAAsCM,EAAtCN,QAASC,EAA6BK,EAA7BL,UAAWC,EAAkBI,EAAlBJ,mBAC5B,OAAIO,EACOM,oBAASf,IAAYe,oBAASd,IAAcc,oBAASb,GAEzDa,oBAASb,GDsDRc,CAAazK,EAAYkK,GAGzB,MAAM,IAAIxI,MAAM,sEAFhBN,EAAS,2BAAKpB,GAAN,IAAkBC,GAAIuB,EAAcvB,IAAMC,sBAmB9CyB,WAAY,kBACR,eAAC,GAAKb,KAAN,CACIO,SAAUA,EACVe,mBAAoBC,iCAAsBpF,EAAM4M,IAChDvH,0BAA2BC,wCAA6BtF,EAAM4M,IAHlE,UAII,cAAC,eAAD,CAAc3K,IAAI,KAAlB,wBACA,cAAC,KAAD,UACI,cAAC,GAAKwL,MAAN,CACI5H,KAAMwG,GAAoBK,mBAC1B5G,MAAOwH,EAAID,8BACXtH,SAAU2H,2CAA0B,CAChCxH,UAAU,EACVyH,iBAAkBZ,IAEtBa,UAAU,UACVC,UAAW,GACXvF,MAAO,CAAE9G,MAAO,aAGvByL,GACG,eAAC,KAAD,CAAOa,QAAS,EAAhB,UACI,cAAC,KAAD,UACI,cAAC,GAAKL,MAAN,CACI5H,KAAMwG,GAAoBG,QAC1B1G,MAAOwH,EAAIF,mBACXrH,SAAUW,2CAGlB,cAAC,KAAD,UACI,cAAC,GAAK+G,MAAN,CACI5H,KAAMwG,GAAoBI,UAC1B3G,MAAOwH,EAAIH,qBACXpH,SAAUW,uD,UE5EnCqH,GAhCQ,SAAC,GAAkD,IAAD,IAA/CjB,kBAA+C,MAAlC,GAAkC,EAA9B/F,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,OAC3CgH,EAAqB,SAACC,GACxB,OACI,qCACI,sBAAM3F,MAAO,CAAE4F,aAAc,QAA7B,SAAwCD,EAAKvB,qBAAsB,IAClEuB,EAAKzB,SAAWyB,EAAKxB,WAAa,+BAAO0B,sBAAWF,EAAKzB,QAASyB,EAAKxB,iBAapF,OACI,cAAC,KAAD,CACIxF,UAAW,SAACgH,GAAD,OAAUA,EAAKjL,IAC1BmE,aAAc,SAAC8G,GAAD,OACVA,EAAKzB,SAAWyB,EAAKxB,UAAY0B,sBAAWF,EAAKzB,QAASyB,EAAKxB,WAAawB,EAAKvB,oBAErF3F,SAAUA,EACVC,OAAQA,EACRK,cAjBsB,SAAC4G,GAC3B,OACI,qCACKjH,GAAU,cAAC,KAAD,CAAYQ,QAAS,kBAAMR,EAAOiH,IAAlC,SAA0CD,EAAmBC,MACtEjH,GAAU,+BAAOgH,EAAmBC,SAc1CvG,MAAOoF,EAAW7H,QAAO,SAACgJ,GAAD,YAAsBtL,IAAZsL,EAAKjL,SC4BrCoL,IC9CV/F,GD8CU+F,GA7Cf,YAMuB,IALnBvI,EAKkB,EALlBA,KACAE,EAIkB,EAJlBA,SACAsI,EAGkB,EAHlBA,MACApB,EAEkB,EAFlBA,YACAF,EACkB,EADlBA,4BAEM/M,EAAOqE,cAEP6I,EAA2C,CAC7CoB,qBAAsBrO,IAAWD,EAAM,kCACvCuO,aAActO,IAAWD,EAAM,0BAC/BwO,aAAcvO,IAAWD,EAAM,4BAG7BsN,EAAG,2BAAQJ,GAAgBmB,GACjC,OACI,mCACI,cAAC,yBAAD,CACIxI,KAAMA,EACN+B,OAAQ,CACJ2C,SAAU+C,EAAIgB,qBACd7D,WAAY6C,EAAIkB,aAChB9D,cAAe4C,EAAImB,sBACnBjE,UAAW8C,EAAIiB,cAEnB1G,YAAY,SACZ9B,SAAUA,EACViC,aAAc,gBAAG7D,EAAH,EAAGA,SAAUC,EAAb,EAAaA,SAAU6D,EAAvB,EAAuBA,KAAvB,OACV,cAAC,GAAD,CACI6E,WAAY7E,EACZ9D,SAAUA,EACVC,SAAUA,EACV6I,YAAaA,EACbF,4BAAwBA,KAGhC5E,aAAc,gBAAGT,EAAH,EAAGA,MAAOV,EAAV,EAAUA,OAAQD,EAAlB,EAAkBA,SAAlB,OACV,cAAC,GAAD,CAAgB+F,WAAYpF,EAAOV,OAAQA,EAAQD,SAAUA,W,SCvC5EsB,K,yBAAAA,Q,KAOL,I,GCUKqG,GDVCnK,GAA4B,CAAEuI,WAAY,IA6DjC6B,GA3DW,WAAO,IAAD,EACoB/E,wBAA0CjH,GAD9D,mBACrBkH,EADqB,KACHC,EADG,OAEgBF,wBAA0CjH,GAF1D,mBAErBoH,EAFqB,KAELC,EAFK,KAGtBhK,EAAOqE,cACb,OACI,qCACI,cAAC,IAAD,CAAKtC,UAAU,IAAf,SACI,cAAC,cAAD,gCAEJ,eAAC,KAAD,CAAOkI,QAAQ,EAAf,UACI,cAAC,qBAAD,CACI1F,cAAeA,GACfJ,SAAU6F,EACVtF,WAAY,WACR,OACI,cAAC,kBAAD,CACIwF,gBAAgB,EAChBC,kBAAkB,iBAClBhF,mBAAoBC,iCAAsBpF,EAAM,qBAChDqF,0BAA2BC,wCAA6BtF,EAAM,qBAJlE,SAKI,cAAC,GAAD,CACI6F,KAAMwC,GAAUyE,WAChB/G,SAAUuE,4BAAiB,CAAEpE,UAAU,WAM3D,cAAC,GAAD,CAAetB,OAAQmF,OAG3B,cAAC,IAAD,CAAK/H,OAAO,MAAMD,UAAU,IAA5B,SACI,cAAC,GAAD,CACI+G,iBAAkByD,GAClBxD,SAAU6D,GACV5D,aAAc5I,MAItB,cAAC,IAAD,CAAK4B,OAAO,MAAMD,UAAU,IAA5B,SACI,cAAC,cAAD,2BAGJ,eAAC,KAAD,WACI,cAAC,KAAD,CAAOkI,QAAQ,EAAf,SACI,cAAC,GAAD,CACI6C,WAAY,GACZ3I,SAAU2F,EACV1F,SAAU,kBAAMuG,QAAQC,IAAI,kBAGpC,cAAC,GAAD,CAAehG,OAAQiF,OAG3B,cAAC,IAAD,CAAiB3I,SAAUd,EAAoBoJ,iBAAiB,QEpD7DoF,GANU,CACrBC,uBAvB2B,SAACC,GAC5B,YAA2BnM,IAApBmM,EAAY1M,UAAyCO,IAApBmM,EAAYxM,KAuBpDyM,+BATmC,SAAC,GAAuE,IAArE3M,EAAoE,EAApEA,IAAKE,EAA+D,EAA/DA,IAC3C,MAAO,CACHF,IAAKS,0BAAgBT,GACrBE,IAAKO,0BAAgBP,KAOzB0M,+BArBmC,SACnCjM,EACAC,GAEA,MAAO,CACHA,GAAIA,GAAMC,kBACVb,IAAKc,0BAAgBH,EAAWX,KAChCE,IAAKY,0BAAgBH,EAAWT,S,SDuBnCoM,K,UAAAA,E,WAAAA,Q,KAKE,IAAMO,GAA2B,CACpC7L,QAAM,sBACDsL,GAAsBtM,IADrB,uBAEKiB,OAAOC,KAAKC,uBAFjB,CAGEC,4BAAyBC,yBAH3B,gBAKDiL,GAAsBpM,IALrB,uBAMKe,OAAOC,KAAKC,uBANjB,CAOEC,4BAAyBE,0BAP3B,KAYGwL,GAAsB,kBAE7BrL,GAAOC,mCAgGEqL,GA9FS,SAAC,GAQX,IAPVnL,EAOS,EAPTA,QACAC,EAMS,EANTA,QACAyH,EAKS,EALTA,WACAoD,EAIS,EAJTA,YAIS,IAHTM,wBAGS,MAHU,GAGV,EAFTjL,EAES,EAFTA,SACAC,EACS,EADTA,SAEMpE,EAAOqE,cAWPiH,EAAuC,CACzCxJ,MAAO7B,IAAWD,EAAM,0BACxBwG,SAAUvG,IAAWD,EAAM,6BAC3BqG,OAAQpG,IAAWD,EAAM,2BACzBwL,SAAUvL,IAAWD,EAAM,6BAC3ByL,aAAcxL,IAAWD,EAAM,kCAG7BqP,EAAmC,2BAAQ/D,GAAkBI,GAEnE,OACI,mCACI,cAAC,GAAKpH,cAAN,CACIC,cAAeqK,GAAiBG,+BAA+BD,GAAe,IAC9E3K,SAvBW,SAACpB,GACpB,IAAMuM,EAA0BV,GAAiBI,+BAA+BjM,EAAhD,OAA4D+L,QAA5D,IAA4DA,OAA5D,EAA4DA,EAAa9L,IACzG,IAAI4L,GAAiBC,uBAAuBS,GAGxC,MAAM,IAAI7K,MAAM,qEAFhBN,EAASmL,IAqBL5K,WAAY,SAACC,GACT,IAAMgB,OACchD,IAAhBmM,EACMM,EAAiBpK,IAAI9C,IACrBkN,EAAiBnK,QAAO,SAACsK,GAAD,OAAOA,EAAEvM,KAAO8L,EAAY9L,MAAIgC,IAAI9C,IAEtE,OACI,eAAC,GAAK2B,KAAN,CACIO,SAAUA,EACVe,mBAAoBC,iCAAsBpF,EAAMkP,IAChD7J,0BAA2BC,wCAA6BtF,EAAMkP,IAHlE,UAII,cAAC,eAAD,CAAcjN,IAAI,KAAlB,SAAwBoN,EAAavN,QACrC,cAAC,KAAD,UACI,cAAC,GAAKyD,gBAAN,CACIC,OAAQ6J,EAAa9D,cACrB9F,mBAAmB,EACnBxB,QAASA,EACTD,QAASA,EACT2B,mBAAoBA,EACpBC,eAAgB,CACZE,MAAOuJ,EAAa7I,SACpBX,KAAM6I,GAAsBtM,IAC5B2D,SAAUC,yBAAsBC,iBAAiB,CAC7CC,UAAU,EACVC,IAAKlC,EACLmC,IAAKpC,EACLqC,OAAQnD,0BAAgByB,EAAOC,OAAOtC,OAE1CwJ,SAAU,WACNC,YAAW,WACPpH,EAAOqH,cAAc0C,GAAsBpM,UAIvDgE,aAAc,CACVR,MAAOuJ,EAAahJ,OACpBR,KAAM6I,GAAsBpM,IAC5ByD,SAAUC,yBAAsBO,eAAe,CAC3CL,UAAU,EACVC,IAAKlC,EACLmC,IAAKpC,EACLwC,SAAUtD,0BAAgByB,EAAOC,OAAOxC,OAE5C0J,SAAU,WACNC,YAAW,WACPpH,EAAOqH,cAAc0C,GAAsBtM,uBEtG5EoN,GA1BS,SAAC,GAAmD,IAAD,IAAhDV,mBAAgD,MAAlC,GAAkC,EAA9B/H,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,OAC7CkF,EAAqB,SAACC,GAAD,gBACpB1E,+BAAqB0E,EAAM/J,KADP,cACiBqF,+BAAqB0E,EAAM7J,OAYvE,OACI,cAAC,KAAD,CACI2E,UAAW,SAACkF,GAAD,OAAWA,EAAMnJ,IAC5BmE,aAAc,SAACgF,GAAD,OAAWD,EAAmBC,IAC5CpF,SAAUA,EACVC,OAAQA,EACRK,cAhBuB,SAAC8E,GAC5B,IAAMrK,EAAQoK,EAAmBC,GACjC,OACI,qCACKnF,GAAU,cAAC,KAAD,CAAYQ,QAAS,kBAAMR,EAAOmF,IAAlC,SAA2CrK,KACpDkF,GAAU,+BAAOlF,QAYvB4F,MAAOoH,EAAY7J,QAAO,SAACkH,GAAD,YAAwBxJ,IAAbwJ,EAAMnJ,SCuBxCyM,IC9BVpH,GD8BUoH,GArCf,YAOuB,IANnB5J,EAMkB,EANlBA,KACA5B,EAKkB,EALlBA,QACAD,EAIkB,EAJlBA,QACA+B,EAGkB,EAHlBA,SACA6B,EAEkB,EAFlBA,OACA8H,EACkB,EADlBA,UAEA,OACI,mCACI,cAAC,yBAAD,CACI7J,KAAMA,EACN+B,OAAQA,EACRC,YAAY,SACZ9B,SAAUA,EACV+B,SAAUC,iBACVC,aAAc,gBAAG7D,EAAH,EAAGA,SAAUC,EAAb,EAAaA,SAAU6D,EAAvB,EAAuBA,KAAMC,EAA7B,EAA6BA,SAA7B,OACV,cAAC,GAAD,CACI4G,YAAa7G,EACbmH,iBAAkBlH,EAClBwD,WAAYgE,EAAY,CAAE5N,MAAO4N,QAAc/M,EAC/CsB,QAASA,EACTD,QAASA,EACTG,SAAUA,EACVC,SAAUA,KAGlB+D,aAAc,YAAkC,IAA/BT,EAA8B,EAA9BA,MAAOV,EAAuB,EAAvBA,OAAQD,EAAe,EAAfA,SAG5B,OAFA4D,QAAQC,IAAIlD,GAEL,cAAC,GAAD,CAAiBoH,YAAapH,EAAOV,OAAQA,EAAQD,SAAUA,W,SCvBrFsB,K,2BAAAA,Q,KAOL,IC/BYsH,GD+BNpL,GAA4B,CAAEuK,YAAa,IAsElCc,GApEY,WAAO,IAAD,EACmBhG,wBAA+CjH,GADlE,mBACtBkH,EADsB,KACJC,EADI,OAEeF,wBAA0CjH,GAFzD,mBAEtBoH,EAFsB,KAENC,EAFM,KAGvBhK,EAAOqE,cACb,OACI,qCACI,cAAC,IAAD,CAAKtC,UAAU,IAAf,SACI,cAAC,cAAD,gCAEJ,eAAC,KAAD,CAAOkI,QAAQ,EAAf,UACI,cAAC,qBAAD,CACI1F,cAAeA,GACfJ,SAAU6F,EACVtF,WAAY,WACR,OACI,cAAC,kBAAD,CACIwF,gBAAgB,EAChBC,kBAAkB,iBAClBhF,mBAAoBC,iCAAsBpF,EAAM,sBAChDqF,0BAA2BC,wCAA6BtF,EAAM,sBAJlE,SAKI,cAAC,GAAD,CACI6F,KAAMwC,GAAUyG,YAChB7K,QAASmG,eACTpG,QAASqG,mBACTtE,SAAUuE,4BAAiB,CAAEpE,UAAU,IACvC0B,OAAQ,CACJ2C,SAAU,mBACVC,UAAW,sBACXC,WAAY,kBAOpC,cAAC,GAAD,CAAe7F,OAAQmF,OAG3B,cAAC,IAAD,CAAK/H,OAAO,MAAMD,UAAU,IAA5B,SACI,cAAC,GAAD,CACI+G,iBAAkBmG,GAClBlG,SAAUmG,GACVlG,aAAc1I,MAItB,cAAC,IAAD,CAAK0B,OAAO,MAAMD,UAAU,IAA5B,SACI,cAAC,cAAD,2BAGJ,eAAC,KAAD,WACI,cAAC,KAAD,CAAOkI,QAAQ,EAAf,SACI,cAAC,GAAD,CACIhG,QAASmG,eACTpG,QAASqG,mBACTyE,YAAa,GACb3K,SAAU2F,EACV1F,SAAU,kBAAMuG,QAAQC,IAAI,kBAGpC,cAAC,GAAD,CAAehG,OAAQiF,OAG3B,cAAC,IAAD,CAAiB3I,SAAUZ,EAAqBkJ,iBAAiB,Q,oBChGjEmG,K,qFAAAA,E,6GAAAA,E,eAAAA,Q,KCEZ,I,GCmCKE,GDQUC,GALe,CAC1BC,wBAvC4B,SAACC,GAC7B,YAC6BrN,IAAzBqN,EAAiB5N,UACQO,IAAzBqN,EAAiB1N,UACaK,IAA9BqN,EAAiBtN,UAoCrBuN,gCAhCoC,SACpClN,EACAC,GAC6B,IACrBkN,EAAwBnN,EAAxBmN,oBACR,OAAO,2BACAnN,GADP,IAEIC,GAAIA,GAAMC,kBACVb,IAAKc,0BAAgBH,EAAWX,KAChCE,IAAKY,0BAAgBH,EAAWT,KAChC4N,yBAuBJC,gCAnBoC,SAAC,GAAD,IACpC/N,EADoC,EACpCA,IACAE,EAFoC,EAEpCA,IACA8N,EAHoC,EAGpCA,gBACAF,EAJoC,EAIpCA,oBACAxN,EALoC,EAKpCA,SACA3C,EANoC,EAMpCA,WANoC,MAOsB,CAC1DqC,IAAKS,0BAAgBT,GACrBE,IAAKO,0BAAgBP,GACrB8N,kBACA1N,WACA3C,aACAmQ,0B,SCACL,K,UAAAA,E,UAAAA,E,oBAAAA,E,uBAAAA,E,kCAAAA,E,2CAAAA,Q,KASE,IAAMQ,GAA8B,CACvCjN,QAAM,sBACDyM,GAA2BzN,IAD1B,uBAEKiB,OAAOC,KAAKC,uBAFjB,CAGEC,4BAAyBC,yBAH3B,gBAKDoM,GAA2BvN,IAL1B,uBAMKe,OAAOC,KAAKC,uBANjB,CAOEC,4BAAyBE,0BAP3B,gBASDmM,GAA2BnN,SAAWW,OAAOC,KAAKK,gCATjD,gBAUDkM,GAA2B9P,WAAQsD,OAAOC,KAAKK,gCAV9C,gBAWDkM,GAA2BO,gBAAkB/M,OAAOC,KAAKgN,oCAXxD,gBAYDT,GAA2BK,oBAAsB,CAC9CK,qBAAkBC,YAClBD,qBAAkBE,qBAdpB,KAmBJC,GAAgD,CAClDtO,SAAKO,EACLL,SAAKK,EACLD,cAAUC,EACVyN,gBAAiBO,UAAQC,WACzBV,oBAAqB,GACrBnQ,gBAAO4C,GAGEkO,GAA2B,uBAElChN,GAAOC,mCA+LEgN,GA7Lc,SAAC,GAAgF,IAA9E9M,EAA6E,EAA7EA,QAASC,EAAoE,EAApEA,QAASiD,EAA2D,EAA3DA,QAA2D,IAAlD6J,mBAAkD,MAApC,GAAoC,EAAhC5M,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,SAC7EpE,EAAOqE,cAcP2M,OACUrO,IAAZuE,EACM6J,EAAY/L,IAAI9C,IAChB6O,EAAY9L,QAAO,SAACgM,GAAD,OAAOA,EAAEjO,KAAOkE,EAAQlE,MAAIgC,IAAI9C,IAEvDqC,EAAgB2C,EAAUgK,GAAMf,gCAAgCjJ,GAAWwJ,GACjF,OACI,cAAC,GAAKpM,cAAN,CACIC,cAAeA,EACfJ,SArBe,SAACpB,GACpB,IAAMoO,EAA2BD,GAAMjB,gCAAgClN,EAAtC,OAAkDmE,QAAlD,IAAkDA,OAAlD,EAAkDA,EAASlE,IAC5F,IAAIkO,GAAMnB,wBAAwBoB,GAM9B,MAAM,IAAI1M,MAAM,+EALhBN,EAAS,2BACFgN,GADC,IAEJpR,WAAOqR,4CAA2BD,EAAyBzO,eAAYC,EAAYI,EAAWhD,eAiBlG2E,WAAY,SAACC,GAAY,IAAD,EAGhBA,EADAC,OAAUxC,EAFM,EAENA,IAAKE,EAFC,EAEDA,IAAKI,EAFJ,EAEIA,SAAU0N,EAFd,EAEcA,gBAFd,IAE+BF,2BAF/B,MAEqD,GAFrD,EAEyDnQ,EAFzD,EAEyDA,WAGvEsR,EAAsB9D,oBAASnL,IAAQmL,oBAASjL,GAChDgP,EAAUpO,0BAAgBd,GAC1BmP,EAAUrO,0BAAgBZ,GAE1BkP,EACFH,QAAoC1O,IAAbD,GAA0B0N,IAAoBO,UAAQc,IAE3EC,OACW/O,IAAbD,GAA0B6K,oBAAS7K,KAAc0O,4CAA2B1O,GAE1EiP,EAAoBzB,EAAoB0B,OAAS,EAEjDC,KACFR,QAAoC1O,IAAbD,IAAqD,IAA3BgP,IAE3CtB,IAAoBO,UAAQC,aAC3BR,IAAoBO,UAAQc,KACvBvB,EAAoB0B,OAAS,QAAejP,IAAV5C,GAGlD,OACI,eAAC,GAAK8D,KAAN,CACIqG,eAAgB2H,EAChBzN,SAAUA,EACVe,mBAAoBC,iCAAsBpF,EAAM6Q,IAChDxL,0BAA2BC,wCAA6BtF,EAAM6Q,IAJlE,UAKI,cAAC,eAAD,CAAc5O,IAAI,KAAlB,SACI,cAAC,KAAD,CAAkBe,GAAG,mCAEzB,cAAC,KAAD,UACI,cAAC,GAAKuC,gBAAN,CACIC,OAAQvF,IAAWD,EAAM,yCACzByF,mBAAmB,EACnBE,mBAAoBqL,EACpB/M,QAASA,EACTD,QAASA,EACT4B,eAAgB,CACZC,KAAMgK,GAA2BzN,IACjC0D,MAAO7F,IAAWD,EAAM,6CACxB8R,eAAgB,CACZC,aAAcT,GAAWrN,GAAW+N,aAExCjM,SAAUC,yBAAsBC,iBAAiB,CAC7CC,UAAU,EACVC,IAAKlC,EACLmC,IAAKpC,EACLqC,OAAQnD,0BAAgBZ,MAGhCgE,aAAc,CACVT,KAAMgK,GAA2BvN,IACjCwD,MAAO7F,IAAWD,EAAM,6CACxB8R,eAAgB,CACZC,aAAcR,GAAWD,GAAWU,aAExCjM,SAAUC,yBAAsBO,eAAe,CAC3CL,UAAU,EACVC,IAAKlC,EACLmC,IAAKpC,EACLwC,SAAUtD,0BAAgBd,UAKzCiP,GACG,cAAC,KAAD,UACI,cAAC,GAAK5K,cAAN,CACIZ,KAAMgK,GAA2BnN,SACjCoD,MAAO7F,IAAWD,EAAM,kCACxB+F,SAAUW,2CAKrBgL,GAA0BhP,GAAY2O,GACnC,qCACI,cAAC,KAAD,UACI,cAAC,GAAKY,gBAAN,CACIpM,KAAMgK,GAA2BO,gBACjC5K,OAAQvF,IAAWD,EAAM,4CAA6C,CAClEkS,KAAM9K,yBAAe1E,EAAU1C,EAAKe,UAExCgF,SAAUoM,qCAGjBX,GACG,cAAC,KAAD,CAAWxP,OAAO,IAAlB,SACI,cAAC,GAAD,CACI6D,KAAMgK,GAA2BK,oBACjCjM,QAASf,0BAAgBd,GACzB4B,QAASd,0BAAgBZ,GACzByD,SAAUuE,4BAAiB,CAAEpE,UAAU,IACvCwJ,UAAWzP,IACPD,EACA,0DAEJ4H,OAAQ,CACJ2C,SAAUtK,IACND,EACA,yDAEJyK,WAAYxK,IACRD,EACA,2DAEJwK,UAAWvK,IACPD,EACA,+DAMnB2R,GACG,mCACI,cAAC,KAAD,UACI,cAAC,GAAKS,gBAAN,CACI5M,OAAQvF,IAAWD,EAAM,qCAAmC,CACxDkS,KAAM9K,yBAAe1E,EAAU1C,EAAKe,UAExC8E,KAAMgK,GAA2B9P,WACjCgG,SAAUW,uCACV2L,OAAQ,CACJ,CACIC,MAAO3C,GAAsB4C,qBAC7BzM,MAAO7F,IACHD,EADa,yCAEkB2P,GAAsB4C,wBAG7D,CACID,MAAO3C,GAAsB6C,0BAC7B1M,MAAO7F,IACHD,EADa,yCAEkB2P,GAAsB6C,2BACrD,CAAEN,KAAM9K,yBAAe1E,EAAU1C,EAAKe,WAG9C,CACIuR,MAAO3C,GAAsB8C,MAC7B3M,MAAO7F,IACHD,EADa,yCAEkB2P,GAAsB8C,0BC7O3G9L,I,OAAMC,KAAS,yBA+BN8L,GA7Bc,SAAC,GAAmD,IAAjD1C,EAAgD,EAAhDA,iBAAkBjJ,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,OAClDhH,EAAOqE,cAgBb,OACI,cAAC,KAAD,CACI4C,UAAW,SAACC,GAAD,OAAaA,EAAQlE,IAChCmE,aAAc,SAACD,GAAD,OAAaE,yBAAeF,EAAQxE,SAAU1C,EAAKe,SACjEgG,SAAUA,EACVC,OAAQA,EACRK,cArB4B,SAACH,GACjC,IAAMI,EAAOF,yBAAeF,EAAQxE,SAAU1C,EAAKe,QACnD,OACI,sBAAKQ,UAAWoF,GAAIY,QAAQ,SAA5B,UACI,uBAAMhG,UAAWoF,GAAIY,QAAQ,QAA7B,UACKP,GAAU,cAAC,KAAD,CAAYQ,QAAS,kBAAMR,EAAOE,IAAlC,SAA6CI,KACtDN,GAAU,+BAAOM,OAEvB,uBAAM/F,UAAWoF,GAAIY,QAAQ,QAA7B,UACKE,+BAAqBP,EAAQ9E,KADlC,MAC2CqF,+BAAqBP,EAAQ5E,YAa5EoF,MAAOsI,KCCJ2C,IClBVtK,GDkBUsK,GAzBf,YAAqH,IAAhE9M,EAA+D,EAA/DA,KAAM5B,EAAyD,EAAzDA,QAASD,EAAgD,EAAhDA,QAAS+B,EAAuC,EAAvCA,SAAU6B,EAA6B,EAA7BA,OACnF,OACI,cAAC,yBAAD,CACI/B,KAAMA,EACN+B,OAAQA,EACR7B,SAAUA,EACV8B,YAAY,SACZC,SAAUC,iBACVC,aAAc,gBAAG7D,EAAH,EAAGA,SAAUC,EAAb,EAAaA,SAAU6D,EAAvB,EAAuBA,KAAMC,EAA7B,EAA6BA,SAA7B,OACV,cAAC,GAAD,CACIhB,QAASe,EACT8I,YAAa7I,EACbjE,QAASA,EACTD,QAASA,EACTG,SAAUA,EACVC,SAAUA,KAGlB+D,aAAc,gBAAGT,EAAH,EAAGA,MAAOV,EAAV,EAAUA,OAAQD,EAAlB,EAAkBA,SAAlB,OACV,cAAC,GAAD,CAAuBiJ,iBAAkBtI,EAAOV,OAAQA,EAAQD,SAAUA,S,SCZrFsB,K,qCAAAA,Q,KAOL,IC9BYuK,GD8BNrO,GAA4B,CAC9ByL,iBAAkB,IA2EP6C,GAxEiB,WAAO,IAAD,EACcjJ,wBAAgDjH,GAD9D,mBAC3BkH,EAD2B,KACTC,EADS,OAEUF,wBAA0CjH,GAFpD,mBAE3BoH,EAF2B,KAEXC,EAFW,KAG5BhK,EAAOqE,cACb,OACI,qCACI,cAAC,IAAD,CAAKtC,UAAU,IAAf,SACI,cAAC,cAAD,gCAEJ,eAAC,KAAD,CAAOkI,QAAQ,EAAf,UACI,cAAC,qBAAD,CACI1F,cAAeA,GACfJ,SAAU6F,EACVtF,WAAY,WACR,OACI,cAAC,kBAAD,CACIwF,gBAAgB,EAChBC,kBAAkB,iBAClBhF,mBAAoBC,iCAAsBpF,EAAM,2BAChDqF,0BAA2BC,wCACvBtF,EACA,2BANR,SAQI,cAAC,GAAD,CACIiE,QAASmG,eACTpG,QAASqG,mBACTxE,KAAMwC,GAAU2H,iBAChBjK,SAAUuE,4BAAiB,CAAEpE,UAAU,IACvC0B,OAAQ,CACJ2C,SAAU,4BACVC,UAAW,+BACXC,WAAY,mBACZC,cAAe,6CAOvC,cAAC,GAAD,CAAe9F,OAAQmF,OAG3B,cAAC,IAAD,CAAK/H,OAAO,MAAMD,UAAU,IAA5B,SACI,cAAC,GAAD,CACI+G,iBAAkBuH,GAClBtH,SAAU8H,GACV7H,aAAc7I,MAItB,cAAC,IAAD,CAAK6B,OAAO,MAAMD,UAAU,IAA5B,SACI,cAAC,cAAD,2BAGJ,cAAC,KAAD,UACI,eAAC,KAAD,CAAOkI,QAAQ,EAAf,UACI,cAAC,GAAD,CACI/C,QAAS3C,GAAcyL,iBAAiB,GACxC/L,QAASmG,eACTpG,QAASqG,mBACTlG,SAAU2F,EACV1F,SAAU,kBAAMuG,QAAQC,IAAI,gBAEhC,cAAC,GAAD,CAAehG,OAAQiF,SAI/B,cAAC,IAAD,CAAiB3I,SAAUf,EAA0BqJ,iBAAiB,S,SCrGtEoJ,K,8CAAAA,E,oCAAAA,E,wCAAAA,Q,KCUZ,IAiBeE,GAjBwC,SAAC,GAAqC,IAAnChR,EAAkC,EAAlCA,MAAO/B,EAA2B,EAA3BA,WAAOiH,EAAoB,EAApBA,OAC9DhH,EAAOqE,cACb,OACI,sBAAKiE,MAAO,CAAEG,QAAS,WAAvB,UACI,8BAAMzB,EAAS,cAAC,KAAD,CAAYQ,QAAS,kBAAMR,KAA3B,SAAsClF,IAAsB,CAAEA,WAC5E/B,GAASA,IAAU6S,GAAYG,eAC5B,qBAAKzK,MAAO,CAAE0K,UAAW,UAAzB,SACI,cAAC,KAAD,CACIhQ,GAAE,0BACF4B,OAAQ,CAAE7E,WAAOD,EAAwBC,EAAOC,Y,0DCXxEmB,IAAM8R,OAAOC,MACb/R,IAAM8R,OAAOE,MAEN,IA2BKC,GAVCC,GAA6B,SAACC,GAAD,MAAsC,CAC5EnR,KAAMmR,EAAUC,KAChBlR,GAAIiR,EAAUC,OAGLC,GAA2B,SAACF,GAAD,MAA0C,CAC9EnR,KAAMmR,EAAUG,SAChBpR,GAAIiR,EAAUI,Y,SAGNN,K,gBAAAA,E,kBAAAA,E,sBAAAA,E,oBAAAA,E,gBAAAA,E,oBAAAA,E,iBAAAA,Q,KAUL,ICtCKO,GDsCCC,GAAiB,SAACC,GAC3B,OAAQA,EAAKC,UACT,KAAK,EACD,OAAOV,GAAQW,OACnB,KAAK,EACD,OAAOX,GAAQY,OACnB,KAAK,EACD,OAAOZ,GAAQa,QACnB,KAAK,EACD,OAAOb,GAAQc,UACnB,KAAK,EACD,OAAOd,GAAQe,SACnB,KAAK,EACD,OAAOf,GAAQgB,OACnB,KAAK,EACD,OAAOhB,GAAQiB,SACnB,QACI,SAOCC,GAAyB,SAACC,GAAyD,IAAvCC,EAAsC,uDAAhB,GAC3E,SAAKD,GAAUA,EAAMpS,MAASoS,EAAMlS,IAAwB,IAAlBmS,EAAO5C,SAG1C4C,EAAOC,MAAK,SAACC,GAChB,IAAMC,EAAUxT,IAAMoT,EAAMpS,MACtByS,EAAQzT,IAAMoT,EAAMlS,IAClBF,EAAauS,EAAbvS,KAAME,EAAOqS,EAAPrS,GACd,SAAIsS,EAAQE,SAAS1S,KAASyS,EAAME,QAAQzS,SACxCsS,EAAQzB,cAAc/Q,EAAM,SAAUwS,EAAQxB,eAAe9Q,EAAI,aACjEuS,EAAM1B,cAAc/Q,EAAM,SAAUyS,EAAMzB,eAAe9Q,EAAI,cAAjE,QAIK0S,GAAwB,SAAClB,GAA+D,IAAvCW,EAAsC,uDAAhB,GAChF,SAAKX,GAA0B,IAAlBW,EAAO5C,SAGb4C,EAAOC,MAAK,SAACF,GAChB,OAAOpT,IAAM0S,GAAMX,cAAcqB,EAAMpS,KAAM,QAAUhB,IAAM0S,GAAMV,eAAeoB,EAAMlS,GAAI,WAIvF2S,GAAW,SAACC,GAAD,MACV,MAAVA,GAA2B,QAAVA,GAA6B,MAAVA,EAAgB,OAAS,SAapDC,GAA6C,SAACnV,GACvD,YAAc4C,IAAV5C,EACO4Q,WAAQC,WAEZ7Q,IAAU6S,GAAYuC,kBAAoBpV,IAAU6S,GAAYwC,eAAiBzE,WAAQc,IAAMd,WAAQ0E,IAGrGC,GAA+B,SAACvS,GAAD,OACxCA,EAAWwS,kBAAoB5E,WAAQc,KAAO1O,EAAWhD,WAAQgD,EAAWhD,WAAQ6S,GAAYG,eAevFyC,GAA2B,SAAClC,GACrC,MAAO,CACHmC,gBAAiBnC,EAAUmC,gBAC3BC,iBAAapC,EAAUoC,iBACvBnC,KAAMD,EAAUC,KAAO1Q,0BAAgByQ,EAAUC,MAAQ,GACzDgC,gBAAiBL,GAA2C5B,EAAUvT,YACtEA,WAAOuT,EAAUvT,aAgBZ4V,GAA+B,SAACC,GACzC,MAAO,CACHnC,SAAUmC,EAAcnC,SAAW5Q,0BAAgB+S,EAAcnC,UAAY,GAC7EC,SAAUkC,EAAclC,SAAW7Q,0BAAgB+S,EAAclC,UAAY,GAC7E6B,gBAAiBL,GAA2CU,EAAc7V,YAC1EA,WAAO6V,EAAc7V,aEvHd8V,GA7BS,SAAC,GAAmD,IAAD,IAAhDC,wBAAgD,MAAlC,GAAkC,EAA9B/O,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,OAC7C+O,EAA4B,SAACzC,GAAD,gBAC3B7L,+BAAqB6L,EAAUC,MADJ,oCAEdD,EAAUmC,gBAFI,YAEeT,GAAS1B,EAAUmC,iBAFlC,qCAGbnC,EAAUoC,iBAHG,aAGaV,GAAS1B,EAAUoC,kBAHhC,MAgBlC,OACI,cAAC,KAAD,CACIzO,UAAW,SAACqM,GAAD,OAAeA,EAAUtQ,IACpCmE,aAAc,SAACmM,GAAD,OAAeyC,EAA0BzC,IACvDvM,SAAUA,EACVC,OAAQA,EACRK,cAjBqB,SAACiM,GAC1B,IAAMxR,EAAQiU,EAA0BzC,GACxC,OACI,cAAC,GAAD,CACIxR,MAAOA,EACP/B,WAAOuT,EAAUvT,WACjBiH,OAAQA,EAAS,kBAAMA,EAAOsM,SAAa3Q,KAY/C+E,MAAOoO,EAAY7Q,QAAO,SAACqO,GAAD,YAAgC3Q,IAAjB2Q,EAAUtQ,S,wCC5BzDgT,GAAwB,CAC1BC,GAAI,SAAC3D,GAAD,OAAmB,6BAAKA,KAC5B4D,OAAQ,SAAC5D,GAAD,OAAmB,iCAASA,KACpC6D,EAAG,SAAC7D,GAAD,OAAmB,4BAAIA,KAC1B8D,GAAI,SAAC9D,GAAD,OAAmB,6BAAKA,MAOjB+D,GAJc,SAAC,GAAD,IAAGrT,EAAH,EAAGA,GAAIsP,EAAP,EAAOA,MAAP,OACzB,cAAC,KAAD,CAAkBtP,GAAIA,EAAI4B,OAAM,2BAAO0N,GAAU0D,OCN/CM,GAAqD,SAACC,GACxD,IAAMC,EAAmB,SAACjH,GACtB,OACI,yBAAgB+C,MAAO/C,EAAvB,UACKA,EAAEkH,SAAS,IAAIC,QAAQ,IAAK,KADjC,IACwC1B,GAASzF,EAAEkH,SAAS,OAD/ClH,IAUrB,OALW,SAALoH,EAAMC,EAAwBC,GAChC,OAAOA,GAAON,EAAP,uBACGK,GADH,CACYJ,EAAiBK,KAC9BF,EAAG,GAAD,oBAAKC,GAAL,CAAcJ,EAAiBK,KAAOA,EAAM,IAEjDF,CAAG,GAAI,KAYHG,GATW,SAAC,GAA+C,IAA7CjR,EAA4C,EAA5CA,KAAME,EAAsC,EAAtCA,SAAUD,EAA4B,EAA5BA,MAAOyQ,EAAqB,EAArBA,QAChD,OACI,eAACQ,GAAcC,OAAf,CAAsBC,OAAO,IAAInR,MAAOA,GAAS,eAAgBD,KAAMA,EAAME,SAAUA,EAAvF,UACI,2BACCuQ,GAAeC,GAAW,U,SHnB3B5C,K,+EAAAA,E,yDAAAA,E,kBAAAA,E,qFAAAA,E,qFAAAA,E,6EAAAA,E,qEAAAA,Q,KAUL,I,GIyCKuD,GJ7BCC,GAAoB,SAACC,EAAmCC,GACjE,IAAM7Q,EAAWtD,0BAAgBkU,GAC3B/Q,EAASnD,0BAAgBmU,GAC/B,GAAI7Q,GAAYH,GAAUG,EAAS8Q,gBAAkBjR,EAAOiR,cACxD,OAAO3D,GAA4B4D,6BAK9BC,GAAsB,SAACC,GAChC,IAAM5D,EAAO3Q,0BAAgBuU,GAC7B,OAAO5D,GD0Be,SAACA,GAAD,OACtBD,GAAeC,KAAUT,GAAQiB,UAAYT,GAAeC,KAAUT,GAAQW,OC3B/D2D,CAAW7D,GAAQF,GAA4BgE,aAAUhV,GAwD/DiV,GAAuB,SAAC9B,EAA0B+B,GAA3B,OAA+D,WAG/F,GAA8B,IAA1BA,EAAejG,QAAuC,IAAvBkE,EAAYlE,OAA/C,CAIA,IAAMkG,EAAyBhC,EAAY9Q,IAAIqO,IACzC0E,EAA6BF,EAAe7S,IAAIwO,IAEhDwE,EAAmBlC,EAAYrB,MAAK,SAACwD,GACvC,IAAMC,EAAuB,uBACtBpC,EAAY7Q,QAAO,SAACrD,GAAD,OAAOA,IAAMqW,KAAKjT,IAAIqO,KADnB,aAEtB0E,IAEP,OAAOhD,GAAsBkD,EAAI1E,KAAM2E,MAGrCC,EAAoBN,EAAepD,MAAK,SAACC,GAC3C,IAAM0D,EAA2B,uBAC1BN,GAD0B,aAE1BD,EAAe5S,QAAO,SAACkR,GAAD,OAAOA,IAAMzB,KAAS1P,IAAIwO,MAEvD,OAAOc,GAAuBd,GAAyBkB,GAAU0D,MAErE,OAAOJ,GAAoBG,EACrBxE,GAA4B0E,sCAC5B1V,KK3HG2V,GAAuB,SAACtY,GAAD,MAAwC,CACxE,CACI8F,MAAO7F,IAAWD,EAAD,6BAAuB4S,GAAYwC,iBACpD9C,MAAOM,GAAYwC,gBAEvB,CACItP,MAAO7F,IAAWD,EAAD,6BAAuB4S,GAAYuC,mBACpD7C,MAAOM,GAAYuC,oBCUZoD,GAf4B,WACvC,IAAMvY,EAAOqE,cACb,OACI,eAAC,KAAD,CAAgBvC,MAAO7B,IAAWD,EAAM,wBAAxC,UACI,mBAAGsI,MAAO,CAAE0K,UAAW,KAAvB,SACI,cAAC,GAAD,CAAsBhQ,GAAG,2BAE7B,cAAC,UAAD,CAASf,IAAI,KAAb,SACI,cAAC,GAAD,CAAsBe,GAAG,2BAE7B,cAAC,GAAD,CAAsBA,GAAG,8B,SF8CzBkU,K,YAAAA,E,kCAAAA,E,mCAAAA,E,kCAAAA,E,wBAAAA,Q,KAQL,IAAMsB,GAAyB,CAClCpV,QAAM,sBACD8T,GAAoB3D,KADnB,uBAEKlQ,OAAOC,KAAKC,uBAFjB,CAGEoQ,GAA4BgE,QAC5BhE,GAA4B8E,yCAJ9B,gBAMDvB,GAAoBzB,gBANnB,aAMyCpS,OAAOC,KAAKK,iCANrD,gBAODuT,GAAoBxB,iBAPnB,uBAQKrS,OAAOC,KAAKK,gCARjB,CASEgQ,GAA4B+E,0CAT9B,gBAWDxB,GAAoB3B,gBAAkBlS,OAAOC,KAAKgN,oCAXjD,gBAYD4G,GAAoBnX,WAAQsD,OAAOC,KAAKK,gCAZvC,KAgBGgV,GAAoB,mBAEpB5B,GAAgBjT,mCAoJd8U,GAlJW,SAAC,GAgBb,IAAD,IAfTtF,sBAeS,MAfG,CACRC,UAAM5Q,EACN8S,qBAAiB9S,EACjB+S,sBAAa/S,EACb5C,gBAAO4C,GAWF,EATTkW,EASS,EATTA,eACA7U,EAQS,EARTA,QACAC,EAOS,EAPTA,QACA6U,EAMS,EANTA,oBACAC,EAKS,EALTA,sBACAC,EAIS,EAJTA,qBACAC,EAGS,EAHTA,cACA9U,EAES,EAFTA,SACAC,EACS,EADTA,SAEMpE,EAAOqE,cAUPqH,EAAkC,CACpCwN,GAAIjZ,IAAWD,EAAM,4BACrBmZ,OAAQlZ,IAAWD,EAAM,gCACzBD,WAAOE,IAAWD,EAAM,kCACxBoZ,OAAQnZ,IAAWD,EAAM,6BACzBuT,KAAMtT,IAAWD,EAAM,2BACvBqZ,mBAAoBpZ,IAAWD,EAAM,yCACrC0V,iBAAazV,IAAWD,EAAM,qCAC9BuV,gBAAiBtV,IAAWD,EAAM,0CAEhCsZ,EAAoBhB,GAAqBtY,GACzC2F,EAAqBmT,EACrBA,EAAoB7T,QAAO,SAACsP,GAAW,IAC3BhB,EAASD,EAATC,KACR,QAASA,GAAQpS,IAAMoS,GAAMgG,OAAOhF,EAAMpS,KAAM,QAAUhB,IAAMoS,GAAMgG,OAAOhF,EAAMlS,GAAI,gBAE3FM,EAEN,OACI,mCACI,cAACoU,GAAczS,cAAf,CACIC,cAAeiR,GAAyBlC,GACxCnP,SA/BW,SAACpB,GACpB,IAAMyW,ELU0B,SACpCzW,EACAC,GAEA,MAAO,CACHA,GAAIA,GAAMC,kBACVwS,gBAAiB1S,EAAW0S,gBAC5BC,iBAAa3S,EAAW2S,iBACxBnC,KAAMrQ,0BAAgBH,EAAWwQ,MACjCxT,WAAOuV,GAA6BvS,IKnBV0W,CAAyB1W,EAAYuQ,EAAUtQ,IACzE,ILnGmB,SAACsQ,GACxB,YACuB3Q,IAAnB2Q,EAAUC,WACoB5Q,IAA9B2Q,EAAUmC,sBACgB9S,IAA1B2Q,EAAUoC,uBACU/S,IAApB2Q,EAAUvT,WK8FN2Z,CAAYF,GAGZ,MAAM,IAAI/U,MAAM,uEAFhBN,EAASqV,IA6BL9U,WAAY,SAACC,GAAY,IACbC,EAAWD,EAAXC,OACF+U,EAAYC,KAAgBC,sBAAsBjV,EAAO2O,MACzDuG,EAA8D,CAChEhU,MAAO4F,EAAW6H,KAClB1N,KAAMqR,GAAoB3D,KAC1B9N,mBAAmB,EACnBqM,eAAgB,CACZC,aAAc5Q,IAAM6Q,aAAW8C,QAAQ9Q,GAAWA,EAAUgO,aAEhE/N,UACAD,UACA+V,eAAgBhB,IAAyB,EACzCpT,qBACAI,SAAUgT,EACJ,SAACzG,GAAD,OACI0H,uBAAY,CACR,kBAAMtT,uCAA4B4L,IAClC,kBAAM2H,4BAAiB,CAAE9T,IAAKlC,EAASmC,IAAKpC,GAAtCiW,CAAiD3H,IACvD,kBAAMkF,GAAoBlF,IAC1B,kBJzEI,SACtCuB,EACAW,GAEA,GAAKX,GAAkC,KAAzBW,GAAU,IAAI5C,OAG5B,OAAOmD,GAAsBlB,EAAMW,GAC7Bb,GAA4B8E,2CAC5B9V,EIgEkCuX,CAA2BP,EAAWhU,OAEpD,SAAC2M,GAAD,OACI0H,uBAAY,CACR,kBAAMtT,uCAA4B4L,IAClC,kBAAM2H,4BAAiB,CAAE9T,IAAKlC,EAASmC,IAAKpC,QAE1D8H,SAAU,WACNC,YAAW,WACPpH,EAAOqH,cAAckL,GAAoB3D,WAKrD,OACI,eAACwD,GAAclT,KAAf,CACIO,SAAUA,EACVe,mBAAoBC,iCAAsBpF,EAAM2Y,IAChDtT,0BAA2BC,wCAA6BtF,EAAM2Y,IAHlE,UAII,cAAC,eAAD,CAAc1W,IAAI,KAAlB,SAAwByJ,EAAW0N,SAClCH,GAAiB,cAAC,IAAD,UAAMA,IACxB,cAAC,KAAD,UACI,cAAClC,GAAcoD,WAAf,2BAA8BL,GAA9B,IAA+CM,YAAavB,OAEhE,cAAC,KAAD,UACI,cAAC,GAAD,CACIhT,KAAMqR,GAAoBzB,gBAC1B1P,SAAUW,uCACVZ,MAAO4F,EAAW2N,mBAClB9C,QAASyC,MAGjB,cAAC,KAAD,UACI,cAAC,GAAD,CACInT,KAAMqR,GAAoBxB,iBAC1B3P,SAAU,SAACuM,GAAD,OACN0H,uBAAY,CACR,kBAAMtT,uCAA4B4L,IAClC,kBJlLN+H,EDkFT,SAAC5E,GAC1B,GAAIA,GAAmB6E,oBAAS7E,GAC5B,OAAO8E,WAAW9E,GK8F8C+E,CAAc5V,EAAO6Q,iBJlLQ,SACjGgF,GAEA,IAAMC,EAAsCD,EAAaF,WAAWE,QAAc9X,EAClF,GAAI0X,GAAiBK,EACjB,OAAOA,GAAmBL,OACpB1X,EACAgR,GAA4B+E,yCI2KqEpG,GJlL1E,IAAC+H,MIqLFvU,MAAO4F,EAAWgK,iBAClBa,QAASyC,MAGjB,cAAC,KAAD,UACI,cAACjC,GAAc9E,gBAAf,CACIzM,OAAQkG,EAAW6J,gBACnB1P,KAAMqR,GAAoB3B,gBAC1BxP,SAAUoM,iCACViI,YACI,cAAC,KAAD,CAAgBtY,MAAO7B,IAAWD,EAAM,0BAAxC,SACI,cAAC,GAAD,CAAsBgD,GAAG,oCAKxC4B,EAAO2Q,kBAAoB5E,WAAQc,KAChC,cAAC,KAAD,UACI,cAACsF,GAAc3E,gBAAf,CACI5M,OAAQkG,EAAW3L,WACnB8F,KAAMqR,GAAoBnX,WAC1BgG,SAAUW,uCACV2L,OAAQiH,EACRc,YAAa,cAAC,GAAD,iBG/JtCO,I,GCHVC,GDGUD,GA5Cf,YAWuB,IAVnB9U,EAUkB,EAVlBA,KACA5B,EASkB,EATlBA,QACAD,EAQkB,EARlBA,QACA+B,EAOkB,EAPlBA,SACA8S,EAMkB,EANlBA,eACAjR,EAKkB,EALlBA,OACAiT,EAIkB,EAJlBA,kBACA/B,EAGkB,EAHlBA,oBACAC,EAEkB,EAFlBA,sBACAC,EACkB,EADlBA,qBAEA,OACI,mCACI,cAAC,yBAAD,CACInT,KAAMA,EACN+B,OAAQA,EACRC,YAAY,SACZ9B,SAAUA,EACV+B,SAAU,SAACgT,EAAuBC,GAAxB,OACNhT,yBAAe,CAAE3F,IAAK0Y,EAAWvH,MAAQ,CAAEnR,IAAK2Y,EAAWxH,QAE/DvL,aAAc,gBAAG7D,EAAH,EAAGA,SAAUC,EAAb,EAAaA,SAAU6D,EAAvB,EAAuBA,KAAvB,OACV,cAAC,GAAD,CACIqL,eAAWrL,EACXhE,QAASA,EACTD,QAASA,EACTiV,cAAe4B,EACfhC,eAAgBA,EAChBC,oBAAqBA,EACrBC,sBAAuBA,EACvB5U,SAAUA,EACVC,SAAUA,EACV4U,qBAAsBA,KAG9B7Q,aAAc,gBAAGT,EAAH,EAAGA,MAAOV,EAAV,EAAUA,OAAQD,EAAlB,EAAkBA,SAAlB,OACV,cAAC,GAAD,CAAiB+O,iBAAapO,EAAOV,OAAQA,EAAQD,SAAUA,W,SCI9E6T,K,oBAAAA,E,oBAAAA,E,uBAAAA,E,mCAAAA,Q,KAOE,IAAMI,GAA6B,CACtC5X,QAAM,sBACDwX,GAAwBnH,SADvB,uBAEKpQ,OAAOC,KAAKC,uBAFjB,CAGEC,4BAAyBC,sBACzBkQ,GAA4BgE,QAC5BhE,GAA4B4D,4BAC5B5D,GAA4BsH,6CAN9B,gBAQDL,GAAwBlH,SARvB,uBASKrQ,OAAOC,KAAKC,uBATjB,CAUEC,4BAAyBE,uBACzBiQ,GAA4BgE,QAC5BhE,GAA4B4D,4BAC5B5D,GAA4BuH,6CAb9B,gBAeDN,GAAwB7a,WAAQsD,OAAOC,KAAKK,gCAf3C,gBAgBDiX,GAAwBrF,gBAAkBlS,OAAOC,KAAKgN,oCAhBrD,gBAiBD,oBAAsB,CAACqD,GAA4B0E,mCAjBlD,KAqBG8C,GAAwB,uBAE/BtX,GAAOC,mCA+LEsX,GA7LW,SAAC,GAWb,IAAD,IAVTxF,0BAUS,MAVO,GAUP,EATTyF,EASS,EATTA,mBACArX,EAQS,EARTA,QACAC,EAOS,EAPTA,QACA6U,EAMS,EANTA,oBACAwC,EAKS,EALTA,qBACArC,EAIS,EAJTA,cACAsC,EAGS,EAHTA,uBACApX,EAES,EAFTA,SACAC,EACS,EADTA,SAEMpE,EAAOqE,cAWPqH,EAAsC,CACxCwN,GAAIjZ,IAAWD,EAAM,4BACrBmZ,OAAQlZ,IAAWD,EAAM,gCACzBD,WAAOE,IAAWD,EAAM,kCACxBoZ,OAAQnZ,IAAWD,EAAM,iCACzBwb,QAASvb,IAAWD,EAAM,kCAC1BuV,gBAAiBtV,IAAWD,EAAM,yCAClCoC,IAAKnC,IAAWD,EAAM,8BACtBsC,IAAKrC,IAAWD,EAAM,+BAEpBsZ,EAAoBhB,GAAqBtY,GAEzC2F,EAAqBmT,EACrBA,EAAoB7T,QAAO,SAACsP,GAAW,IAC3Bd,EAAuBmC,EAAvBnC,SAAUC,EAAakC,EAAblC,SAClB,QACID,GACAC,GACAvS,IAAMsS,GAAU8F,OAAOhF,EAAMpS,KAAM,QACnChB,IAAMuS,GAAU6F,OAAOhF,EAAMlS,GAAI,gBAGzCM,EAEN,OACI,mCACI,cAAC,GAAK2B,cAAN,CACIC,cAAeoR,GAA6BC,GAC5CzR,SArCW,SAACpB,GACpB,IAAM0Y,ETgC8B,SACxC1Y,EACAC,GAEA,MAAO,CACHA,GAAIA,GAAMC,kBACVwQ,SAAUvQ,0BAAgBH,EAAW0Q,UACrCC,SAAUxQ,0BAAgBH,EAAW2Q,UACrC3T,WAAOuV,GAA6BvS,ISxCN2Y,CAA6B3Y,EAAY6S,EAAc5S,IACrF,IT3FuB,SAAC4S,GAC5B,YAC+BjT,IAA3BiT,EAAcnC,eACa9Q,IAA3BiT,EAAclC,eACU/Q,IAAxBiT,EAAc7V,WSuFV4b,CAAgBF,GAGhB,MAAM,IAAIhX,MAAM,+EAFhBN,EAASsX,IAmCL/W,WAAY,SAACC,GAAY,IAAD,EACWA,EAAOC,OAA9B6O,EADY,EACZA,SAAUC,EADE,EACFA,SACZlN,EAA6BtD,0BAAgBuQ,GAC7CpN,EAA2BnD,0BAAgBwQ,GACjD,OACI,eAAC,GAAK7P,KAAN,CACIO,SAAUA,EACVe,mBAAoBC,iCAAsBpF,EAAMmb,IAChD9V,0BAA2BC,wCAA6BtF,EAAMmb,IAHlE,UAII,cAAC,eAAD,CAAclZ,IAAI,KAAlB,SAAwByJ,EAAW0N,SAClCH,GAAiB,cAAC,IAAD,CAAKjX,OAAO,IAAZ,SAAiBiX,IACnC,cAAC,KAAD,UACI,cAAC,GAAK2C,mBAAN,CACIpW,OAAQkG,EAAW8P,QACnBpB,YAAaiB,EACbtV,SAAU,WACN,ORrHM,SAC1C5D,EACAE,EACAmS,GAIA,GAFA7J,QAAQC,IAAI4J,GAEPrS,GAASE,GAAgC,KAAzBmS,GAAU,IAAI5C,OAKnC,OAAO0C,GAAuB,CAAEnS,OAAME,MAAMmS,GACtCb,GAA4B0E,sCAC5B1V,EANFgI,QAAQC,IAAI,QQ6G2BiR,CAA+BrV,EAAUH,EAAQV,IAE5DmW,oBAAqB,CACjBhW,MAAO4F,EAAWtJ,IAClByD,KAAM+U,GAAwBnH,SAC9BhO,mBAAmB,EACnBxB,QAASA,EACTD,QAASqC,GAAUrC,EACnB+V,eAAgBuB,IAAwB,EACxC3V,qBACAmM,eAAgB,CACZC,aACIvL,GAAYH,GAAUlF,IAAM6Q,aAAW8C,QAAQ9Q,GACzCA,EACAgO,aAEdjM,SAAU,SAACuM,GACP,IAAMyJ,EAAkD,GAkBxD,OAjBIT,GACAS,EAAYC,MAAK,kBAAMxE,GAAoBlF,MAE3CiJ,GACAQ,EAAYC,MAAK,kBAAM7E,GAAkB7E,EAAOoB,MAEpDqI,EAAYC,MAAK,kBR5HjB,SACxCnI,EACAW,GAEA,GAAKX,GAAkC,KAAzBW,GAAU,IAAI5C,OAG5B,OAAOmD,GAAsBlB,EAAMW,GAC7Bb,GAA4BsH,+CAC5BtY,EQoHsCsZ,CAA6B5V,EAAQV,MAEzCoW,EAAYC,MAAK,kBACbhW,yBAAsBC,iBAAiB,CACnCC,UAAU,EACVC,IAAKlC,EACLmC,IAAKpC,EACLqC,UAJJL,CAKGsM,MAEA0H,uBAAY+B,IAEvBjQ,SAAU,WACNC,YAAW,WACPpH,EAAOqH,cAAc4O,GAAwBnH,UAC7C9O,EAAOqH,cAAc4O,GAAwBlH,eAIzDwI,kBAAmB,CACfpW,MAAO4F,EAAWpJ,IAClBuD,KAAM+U,GAAwBlH,SAC9BjO,mBAAmB,EACnBxB,QAASuC,GAAYvC,EACrBD,UACA+V,eAAgBuB,IAAwB,EACxC3V,qBACAmM,eAAgB,CACZC,aACI1L,GAAUG,GAAYrF,IAAM6Q,aAAW8C,QAAQ9Q,GACzCA,EACAgO,aAEdjM,SAAU,SAACuM,GACP,IAAMyJ,EAAkD,GAmBxD,OAlBIT,GACAS,EAAYC,MAAK,kBAAMxE,GAAoBlF,MAE3CiJ,GACAQ,EAAYC,MAAK,kBAAM7E,GAAkB1D,EAAUnB,MAEvDyJ,EAAYC,MAAK,kBR1JjB,SACxCnI,EACAW,GAEA,GAAKX,GAAkC,KAAzBW,GAAU,IAAI5C,OAG5B,OAAOmD,GAAsBlB,EAAMW,GAC7Bb,GAA4BuH,+CAC5BvY,EQkJsCwZ,CAA6B3V,EAAUb,MAE3CoW,EAAYC,MAAK,kBACbhW,yBAAsBO,eAAe,CACjCL,UAAU,EACVC,IAAKlC,EACLmC,IAAKpC,EACLwC,YAJJR,CAKGsM,MAGA0H,uBAAY+B,IAEvBjQ,SAAU,WACNC,YAAW,WACPpH,EAAOqH,cAAc4O,GAAwBnH,UAC7C9O,EAAOqH,cAAc4O,GAAwBlH,mBAMjE,cAAC,KAAD,UACI,cAAC,GAAKzB,gBAAN,CACIzM,OAAQkG,EAAW6J,gBACnB1P,KAAM+U,GAAwBrF,gBAC9BxP,SAAUoM,iCACViI,YACI,cAAC,KAAD,CAAgBtY,MAAO7B,IAAWD,EAAM,0BAAxC,SACI,cAAC,GAAD,CAAsBgD,GAAG,oCAMxC2B,EAAOC,OAAO2Q,kBAAoB5E,WAAQc,KACvC,cAAC,KAAD,UACI,cAAC,GAAKW,gBAAN,CACI5M,OAAQkG,EAAW3L,WACnB8F,KAAM+U,GAAwB7a,WAC9BgG,SAAUW,uCACV2L,OAAQiH,EACRc,YAAa,cAAC,GAAD,iBCzOtCgC,GA5BY,SAAC,GAAmE,IAAD,IAAhEvE,2BAAgE,MAA/C,GAA+C,EAA3C9Q,EAA2C,EAA3CA,SAAUC,EAAiC,EAAjCA,OAAQqV,EAAyB,EAAzBA,YAC3DnQ,EAAqB,SAAC0J,GAAD,gBACpBnO,+BAAqBmO,EAAcnC,UADf,cAC8BhM,+BAAqBmO,EAAclC,YAa5F,OACI,cAAC,KAAD,CACIzM,UAAW,SAAC2O,GAAD,OAAmBA,EAAc5S,IAC5CmE,aAAc,SAACyO,GAAD,OAAmB1J,EAAmB0J,IACpD7O,SAAUA,EACVC,OAAQA,EACRK,cAjByB,SAACuO,GAC9B,IAAM9T,EAAQoK,EAAmB0J,GACjC,OACI,cAAC,GAAD,CACI9T,MAAOA,EACP/B,WAAO6V,EAAc7V,WACrBiH,OAAQA,EAAS,kBAAMA,EAAO4O,SAAiBjT,KAYnD+E,MAAOmQ,EAAe5S,QAAO,SAAC2Q,GAAD,YAAwCjT,IAArBiT,EAAc5S,MAC9DqZ,YAAaA,IAAe,KC+BzBC,I,GCnCVjU,GDmCUiU,GA5Cf,YAWuB,IAVnBzW,EAUkB,EAVlBA,KACA5B,EASkB,EATlBA,QACAD,EAQkB,EARlBA,QACA8U,EAOkB,EAPlBA,oBACAuC,EAMkB,EANlBA,mBACAR,EAKkB,EALlBA,kBAKkB,IAJlBU,8BAIkB,SAHlBxV,EAGkB,EAHlBA,SACA6B,EAEkB,EAFlBA,OACA0T,EACkB,EADlBA,qBAEA,OACI,mCACI,cAAC,yBAAD,CACIzV,KAAMA,EACN+B,OAAQA,EACRC,YAAY,SACZ9B,SAAUA,EACV+B,SAAU,SAACyU,EAA+BC,GAAhC,OACNzU,yBAAe,CAAE3F,IAAKma,EAAe9I,UAAY,CAAErR,IAAKoa,EAAe9I,YAE3E1L,aAAc,gBAAG7D,EAAH,EAAGA,SAAUC,EAAb,EAAaA,SAAU6D,EAAvB,EAAuBA,KAAvB,OACV,cAAC,GAAD,CACI2N,mBAAe3N,EACfoT,mBAAoBA,EACpBpX,QAASA,EACTD,QAASA,EACTiV,cAAe4B,EACf/B,oBAAqBA,EACrBwC,qBAAsBA,EACtBC,uBAAmBA,EACnBpX,SAAUA,EACVC,SAAUA,KAGlB+D,aAAc,gBAAGT,EAAH,EAAGA,MAAOV,EAAV,EAAUA,OAAQD,EAAlB,EAAkBA,SAAlB,OACV,cAAC,GAAD,CAAoB8Q,oBAAgBnQ,EAAOV,OAAQA,EAAQD,SAAUA,W,SC5BpFsB,K,oBAAAA,E,eAAAA,Q,KAUL,I,GCRKoU,GDQClY,IAAyB,sBAAM8D,GAAUqU,SAAW,IAA3B,gBAAgCrU,GAAUsU,MAAQ,IAAlD,IAgJhBC,GA9IgC,WAAO,IAAD,EACyBhT,wBAExEjH,GAH+C,mBAC1Cka,EAD0C,KACXC,EADW,OAIiBlT,wBAC9DjH,GAL6C,mBAI1Coa,EAJ0C,KAIfC,EAJe,OAOLpT,wBAA0CjH,GAPrC,mBAO1CoH,EAP0C,KAO1BC,EAP0B,KAQ3ChK,EAAOqE,cACb,OACI,qCACI,cAAC,IAAD,CAAKtC,UAAU,IAAf,SACI,cAAC,cAAD,gCAEJ,eAAC,KAAD,CAAOkI,QAAQ,EAAf,UACI,cAAC,qBAAD,CACI1F,cAAeA,GACfJ,SAAU6F,EACVtF,WAAY,SAACC,GAAY,IACbC,EAAWD,EAAXC,OACFkU,EAAmB,uBAClBlU,EAAO8X,SAAS1X,IAAIwO,KADF,aAElB5O,EAAO+X,MAAM3X,IAAIqO,MAExB,OACI,eAAC,kBAAD,CACInJ,gBAAgB,EAChBC,kBAAkB,iBAClBhF,mBAAoBC,iCAAsBpF,EAAM,oBAChDqF,0BAA2BC,wCAA6BtF,EAAM,oBAJlE,UAKI,cAAC,KAAD,UACI,cAAC,GAAD,CACI6F,KAAMwC,GAAUqU,SAChBzY,QAASmG,eACTpG,QAASgO,YACTqJ,mBACI,mBAAG/S,MAAO,CAAE0K,UAAW,SAAvB,yJAKJjN,SAAU,SAACuM,GAAD,OACN0H,uBAAY,CACR,kBAAM1P,4BAAiB,CAAEpE,UAAU,GAA7BoE,CAAqCgI,IAC3C,kBAAMsF,GAAqBhT,EAAO+X,MAAO/X,EAAO8X,cAGxD9U,OAAQ,CACJ2C,SAAU,mBACVE,WAAY,wBAEhBqO,oBAAqBA,EACrBwC,sBAAsB,MAG9B,cAAC,KAAD,UACI,cAAC,GAAD,CACIzV,KAAMwC,GAAUsU,MAChB1Y,QAASmG,eACTpG,QAASgO,YACTjM,SAAU,SAACuM,GAAD,OACN0H,uBAAY,CACR,kBAAM1P,4BAAiB,CAAEpE,UAAU,GAA7BoE,CAAqCgI,IAC3C,kBAAMsF,GAAqBhT,EAAO+X,MAAO/X,EAAO8X,cAGxD9U,OAAQ,CACJ2C,SAAU,oCACVC,UAAW,6BACXC,WAAY,yBACZC,cAAe,2BAEnBoO,oBAAqBA,EACrBC,uBAAuB,EACvBC,qBAAsB,aAO9C,cAAC,GAAD,CAAepU,OAAQmF,OAG3B,eAAC,IAAD,CAAK/H,OAAO,MAAMD,UAAU,IAA5B,UACI,cAAC,GAAD,CACI+G,iBAAkBkS,GAClBjS,SAAUoS,GACVnS,aAAc9I,IAElB,cAAC,GAAD,CACI4I,iBAAkB0P,GAClBzP,SAAU4P,GACV3P,aAAc9I,OAItB,cAAC,IAAD,CAAK8B,OAAO,MAAMD,UAAU,IAA5B,SACI,cAAC,cAAD,6BAGJ,cAAC,KAAD,UACI,eAAC,KAAD,WACI,cAAC,KAAD,CAAOkI,QAAQ,EAAf,SACI,cAAC,GAAD,CACIhG,QAASmG,eACTpG,QAASqG,mBACTuL,mBAAe,GACfzR,SAAU2Y,EACV1Y,SAAU,WAEN,OAAOuG,QAAQC,IAAI,kBAI/B,cAAC,GAAD,CAAehG,OAAQiY,SAI/B,cAAC,KAAD,UACI,eAAC,KAAD,WACI,cAAC,KAAD,CAAO5S,QAAQ,EAAf,SACI,cAAC,GAAD,CACIhG,QAASmG,eACTpG,QAASqG,mBACTiJ,eAAW,GACXnP,SAAU6Y,EACV5Y,SAAU,WAEN,OAAOuG,QAAQC,IAAI,kBAI/B,cAAC,GAAD,CAAehG,OAAQmY,SAI/B,cAAC,IAAD,CAAiB7b,SAAUhB,EAAgBsJ,iBAAiB,QElJzDyT,GANQ,CACnBC,yBAT6B,SAACC,GAC9B,MAAO,CACHC,IAAKD,EAAUC,IACf9V,KAAM6V,EAAU7V,KAChB+V,iBAAaxa,0BAAgBsa,EAAUE,oBAM3CC,gCArBoC,SACpCva,EACAC,GAEA,OAAO,2BACAD,GADP,IAEIC,GAAIA,GAAMC,kBACVoa,iBAAana,0BAAgBH,EAAWsa,qBAe5CE,YA3BgB,SAACJ,GAA2D,IACpEC,EAA2BD,EAA3BC,IAAK9V,EAAsB6V,EAAtB7V,KAAM+V,EAAgBF,EAAhBE,iBACnB,OAAO9P,oBAAS6P,IAAQ7P,oBAASjG,IAASiG,oBAAS8P,M,SD2BlDZ,K,UAAAA,E,mCAAAA,E,aAAAA,Q,KAME,IAAMe,GAAyB,CAClCpa,QAAM,sBACDqZ,GAAoBnV,KADnB,aAC8BjE,OAAOC,KAAKK,iCAD1C,gBAED8Y,GAAoBY,iBAFnB,uBAGKha,OAAOC,KAAKK,gCAHjB,aAIKN,OAAOC,KAAKC,yBAJjB,gBAMDkZ,GAAoBW,IANnB,uBAOK/Z,OAAOC,KAAKK,gCAPjB,aAQKN,OAAOC,KAAKqJ,wCARjB,KAaG8Q,GAAoB,gBAY3B5Z,GAAOC,mCAkGE4Z,GAhGO,SAAC,GAQT,IAAD,IAPTP,iBAOS,MAPG,CAAEC,IAAK,GAAI9V,KAAM,GAAI+V,sBAAa1a,EAAWK,QAAIL,GAOpD,EANTiF,EAMS,EANTA,OACA3D,EAKS,EALTA,QACAD,EAIS,EAJTA,QACA+I,EAGS,EAHTA,4BACA5I,EAES,EAFTA,SACAC,EACS,EADTA,SAEMpE,EAAOqE,cAWPiH,EAAqC,CACvCxJ,MAAO7B,IAAWD,EAAM,wBACxBod,IAAKnd,IAAWD,EAAM,sBACtBqd,iBAAapd,IAAWD,EAAM,iCAC9BsH,KAAMrH,IAAWD,EAAM,uBACvBwL,SAAUvL,IAAWD,EAAM,2BAC3ByL,aAAcxL,IAAWD,EAAM,gCAG7B0L,EAA+B,2BAAQJ,GAAkB1D,GAE/D,OACI,mCACI,cAAC,GAAKtD,cAAN,CACIC,cAAe0Y,GAAeC,yBAAyBC,GACvDhZ,SAxBW,SAACpB,GACpB,IAAM4a,EAAoBV,GAAeK,gCAAgCva,EAAYoa,EAAUna,IAC/F,IAAIia,GAAeM,YAAYI,GAG3B,MAAM,IAAIlZ,MAAM,iEAFhBN,EAASwZ,IAsBLjZ,WAAY,kBACR,eAAC,GAAKb,KAAN,CACIO,SAAUA,EACVe,mBAAoBC,iCAAsBpF,EAAMyd,IAChDpY,0BAA2BC,wCAA6BtF,EAAMyd,IAHlE,UAII,cAAC,eAAD,CAAcxb,IAAI,KAAlB,SAAwByJ,EAAW5J,QACnC,cAAC,KAAD,UACI,cAAC,GAAK2L,MAAN,CACI5H,KAAM4W,GAAoBnV,KAC1BxB,MAAO4F,EAAWpE,KAClBvB,SAAUW,uCACVkX,YAAalS,EAAWmS,oBAGhC,cAAC,KAAD,UACI,cAAC,GAAK1D,WAAN,CACItU,KAAM4W,GAAoBY,iBAC1BvX,MACI4F,EAAWoS,iBAAX,UACSpS,EAAW2R,iBADpB,YACmC3R,EAAWoS,kBAD9C,UAESpS,EAAW2R,kBAExBtX,SAAU,SAACuM,GAAD,OACN0H,uBAAY,CACR,kBAAMtT,uCAA4B4L,IAClC,kBAAM2H,4BAAiB,CAAE9T,IAAKlC,EAASmC,IAAKpC,GAAtCiW,CAAiD3H,OAG/DtO,QAASA,EACTC,QAASA,EACT8Z,kBAAkB,MAI1B,cAAC,KAAD,UACI,cAAC,GAAKtQ,MAAN,CACI5H,KAAM4W,GAAoBW,IAC1BtX,MAAO4F,EAAW0R,IAClBrX,SAAU,SAACuM,GAAD,OACN0H,uBAAY,CACR,kBAAMtT,uCAA4B4L,IAClC,kBACI5E,2CAA0B,CACtBxH,UAAU,EACVyH,iBAAkBZ,GAFtBW,CAGG4E,OAGf1E,UAAU,UACVC,UAAW,GACX+P,YAAalS,EAAWsS,4BE5IlDrX,I,OAAMC,KAAS,kBA2BNqX,GAzBO,SAAC,GAAiD,IAAD,IAA9Cd,iBAA8C,MAAlC,GAAkC,EAA9BpW,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,OAa/C,OACI,cAAC,KAAD,CACIC,UAAW,SAACkW,GAAD,OAAeA,EAAUna,IACpCmE,aAAc,SAACgW,GAAD,OAAeA,EAAU7V,MACvCP,SAAUA,EACVC,OAAQA,EACRK,cAlBqB,SAAC8V,GAC1B,OACI,sBAAK5b,UAAWoF,GAAIY,QAAQ,SAA5B,UACI,sBAAMhG,UAAWoF,GAAIY,QAAQ,QAA7B,SAAuC2W,uBAAaf,EAAUE,oBAC9D,uBAAM9b,UAAWoF,GAAIY,QAAQ,QAA7B,UACKP,GAAU,cAAC,KAAD,CAAYQ,QAAS,kBAAMR,EAAOmW,IAAlC,SAA+CA,EAAU7V,QAClEN,GAAU,+BAAOmW,EAAU7V,cAarCI,MAAOyV,EAAUlY,QAAO,SAACkY,GAAD,YAAgCxa,IAAjBwa,EAAUna,SC0B9Cmb,ICxCV9V,GDwCU8V,GAzCf,YAUuB,IATnBtY,EASkB,EATlBA,KACAE,EAQkB,EARlBA,SACA6B,EAOkB,EAPlBA,OACA3D,EAMkB,EANlBA,QACAD,EAKkB,EALlBA,QACA+I,EAIkB,EAJlBA,4BACA+Q,EAGkB,EAHlBA,iBACAE,EAEkB,EAFlBA,eACAH,EACkB,EADlBA,gBAEA,OACI,mCACI,cAAC,yBAAD,CACIhY,KAAMA,EACN+B,OAAQA,EACRC,YAAY,SACZ9B,SAAUA,EACViC,aAAc,gBAAG7D,EAAH,EAAGA,SAAUC,EAAb,EAAaA,SAAU6D,EAAvB,EAAuBA,KAAvB,OACV,cAAC,GAAD,CACIkV,UAAWlV,EACX9D,SAAUA,EACVC,SAAUA,EACVH,QAASA,EACTD,QAASA,EACT+I,4BAAwBA,EACxBnF,OAAQ,CACJkW,iBAAkBA,EAClBE,eAAgBA,EAChBH,gBAAiBA,MAI7B1V,aAAc,gBAAGT,EAAH,EAAGA,MAAOV,EAAV,EAAUA,OAAQD,EAAlB,EAAkBA,SAAlB,OACV,cAAC,GAAD,CAAeoW,UAAWzV,EAAOV,OAAQA,EAAQD,SAAUA,W,SCjC1EsB,K,uBAAAA,Q,KAOL,IC1BY+V,GAOAC,GDmBN9Z,GAA4B,CAAE4Y,UAAW,IAqEhCmB,GAnEU,WAAO,IAAD,EACqB1U,wBAAyCjH,GAD9D,mBACpBkH,EADoB,KACFC,EADE,OAEiBF,wBAA0CjH,GAF3D,mBAEpBoH,EAFoB,KAEJC,EAFI,KAGrBhK,EAAOqE,cACb,OACI,qCACI,cAAC,IAAD,CAAKtC,UAAU,IAAf,SACI,cAAC,cAAD,gCAEJ,eAAC,KAAD,CAAOkI,QAAQ,EAAf,UACI,cAAC,qBAAD,CACI1F,cAAeA,GACfJ,SAAU6F,EACVtF,WAAY,WACR,OACI,cAAC,kBAAD,CACIwF,gBAAgB,EAChBC,kBAAkB,iBAClBhF,mBAAoBC,iCAAsBpF,EAAMyd,IAChDpY,0BAA2BC,wCAA6BtF,EAAMyd,IAJlE,SAKI,cAAC,GAAD,CACI5X,KAAMwC,GAAU8U,UAChBpX,SAAUuE,4BAAiB,CAAEpE,UAAU,IACvC0B,OAAQ,CACJ2C,SAAU,gBACVC,UAAW,mBACXC,WAAY,gBACZC,cAAe,0BAEnBzG,QAASsa,gBACTva,QAASgO,mBAM7B,cAAC,GAAD,CAAepN,OAAQmF,OAE3B,cAAC,IAAD,CAAK/H,OAAO,MAAMD,UAAU,IAA5B,SACI,cAAC,GAAD,CACI+G,iBAAkB0U,GAClBzU,SAAU,YACVC,aAAczI,MAGtB,cAAC,IAAD,CAAKyB,OAAO,MAAMD,UAAU,IAA5B,SACI,cAAC,cAAD,2BAGJ,eAAC,KAAD,WACI,cAAC,KAAD,CAAOkI,QAAQ,EAAf,SACI,cAAC,GAAD,CACIkT,UAAW,GACXhZ,SAAU2F,EACV1F,SAAU,kBAAMuG,QAAQC,IAAI,cAC5B3G,QAASsa,gBACTva,QAASgO,gBAGjB,cAAC,GAAD,CAAepN,OAAQiF,OAG3B,cAAC,IAAD,CAAiB3I,SAAUX,EAAmBiJ,iBAAiB,QE/ErEgV,GAA2B,CAC7B,CACIC,KAAM,YACNC,cAAe,kBAAM,cAAC,GAAD,KACrB5c,MAAO,aAEX,CACI2c,KAAM,UACNC,cAAe,kBAAM,cAAC,GAAD,KACrB5c,MAAO,eAEX,CACI2c,KAAM,mBACNC,cAAe,kBAAM,cAAC,GAAD,KACrB5c,MAAO,+BAEX,CACI2c,KAAM,gBACNC,cAAe,kBAAM,cAACC,GAAD,KACrB7c,MAAO,iBAEX,CACI2c,KAAM,aACNC,cAAe,kBAAM,cAACE,GAAD,KACrB9c,MAAO,yBAEX,CACI2c,KAAM,aACNC,cAAe,kBAAM,cAAC,GAAD,KACrB5c,MAAO,cAEX,CACI2c,KAAM,YACNC,cAAe,kBAAM,cAAC,GAAD,KACrB5c,MAAO,eA0BA+c,GAtBK,WAAO,IAAD,EACEjV,mBAAS4U,GAAU,GAAGC,MADxB,mBACfA,EADe,KACTK,EADS,KAEhBC,EAAcP,GAAUQ,MAAK,SAACC,GAChC,OAAOA,EAAER,OAASA,KAEtB,OACI,qCACI,cAAC,EAAD,CAAW3c,MAAM,eAAjB,iGAGA,cAAC,IAAD,CACIgK,SAAU,SAACoT,EAAKC,GAAN,OAAcL,EAAQN,GAAUW,GAAKV,OAC/CW,KAAMZ,GAAUxZ,KAAI,SAACia,GAAD,MAAQ,CACxBnZ,MAAOmZ,EAAEnd,MACTud,OAAQJ,EAAER,OAASA,EAAO,OAAS,cAG1CM,GAAeA,EAAYL,oB,mBDlE5BN,K,cAAAA,E,sCAAAA,E,oBAAAA,E,eAAAA,Q,cAOAC,K,qCAAAA,E,2CAAAA,E,UAAAA,E,UAAAA,E,yCAAAA,E,uCAAAA,E,iDAAAA,E,0CAAAA,E,oCAAAA,E,kCAAAA,E,+HAAAA,E,0CAAAA,E,mHAAAA,E,6EAAAA,E,2GAAAA,E,yFAAAA,E,2EAAAA,E,+CAAAA,E,yCAAAA,E,mDAAAA,E,0DAAAA,Q,KAuDL,IAAMiB,GAAe,SAACC,GACzB,YAAsB5c,IAAf4c,GE5DEC,GAAuB,SAACC,GAAD,YACsB9c,IAAtD8c,EAAaT,MAAK,SAACU,GAAD,OAAOA,IAAMtB,GAAYuB,UAElCC,GAAoC,SAACC,GAC9C,OAAO1e,IAAM0e,GAAeC,QAAQ,OAAOhL,QAAQyJ,kBAiB1CwB,GAA4B,SAACR,GACtC,OAAO,2BACAA,GADP,IAEInd,IAAKS,0BAAgB0c,EAAWnd,KAChCE,IAAKO,0BAAgB0c,EAAWjd,KAChC0d,oBAAqBnd,0BAAgB0c,EAAWS,qBAChDC,sCAAkCpd,0BAAgB0c,EAAWU,0CC5BxDC,GAAmC,SAC5Cnf,EACAwe,EACAY,GAEA,IAAMC,EAAmBb,EAAWa,mBAAqBzP,UAAQc,IAC3D4O,EAAoBd,EAAWc,yBAAsB1P,UAAQc,IAC7D6O,EAAiBV,GAAkCL,EAAWnd,KAE9Dme,EAAuB,yBACzBd,kBAAa,aAAKF,EAAWE,mBAC7Be,wBAAoBjB,EAAWiB,wBAC/BJ,oBACIA,EACE,CACIK,oBAAqBlB,EAAWkB,qBAEpC,CACIC,oBAAqBnB,EAAWoB,gBAC1B,CACIje,SAAU6c,EAAWoB,gBACrBC,SAAUxZ,yBAAemY,EAAWoB,gBAAiB5f,SAEzD4B,IAdS,IAgBzB8Q,SAAUoN,gCAAsBtB,EAAWnd,KAC3CsR,SAAU6L,EAAWuB,2BAAiCne,IAAnB4c,EAAWjd,IAAoB,KAAOue,gCAAsBtB,EAAWjd,KAC1Gge,oBAGAd,GAAqBD,EAAWE,qBAA6C,IAA5BU,IACjDI,EAAKQ,qBAAkBxB,EAAWwB,uBAAoBpQ,UAAQc,MAI3C,IAAnB6O,KACAC,EAAKS,oBAAiBzB,EAAWyB,oBACXzB,EAAW0B,mEAA2DtQ,UAAQc,KAC/E8N,EAAWS,sBAC5BO,EAAKW,0CAAuC,CACxCrB,cAAegB,gCAAsBtB,EAAWS,wBAM5D,IAAuB,IAAnBM,EAA0B,CAC1B,IAAMa,EAAsB5B,EAAW6B,6DAAqDzQ,UAAQc,IAEhGwO,EAGAV,EAHAU,sCACAoB,EAEA9B,EAFA8B,4CACAC,EACA/B,EADA+B,qDAGAH,GACAlB,QACoDtd,IAApD2e,GACAD,IAEAd,EAAKgB,aAAe,CAChBhO,KAAMsN,gCAAsBZ,GAC5BuB,WAAYH,EACZI,oBAAqBH,IAYjC,OAPIjB,GAAqBd,EAAWmC,0BAAuBnC,EAAWoC,8BAClEpB,EAAKqB,oBAAiB,CAClBta,KAAMiY,EAAWmC,yBACjBG,QAAStC,EAAWoC,8BAIrBpB,G,0CCtCLuB,GAAe,UAMRC,IAJuB,gBAC/B1D,GAAoBoB,kBAAepc,OAAOC,KAAKiN,uBAGlB,kBAE5B1M,GAAOC,mCAOPke,GAA4B,SAACpd,GAC/B,GANsB,SAACA,GACvB,IAAM0M,EAAUpO,0BAAgB0B,EAAOxC,KACvC,YAAmBO,IAAZ2O,GAAyBsO,GAAkCtO,GAI9D2Q,CAAkBrd,GAClB,OAAOA,EAAOoc,qBAwUPkB,GAnUQ,SAAC,GAA2F,IAAzF3C,EAAwF,EAAxFA,WAAY4C,EAA4E,EAA5EA,qBAAsBhe,EAAsD,EAAtDA,SAAUC,EAA4C,EAA5CA,SAAUge,EAAkC,EAAlCA,qBACtEpiB,EAAOqE,cACPge,EAAU,SAACC,EAAahQ,GAAd,OAAsCrS,IAAWD,EAAD,8BAA8BsiB,GAAOhQ,IAcrG,OACI,cAAC,GAAKhO,cAAN,CACIC,cAAegb,EAAaQ,GAA0BR,GAAc,CAAEE,kBAAc,IACpFtb,SAfe,SAACS,GACpB,IFtDJ7B,EACAC,EEqDUuf,GFtDVxf,EEsDyD6B,EFrDzD5B,EEqDwD,OAASuc,QAAT,IAASA,OAAT,EAASA,EAAYvc,GFnDtE,2BACAD,GADP,IAEIC,GAAIA,GAAMC,kBACVb,IAAKc,0BAAgBH,EAAWX,KAChCE,IAAKY,0BAAgBH,EAAWT,KAChC0d,oBAAqB9c,0BAAgBH,EAAWid,qBAChDC,sCAAkC/c,0BAAgBH,EAAWkd,0CE8C7D,IAAIX,GAAaiD,GAMb,MAAM,IAAI9d,MAAM,mEALhBN,EAAS,2BACFoe,GADC,IAEJvB,oBAAgBgB,GAA0Bpd,OAW9CF,WAAY,SAACC,GAA+C,IAChDC,EAA0BD,EAA1BC,OAAQ4d,EAAkB7d,EAAlB6d,cADuC,EAEY5d,EAA3D4b,+BAF+C,MAE1B,eAF0B,IAEY5b,EAAtB6a,yBAFU,MAEK,GAFL,EAGjDnO,EAAUpO,0BAAgB0B,EAAOxC,KACvC,OACI,eAAC,GAAKyB,KAAN,CACI4e,0BAA0B,EAC1Bre,SAAUA,EACVe,mBAAoBC,iCAAsBpF,EAAM+hB,IAChD1c,0BAA2BC,wCAA6BtF,EAAM+hB,IAJlE,UAKI,cAAC,IAAD,CAAKhgB,UAAU,IAAf,SACI,cAAC,eAAD,CAAcE,IAAI,KAAlB,SAC4BogB,EAAvBF,EAA+B,mBAA8B,kBAItE,cAAC,GAAKO,mBAAN,CACI7c,KAAMwY,GAAoBoB,kBAC1Bja,OAAQ6c,EAAQ,2BAChBM,WAAY,CACR,CACIrQ,MAAO8L,GAAYuB,MACnB7Z,MAAOuc,EAAQ,kBAAD,OAAgBjE,GAAYuB,SAE9C,CACIrN,MAAO8L,GAAYwE,kBACnB9c,MAAOuc,EAAQ,kBAAD,OAAgBjE,GAAYwE,qBAE9C,CACItQ,MAAO8L,GAAYyE,SACnB/c,MAAOuc,EAAQ,kBAAD,OAAgBjE,GAAYyE,YAE9C,CACIvQ,MAAO8L,GAAY0E,MACnBhd,MAAOuc,EAAQ,kBAAD,OAAgBjE,GAAY0E,UAGlD/c,SAAUuE,4BAAiB,CAAEpE,UAAU,MAG1CsZ,GAAqBC,IAClB,cAAC,IAAD,CAAKzd,OAAO,KAAZ,SACI,cAAC,wBAAD,CACI6D,KAAMwY,GAAoB0C,qBAC1Bvb,OAAQ6c,EAAQ,iBAChBtc,SAAUoM,qCAKtB,cAAC,IAAD,CAAKnQ,OAAO,KAAZ,SACI,cAAC,GAAKyL,MAAN,CACI5H,KAAMwY,GAAoBmC,wBAC1B1a,MAAOuc,EAAQ,0BACftc,SAAUW,uCACVmH,UAAW,OAInB,cAAC,IAAD,CAAK7L,OAAO,KAAZ,SACI,cAAC,GAAKiQ,gBAAN,CACIpM,KAAMwY,GAAoB+B,iBAC1B5a,OAAQ6c,EAAQ,oBAAqB,CAAE7B,4BACvCza,SAAUoM,iCACViI,YACIoF,GAAqBC,GACjB,cAAC,KAAD,CACI3d,MAAO7B,IAAWD,EAAM,8CAD5B,SAEI,cAAC,KAAD,CACIgD,GAAG,sCACH4B,OAAQ,CAAE4b,oCAGlB7d,MAKfiC,EAAOwb,mBAAqBzP,UAAQ0E,IACjC,cAAC,IAAD,CAAKrT,OAAO,KAAZ,SACI,cAAC,GAAKyE,cAAN,CACIZ,KAAMwY,GAAoBsC,gBAC1B7a,MAAOuc,EAAQ,2BAA4B,CAAE7B,4BAC7Cza,SAAUW,uCACVqc,eAAe,MAK1Bne,EAAOwb,mBAAqBzP,UAAQc,KACjC,cAAC,IAAD,CAAKzP,OAAO,KAAZ,SACI,cAAC,GAAKyL,MAAN,CACI5H,KAAMwY,GAAoBoC,oBAC1B3a,MAAOuc,EAAQ,uBACf/Z,MAAO,CAAE0a,SAAU,SACnBnV,UAAW,EACX9H,SACIqc,OAAuBzf,EAAYsgB,iCAAsB,CAAE/c,UAAU,SAMnFtB,EAAOwb,mBAAqBzP,UAAQc,KAAO7M,EAAOwb,mBAAqBzP,UAAQ0E,KAC7E,eAAC,IAAD,CAAKrT,OAAO,KAAZ,UACI,cAAC,GAAKuD,gBAAN,CACIC,OAAQ6c,EAAQ,YAAa,CAAE7B,4BAC/BzC,kBAAkB,EAClB/Z,QAASgO,YACTpM,eAAgB,CACZE,MAAOuc,EAAQ,gBACfxc,KAAMwY,GAAoBjc,IAC1B2D,SAAUW,wCAEdJ,aAAc,CACVR,MAAOuc,EAAQ,gBACfxc,KAAMwY,GAAoB/b,IAC1B4gB,UAAgC,IAAtBte,EAAOkc,qBACjB/a,UAAgC,IAAtBnB,EAAOkc,0BAAsBne,EAAY+D,0CAG3D,cAAC,GAAKyc,SAAN,CACIrd,MAAOuc,EAAQ,2BACfxc,KAAMwY,GAAoByC,qBAC1BsC,cAAe,SAACC,GACRA,GACAb,EAAcnE,GAAoB/b,SAAKK,SAO1D2O,GACG,qCACK6Q,GACG,cAAC,IAAD,CAAKngB,OAAO,MAAZ,SACK4d,GAAkCtO,GAC/B,qCACI,cAAC,cAAD,UACK+Q,EAAQ,gDAEb,4BAAIA,EAAQ,iDAGhB,qCACI,cAAC,cAAD,UAAcA,EAAQ,mCACtB,4BAAIA,EAAQ,sCAO3BzC,GAAkCtO,IAC/B,qCACI,cAAC,IAAD,CAAKtP,OAAO,KAAZ,SACI,cAAC,GAAKshB,YAAN,CACIzd,KAAMwY,GAAoB2C,oBAC1Blb,MAAOuc,EAAQ,qBACfxU,UAAW,GACXvF,MAAO,CAAE0a,SAAU,SACnBjd,SAAUwd,8BAAmB,CAAEpd,IAAK,EAAGC,IAAK0b,KAC5C1H,YACI,qCACKiI,EAAQ,0BACT,cAAC,KAAD,CAAgBvgB,MAAOugB,EAAQ,gCAA/B,SACKA,EAAQ,mCAM7B,cAAC,IAAD,CAAKrgB,OAAO,KAAZ,SACI,cAAC,GAAKiQ,gBAAN,CACIpM,KACIwY,GAAoB4C,iEAExBzb,OAAQ6c,EAAQ,wBAChBtc,SAAUoM,iCACViI,YACI,cAAC,KAAD,CAAgBtY,MAAOugB,EAAQ,mCAA/B,SACKA,EAAQ,mCAKxBzd,EAAOqc,mEACJtQ,UAAQc,KACR,cAAC,KAAD,CAAWzP,OAAO,IAAlB,SACI,cAAC,KAAD,UACI,cAAC,GAAKmY,WAAN,CACItU,KAAMwY,GAAoB2B,oBAC1Bla,MAAOuc,EAAQ,6BACftE,kBAAkB,EAClB9Z,QAASuf,gBACTxf,QAASgO,YACTjM,SAAUW,iDASc,IAA/CkZ,GAAkCtO,IAC/B,qCACI,cAAC,IAAD,CAAKtP,OAAO,KAAZ,SACI,cAAC,GAAKiQ,gBAAN,CACIpM,KACIwY,GAAoB+C,2DAExB5b,OAAQ6c,EAAQ,qBAChBtc,SAAUoM,qCAGjBvN,EAAOwc,6DAAqDzQ,UAAQc,KACjE,qCACI,cAAC,IAAD,CAAKzP,OAAO,KAAZ,SACI,cAAC,GAAKmY,WAAN,CACItU,KAAMwY,GAAoB4B,sCAC1Bna,MAAOuc,EAAQ,sBACftc,SAAUW,uCACVzC,QAASsa,gBACTva,QAASgO,gBAGjB,cAAC,IAAD,CAAKhQ,OAAO,KAAZ,SACI,cAAC,GAAKshB,YAAN,CACIzd,KACIwY,GAAoBiD,qDAExBxb,MAAOuc,EAAQ,yBACfxU,UAAW,GACXvF,MAAO,CAAE0a,SAAU,SACnBjd,SAAUwd,8BAAmB,CAAEpd,IAAK,EAAGC,IAAK0b,SAGpD,cAAC,IAAD,CAAK9f,OAAO,KAAZ,SACI,cAAC,GAAKyhB,SAAN,CACI5d,KACIwY,GAAoBgD,4CAExBvb,MAAOuc,EAAQ,uBACftc,SAAUW,uCACVmH,UAAW,cAQlCjJ,EAAOwb,mBAAqBzP,UAAQc,KACjC,qCACI,cAAC,IAAD,CAAKzP,OAAO,KAAZ,SACI,cAAC,GAAKiQ,gBAAN,CACIpM,KAAMwY,GAAoBgC,uBAC1B7a,OAAQ6c,EAAQ,yBAChBtc,SAAUoM,qCAGjBvN,EAAOyb,yBAAsB1P,UAAQc,KAClC,cAAC,KAAD,CAAWzP,OAAO,IAAlB,SACI,eAAC,KAAD,WACI,cAAC,GAAKyL,MAAN,CACI5H,KAAMwY,GAAoBqD,yBAC1B5b,MAAOuc,EAAQ,0BACftc,SAAUW,uCACVmH,UAAW,KAEf,cAAC,IAAD,CAAK7L,OAAO,KAAZ,SACI,cAAC,GAAKyL,MAAN,CACI5H,KAAMwY,GAAoBsD,4BAC1B7b,MAAOuc,EAAQ,6BACftc,SAAU2d,8BAAmB,CAAE7V,UAAW,KAC1CA,UAAW,eAQtCjJ,EAAOyb,yBAAsB1P,UAAQc,KAClC,cAAC,IAAD,CAAKzP,OAAO,KAAZ,SACI,eAAC,KAAD,WACKqgB,EAAQ,6BACT,uBACCA,EAAQ,4C,qBC9WxCsB,GAAkB,SAACC,GAAD,OAAoC1F,uBAAa2F,8BAAoBD,KAIrFE,GAFkC,SAAC,GAAD,IAAGF,EAAH,EAAGA,QAAH,OAAiB,mCAAGD,GAAgBC,MCA/Ejd,GAAMC,KAAS,qBAYNmd,GAVwC,SAAC,GAA0C,IAA9BC,EAA6B,EAAvCC,SAAwBhjB,EAAe,EAAfA,SACxEjB,EAAOqE,cACb,OACI,sBAAK9C,UAAWoF,GAAIud,MAApB,UACI,uBAAM3iB,UAAWoF,GAAIY,QAAQ,SAA7B,UAAwCtH,IAAWD,EAAMgkB,GAAzD,OAAgF,IAChF,sBAAMziB,UAAWoF,GAAIY,QAAQ,SAA7B,SAAwCtG,QCLrCkjB,GAJmC,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACjD,OAAO,cAAC,KAAD,CAAkBphB,IAAmB,IAAfohB,EAAsB,KAAO,MAAOC,QAAQ,UCO9DC,GAbwB,SAAC,GAAD,IAAGrjB,EAAH,EAAGA,SAAH,OACnC,sBACIqH,MAAO,CACHic,QAAS,QACTC,YAAa,QACbxiB,OAAQ,WACRyiB,WAAY,oBACZC,UAAW,UANnB,SAQKzjB,K,qBCIM0jB,GANsC,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,IAAW5iB,cAAX,MAAoB,IAApB,EAAyBf,EAAzB,EAAyBA,SAAzB,OACjD,cAAC,IAAD,CAAKe,OAAQA,EAAb,SACI,cAAC,KAAD,CAAmB4iB,OAAQA,EAA3B,SAAoC3jB,O,SCD7B4jB,GAHkC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,YACnCniB,IAAVmiB,EAAsB,cAAC,mBAAD,CAAiBxS,MAAOwS,IAAY,MCkBjDC,GAA0B,SAACxF,EAA+Bvf,GACnE,IAAMkS,EAAOqN,EAAWmB,oBAAsBnB,EAAWmB,oBAAoBE,SAAW,QAElFnB,EAAeF,EAAWE,kBAC3Bza,KAAI,SAACggB,GAAD,OACDA,IAAW5G,GAAYuB,YAAwChd,IAA/B4c,EAAWwB,qBAb1B,SAAC/gB,EAAiBilB,GAC3C,IAAMC,EAAejlB,IAAWD,EAAD,6CAA0Coe,GAAYuB,QAC/EwF,EAAaF,EACbhlB,IAAWD,EAAM,iDACjBC,IAAWD,EAAM,qDACvB,MAAM,GAAN,OAAUklB,EAAV,aAA2BC,EAA3B,KAScC,CAAqBplB,EAAMuf,EAAWwB,sBACtC9gB,IAAWD,EAAD,6CAA0CglB,OAE7DK,KAAK,MAEJC,EAAW/F,EAAW7L,SACtBzT,IAAWD,EAAM,iDAAkD,CAC/DyT,SAAUkQ,GAAgBpE,EAAW9L,UACrCC,SAAUiQ,GAAgBpE,EAAW7L,YAEzCzT,IAAWD,EAAM,sDAAiD,CAC9DyT,SAAUkQ,GAAgBpE,EAAW9L,YAG/C,OACI,qCACI,eAAC,GAAD,CAAgBwQ,SAAS,mCAAzB,UACK1E,EAAWiB,wBADhB,OAGA,eAAC,GAAD,CAAgByD,SAAS,6CAAzB,UAAoExE,EAApE,QACA,gCACI,cAAC,KAAD,CAAkBzc,GAAG,8CAA8C4B,OAAQ,CAAEsN,UAC5EqN,EAAWa,kBACR,cAAC,KAAD,CACIpd,GAAG,oDACH4B,OAAQ,CAAE2gB,MAAOhG,EAAWkB,uBALxC,KAQM,uBACD6E,SAsFFE,GAhF2C,SAAC,GAAoB,IAAlBjG,EAAiB,EAAjBA,WACnDvf,EAAOqE,cACPohB,EAA0B7F,GAAkCiE,8BAAoBtE,EAAW9L,WAEjG,OACI,qCACKsR,GAAwBxF,EAAYvf,QAEN2C,IAA9B4c,EAAWyB,qBACR,eAAC,GAAD,CAAc4D,OAAQ3kB,IAAWD,EAAM,yCAAvC,UACI,cAAC,KAAD,CAAkBgD,GAAG,mDADzB,IAGI,cAAC,GAAD,CAAU8hB,MAAOvF,EAAWyB,0BAIP,IAA5ByE,GACG,mCACI,eAAC,GAAD,CAAcb,OAAQ3kB,IAAWD,EAAM,4CAAvC,eACyD2C,IAApD4c,EAAW2B,2CACR,cAAC,GAAD,CAAWkD,gBAAgEzhB,IAApD4c,EAAW2B,iDAEeve,IAApD4c,EAAW2B,2CACR,cAAC,KAAD,CACIle,GAAG,uDACH4B,OAAQ,CACJ2O,KAAMoQ,GACFpE,EAAW2B,0CAAqCrB,wBAS/C,IAA5B4F,GACG,qCACI,cAAC,GAAD,CAAcb,OAAQ3kB,IAAWD,EAAM,yCAAvC,SACI,cAAC,GAAD,CAAWokB,gBAAwCzhB,IAA5B4c,EAAWgC,iBAErChC,EAAWgC,cACR,qCACI,cAAC,GAAD,CAAcqD,OAAQ3kB,IAAWD,EAAM,iDAAvC,SACI,cAAC,GAAD,CAAU4jB,QAASrE,EAAWgC,aAAahO,SAE/C,cAAC,GAAD,CACIqR,OAAQ3kB,IAAWD,EAAM,8DAD7B,SAEI,cAAC,GAAD,CAAU8kB,MAAOvF,EAAWgC,aAAaE,wBAE7C,cAAC,GAAD,CACImD,OAAQ3kB,IAAWD,EAAM,wDAD7B,SAEI,cAAC,GAAD,UACI,cAAC,KAAD,CAAiBgN,KAAMuS,EAAWgC,aAAaC,uBAStEjC,EAAWa,kBACR,eAAC,GAAD,CAAcwE,OAAQ3kB,IAAWD,EAAM,6CAAvC,eACmC2C,IAA9B4c,EAAWqC,qBAAgC,cAAC,GAAD,CAAWwC,YAAY,SACpCzhB,IAA9B4c,EAAWqC,qBACR,cAAC,KAAD,CACI5e,GAAG,qDACH4B,OAAQ,CACJ0C,KAAMiY,EAAWqC,oBAAeta,KAChCua,QAAStC,EAAWqC,oBAAeC,kBCpFpD6D,ICnCVrd,GDmCUqd,GAjCf,YAOuB,IANnB7f,EAMkB,EANlBA,KACA+B,EAKkB,EALlBA,OACAwa,EAIkB,EAJlBA,qBACAD,EAGkB,EAHlBA,qBACApc,EAEkB,EAFlBA,SACA4f,EACkB,EADlBA,cAEM3lB,EAAOqE,cACb,OACI,cAAC,yBAAD,CACIwB,KAAMA,EACNE,SAAUA,EACV6B,OAAQA,EACRC,YAAY,SACZ+d,mBAAmB,EACnB5d,aAAc,gBAAG7D,EAAH,EAAGA,SAAUC,EAAb,EAAaA,SAAUmc,EAAvB,EAAuBA,KAAvB,OACV,cAAC,GAAD,CACIhB,WAAYgB,EACZ4B,qBAAsBA,EACtBhe,SAAUA,EACVC,SAAUA,EACVge,qBAAsBA,KAG9ByD,aAAc,gBAAGtF,EAAH,EAAGA,KAAH,OACV,cAAC,GAAD,CAAmBhB,WAAYW,GAAiClgB,EAAKe,OAAQwf,MAEjFoF,cAAeA,M,SC9BtBtd,K,yBAAAA,Q,KAMc+V,GAAY0E,MAAO1E,GAAYyE,SAAUzE,GAAYuB,MAAOvB,GAAYwE,kBACtEjS,UAAQc,IAEPd,UAAQc,IAErB,IAAIqU,KAAK,4BAG0CnV,UAAQc,IAC3C,IAAIqU,KACyBnV,UAAQc,IACxB,IAAIqU,KAAK,4BAGxBnV,UAAQc,IAhBxB,IAyBDlN,GAA4B,GAyEnBwhB,GAvEW,WAAO,IAAD,EACQnc,wBAA0CjH,GADlD,mBACrBI,EADqB,KACTijB,EADS,OAE4Bpc,oBAAkB,GAF9C,mBAErBuY,EAFqB,KAEC8D,EAFD,KAGtBjmB,EAAOqE,cAELkb,GAAexc,GAAc,IAA7Bwc,WAEF2G,EACF3G,GAAcD,GAAaC,GAAcW,GAAiClgB,EAAKe,OAAQwe,QAAc5c,EACzG,OACI,qCACI,cAAC,EAAD,CAAWb,MAAM,uBAAjB,6EACA,cAAC,IAAD,CAAKC,UAAU,IAAf,SACI,cAAC,cAAD,gCAEJ,eAAC,KAAD,CAAOkI,QAAQ,EAAf,UACI,cAAC,qBAAD,CACI1F,cAAeA,GACfJ,SAAU6hB,EACVthB,WAAY,WACR,OACI,cAAC,kBAAD,CACIwF,gBAAgB,EAChBC,kBAAkB,iBAClBhF,mBAAoBC,iCAAsBpF,EAAM,qBAChDqF,0BAA2BC,wCAA6BtF,EAAM,qBAJlE,SAKI,cAAC,GAAD,CACI6F,KAAMwC,GAAUkX,WAChB4C,qBAAsBA,EACtBpc,SAAUuE,4BAAiB,CAAEpE,UAAU,IACvC0B,OAAQ,CACJ2C,SAAU4X,EAAuB,uBAAyB,WAC1DgE,YAAa,QACbC,UAAW,QACXC,UAAW,aACX5b,WAAY,qBAOpC,eAAC,IAAD,CAAKzI,OAAO,IAAZ,UACI,uBACA,eAAC,KAAD,CAAOsG,MAAO,CAAEG,QAAS,QAAzB,UACI,cAAC,IAAD,CAAK1G,UAAU,IAAf,wBACA,cAAC,IAAD,CAAKC,OAAO,IAAZ,SACI,cAAC,YAAD,CACI8D,MAAM,gCACNud,QAASlB,EACTrW,SAAU,SAACoT,GAAD,OAAS+G,EAAwB/G,EAAIoH,cAAcjD,uBAOhF6C,GACG,qCACI,cAAC,IAAD,CAAKlkB,OAAO,MAAMD,UAAU,IAA5B,SACI,cAAC,cAAD,yCAEJ,cAAC,KAAD,CAAOkI,QAAQ,EAAf,SACI,cAAC,GAAD,CAAmBsV,WAAY2G,aCpGxCK,GATD,kBACV,mCACI,cAAC,EAAD,CAAWzkB,MAAM,mBAAjB,oO,qBC2CO0kB,GAjCD,WACV,IAAMC,EAAiE,GASvE,OARAA,EAAazK,KAAK,CAAEla,MAAO,gBAAiBZ,SAAUxB,IACtD+mB,EAAazK,KAAK,CAAEla,MAAO,aAAcZ,SAAUrB,IACnD4mB,EAAazK,KAAK,CAAEla,MAAO,aAAcZ,SAAUd,IACnDqmB,EAAazK,KAAK,CAAEla,MAAO,YAAUZ,SAAUhB,IAC/CumB,EAAazK,KAAK,CAAEla,MAAO,cAAeZ,SAAUZ,IACpDmmB,EAAazK,KAAK,CAAEla,MAAO,mBAAoBZ,SAAUf,IACzDsmB,EAAazK,KAAK,CAAEla,MAAO,wDAAmDZ,SAAUb,IACxFomB,EAAazK,KAAK,CAAEla,MAAO,aAAcZ,SAAUX,IAE/C,gCACI,cAAC,IAAD,UACI,cAAC,KAAD,MAEHkmB,EAAazhB,KAAI,YAA0B,IAAvBlD,EAAsB,EAAtBA,MAAOZ,EAAe,EAAfA,SACxB,OACI,8BACI,cAAC,KAAD,CAAWc,OAAO,OAAO0kB,cAAc,KAAvC,SACI,cAAC,IAAD,CACIxlB,SAAUA,EACVY,MAAOA,EACP0H,iBAAiB,EACjBC,wBAAwB,OAN1B3H,UCnBjB6kB,GAAwB,CACjC,CACIlI,KAAM,YACN3c,MAAO,UACP4c,cAAe,kBAAM,cAAC,GAAD,MAEzB,CACID,KAAM,eACN3c,MAAO,eACP4c,cAAe,kBAAM,cAAC,GAAD,MAEzB,CACID,KAAM,YACN3c,MAAO,uBACP4c,cAAe,kBAAM,cAAC,GAAD,MAEzB,CACID,KAAM,QACN3c,MAAO,UACP4c,cAAe,kBAAM,cAAC,GAAD,OAIhBkI,GAAgB,SAACnI,EAAcoI,GACxC,OAAOA,EAASC,QAAQrI,IAAS,GC9B/BsI,I,OAAiB,SAACC,GACpB,OACI,6BACI,cAAC,WAAD,CAAUzlB,UAAU,yBAApB,SACI,qBAAK0lB,YAAWD,EAAMvI,KAAtB,SAA6BuI,EAAMllB,WAFlCklB,EAAMvI,QAsCRyI,gBA5BI,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,QAEFN,EACZM,EADAC,SAAYP,SASVG,EAAQL,GAAO3H,MAAK,SAACC,GAAD,OAAO2H,GAAc3H,EAAER,KAAMoI,OAAcF,GAAO,GAC5E,OACI,qBAAKplB,UAAU,aAAf,SACI,eAAC,UAAD,CAASA,UAAU,sBAAsB8lB,YATlC,SAAC9f,GACZ,IAAM0X,EAAI1X,EAAQjG,MAAQiG,EAAQjG,MAAM,kBAAeqB,EACnDsc,GACAkI,EAAQnL,KAAKiD,IAMb,UACI,eAAC,SAAD,CAAQ1d,UAAU,qBAAlB,UACI,qBAAKA,UAAU,4BAAf,SAA4CylB,EAAQA,EAAMllB,MAAQ,SAClE,qBAAKP,UAAU,8BAAf,SACI,cAAC,aAAD,SAGR,cAAC,OAAD,CAAMA,UAAU,mBAAhB,SACI,6BAAKolB,GAAO3hB,IAAI+hB,gBCnC9BO,I,MAAW1gB,KAAS,UAwBXsgB,gBAtBE,SAAC,GAIU,IAFRL,EAEO,EAHvBM,QACIC,SAAYP,SAGhB,OACI,qBAAKtlB,UAAU,WAAf,SACKolB,GAAO3hB,KAAI,SAACgiB,GAAD,OACR,cAAC,IAAD,CAEI3kB,GAAI2kB,EAAMvI,KACVld,UAAW+lB,GAASC,WAChBD,GAASpD,MACToD,GAASE,oBAAoB,SAAUZ,GAAcI,EAAMvI,KAAMoI,KALzE,SAOKG,EAAMllB,OANFklB,EAAMvI,cCqBhByI,gBA5BI,SAAC,GAIN,IACJO,EHyBoB,SAACZ,GAC3B,OAAOF,GAAO3H,MAAK,SAACpT,GAAD,OAAOgb,GAAchb,EAAE6S,KAAMoI,MG1B5Ba,CADX,EAHTP,QACIC,SAAYP,UAIhB,OACI,qCACI,eAAC,IAAD,CAAYc,SAAU,KAAtB,UACI,uBAAOpmB,UAAU,eAAjB,SACI,cAAC,GAAD,MAEJ,yBAAS+G,MAAO,CAAE0a,SAAU,UAAYzhB,UAAU,cAAlD,SACKkmB,EAAcA,EAAY/I,gBAAkB,cAAC,GAAD,SAGrD,eAAC,IAAD,CAAYsE,SAAU,KAAtB,UACI,uBAAOzhB,UAAU,kBAAjB,SACI,cAAC,GAAD,MAEJ,yBAAS+G,MAAO,CAAE0a,SAAU,UAAYzhB,UAAU,cAAlD,SACKkmB,EAAcA,EAAY/I,gBAAkB,cAAC,GAAD,eCOlDkJ,I,OAxBC,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,eACT7nB,EAAOqE,cACb,OACI,uBAAM9C,UAAU,UAAhB,UACI,yBAAQA,UAAU,SAAlB,UACI,sBAAMA,UAAU,UAAhB,SACI,cAAC,EAAD,MAEJ,sBAAMA,UAAU,gBAAhB,SACI,cAAC,eAAD,qDAEJ,sBAAMA,UAAU,kBAAhB,SACI,cAAC,IAAD,CAAgBumB,OAAQD,EAAgB9mB,OAAQf,EAAKe,cAG7D,qBAAKQ,UAAU,iBAAf,SACI,cAAC,IAAD,UACI,cAAC,GAAD,aCnBdwmB,I,OAA2BC,yCAkBlBC,GAhBH,WAAO,IAAD,EACcC,WAAeH,IAA4B,MADzD,mBACPhnB,EADO,KACConB,EADD,KAEd,OACI,cAAC,cAAD,CAAalmB,IAAI,MAAjB,SACI,cAAC,EAAD,CAAiBlB,OAAQA,EAAzB,SACI,cAAC,GAAD,CACI8mB,eAAgB,SAACO,GACbC,oCAA0BD,GAC1BD,EAAUC,WCjBlCE,IAAMC,cAAc,SACpBC,IAASC,OAAO,cAAC,GAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.4fbb79b3.chunk.js","sourcesContent":["const bostedUtlandMessages = {\n    nb: {\n        'bostedUtland.list.add': 'Legg til opphold',\n        'bostedUtland.form.tittel': 'Utenlandsopphold',\n        'bostedUtland.form.tidsperiode.spm': 'Tidsperiode',\n        'bostedUtland.form.tidsperiode.fraDato': 'Fra og med',\n        'bostedUtland.form.tidsperiode.tilDato': 'Til og med',\n        'bostedUtland.form.land.spm': 'Velg land',\n        'bostedUtland.form.ok': 'Legg til',\n        'bostedUtland.form.avbryt': 'Avbryt',\n    },\n    nn: {\n        'bostedUtland.list.add': 'Legg til opphald',\n        'bostedUtland.form.tittel': 'Utenlandsopphald',\n        'bostedUtland.form.tidsperiode.spm': 'Tidsperiode',\n        'bostedUtland.form.tidsperiode.fraDato': 'Frå og med',\n        'bostedUtland.form.tidsperiode.tilDato': 'Til og med',\n        'bostedUtland.form.land.spm': 'Velg land',\n        'bostedUtland.form.ok': 'Legg til',\n        'bostedUtland.form.avbryt': 'Avbryt',\n    },\n};\n\nexport default bostedUtlandMessages;\n","const ferieuttakMessages = {\n    nb: {\n        'ferieuttak.list.title': 'Registrer uttak av ferie',\n        'ferieuttak.list.fromDate': 'Fra og med',\n        'ferieuttak.list.toDate': 'Til og med',\n        'ferieuttak.list.intervalTitle': 'Velg tidsrom',\n        'ferieuttak.list.okButton': 'Ok',\n        'ferieuttak.list.cancelButton': 'Avbryt',\n        'ferieuttak.form.validation.required': 'Feltet er påkrevd',\n        'ferieuttak.form.validation.dateOutsideRange': 'Første gyldige dato er {fom}, og siste gyldige dato er {tom}',\n        'ferieuttak.form.validation.fromDateAfterToDate': 'Fra-dato må være lik eller før til-dato',\n        'ferieuttak.form.validation.toDateBeforeFromDate': 'Til-dato må være lik eller etter fra-dato',\n    },\n    nn: {\n        'ferieuttak.list.title': 'Registrer uttak av ferie',\n        'ferieuttak.list.fromDate': 'Frå og med',\n        'ferieuttak.list.toDate': 'Til og med',\n        'ferieuttak.list.intervalTitle': 'Velg tidsrom',\n        'ferieuttak.list.okButton': 'Ok',\n        'ferieuttak.list.cancelButton': 'Avbryt',\n        'ferieuttak.form.validation.required': 'Feltet er påkrevd',\n        'ferieuttak.form.validation.dateOutsideRange': 'Første gyldige dato er {fom}, og siste gyldige dato er {tom}',\n        'ferieuttak.form.validation.fromDateAfterToDate': 'Frå-dato må vere lik eller før til-dato',\n        'ferieuttak.form.validation.toDateBeforeFromDate': 'Til-dato må vere lik eller etter frå-dato',\n    },\n};\n\nexport default ferieuttakMessages;\n","import intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { IntlShape } from 'react-intl';\nimport { FraværÅrsak } from './types';\n\nconst fraværMessages = {\n    nb: {\n        'fravær.årsak.STENGT_SKOLE_ELLER_BARNEHAGE': 'Skolen/barnehagen var stengt på grunn av koronasituasjonen.',\n        'fravær.årsak.SMITTEVERNHENSYN':\n            'Skolen/barnehagen var åpen, men barnet måtte være hjemme på grunn av særlige smittevernhensyn.',\n        'fravær.årsak.STENGT_SKOLE_ELLER_BARNEHAGE.kort': 'stengt skole/barnehage',\n        'fravær.årsak.SMITTEVERNHENSYN.kort': 'særlige smittevernhensyn',\n\n        'fravær.list.årsak': 'På grunn av {årsak}',\n        'fravær.form.validation.required': 'Feltet er påkrevd',\n        'fravær.form.validation.dateOutsideRange': 'Første gyldige dato er {fom}, og siste gyldige dato er {tom}',\n        'fravær.form.validation.fromDateAfterToDate': 'Fra-dato må være lik eller før til-dato',\n        'fravær.form.validation.toDateBeforeFromDate': 'Til-dato må være lik eller etter fra-dato',\n        'fravær.form.validation.fra_og_til_er_ulike_år': 'Fra og til dato må være i samme år',\n        'fravær.form.validation.timer_mer_enn_arbeidstimer':\n            'Antall timer med fravær kan ikke være mer enn antall timer du skulle ha jobbet denne dagen',\n        'fravær.form.validation.er_helg': 'Lørdag og søndag er ikke gyldig.',\n        'fieldvalidation.dager_overlapper_med_andre_dager':\n            'Én eller flere dager med fravær overlapper med andre dager med fravær.',\n        'fieldvalidation.fra_dato_kolliderer_med_annet_fravær':\n            'Fra og med datoen overlapper med allerede registrert fraværsdag',\n        'fieldvalidation.til_dato_kolliderer_med_annet_fravær':\n            'Til og med datoen overlapper med allerede registrert fraværsdag',\n        'fieldvalidation.dato_kolliderer_med_annet_fravær': 'Datoen overlapper med allerede registrert fraværsdag',\n        'info.smittevern.tittel': 'Hva menes med særlige smittevernhensyn?',\n        'info.smittevern.info.html':\n            'Når barnehagen eller skolen er åpen, men du må være hjemme med barnet ditt på grunn <strong>av særlige smittevernhensyn</strong>, kan du bruke omsorgsdager. Det er en lege som avgjør om det foreligger særlige smittevernhensyn. Det kan være smittevernhensyn til barnet eller andre familiemedlemmer som bor med barnet.',\n        'info.årsak.tittel': 'Hva om begge årsakene gjelder i perioden jeg har lagt inn?',\n        'info.årsak.info.1': `Hvis du har vært hjemme med barn både fordi barnehage/skole var stengt, og på grunn av særlige smittevernshensyn, må du legge inn flere perioder. Når du har lagt inn én periode og trykker OK, får du mulighet til å legge til flere perioder.`,\n        'info.årsak.info.2': `Eksempel:`,\n        'info.årsak.info.3': `1.-2. mars var du hjemme med barn fordi barnehage/skole var stengt. Da legger du inn 1.-2. mars som en periode. I tillegg var du hjemme 3.-5. mars på grunn av særlige smittevernshensyn. Da legger du inn 3.-5. mars som en egen periode.`,\n\n        'fravær.form.felles.hjemmePgaKorona':\n            'Var du hjemme med barn fordi barnehage/skole var stengt på grunn av koronaviruset, eller på grunn av særlige smittevernshensyn?',\n        'fravær.form.felles.årsak': 'Velg årsaken til at du var hjemme med barn i perioden du har lagt inn',\n        'fravær.form.felles.ok': 'Ok',\n        'fravær.form.felles.avbryt': 'Avbryt',\n        'fravær.form.periode.tittel': 'Periode med fravær fra jobb',\n        'fravær.form.periode.tidsrom': 'Velg tidsrom',\n        'fravær.form.periode.fom': 'Fra og med',\n        'fravær.form.periode.tom': 'Til og med',\n        'fravær.form.dag.tittel': 'Dag med delvis fravær fra jobb',\n        'fravær.form.dag.dato': 'Dato',\n        'fravær.form.dag.antallArbeidstimer': 'Antall timer du skulle ha jobbet denne dagen',\n        'fravær.form.dag.timerFravær': 'Antall timer du var borte fra jobb denne dagen',\n    },\n    nn: {\n        'fravær.list.årsak': 'På grunn av {årsak}',\n        'fravær.form.validation.required': 'Feltet er påkrevd',\n        'fravær.form.validation.dateOutsideRange': 'Første gyldige dato er {fom}, og siste gyldige dato er {tom}',\n        'fravær.form.validation.fromDateAfterToDate': 'Frå-datoen må vere lik eller før til-datoen',\n        'fravær.form.validation.toDateBeforeFromDate': 'Til-datoen må vere lik eller etter frå-datoen',\n        'fravær.form.validation.fra_og_til_er_ulike_år': 'Fra og til dato må vera i same år',\n        'fieldvalidation.dager_overlapper_med_andre_dager':\n            'Ein eller fleire dagar med fråvær overlappar andre dagar med fråvær.',\n        'fieldvalidation.fra_dato_kolliderer_med_annet_fravær':\n            'Frå og med datoen overlappar med allereie registrert fråværsdag',\n        'fieldvalidation.til_dato_kolliderer_med_annet_fravær':\n            'Til og med datoen overlappar med allereie registrert fråværsdag',\n        'fieldvalidation.dato_kolliderer_med_annet_fravær': 'Datoen overlappar med allereie registrert fråværsdag',\n        'fravær.form.validation.timer_mer_enn_arbeidstimer':\n            'Talet på timar med fråvær kan ikkje vere meir enn talet på timar du skulle ha jobba denne dagen',\n        'fravær.form.validation.er_helg': 'Laurdag og søndag er ikkje gyldig.',\n\n        'fravær.årsak.STENGT_SKOLE_ELLER_BARNEHAGE': 'Skolen/barnehagen var stengt på grunn av koronasituasjonen',\n        'fravær.årsak.SMITTEVERNHENSYN':\n            'Skolen/barnehagen var åpen, men barnet måtte være hjemme på grunn av særlige smittevernhensyn.',\n        'fravær.årsak.ORDINÆRT_FRAVÆR': 'Ordinært fravær',\n        'fravær.årsak.STENGT_SKOLE_ELLER_BARNEHAGE.kort': 'stengt skole/barnehage',\n        'fravær.årsak.SMITTEVERNHENSYN.kort': 'særlige smittevernhensyn',\n        'fravær.årsak.ORDINÆRT_FRAVÆR.kort': 'ordinært fravær',\n        'info.smittevern.tittel': 'Hva menes med særlige smittevernhensyn?',\n        'info.smittevern.info.html':\n            'Når barnehagen eller skolen er åpen, men du må være hjemme med barnet ditt på grunn <strong>av særlige smittevernhensyn</strong>, kan du bruke omsorgsdager. Det er en lege som avgjør om det foreligger særlige smittevernhensyn. Det kan være smittevernhensyn til barnet eller andre familiemedlemmer som bor med barnet.',\n        'info.årsak.tittel': 'Hva om begge årsakene gjelder i perioden jeg har lagt inn?',\n        'info.årsak.info.1': `Hvis du har vært hjemme med barn både fordi barnehage/skole var stengt, og på grunn av særlige smittevernshensyn, må du legge inn flere perioder. Når du har lagt inn én periode og trykker OK, får du mulighet til å legge til flere perioder.`,\n        'info.årsak.info.2': `Eksempel:`,\n        'info.årsak.info.3': `1.-2. mars var du hjemme med barn fordi barnehage/skole var stengt. Da legger du inn 1.-2. mars som en periode. I tillegg var du hjemme 3.-5. mars på grunn av særlige smittevernshensyn. Da legger du inn 3.-5. mars som en egen periode.`,\n    },\n};\n\nexport const getFraværÅrsakTekst = (årsak: FraværÅrsak, intl: IntlShape): string => {\n    return intlHelper(intl, `fravær.årsak.${årsak}`);\n};\n\nexport const getFraværÅrsakTekstKort = (årsak: FraværÅrsak, intl: IntlShape): string => {\n    return intlHelper(intl, `fravær.årsak.${årsak}.kort`);\n};\n\nexport default fraværMessages;\n","const utenlandsoppholdMessages = {\n    nb: {\n        'utenlandsopphold.list.add': '+ Legg til opphold',\n        'utenlandsopphold.form.tittel': 'Utenlandsopphold',\n        'utenlandsopphold.form.tidsperiode.spm': 'Velg tidsperiode for oppholdet',\n        'utenlandsopphold.form.tidsperiode.fraDato': 'Fra og med',\n        'utenlandsopphold.form.tidsperiode.tilDato': 'Til og med',\n        'utenlandsopphold.form.land.spm': 'Velg land',\n        'utenlandsopphold.form.erBarnetInnlagt.spm': 'Er, eller skal, barnet være innlagt i helseinstitusjon i {land}?',\n        'utenlandsopphold.form.perioderBarnetErInnlag.formTitle': 'Periode barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.addLabel': 'Legg til periode barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.modalTitle': 'Periode(r) barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.listTitle': 'Periode(r) barnet er innlagt',\n        'utenlandsopphold.form.årsak.spm': 'Hvordan dekkes utgiftene til innleggelsen?',\n        'utenlandsopphold.form.årsak.BARNET_INNLAGT_I_HELSEINSTITUSJON_FOR_NORSK_OFFENTLIG_REGNING':\n            'For norsk offentlig regning',\n        'utenlandsopphold.form.årsak.BARNET_INNLAGT_I_HELSEINSTITUSJON_DEKKET_ETTER_AVTALE_MED_ET_ANNET_LAND_OM_TRYGD':\n            'Etter trygdeavtale med et annet land',\n        'utenlandsopphold.form.årsak.ANNET': 'Jeg dekker utgiftene selv',\n        'utenlandsopphold.oppsummering.årsak.ANNET': 'Jeg dekker utgiftene selv',\n        'utenlandsopphold.form.ok': 'Legg til',\n        'utenlandsopphold.form.avbryt': 'Avbryt',\n    },\n    nn: {\n        'utenlandsopphold.list.add': 'Legg til opphald',\n        'utenlandsopphold.form.tittel': 'Utanlandsopphald',\n        'utenlandsopphold.form.tidsperiode.spm': 'Tidsperiode',\n        'utenlandsopphold.form.tidsperiode.fraDato': 'Frå og med',\n        'utenlandsopphold.form.tidsperiode.tilDato': 'Til og med',\n        'utenlandsopphold.form.land.spm': 'Vel land',\n        'utenlandsopphold.form.erBarnetInnlagt.spm': 'Er, eller skal, barnet bli lagt inn i helseinstitusjon i {land}?',\n        'utenlandsopphold.form.perioderBarnetErInnlag.formTitle': 'Perioden barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.addLabel': 'Legg til perioden barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.modalTitle': 'Perioden/periodane barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.listTitle': 'Perioden/periodane barnet er innlagt',\n        'utenlandsopphold.form.årsak.spm': 'Korleis blir utgiftene til innlegginga dekte?',\n        'utenlandsopphold.form.årsak.BARNET_INNLAGT_I_HELSEINSTITUSJON_FOR_NORSK_OFFENTLIG_REGNING':\n            'For norsk offentleg rekning',\n        'utenlandsopphold.form.årsak.BARNET_INNLAGT_I_HELSEINSTITUSJON_DEKKET_ETTER_AVTALE_MED_ET_ANNET_LAND_OM_TRYGD':\n            'Etter trygdeavtale med eit anna land',\n        'utenlandsopphold.form.årsak.ANNET': 'Eg dekkjer utgiftene sjølv',\n        'utenlandsopphold.oppsummering.årsak.ANNET': 'Eg dekkjer utgiftene sjølv',\n        'utenlandsopphold.form.ok': 'Legg til',\n        'utenlandsopphold.form.avbryt': 'Avbryt',\n    },\n};\n\nexport default utenlandsoppholdMessages;\n","const fosterbarnMessages = {\n    nb: {\n        'fosterbarn.form.etternavn_label': 'Etternavn',\n        'fosterbarn.form.fornavn_label': 'Fornavn',\n        'fosterbarn.form.fødselsnummer_label': 'Fødselsnummer',\n        'fosterbarn.list.legg_til_knapp': 'Legg til fosterbarn',\n        'fosterbarn.list.tittel': 'Registrerte fosterbarn',\n        'fosterbarn.modal.tittel': 'Fosterbarn',\n    },\n    nn: {\n        'fosterbarn.form.etternavn_label': 'Etternavn',\n        'fosterbarn.form.fornavn_label': 'Fornavn',\n        'fosterbarn.form.fødselsnummer_label': 'Fødselsnummer',\n        'fosterbarn.list.legg_til_knapp': 'Legg til fosterbarn',\n        'fosterbarn.list.tittel': 'Registrerte fosterbarn',\n        'fosterbarn.modal.tittel': 'Fosterbarn',\n    },\n};\n\nexport default fosterbarnMessages;\n","const virksomhetMessages = {\n    nb: {\n        'sifForms.virksomhet.næringstype_FISKE': 'Fisker',\n        'sifForms.virksomhet.næringstype_JORDBRUK_SKOGBRUK': 'Jordbruker',\n        'sifForms.virksomhet.næringstype_DAGMAMMA': 'Dagmamma eller familiebarnehage i eget hjem',\n        'sifForms.virksomhet.næringstype_ANNEN': 'Annet',\n        'sifForms.virksomhet.form_title': 'Opplysninger om virksomheten din',\n        'sifForms.virksomhet.form_title.flere': 'Opplysninger om den eldste virksomheten din',\n        'sifForms.virksomhet.hvilken_type_virksomhet': 'Hvilken type virksomhet har du?',\n        'sifForms.virksomhet.hvilken_type_virksomhet.flere': 'Hvilken type virksomhet er den eldste virksomheten din?',\n        'sifForms.virksomhet.hva_heter_virksomheten': 'Hva heter virksomheten?',\n        'sifForms.virksomhet.fisker_blad_b': 'Er du fisker på blad B?',\n        'sifForms.virksomhet.veileder_fisker.tittel': `Hvis du ikke har organiasjonsnummer`,\n        'sifForms.virksomhet.veileder_fisker': `Hvis du ikke har organisasjonsnummer, svarer du nei på spørsmålet \"Er {navnPåVirksomheten} registrert i Norge?\" I nedtrekkslisten velger du at virksomheten er registrert i Norge.`,\n        'sifForms.virksomhet.registert_i_norge': `Er {navnPåVirksomheten} registert i Norge?`,\n        'sifForms.virksomhet.registert_i_hvilket_land': `I hvilket land er {navnPåVirksomheten} din registrert i?`,\n        'sifForms.virksomhet.organisasjonsnummer': 'Hva er organisasjonsnummeret?',\n        'sifForms.virksomhet.startdato': `Når startet du {navnPåVirksomheten}?`,\n        'sifForms.virksomhet.kalender_fom': 'Startdato',\n        'sifForms.virksomhet.kalender_tom': 'Eventuell sluttdato',\n        'sifForms.virksomhet.kalender_pågående': 'Er pågående',\n        'sifForms.virksomhet.nyoppstartet.næringsinntektFlere.header': 'Næringsresultat for alle virksomhetene dine',\n        'sifForms.virksomhet.nyoppstartet.næringsinntektFlere.info':\n            'Du har opplyst at du har flere næringsvirksomheter. Her skal du legge inn næringsresultatet totalt for alle virksomhetene du har.',\n        'sifForms.virksomhet.næringsinntektFlere.header': 'Næringsvirksomhetene dine',\n        'sifForms.virksomhet.næringsinntektFlere.info':\n            'Du har opplyst at du har flere næringsvirksomheter som selvstendig næringsdrivende. Nå skal du svare på spørsmål som gjelder alle virksomhetene dine.',\n        'sifForms.virksomhet.næringsinntekt':\n            'Hva har du hatt totalt i næringsresultat før skatt de siste 12 månedene?',\n        'sifForms.virksomhet.næringsinntekt.info':\n            'Hvis virksomhetene har vart i kortere tid enn 12 måneder, kan du bruke denne perioden og regne om til årsinntekt. Oppgi beløpet i hele kroner.',\n        'sifForms.virksomhet.næringsinntekt_info':\n            'Næringsresultatet er inntekter du har i næringen din, minus utgifter og avskrivninger.',\n        'sifForms.virksomhet.næringsinntekt_info_title': 'Hva er næringsresultatet?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv':\n            'Har du begynt i arbeidslivet i løpet av de 3 siste ferdigliknede årene?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_info_title': 'Hva betyr dette?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_info':\n            'Du skal svare ja på spørsmålet hvis du før oppstart av næringsvirksomheten din hadde lav eller ingen inntekt.',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_dato': 'Oppgi dato for når du begynte i arbeidslivet',\n        'sifForms.virksomhet.varig_endring_spm':\n            'Har du hatt en varig endring i noen av arbeidsforholdene, virksomhetene eller arbeidssituasjonen din de siste fire årene?',\n        'sifForms.virksomhet.varig_endring_dato': 'Oppgi dato for endringen',\n        'sifForms.virksomhet.varig_endring_inntekt':\n            'Oppgi næringsinntekten din etter endringen. Oppgi årsinntekten i hele kroner.',\n        'sifForms.virksomhet.varig_endring_tekst':\n            'Her kan du skrive kort hva som har endret seg i arbeidsforholdene, virksomhetene eller arbeidssituasjonen din',\n        'sifForms.virksomhet.regnskapsfører_spm': 'Har du regnskapsfører?',\n        'sifForms.virksomhet.regnskapsfører_navn': 'Oppgi navnet til regnskapsfører',\n        'sifForms.virksomhet.regnskapsfører_telefon': 'Oppgi telefonnummeret til regnskapsfører',\n        'sifForms.virksomhet.veileder_innhenter_info.1':\n            'Vi henter inn opplysninger om virksomheten og inntekten din fra offentlige registre.',\n        'sifForms.virksomhet.veileder_innhenter_info.2': 'Vi tar kontakt med deg hvis vi trenger flere opplysninger.',\n\n        'sifForms.virksomhet.summary.tittel': 'Næringsvirksomhet som du har lagt inn:',\n        'sifForms.virksomhet.summary.navn': 'Navn',\n        'sifForms.virksomhet.summary.næringstype': 'Næringstype',\n        'sifForms.virksomhet.summary.varigEndring.dato': 'Dato for varig endring',\n        'sifForms.virksomhet.summary.varigEndring.næringsinntekt': 'Næringsinntekt etter endring',\n        'sifForms.virksomhet.summary.varigEndring.beskrivelse': 'Beskrivelse av endring',\n        'sifForms.virksomhet.summary.ikkeRegnskapsfører': 'Har ikke regnskapsfører.',\n        'sifForms.virksomhet.summary.tidsinfo.avsluttet': 'Startet {fraOgMed}, avsluttet {tilOgMed}.',\n        'sifForms.virksomhet.summary.tidsinfo.pågående': 'Startet {fraOgMed} (pågående).',\n        'sifForms.virksomhet.summary.fisker.påBladB': 'på Blad B',\n        'sifForms.virksomhet.summary.fisker.ikkePåBladB': 'ikke på Blad B',\n        'sifForms.virksomhet.summary.registrertILand': 'Registrert i {land}',\n        'sifForms.virksomhet.summary.registrertILand.orgnr': ' (organisasjonsnummer {orgnr})',\n        'sifForms.virksomhet.summary.yrkesaktiv.jaStartetDato': 'Ja, ble yrkesaktiv {dato}',\n        'sifForms.virksomhet.summary.næringsinntekst': 'Næringsinntekt:',\n        'sifForms.virksomhet.summary.regnskapsfører.header': 'Regnskapsfører',\n        'sifForms.virksomhet.summary.regnskapsfører.info': 'Ja, {navn}, telefon {telefon}',\n    },\n    nn: {\n        'sifForms.virksomhet.næringstype_FISKE': 'Fisker',\n        'sifForms.virksomhet.næringstype_JORDBRUK_SKOGBRUK': 'Jordbrukar',\n        'sifForms.virksomhet.næringstype_DAGMAMMA': 'Dagmamma eller familiebarnehage i eigen heim',\n        'sifForms.virksomhet.næringstype_ANNEN': 'Anna',\n        'sifForms.virksomhet.form_title': 'Opplysningar om verksemda di',\n        'sifForms.virksomhet.form_title.flere': 'Opplysningar om den eldste verksemda di',\n        'sifForms.virksomhet.hvilken_type_virksomhet': 'Kva type verksemd har du?',\n        'sifForms.virksomhet.hvilken_type_virksomhet.flere': 'Kva type er den eldste verksemda di?',\n        'sifForms.virksomhet.hva_heter_virksomheten': 'Kva heiter verksemda?',\n        'sifForms.virksomhet.fisker_blad_b': 'Er du fiskar på blad B?',\n        'sifForms.virksomhet.veileder_fisker.tittel': `Dersom du ikkje har organiasjonsnummer`,\n        'sifForms.virksomhet.veileder_fisker': `Dersom du ikkje har organisasjonsnummer, svarer du nei på spørsmålet \"Er {navnPåVirksomheten} registrert i Noreg?\". I nedtrekkslista vel du at verksemda er registrert i Noreg.`,\n        'sifForms.virksomhet.registert_i_norge': `Er {navnPåVirksomheten} registert i Noreg?`,\n        'sifForms.virksomhet.registert_i_hvilket_land': `I kva land er {navnPåVirksomheten} registrert?`,\n        'sifForms.virksomhet.organisasjonsnummer': 'Kva er organisasjonsnummeret?',\n        'sifForms.virksomhet.startdato': `Når starta du {navnPåVirksomheten}?`,\n        'sifForms.virksomhet.kalender_fom': 'Startdato',\n        'sifForms.virksomhet.kalender_tom': 'Eventuell sluttdato',\n        'sifForms.virksomhet.kalender_pågående': 'Er i gang',\n        'sifForms.virksomhet.nyoppstartet.næringsinntektFlere.header': 'Næringsresultat for alle verksemdene dine',\n        'sifForms.virksomhet.nyoppstartet.næringsinntektFlere.info':\n            'Du har opplyst at du har fleire næringsverksemder. Her skal du leggje inn næringsresultatet totalt for alle verksemdene du har.',\n        'sifForms.virksomhet.næringsinntektFlere.header': 'Næringsverksemdene dine',\n        'sifForms.virksomhet.næringsinntektFlere.info':\n            'Du har opplyst at du har fleire næringsverksemder som sjølvstendig næringsdrivande. Nå skal du svare på spørsmål som gjeld alle verksemdene dine.',\n        'sifForms.virksomhet.næringsinntekt':\n            'Kva har du hatt i næringsresultat før skatt dei siste 12 månadene? Dersom verksemda har vart i kortare tid, kan du bruke denne perioden og rekne om til årsinntekt. Gi opp beløpet i heile kroner.',\n        'sifForms.virksomhet.næringsinntekt.info':\n            'Dresom verksemdene har vart i kortare tid enn 12 månader, kan du bruke denne perioden og rekne om til årsinntekt. Gi opp beløpet i heile kroner.',\n        'sifForms.virksomhet.næringsinntekt_info':\n            'Næringsresultatet er inntekter du har i næringa di, minus utgifter og avskrivingar.',\n        'sifForms.virksomhet.næringsinntekt_info_title': 'Kva er næringsresultatet?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv':\n            'Har du begynt i arbeidslivet i løpet av dei 3 siste ferdiglikna åra?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_info_title': 'Kva betyr dette?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_info':\n            'Du skal svare ja på spørsmålet dersom du før oppstart av næringsverksemda di hadde låg eller inga inntekt.',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_dato': 'Gi opp datoen for når du begynte i arbeidslivet',\n        'sifForms.virksomhet.varig_endring_spm':\n            'Har du hatt ei varig endring i nokre av arbeidsforholda, verksemdene eller arbeidssituasjonen din dei siste fire åra?',\n        'sifForms.virksomhet.varig_endring_dato': 'Gi opp datoen for endringa',\n        'sifForms.virksomhet.varig_endring_inntekt':\n            'Gi opp næringsinntekta di etter endringa. Gi opp årsinntekta i heile kroner.',\n        'sifForms.virksomhet.varig_endring_tekst':\n            'Her kan du skrive kort kva som har endra seg i arbeidsforholda, verksemdene eller arbeidssituasjonen din',\n        'sifForms.virksomhet.regnskapsfører_spm': 'Har du rekneskapsførar?',\n        'sifForms.virksomhet.regnskapsfører_navn': 'Gi opp namnet til rekneskapsføraren',\n        'sifForms.virksomhet.regnskapsfører_telefon': 'Gi opp telefonnummeret til rekneskapsføraren',\n        'sifForms.virksomhet.veileder_innhenter_info.1':\n            'Vi hentar inn opplysningar om verksemda og inntekta di frå offentlege register.',\n        'sifForms.virksomhet.veileder_innhenter_info.2': 'Vi tek kontakt med deg dersom vi treng fleire opplysningar',\n\n        'sifForms.virksomhet.summary.tittel': 'Næringsvirksomhet som du har lagt inn:',\n        'sifForms.virksomhet.summary.navn': 'Namn',\n        'sifForms.virksomhet.summary.næringstype': 'Næringstype',\n        'sifForms.virksomhet.summary.varigEndring.dato': 'Dato for varig endring',\n        'sifForms.virksomhet.summary.varigEndring.næringsinntekt': 'Næringsinntekt etter endring',\n        'sifForms.virksomhet.summary.varigEndring.beskrivelse': 'Skildring av endring',\n        'sifForms.virksomhet.summary.ikkeRegnskapsfører': 'Har ikkje regnskapsførar.',\n        'sifForms.virksomhet.summary.tidsinfo.avsluttet': 'Startet {fraOgMed}, avsluttet {tilOgMed}.',\n        'sifForms.virksomhet.summary.tidsinfo.pågående': 'Startet {fraOgMed} (pågåande).',\n        'sifForms.virksomhet.summary.fisker.påBladB': 'på Blad B',\n        'sifForms.virksomhet.summary.fisker.ikkePåBladB': 'ikkje på Blad B',\n        'sifForms.virksomhet.summary.registrertILand': 'Registrert i {land}',\n        'sifForms.virksomhet.summary.registrertILand.orgnr': ' (organisasjonsnummer {orgnr})',\n        'sifForms.virksomhet.summary.næringsinntekst': 'Næringsinntekt:',\n        'sifForms.virksomhet.summary.yrkesaktiv.jaStartetDato': 'Ja, vart yrkesaktiv {dato}',\n        'sifForms.virksomhet.summary.regnskapsfører.header': 'Regnskapsførar',\n        'sifForms.virksomhet.summary.regnskapsfører.info': 'Ja, {navn}, telefon {telefon}',\n    },\n};\nexport default virksomhetMessages;\n","const tidsperiodeMessages = {\n    nb: {\n        'tidsperiode.form.title': 'Tidsperiode',\n        'tidsperiode.form.fromDate': 'Fra og med',\n        'tidsperiode.form.toDate': 'Til og med',\n        'tidsperiode.form.okButton': 'Ok',\n        'tidsperiode.form.cancelButton': 'Avbryt',\n        'tidsperiode.form.validation.required': 'Feltet er påkrevd',\n        'tidsperiode.form.validation.dateOutsideRange': 'Første gyldige dato er {fom}, og siste gyldige dato er {tom}',\n        'tidsperiode.form.validation.fromDateAfterToDate': 'Fra-dato må være lik eller før til-dato',\n        'tidsperiode.form.validation.toDateBeforeFromDate': 'Til-dato må være lik eller etter fra-dato',\n    },\n    nn: {\n        'tidsperiode.form.title': 'Tidsperiode',\n        'tidsperiode.form.fromDate': 'Frå og med',\n        'tidsperiode.form.toDate': 'Til og med',\n        'tidsperiode.form.okButton': 'Ok',\n        'tidsperiode.form.cancelButton': 'Avbryt',\n        'tidsperiode.form.validation.required': 'Feltet er påkrevd',\n        'tidsperiode.form.validation.dateOutsideRange': 'Første gyldige dato er {fom}, og siste gyldige dato er {tom}',\n        'tidsperiode.form.validation.fromDateAfterToDate': 'Frå-datoen må vere lik eller før til-datoen',\n        'tidsperiode.form.validation.toDateBeforeFromDate': 'Til-datoen må vere lik eller etter frå-dato',\n    },\n};\n\nexport default tidsperiodeMessages;\n","const annetBarnMessages = {\n    nb: {\n        'annetBarn.form.title': 'Legg til barn',\n        'annetBarn.form.fnr': 'Barnets fødselsnummer/D-nummer',\n        'annetBarn.form.fødselsdato': 'Barnets fødselsdato',\n        'annetBarn.form.navn': 'Barnets navn',\n        'annetBarn.form.okButton': 'Ok',\n        'annetBarn.form.cancelButton': 'Avbryt',\n        'annetBarn.form.validation.required': 'Feltet er påkrevd',\n        'annetBarn.list.født': 'Født',\n        'annetBarn.validation.navn.noValue': 'Du må skrive inn navn på barnet',\n    },\n    nn: {\n        'annetBarn.form.title': 'Legg til barn',\n        'annetBarn.form.fnr': 'Fødselsnummeret/D-nummeret til barnet',\n        'annetBarn.form.fødselsdato': 'Fødselsdatoen til barnet',\n        'annetBarn.form.navn': 'Namnet til barnet',\n        'annetBarn.form.okButton': 'Ok',\n        'annetBarn.form.cancelButton': 'Avbryt',\n        'annetBarn.form.validation.required': 'Feltet er påkravd',\n        'annetBarn.list.født': 'Født',\n    },\n};\n\nexport default annetBarnMessages;\n","import bostedUtlandMessages from '../../../forms/bosted-utland/bostedUtlandMessages';\nimport ferieuttakMessages from '../../../forms/ferieuttak/ferieuttakMessages';\nimport fraværMessages from '../../../forms/fravær/fraværMessages';\nimport utenlandsoppholdMessages from '../../../forms/utenlandsopphold/utenlandsoppholdMessages';\nimport fosterbarnMessages from '../../../forms/fosterbarn/fosterbarnMessages';\nimport virksomhetMessages from '../../../forms/virksomhet/virksomhetMessages';\nimport tidsperiodeMessages from '../../../forms/tidsperiode/tidsperiodeMessages';\nimport annetBarnMessages from '../../../forms/annet-barn/annetBarnMessages';\n\nconst commonNb = require('@navikt/sif-common-core/lib/i18n/common.nb.json');\nconst commonNn = require('@navikt/sif-common-core/lib/i18n/common.nn.json');\nconst validationNb = require('@navikt/sif-common-core/lib/i18n/validationErrors.nb.json');\nconst validationNn = require('@navikt/sif-common-core/lib/i18n/validationErrors.nn.json');\n\nconst bokmålstekster = {\n    ...commonNb,\n    ...validationNb,\n    ...bostedUtlandMessages.nb,\n    ...fraværMessages.nb,\n    ...ferieuttakMessages.nb,\n    ...fosterbarnMessages.nb,\n    ...utenlandsoppholdMessages.nb,\n    ...tidsperiodeMessages.nb,\n    ...virksomhetMessages.nb,\n    ...annetBarnMessages.nb,\n    'common.fieldvalidation.ugyldigTall': 'Ugyldig tall',\n};\n\nconst nynorsktekster = {\n    ...commonNn,\n    ...validationNn,\n    ...bostedUtlandMessages.nn,\n    ...fraværMessages.nn,\n    ...ferieuttakMessages.nn,\n    ...fosterbarnMessages.nn,\n    ...utenlandsoppholdMessages.nn,\n    ...tidsperiodeMessages.nn,\n    ...virksomhetMessages.nn,\n    ...annetBarnMessages.nn,\n    'common.fieldvalidation.ugyldigTall': 'Ugyldig tall',\n};\n\nexport const appMessages = {\n    nb: bokmålstekster,\n    nn: nynorsktekster,\n};\n","import * as React from 'react';\nimport { IntlProvider } from 'react-intl';\nimport '@formatjs/intl-pluralrules//locale-data/en';\nimport '@formatjs/intl-pluralrules//locale-data/nb';\nimport '@formatjs/intl-pluralrules//locale-data/nn';\nimport '@formatjs/intl-pluralrules/polyfill';\nimport { Locale } from '@navikt/sif-common-core/lib/types/Locale';\nimport { appMessages } from './messages';\nimport dayjs from 'dayjs';\nrequire('dayjs/locale/nb');\nrequire('dayjs/locale/nn');\n\nexport interface IntlProviderProps {\n    locale: Locale;\n    children: React.ReactNode;\n    onError?: (error: any) => void;\n}\n\nconst AppIntlProvider = ({ locale, onError, children }: IntlProviderProps) => {\n    const messages = locale === 'nb' ? appMessages.nb : appMessages.nn;\n    dayjs.locale(locale === 'nb' ? 'nb' : 'nn');\n    return (\n        <IntlProvider locale={locale} messages={messages} onError={onError}>\n            {children}\n        </IntlProvider>\n    );\n};\n\nexport default AppIntlProvider;\n","import React from 'react';\n\nfunction NAVLogo(props) {\n    return (\n        <svg className=\"prefix__navLogo\" width={90} viewBox=\"0 0 269 169\" {...props}>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <path\n                    fill=\"#C30000\"\n                    d=\"M125.31 168.942c-46.642 0-84.46-37.817-84.46-84.465C40.85 37.824 78.667 0 125.31 0c46.657 0 84.48 37.824 84.48 84.477 0 46.648-37.823 84.465-84.48 84.465zM0 121.359l17.265-42.73h16.589l-17.243 42.73zm213.044 0l17.044-42.73h9.044l-17.043 42.73zM246.564 121.359l17.04-42.73h4.803l-17.043 42.731z\"\n                />\n                <path\n                    fill=\"#FEFEFE\"\n                    d=\"M197.36 78.63h-15.016s-1.035 0-1.4.914l-8.31 25.439-8.304-25.44c-.366-.913-1.407-.913-1.407-.913h-28.872c-.625 0-1.149.522-1.149 1.143v8.639c0-6.853-7.292-9.782-11.562-9.782-9.562 0-15.963 6.298-17.956 15.873-.108-6.352-.636-8.628-2.347-10.96-.786-1.141-1.922-2.101-3.159-2.895-2.547-1.492-4.834-2.018-9.749-2.018h-5.77s-1.044 0-1.412.914l-5.25 13.013V79.773c0-.621-.52-1.143-1.145-1.143H61.198s-1.03 0-1.406.914l-5.459 13.53s-.545 1.354.701 1.354h5.133v25.784c0 .64.504 1.147 1.147 1.147h13.238c.624 0 1.144-.507 1.144-1.147V94.428h5.16c2.961 0 3.588.08 4.74.618.694.262 1.32.792 1.66 1.403.698 1.314.873 2.892.873 7.545v16.218c0 .64.514 1.147 1.15 1.147h12.687s1.434 0 2.001-1.416l2.812-6.95c3.74 5.237 9.893 8.366 17.541 8.366h1.671s1.443 0 2.014-1.416l4.897-12.128v12.397c0 .64.524 1.147 1.15 1.147h12.951s1.43 0 2.003-1.416c0 0 5.18-12.861 5.2-12.958h.008c.2-1.07-1.153-1.07-1.153-1.07h-4.623V83.847l14.545 36.096c.568 1.416 2 1.416 2 1.416h15.301s1.44 0 2.008-1.416l16.125-39.93c.558-1.383-1.057-1.383-1.057-1.383zm-64.458 27.285h-8.7c-3.463 0-6.28-2.804-6.28-6.271 0-3.461 2.817-6.283 6.28-6.283h2.433c3.454 0 6.267 2.822 6.267 6.283v6.27z\"\n                />\n            </g>\n        </svg>\n    );\n}\n\nexport default NAVLogo;\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { getTypedFormComponents, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport {\n    getFieldErrorRenderer,\n    getSummaryFieldErrorRenderer,\n} from '@navikt/sif-common-formik/lib/utils/formikErrorRenderUtils';\nimport {\n    getDateRangeValidator,\n    getRequiredFieldValidator,\n    ValidateDateError,\n    ValidateDateInRangeError,\n    ValidateRequiredFieldError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { mapFomTomToDateRange } from '../utils';\nimport bostedUtlandUtils from './bostedUtlandUtils';\nimport { BostedUtland, BostedUtlandFormValues } from './types';\n\nexport interface BostedUtlandFormLabels {\n    tittel: string;\n}\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    bosted?: BostedUtland;\n    alleBosteder?: BostedUtland[];\n    onSubmit: (values: BostedUtland) => void;\n    onCancel: () => void;\n}\n\nenum BostedUtlandFormFields {\n    fom = 'fom',\n    tom = 'tom',\n    landkode = 'landkode',\n}\n\ninterface DateLimits {\n    minDate: Date;\n    maxDate: Date;\n}\n\nexport const BostedUtlandFormErrorKeys = {\n    fields: {\n        [BostedUtlandFormFields.fom]: [\n            ...Object.keys(ValidateDateError),\n            ValidateDateInRangeError.fromDateIsAfterToDate,\n        ],\n        [BostedUtlandFormFields.tom]: [\n            ...Object.keys(ValidateDateError),\n            ValidateDateInRangeError.toDateIsBeforeFromDate,\n        ],\n        [BostedUtlandFormFields.landkode]: Object.keys(ValidateRequiredFieldError),\n    },\n};\n\nexport const BostedUtlandFormName = 'BostedUtlandFormName';\n\nconst Form = getTypedFormComponents<BostedUtlandFormFields, BostedUtlandFormValues>();\n\nconst BostedUtlandForm = ({ maxDate, minDate, bosted, alleBosteder = [], onSubmit, onCancel }: Props) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: BostedUtlandFormValues) => {\n        const bostedToSubmit = bostedUtlandUtils.mapFormValuesToBostedUtland(formValues, bosted?.id);\n        if (bostedUtlandUtils.isValidBostedUtland(bostedToSubmit)) {\n            onSubmit(bostedToSubmit);\n        } else {\n            throw new Error('BostedUtlandForm: Formvalues is not a valid BostedUtland on submit.');\n        }\n    };\n\n    return (\n        <Form.FormikWrapper\n            initialValues={bostedUtlandUtils.mapBostedUtlandToFormValues(bosted || {})}\n            onSubmit={onFormikSubmit}\n            renderForm={(formik) => {\n                const { values } = formik;\n                const fomDateLimits: DateLimits = {\n                    minDate,\n                    maxDate: ISOStringToDate(values.tom) || maxDate,\n                };\n                const tomDateLimits: DateLimits = {\n                    minDate: ISOStringToDate(values.fom) || minDate,\n                    maxDate: maxDate,\n                };\n\n                const andreBosteder =\n                    bosted === undefined\n                        ? alleBosteder.map(mapFomTomToDateRange)\n                        : alleBosteder.filter((b) => b.id !== bosted.id).map(mapFomTomToDateRange);\n\n                return (\n                    <Form.Form\n                        onCancel={onCancel}\n                        fieldErrorRenderer={getFieldErrorRenderer(intl, BostedUtlandFormName)}\n                        summaryFieldErrorRenderer={getSummaryFieldErrorRenderer(intl, BostedUtlandFormName)}>\n                        <Systemtittel tag=\"h1\">\n                            <FormattedMessage id=\"bostedUtland.form.tittel\" />\n                        </Systemtittel>\n\n                        <FormBlock>\n                            <Form.DateRangePicker\n                                legend={intlHelper(intl, 'bostedUtland.form.tidsperiode.spm')}\n                                fullscreenOverlay={true}\n                                minDate={minDate}\n                                maxDate={maxDate}\n                                allowRangesToStartAndStopOnSameDate={false}\n                                disabledDateRanges={andreBosteder}\n                                fromInputProps={{\n                                    name: BostedUtlandFormFields.fom,\n                                    label: intlHelper(intl, 'bostedUtland.form.tidsperiode.fraDato'),\n                                    validate: getDateRangeValidator.validateFromDate({\n                                        required: true,\n                                        min: fomDateLimits.minDate,\n                                        max: fomDateLimits.maxDate,\n                                        toDate: ISOStringToDate(values.tom),\n                                    }),\n                                }}\n                                toInputProps={{\n                                    name: BostedUtlandFormFields.tom,\n                                    label: intlHelper(intl, 'bostedUtland.form.tidsperiode.tilDato'),\n                                    validate: getDateRangeValidator.validateToDate({\n                                        required: true,\n                                        min: tomDateLimits.minDate,\n                                        max: tomDateLimits.maxDate,\n                                        fromDate: ISOStringToDate(values.fom),\n                                    }),\n                                }}\n                            />\n                        </FormBlock>\n                        <FormBlock>\n                            <Form.CountrySelect\n                                name={BostedUtlandFormFields.landkode}\n                                label={intlHelper(intl, 'bostedUtland.form.land.spm')}\n                                validate={getRequiredFieldValidator()}\n                            />\n                        </FormBlock>\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default BostedUtlandForm;\n","import React from 'react';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { Ingress, Undertittel } from 'nav-frontend-typografi';\n\ninterface Props {\n    title: string;\n    children: React.ReactNode;\n}\n\nconst PageIntro = ({ title, children }: Props) => (\n    <>\n        <Box padBottom=\"xl\" margin=\"m\">\n            <Box padBottom={children ? 'm' : 'none'}>\n                <Undertittel>{title}</Undertittel>\n            </Box>\n            {children && <Ingress tag=\"div\">{children}</Ingress>}\n        </Box>\n    </>\n);\n\nexport default PageIntro;\n","import { DateTidsperiode } from '../tidsperiode';\nimport { DateRange } from '@navikt/sif-common-core/lib/utils/dateUtils';\n\nexport const mapFomTomToDateRange = ({ fom, tom }: DateTidsperiode): DateRange => ({\n    from: fom,\n    to: tom,\n});\n","import { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { guid } from 'nav-frontend-js-utils';\nimport { BostedUtland, BostedUtlandFormValues } from './types';\n\nconst isValidBostedUtland = (bosted: Partial<BostedUtland>): bosted is BostedUtland => {\n    const { fom, landkode, tom } = bosted;\n    return fom !== undefined && landkode !== undefined && tom !== undefined;\n};\n\nconst mapFormValuesToBostedUtland = (\n    formValues: BostedUtlandFormValues,\n    id: string | undefined\n): Partial<BostedUtland> => {\n    return {\n        id: id || guid(),\n        fom: ISOStringToDate(formValues.fom),\n        tom: ISOStringToDate(formValues.tom),\n        landkode: formValues.landkode,\n    };\n};\n\nconst mapBostedUtlandToFormValues = ({ fom, tom, landkode }: Partial<BostedUtland>): BostedUtlandFormValues => {\n    return {\n        fom: dateToISOString(fom),\n        tom: dateToISOString(tom),\n        landkode,\n    };\n};\n\nconst bostedUtlandUtils = {\n    isValidBostedUtland,\n    mapBostedUtlandToFormValues,\n    mapFormValuesToBostedUtland,\n};\n\nexport default bostedUtlandUtils;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { getCountryName } from '@navikt/sif-common-formik';\nimport { BostedUtland } from './types';\nimport './bostedUtlandList.less';\n\ninterface Props {\n    bosteder: BostedUtland[];\n    onEdit?: (opphold: BostedUtland) => void;\n    onDelete?: (opphold: BostedUtland) => void;\n}\n\nconst bem = bemUtils('bostedUtlandList');\n\nconst BostedUtlandList = ({ bosteder, onDelete, onEdit }: Props) => {\n    const intl = useIntl();\n    const renderBostedUtlandLabel = (opphold: BostedUtland): React.ReactNode => {\n        const navn = getCountryName(opphold.landkode, intl.locale);\n        return (\n            <div className={bem.element('label')}>\n                <span className={bem.element('land')}>\n                    {onEdit && <ActionLink onClick={() => onEdit(opphold)}>{navn}</ActionLink>}\n                    {!onEdit && <span>{navn}</span>}\n                </span>\n                <span className={bem.element('dato')}>\n                    {prettifyDateExtended(opphold.fom)} - {prettifyDateExtended(opphold.tom)}\n                </span>\n            </div>\n        );\n    };\n\n    return (\n        <ItemList<BostedUtland>\n            getItemId={(opphold) => opphold.id}\n            getItemTitle={(opphold) => getCountryName(opphold.landkode, intl.locale)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderBostedUtlandLabel}\n            items={bosteder}\n        />\n    );\n};\n\nexport default BostedUtlandList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList,\n    ModalFormAndListLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport BostedUtlandForm from './BostedUtlandForm';\nimport BostedUtlandListe from './BostedUtlandList';\nimport { BostedUtland } from './types';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps {\n    name: FieldNames;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction BostedUtlandListAndDialog<FieldNames>({ name, minDate, maxDate, validate, labels }: Props<FieldNames>) {\n    return (\n        <FormikModalFormAndList<FieldNames, BostedUtland>\n            name={name}\n            labels={labels}\n            validate={validate}\n            dialogWidth=\"narrow\"\n            sortFunc={sortItemsByFom}\n            formRenderer={({ onSubmit, onCancel, item, allItems }) => (\n                <BostedUtlandForm\n                    bosted={item}\n                    alleBosteder={allItems}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    onSubmit={onSubmit}\n                    onCancel={onCancel}\n                />\n            )}\n            listRenderer={({ items, onEdit, onDelete }) => (\n                <BostedUtlandListe bosteder={items} onEdit={onEdit} onDelete={onDelete} />\n            )}\n        />\n    );\n}\n\nexport default BostedUtlandListAndDialog;\n","import React from 'react';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport Panel from 'nav-frontend-paneler';\n\ninterface Props {\n    values?: any;\n}\n\nfunction SubmitPreview({ values }: Props) {\n    return (\n        <Box margin=\"xl\">\n            <div style={{ borderTop: '1px dashed #59514B', paddingTop: '1rem', margin: '0 -1rem' }}>\n                <Box margin=\"m\">\n                    {values && (\n                        <Panel style={{ padding: '1rem' }}>\n                            <pre style={{ margin: 0, fontSize: '.8rem' }}>{JSON.stringify(values, null, 2)}</pre>\n                        </Panel>\n                    )}\n                    {values === undefined && <Panel style={{ padding: '1rem' }}>Ingen data</Panel>}\n                </Box>\n            </div>\n        </Box>\n    );\n}\n\nexport default SubmitPreview;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { date1YearAgo, date1YearFromNow } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport {\n    getFieldErrorRenderer,\n    getSummaryFieldErrorRenderer,\n} from '@navikt/sif-common-formik/lib/utils/formikErrorRenderUtils';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport BostedUtlandForm, {\n    BostedUtlandFormErrorKeys,\n    BostedUtlandFormName,\n} from '../../../forms/bosted-utland/BostedUtlandForm';\nimport BostedUtlandListAndDialog from '../../../forms/bosted-utland/BostedUtlandListAndDialog';\nimport bostedUtlandMessages from '../../../forms/bosted-utland/bostedUtlandMessages';\nimport { BostedUtland } from '../../../forms/bosted-utland/types';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\n\nenum FormField {\n    'bosted' = 'bosted',\n}\n\ninterface FormValues {\n    [FormField.bosted]: BostedUtland[];\n}\nconst initialValues: FormValues = { bosted: [] };\n\nconst FormikExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<BostedUtland> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={getFieldErrorRenderer(intl, 'bostedUtlandForm')}\n                                summaryFieldErrorRenderer={getSummaryFieldErrorRenderer(intl, 'bostedUtlandForm')}>\n                                <BostedUtlandListAndDialog<FormField>\n                                    name={FormField.bosted}\n                                    minDate={date1YearAgo}\n                                    maxDate={date1YearFromNow}\n                                    validate={getListValidator({ required: true })}\n                                    labels={{\n                                        addLabel: 'Legg til bosted',\n                                        listTitle: 'Registrerte bosteder',\n                                        modalTitle: 'Bosted',\n                                        emptyListText: 'Ingen bosteder er lagt til',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrors={BostedUtlandFormErrorKeys}\n                    formName={BostedUtlandFormName}\n                    intlMessages={bostedUtlandMessages}\n                />\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <DialogFormWrapper>\n                    <Panel border={true}>\n                        <BostedUtlandForm\n                            minDate={date1YearAgo}\n                            maxDate={date1YearFromNow}\n                            onSubmit={setSingleFormValues}\n                            onCancel={() => console.log('cancel me')}\n                        />\n                    </Panel>\n                    <SubmitPreview values={singleFormValues} />\n                </DialogFormWrapper>\n            </Box>\n\n            <MessagesPreview title=\"Alle tekster\" messages={bostedUtlandMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default FormikExample;\n","import React from 'react';\nimport { MessageFileFormat } from '@navikt/sif-common-core/lib/dev-utils/intl/devIntlUtils';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { createFieldErrorIntlKey } from '@navikt/sif-common-formik/lib/utils/formikErrorRenderUtils';\n\nexport type ValidationErrorMessagesDocType = {\n    fields: { [key: string]: string[] };\n};\n\ninterface Props {\n    formName: string;\n    validationErrors: ValidationErrorMessagesDocType;\n    intlMessages: MessageFileFormat;\n}\n\nconst FormValidationErrorMessages: React.FunctionComponent<Props> = ({ validationErrors, formName, intlMessages }) => {\n    const validationeMessages: MessageFileFormat = {\n        nb: {},\n        nn: {},\n    };\n\n    const fields = validationErrors.fields;\n\n    Object.keys(fields).forEach((field) =>\n        Object.keys(fields[field]).forEach((errorKey) => {\n            const error = fields[field][errorKey];\n            const intlKey = createFieldErrorIntlKey(error, field, formName);\n            validationeMessages['nb'][intlKey] = intlMessages['nb'][intlKey];\n            validationeMessages['nn'][intlKey] = intlMessages['nn'][intlKey];\n        })\n    );\n\n    return (\n        <MessagesPreview\n            title=\"Feilmeldinger\"\n            messages={validationeMessages}\n            showExplanation={false}\n            showMissingTextSummary={false}\n        />\n    );\n};\n\nexport default FormValidationErrorMessages;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { DateRange } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { getTypedFormComponents, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport {\n    getFieldErrorRenderer,\n    getSummaryFieldErrorRenderer,\n} from '@navikt/sif-common-formik/lib/utils/formikErrorRenderUtils';\nimport {\n    getDateRangeValidator,\n    ValidateDateError,\n    ValidateDateInRangeError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { mapFomTomToDateRange } from '../utils';\nimport ferieuttakUtils from './ferieuttakUtils';\nimport { Ferieuttak, FerieuttakFormValues } from './types';\n\nexport interface FerieuttakFormLabels {\n    title: string;\n    fromDate: string;\n    toDate: string;\n    intervalTitle: string;\n    okButton: string;\n    cancelButton: string;\n}\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    ferieuttak?: Partial<Ferieuttak>;\n    alleFerieuttak?: Ferieuttak[];\n    labels?: Partial<FerieuttakFormLabels>;\n    onSubmit: (values: Ferieuttak) => void;\n    onCancel: () => void;\n}\n\nenum FerieuttakFormFields {\n    tom = 'tom',\n    fom = 'fom',\n}\n\nexport const FerieuttakFormErrorKeys = {\n    fields: {\n        [FerieuttakFormFields.fom]: [...Object.keys(ValidateDateError), ValidateDateInRangeError.fromDateIsAfterToDate],\n        [FerieuttakFormFields.tom]: [\n            ...Object.keys(ValidateDateError),\n            ValidateDateInRangeError.toDateIsBeforeFromDate,\n        ],\n    },\n};\n\nexport const FerieuttakFormName = 'ferieuttakForm';\n\nconst Form = getTypedFormComponents<FerieuttakFormFields, FerieuttakFormValues>();\n\nconst FerieuttakForm = ({ maxDate, minDate, labels, ferieuttak, alleFerieuttak = [], onSubmit, onCancel }: Props) => {\n    const intl = useIntl();\n    const onFormikSubmit = (formValues: FerieuttakFormValues) => {\n        const ferieuttakToSubmit = ferieuttakUtils.mapFormValuesToFerieuttak(formValues, ferieuttak?.id);\n        if (ferieuttakUtils.isValidFerieuttak(ferieuttakToSubmit)) {\n            onSubmit({ ...ferieuttak, ...ferieuttakToSubmit });\n        } else {\n            throw new Error('FerieuttakForm: Formvalues is not a valid Ferieuttak on submit.');\n        }\n    };\n\n    const defaultLabels: FerieuttakFormLabels = {\n        title: intlHelper(intl, 'ferieuttak.list.title'),\n        fromDate: intlHelper(intl, 'ferieuttak.list.fromDate'),\n        toDate: intlHelper(intl, 'ferieuttak.list.toDate'),\n        intervalTitle: intlHelper(intl, 'ferieuttak.list.intervalTitle'),\n        okButton: intlHelper(intl, 'ferieuttak.list.okButton'),\n        cancelButton: intlHelper(intl, 'ferieuttak.list.cancelButton'),\n    };\n\n    const formLabels: FerieuttakFormLabels = { ...defaultLabels, ...labels };\n\n    const andreFerieuttak: DateRange[] | undefined =\n        ferieuttak === undefined\n            ? alleFerieuttak.map(mapFomTomToDateRange)\n            : alleFerieuttak.filter((f) => f.id !== ferieuttak.id).map(mapFomTomToDateRange);\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={ferieuttakUtils.mapFerieuttakToFormValues(ferieuttak || {})}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => (\n                    <Form.Form\n                        onCancel={onCancel}\n                        fieldErrorRenderer={getFieldErrorRenderer(intl, FerieuttakFormName)}\n                        summaryFieldErrorRenderer={getSummaryFieldErrorRenderer(intl, FerieuttakFormName)}>\n                        <Systemtittel tag=\"h1\">{formLabels.title}</Systemtittel>\n                        <FormBlock>\n                            <Form.DateRangePicker\n                                legend={formLabels.intervalTitle}\n                                fullscreenOverlay={true}\n                                minDate={minDate}\n                                maxDate={maxDate}\n                                allowRangesToStartAndStopOnSameDate={true}\n                                disabledDateRanges={andreFerieuttak}\n                                fromInputProps={{\n                                    label: formLabels.fromDate,\n                                    name: FerieuttakFormFields.fom,\n                                    validate: getDateRangeValidator.validateFromDate({\n                                        required: true,\n                                        min: minDate,\n                                        max: maxDate,\n                                        toDate: ISOStringToDate(formik.values.tom),\n                                    }),\n                                    onChange: () => {\n                                        setTimeout(() => {\n                                            formik.validateField(FerieuttakFormFields.tom);\n                                        });\n                                    },\n                                }}\n                                toInputProps={{\n                                    label: formLabels.toDate,\n                                    name: FerieuttakFormFields.tom,\n\n                                    validate: getDateRangeValidator.validateToDate({\n                                        required: true,\n                                        min: minDate,\n                                        max: maxDate,\n                                        fromDate: ISOStringToDate(formik.values.fom),\n                                    }),\n                                    onChange: () => {\n                                        setTimeout(() => {\n                                            formik.validateField(FerieuttakFormFields.fom);\n                                        });\n                                    },\n                                }}\n                            />\n                        </FormBlock>\n                    </Form.Form>\n                )}\n            />\n        </>\n    );\n};\n\nexport default FerieuttakForm;\n","import { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Ferieuttak, FerieuttakFormValues } from './types';\n\nexport const isValidFerieuttak = (ferieuttak: Partial<Ferieuttak>): ferieuttak is Ferieuttak => {\n    return ferieuttak.fom !== undefined && ferieuttak.tom !== undefined;\n};\n\nconst mapFormValuesToFerieuttak = (formValues: FerieuttakFormValues, id: string | undefined): Partial<Ferieuttak> => {\n    return {\n        id: id || guid(),\n        fom: ISOStringToDate(formValues.fom),\n        tom: ISOStringToDate(formValues.tom),\n    };\n};\n\nconst mapFerieuttakToFormValues = ({ fom, tom }: Partial<Ferieuttak>): FerieuttakFormValues => {\n    return {\n        fom: dateToISOString(fom),\n        tom: dateToISOString(tom),\n    };\n};\n\nconst ferieuttakUtils = {\n    isValidFerieuttak,\n    mapFerieuttakToFormValues,\n    mapFormValuesToFerieuttak,\n};\n\nexport default ferieuttakUtils;\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { Ferieuttak } from './types';\n\ninterface Props {\n    ferieuttak: Ferieuttak[];\n    onEdit?: (opphold: Ferieuttak) => void;\n    onDelete?: (opphold: Ferieuttak) => void;\n}\n\nconst FerieuttakList = ({ ferieuttak = [], onDelete, onEdit }: Props) => {\n    const getDateTitleString = (uttak: Ferieuttak) =>\n        `${prettifyDateExtended(uttak.fom)} - ${prettifyDateExtended(uttak.tom)}`;\n\n    const renderFerieuttakLabel = (uttak: Ferieuttak): React.ReactNode => {\n        const title = getDateTitleString(uttak);\n        return (\n            <>\n                {onEdit && <ActionLink onClick={() => onEdit(uttak)}>{title}</ActionLink>}\n                {!onEdit && <span>{title}</span>}\n            </>\n        );\n    };\n\n    return (\n        <ItemList<Ferieuttak>\n            getItemId={(uttak) => uttak.id}\n            getItemTitle={(uttak) => getDateTitleString(uttak)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderFerieuttakLabel}\n            items={ferieuttak.filter((uttak) => uttak.id !== undefined)}\n        />\n    );\n};\n\nexport default FerieuttakList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList,\n    ModalFormAndListLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport FerieuttakForm from './FerieuttakForm';\nimport FerieuttakList from './FerieuttakList';\nimport { Ferieuttak } from './types';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps {\n    name: FieldNames;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction FerieuttakListAndDialog<FieldNames>({ name, minDate, maxDate, validate, labels }: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, Ferieuttak>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                sortFunc={sortItemsByFom}\n                formRenderer={({ onSubmit, onCancel, item, allItems }) => (\n                    <FerieuttakForm\n                        ferieuttak={item}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                        alleFerieuttak={allItems}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FerieuttakList ferieuttak={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FerieuttakListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { date1YearAgo, date1YearFromNow } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    getFieldErrorRenderer,\n    getSummaryFieldErrorRenderer,\n} from '@navikt/sif-common-formik/lib/utils/formikErrorRenderUtils';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport FerieuttakForm, { FerieuttakFormErrorKeys, FerieuttakFormName } from '../../../forms/ferieuttak/FerieuttakForm';\nimport FerieuttakListAndDialog from '../../../forms/ferieuttak/FerieuttakListAndDialog';\nimport ferieuttakMessages from '../../../forms/ferieuttak/ferieuttakMessages';\nimport { Ferieuttak } from '../../../forms/ferieuttak/types';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\n\nenum FormField {\n    'ferie' = 'ferie',\n}\n\ninterface FormValues {\n    [FormField.ferie]: Ferieuttak[];\n}\nconst initialValues: FormValues = { ferie: [] };\n\nconst FormikExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<Ferieuttak> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={getFieldErrorRenderer(intl, 'ferieuttakExample')}\n                                summaryFieldErrorRenderer={getSummaryFieldErrorRenderer(intl, 'ferieuttakExample')}>\n                                <FerieuttakListAndDialog<FormField>\n                                    name={FormField.ferie}\n                                    minDate={date1YearAgo}\n                                    maxDate={date1YearFromNow}\n                                    validate={getListValidator({ required: true })}\n                                    labels={{\n                                        addLabel: 'Legg til ferie',\n                                        listTitle: 'Registrerte ferier',\n                                        modalTitle: 'Ferie',\n                                        emptyListText: 'Ingen ferier er lagt til',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrors={FerieuttakFormErrorKeys}\n                    formName={FerieuttakFormName}\n                    intlMessages={ferieuttakMessages}\n                />\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <FerieuttakForm\n                        minDate={date1YearAgo}\n                        maxDate={date1YearFromNow}\n                        ferieuttak={{}}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                    />\n                </Panel>\n                <SubmitPreview values={singleFormValues} />\n            </DialogFormWrapper>\n\n            <MessagesPreview messages={ferieuttakMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default FormikExample;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport Tiles from '@navikt/sif-common-core/lib/components/tiles/Tiles';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport {\n    getFieldErrorRenderer,\n    getSummaryFieldErrorRenderer,\n} from '@navikt/sif-common-formik/lib/utils/formikErrorRenderUtils';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport {\n    getFødselsnummerValidator,\n    getRequiredFieldValidator,\n    ValidateFødselsnummerError,\n    ValidateRequiredFieldError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { Fosterbarn, isFosterbarn } from './types';\n\ninterface FosterbarnFormText {\n    form_fødselsnummer_label: string;\n    form_fornavn_label: string;\n    form_etternavn_label: string;\n}\n\ninterface Props {\n    fosterbarn?: Partial<Fosterbarn>;\n    onSubmit: (values: Fosterbarn) => void;\n    onCancel: () => void;\n    disallowedFødselsnumre?: string[];\n    includeName?: boolean;\n    text?: FosterbarnFormText;\n}\n\nenum FosterbarnFormField {\n    fødselsnummer = 'fødselsnummer',\n    fornavn = 'fornavn',\n    etternavn = 'etternavn',\n}\n\ntype FormValues = Partial<Fosterbarn>;\n\nexport const FosterbarnFormErrorKeys = {\n    fields: {\n        [FosterbarnFormField.fornavn]: [...Object.keys(ValidateRequiredFieldError)],\n        [FosterbarnFormField.etternavn]: [...Object.keys(ValidateRequiredFieldError)],\n        [FosterbarnFormField.fødselsnummer]: [\n            ...Object.keys(ValidateRequiredFieldError),\n            ...Object.keys(ValidateFødselsnummerError),\n        ],\n    },\n};\n\nexport const FosterbarnFormName = 'fosterbarnForm';\n\nconst Form = getTypedFormComponents<FosterbarnFormField, FormValues>();\n\nconst FosterbarnForm = ({\n    fosterbarn: initialValues = { fornavn: '', etternavn: '', fødselsnummer: '' },\n    disallowedFødselsnumre,\n    text,\n    includeName,\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n    const onFormikSubmit = (formValues: FormValues) => {\n        if (isFosterbarn(formValues, includeName)) {\n            onSubmit({ ...formValues, id: initialValues.id || guid() });\n        } else {\n            throw new Error('Fosterbarn skjema: Formvalues is not a valid Fosterbarn on submit.');\n        }\n    };\n\n    const defaultText: FosterbarnFormText = {\n        form_etternavn_label: intlHelper(intl, 'fosterbarn.form.etternavn_label'),\n        form_fornavn_label: intlHelper(intl, 'fosterbarn.form.fornavn_label'),\n        form_fødselsnummer_label: intlHelper(intl, 'fosterbarn.form.fødselsnummer_label'),\n    };\n\n    const txt = { ...defaultText, ...text };\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={initialValues}\n                onSubmit={onFormikSubmit}\n                renderForm={() => (\n                    <Form.Form\n                        onCancel={onCancel}\n                        fieldErrorRenderer={getFieldErrorRenderer(intl, FosterbarnFormName)}\n                        summaryFieldErrorRenderer={getSummaryFieldErrorRenderer(intl, FosterbarnFormName)}>\n                        <Systemtittel tag=\"h1\">Fosterbarn</Systemtittel>\n                        <FormBlock>\n                            <Form.Input\n                                name={FosterbarnFormField.fødselsnummer}\n                                label={txt.form_fødselsnummer_label}\n                                validate={getFødselsnummerValidator({\n                                    required: true,\n                                    disallowedValues: disallowedFødselsnumre,\n                                })}\n                                inputMode=\"numeric\"\n                                maxLength={11}\n                                style={{ width: '11rem' }}\n                            />\n                        </FormBlock>\n                        {includeName && (\n                            <Tiles columns={2}>\n                                <FormBlock>\n                                    <Form.Input\n                                        name={FosterbarnFormField.fornavn}\n                                        label={txt.form_fornavn_label}\n                                        validate={getRequiredFieldValidator()}\n                                    />\n                                </FormBlock>\n                                <FormBlock>\n                                    <Form.Input\n                                        name={FosterbarnFormField.etternavn}\n                                        label={txt.form_etternavn_label}\n                                        validate={getRequiredFieldValidator()}\n                                    />\n                                </FormBlock>\n                            </Tiles>\n                        )}\n                    </Form.Form>\n                )}\n            />\n        </>\n    );\n};\n\nexport default FosterbarnForm;\n","import { hasValue } from '@navikt/sif-common-formik/lib/validation/validationUtils';\n\nexport interface Fosterbarn {\n    id?: string;\n    fødselsnummer: string;\n    fornavn?: string;\n    etternavn?: string;\n}\n\nexport const isFosterbarn = (fosterbarn: Partial<Fosterbarn>, includeName?: boolean): fosterbarn is Fosterbarn => {\n    const { fornavn, etternavn, fødselsnummer } = fosterbarn;\n    if (includeName) {\n        return hasValue(fornavn) && hasValue(etternavn) && hasValue(fødselsnummer);\n    }\n    return hasValue(fødselsnummer);\n};\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { formatName } from '@navikt/sif-common-core/lib/utils/personUtils';\nimport { Fosterbarn } from './types';\n\ninterface Props {\n    fosterbarn: Fosterbarn[];\n    onEdit?: (opphold: Fosterbarn) => void;\n    onDelete?: (opphold: Fosterbarn) => void;\n}\n\nconst FosterbarnList = ({ fosterbarn = [], onDelete, onEdit }: Props) => {\n    const getBarnTitleString = (barn: Fosterbarn) => {\n        return (\n            <>\n                <span style={{ paddingRight: '1rem' }}>{barn.fødselsnummer}</span>{' '}\n                {barn.fornavn && barn.etternavn && <span>{formatName(barn.fornavn, barn.etternavn)}</span>}\n            </>\n        );\n    };\n    const renderFosterbarnLabel = (barn: Fosterbarn): React.ReactNode => {\n        return (\n            <>\n                {onEdit && <ActionLink onClick={() => onEdit(barn)}>{getBarnTitleString(barn)}</ActionLink>}\n                {!onEdit && <span>{getBarnTitleString(barn)}</span>}\n            </>\n        );\n    };\n\n    return (\n        <ItemList<Fosterbarn>\n            getItemId={(barn) => barn.id}\n            getItemTitle={(barn) =>\n                barn.fornavn && barn.etternavn ? formatName(barn.fornavn, barn.etternavn) : barn.fødselsnummer\n            }\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderFosterbarnLabel}\n            items={fosterbarn.filter((barn) => barn.id !== undefined)}\n        />\n    );\n};\n\nexport default FosterbarnList;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { FormikModalFormAndList, TypedFormInputValidationProps } from '@navikt/sif-common-formik';\nimport FosterbarnForm from './FosterbarnForm';\nimport FosterbarnList from './FosterbarnList';\nimport { Fosterbarn } from './types';\n\nexport interface FosterbarnListAndDialogText {\n    liste_legg_til_knapp: string;\n    liste_tittel?: string;\n    liste_tom_liste_tekst?: string;\n    modal_tittel: string;\n}\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps {\n    name: FieldNames;\n    texts?: FosterbarnListAndDialogText;\n    includeName?: boolean;\n    disallowedFødselsnumre?: string[];\n}\n\nfunction FosterbarnListAndDialog<FieldNames>({\n    name,\n    validate,\n    texts,\n    includeName,\n    disallowedFødselsnumre,\n}: Props<FieldNames>) {\n    const intl = useIntl();\n\n    const defaultText: FosterbarnListAndDialogText = {\n        liste_legg_til_knapp: intlHelper(intl, 'fosterbarn.list.legg_til_knapp'),\n        liste_tittel: intlHelper(intl, 'fosterbarn.list.tittel'),\n        modal_tittel: intlHelper(intl, 'fosterbarn.modal.tittel'),\n    };\n\n    const txt = { ...defaultText, ...texts };\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, Fosterbarn>\n                name={name}\n                labels={{\n                    addLabel: txt.liste_legg_til_knapp,\n                    modalTitle: txt.modal_tittel,\n                    emptyListText: txt.liste_tom_liste_tekst,\n                    listTitle: txt.liste_tittel,\n                }}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                formRenderer={({ onSubmit, onCancel, item }) => (\n                    <FosterbarnForm\n                        fosterbarn={item}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                        includeName={includeName}\n                        disallowedFødselsnumre={disallowedFødselsnumre}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FosterbarnList fosterbarn={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FosterbarnListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport {\n    getFieldErrorRenderer,\n    getSummaryFieldErrorRenderer,\n} from '@navikt/sif-common-formik/lib/utils/formikErrorRenderUtils';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { Fosterbarn } from '../../../forms/fosterbarn';\nimport FosterbarnForm, { FosterbarnFormErrorKeys, FosterbarnFormName } from '../../../forms/fosterbarn/FosterbarnForm';\nimport FosterbarnListAndDialog from '../../../forms/fosterbarn/FosterbarnListAndDialog';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport fosterbarnMessages from '../../../forms/fosterbarn/fosterbarnMessages';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\n\nenum FormField {\n    'fosterbarn' = 'fosterbarn',\n}\n\ninterface FormValues {\n    [FormField.fosterbarn]: Fosterbarn[];\n}\nconst initialValues: FormValues = { fosterbarn: [] };\n\nconst FosterbarnExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<Fosterbarn> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={getFieldErrorRenderer(intl, 'fosterbarnExample')}\n                                summaryFieldErrorRenderer={getSummaryFieldErrorRenderer(intl, 'fosterbarnExample')}>\n                                <FosterbarnListAndDialog<FormField>\n                                    name={FormField.fosterbarn}\n                                    validate={getListValidator({ required: true })}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrors={FosterbarnFormErrorKeys}\n                    formName={FosterbarnFormName}\n                    intlMessages={fosterbarnMessages}\n                />\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <FosterbarnForm\n                        fosterbarn={{}}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                    />\n                </Panel>\n                <SubmitPreview values={singleFormValues} />\n            </DialogFormWrapper>\n\n            <MessagesPreview messages={fosterbarnMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default FosterbarnExample;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport {\n    getFieldErrorRenderer,\n    getSummaryFieldErrorRenderer,\n} from '@navikt/sif-common-formik/lib/utils/formikErrorRenderUtils';\nimport { getTypedFormComponents, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport {\n    getDateRangeValidator,\n    ValidateDateError,\n    ValidateDateInRangeError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { mapFomTomToDateRange } from '../utils';\nimport tidsperiodeUtils from './tidsperiodeUtils';\nimport { DateTidsperiode, DateTidsperiodeFormValues } from './types';\n\nexport interface TidsperiodeFormLabels {\n    title?: string;\n    fromDate: string;\n    toDate: string;\n    intervalTitle?: string;\n    okButton: string;\n    cancelButton: string;\n}\n\ninterface Props {\n    minDate?: Date;\n    maxDate?: Date;\n    tidsperiode?: Partial<DateTidsperiode>;\n    alleTidsperioder?: DateTidsperiode[];\n    formLabels?: Partial<TidsperiodeFormLabels>;\n    onSubmit: (values: DateTidsperiode) => void;\n    onCancel: () => void;\n}\n\nenum TidsperiodeFormFields {\n    tom = 'tom',\n    fom = 'fom',\n}\n\nexport const TidsperiodeFormErrorKeys = {\n    fields: {\n        [TidsperiodeFormFields.fom]: [\n            ...Object.keys(ValidateDateError),\n            ValidateDateInRangeError.fromDateIsAfterToDate,\n        ],\n        [TidsperiodeFormFields.tom]: [\n            ...Object.keys(ValidateDateError),\n            ValidateDateInRangeError.toDateIsBeforeFromDate,\n        ],\n    },\n};\n\nexport const TidsperiodeFormName = 'tidsperiodeForm';\n\nconst Form = getTypedFormComponents<TidsperiodeFormFields, DateTidsperiodeFormValues>();\n\nconst TidsperiodeForm = ({\n    maxDate,\n    minDate,\n    formLabels,\n    tidsperiode,\n    alleTidsperioder = [],\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: DateTidsperiodeFormValues) => {\n        const dateTidsperiodeToSubmit = tidsperiodeUtils.mapFormValuesToDateTidsperiode(formValues, tidsperiode?.id);\n        if (tidsperiodeUtils.isValidDateTidsperiode(dateTidsperiodeToSubmit)) {\n            onSubmit(dateTidsperiodeToSubmit);\n        } else {\n            throw new Error('TidsperiodeForm: Formvalues is not a valid Tidsperiode on submit.');\n        }\n    };\n\n    const defaultLabels: TidsperiodeFormLabels = {\n        title: intlHelper(intl, 'tidsperiode.form.title'),\n        fromDate: intlHelper(intl, 'tidsperiode.form.fromDate'),\n        toDate: intlHelper(intl, 'tidsperiode.form.toDate'),\n        okButton: intlHelper(intl, 'tidsperiode.form.okButton'),\n        cancelButton: intlHelper(intl, 'tidsperiode.form.cancelButton'),\n    };\n\n    const inlineLabels: TidsperiodeFormLabels = { ...defaultLabels, ...formLabels };\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={tidsperiodeUtils.mapDateTidsperiodeToFormValues(tidsperiode || {})}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => {\n                    const disabledDateRanges =\n                        tidsperiode === undefined\n                            ? alleTidsperioder.map(mapFomTomToDateRange)\n                            : alleTidsperioder.filter((t) => t.id !== tidsperiode.id).map(mapFomTomToDateRange);\n\n                    return (\n                        <Form.Form\n                            onCancel={onCancel}\n                            fieldErrorRenderer={getFieldErrorRenderer(intl, TidsperiodeFormName)}\n                            summaryFieldErrorRenderer={getSummaryFieldErrorRenderer(intl, TidsperiodeFormName)}>\n                            <Systemtittel tag=\"h1\">{inlineLabels.title}</Systemtittel>\n                            <FormBlock>\n                                <Form.DateRangePicker\n                                    legend={inlineLabels.intervalTitle}\n                                    fullscreenOverlay={true}\n                                    minDate={minDate}\n                                    maxDate={maxDate}\n                                    disabledDateRanges={disabledDateRanges}\n                                    fromInputProps={{\n                                        label: inlineLabels.fromDate,\n                                        name: TidsperiodeFormFields.fom,\n                                        validate: getDateRangeValidator.validateFromDate({\n                                            required: true,\n                                            min: minDate,\n                                            max: maxDate,\n                                            toDate: ISOStringToDate(formik.values.tom),\n                                        }),\n                                        onChange: () => {\n                                            setTimeout(() => {\n                                                formik.validateField(TidsperiodeFormFields.tom);\n                                            });\n                                        },\n                                    }}\n                                    toInputProps={{\n                                        label: inlineLabels.toDate,\n                                        name: TidsperiodeFormFields.tom,\n                                        validate: getDateRangeValidator.validateToDate({\n                                            required: true,\n                                            min: minDate,\n                                            max: maxDate,\n                                            fromDate: ISOStringToDate(formik.values.fom),\n                                        }),\n                                        onChange: () => {\n                                            setTimeout(() => {\n                                                formik.validateField(TidsperiodeFormFields.fom);\n                                            });\n                                        },\n                                    }}\n                                />\n                            </FormBlock>\n                        </Form.Form>\n                    );\n                }}\n            />\n        </>\n    );\n};\n\nexport default TidsperiodeForm;\n","import { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { guid } from 'nav-frontend-js-utils';\nimport { DateTidsperiode, DateTidsperiodeFormValues } from './types';\n\nconst isValidDateTidsperiode = (tidsperiode: Partial<DateTidsperiode>): tidsperiode is DateTidsperiode => {\n    return tidsperiode.fom !== undefined && tidsperiode.tom !== undefined;\n};\n\nconst mapFormValuesToDateTidsperiode = (\n    formValues: DateTidsperiodeFormValues,\n    id: string | undefined\n): Partial<DateTidsperiode> => {\n    return {\n        id: id || guid(),\n        fom: ISOStringToDate(formValues.fom),\n        tom: ISOStringToDate(formValues.tom),\n    };\n};\n\nconst mapDateTidsperiodeToFormValues = ({ fom, tom }: Partial<DateTidsperiode>): DateTidsperiodeFormValues => {\n    return {\n        fom: dateToISOString(fom),\n        tom: dateToISOString(tom),\n    };\n};\n\nconst tidsperiodeUtils = {\n    isValidDateTidsperiode,\n    mapDateTidsperiodeToFormValues,\n    mapFormValuesToDateTidsperiode,\n};\n\nexport default tidsperiodeUtils;\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { DateTidsperiode } from './types';\n\ninterface Props {\n    tidsperiode: DateTidsperiode[];\n    onEdit?: (opphold: DateTidsperiode) => void;\n    onDelete?: (opphold: DateTidsperiode) => void;\n}\n\nconst TidsperiodeList = ({ tidsperiode = [], onDelete, onEdit }: Props) => {\n    const getDateTitleString = (uttak: DateTidsperiode) =>\n        `${prettifyDateExtended(uttak.fom)} - ${prettifyDateExtended(uttak.tom)}`;\n\n    const renderTidsperiodeLabel = (uttak: DateTidsperiode): React.ReactNode => {\n        const title = getDateTitleString(uttak);\n        return (\n            <>\n                {onEdit && <ActionLink onClick={() => onEdit(uttak)}>{title}</ActionLink>}\n                {!onEdit && <span>{title}</span>}\n            </>\n        );\n    };\n\n    return (\n        <ItemList<DateTidsperiode>\n            getItemId={(uttak) => uttak.id}\n            getItemTitle={(uttak) => getDateTitleString(uttak)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderTidsperiodeLabel}\n            items={tidsperiode.filter((uttak) => uttak.id !== undefined)}\n        />\n    );\n};\n\nexport default TidsperiodeList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList,\n    ModalFormAndListLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport TidsperiodeForm from './TidsperiodeForm';\nimport TidsperiodeList from './TidsperiodeList';\nimport { DateTidsperiode } from './types';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps {\n    name: FieldNames;\n    formTitle?: string;\n    minDate?: Date;\n    maxDate?: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction TidsperiodeListAndDialog<FieldNames>({\n    name,\n    minDate,\n    maxDate,\n    validate,\n    labels,\n    formTitle,\n}: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, DateTidsperiode>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                sortFunc={sortItemsByFom}\n                formRenderer={({ onSubmit, onCancel, item, allItems }) => (\n                    <TidsperiodeForm\n                        tidsperiode={item}\n                        alleTidsperioder={allItems}\n                        formLabels={formTitle ? { title: formTitle } : undefined}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => {\n                    console.log(items);\n\n                    return <TidsperiodeList tidsperiode={items} onEdit={onEdit} onDelete={onDelete} />;\n                }}\n            />\n        </>\n    );\n}\n\nexport default TidsperiodeListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport {\n    getFieldErrorRenderer,\n    getSummaryFieldErrorRenderer,\n} from '@navikt/sif-common-formik/lib/utils/formikErrorRenderUtils';\n\nimport { date1YearAgo, date1YearFromNow } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport { DateTidsperiode } from '../../../forms/tidsperiode';\nimport TidsperiodeListAndDialog from '../../../forms/tidsperiode/TidsperiodeListAndDialog';\nimport TidsperiodeForm, {\n    TidsperiodeFormErrorKeys,\n    TidsperiodeFormName,\n} from '../../../forms/tidsperiode/TidsperiodeForm';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport tidsperiodeMessages from '../../../forms/tidsperiode/tidsperiodeMessages';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\n\nenum FormField {\n    'tidsperiode' = 'tidsperiode',\n}\n\ninterface FormValues {\n    [FormField.tidsperiode]: DateTidsperiode[];\n}\nconst initialValues: FormValues = { tidsperiode: [] };\n\nconst TidsperiodeExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<DateTidsperiode> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={getFieldErrorRenderer(intl, 'tidsperiodeExample')}\n                                summaryFieldErrorRenderer={getSummaryFieldErrorRenderer(intl, 'tidsperiodeExample')}>\n                                <TidsperiodeListAndDialog<FormField>\n                                    name={FormField.tidsperiode}\n                                    minDate={date1YearAgo}\n                                    maxDate={date1YearFromNow}\n                                    validate={getListValidator({ required: true })}\n                                    labels={{\n                                        addLabel: 'Legg til periode',\n                                        listTitle: 'Registrerte periode',\n                                        modalTitle: 'Periode',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrors={TidsperiodeFormErrorKeys}\n                    formName={TidsperiodeFormName}\n                    intlMessages={tidsperiodeMessages}\n                />\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <TidsperiodeForm\n                        minDate={date1YearAgo}\n                        maxDate={date1YearFromNow}\n                        tidsperiode={{}}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                    />\n                </Panel>\n                <SubmitPreview values={singleFormValues} />\n            </DialogFormWrapper>\n\n            <MessagesPreview messages={tidsperiodeMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default TidsperiodeExample;\n","import { YesOrNo } from '@navikt/sif-common-formik/lib';\n\nexport enum UtenlandsoppholdÅrsak {\n    'INNLAGT_DEKKET_NORGE' = 'BARNET_INNLAGT_I_HELSEINSTITUSJON_FOR_NORSK_OFFENTLIG_REGNING',\n    'INNLAGT_DEKKET_ANNET_LAND' = 'BARNET_INNLAGT_I_HELSEINSTITUSJON_DEKKET_ETTER_AVTALE_MED_ET_ANNET_LAND_OM_TRYGD',\n    'ANNET' = 'ANNET',\n}\n\nexport interface UtenlandsoppholdInnlagtPeriode {\n    fom: Date;\n    tom: Date;\n}\n\nexport interface Utenlandsopphold {\n    id?: string;\n    fom: Date;\n    tom: Date;\n    landkode: string;\n    erBarnetInnlagt?: YesOrNo;\n    barnInnlagtPerioder?: UtenlandsoppholdInnlagtPeriode[];\n    årsak?: UtenlandsoppholdÅrsak;\n}\n\nexport type UtenlandsoppholdFormValues = Partial<\n    Omit<Utenlandsopphold, 'id' | 'fom' | 'tom' | 'barnInnlagtPerioder'> & {\n        fom?: string;\n        tom?: string;\n        barnInnlagtPerioder?: UtenlandsoppholdInnlagtPeriode[];\n    }\n>;\n","import { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Utenlandsopphold, UtenlandsoppholdFormValues } from './types';\n\nconst isValidUtenlandsopphold = (utenlandsopphold: Partial<Utenlandsopphold>): utenlandsopphold is Utenlandsopphold => {\n    return (\n        utenlandsopphold.fom !== undefined &&\n        utenlandsopphold.tom !== undefined &&\n        utenlandsopphold.landkode !== undefined\n    );\n};\n\nconst mapFormValuesToUtenlandsopphold = (\n    formValues: UtenlandsoppholdFormValues,\n    id: string | undefined\n): Partial<Utenlandsopphold> => {\n    const { barnInnlagtPerioder } = formValues;\n    return {\n        ...formValues,\n        id: id || guid(),\n        fom: ISOStringToDate(formValues.fom),\n        tom: ISOStringToDate(formValues.tom),\n        barnInnlagtPerioder,\n    };\n};\n\nconst mapUtenlandsoppholdToFormValues = ({\n    fom,\n    tom,\n    erBarnetInnlagt,\n    barnInnlagtPerioder,\n    landkode,\n    årsak,\n}: Partial<Utenlandsopphold>): UtenlandsoppholdFormValues => ({\n    fom: dateToISOString(fom),\n    tom: dateToISOString(tom),\n    erBarnetInnlagt,\n    landkode,\n    årsak,\n    barnInnlagtPerioder,\n});\n\nconst utenlandsoppholdUtils = {\n    isValidUtenlandsopphold,\n    mapFormValuesToUtenlandsopphold,\n    mapUtenlandsoppholdToFormValues,\n};\nexport default utenlandsoppholdUtils;\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { countryIsMemberOfEøsOrEfta } from '@navikt/sif-common-core/lib/utils/countryUtils';\nimport { dateToday } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport {\n    getFieldErrorRenderer,\n    getSummaryFieldErrorRenderer,\n} from '@navikt/sif-common-formik/lib/utils/formikErrorRenderUtils';\nimport { DateRange, getCountryName, ISOStringToDate, YesOrNo } from '@navikt/sif-common-formik';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport {\n    getDateRangeValidator,\n    getListValidator,\n    getRequiredFieldValidator,\n    getYesOrNoValidator,\n    ValidateDateError,\n    ValidateDateInRangeError,\n    ValidateListError,\n    ValidateRequiredFieldError,\n    validateYesOrNoIsAnsweredError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport { hasValue } from '@navikt/sif-common-formik/lib/validation/validationUtils';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport TidsperiodeListAndDialog from '../tidsperiode/TidsperiodeListAndDialog';\nimport { mapFomTomToDateRange } from '../utils';\nimport { Utenlandsopphold, UtenlandsoppholdFormValues, UtenlandsoppholdÅrsak } from './types';\nimport utils from './utenlandsoppholdUtils';\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    opphold?: Utenlandsopphold;\n    alleOpphold?: Utenlandsopphold[];\n    onSubmit: (values: Utenlandsopphold) => void;\n    onCancel: () => void;\n}\n\nenum UtenlandsoppholdFormFields {\n    fom = 'fom',\n    tom = 'tom',\n    landkode = 'landkode',\n    årsak = 'årsak',\n    erBarnetInnlagt = 'erBarnetInnlagt',\n    barnInnlagtPerioder = 'barnInnlagtPerioder',\n}\n\nexport const UtlandsoppholdFormErrorKeys = {\n    fields: {\n        [UtenlandsoppholdFormFields.fom]: [\n            ...Object.keys(ValidateDateError),\n            ValidateDateInRangeError.fromDateIsAfterToDate,\n        ],\n        [UtenlandsoppholdFormFields.tom]: [\n            ...Object.keys(ValidateDateError),\n            ValidateDateInRangeError.toDateIsBeforeFromDate,\n        ],\n        [UtenlandsoppholdFormFields.landkode]: Object.keys(ValidateRequiredFieldError),\n        [UtenlandsoppholdFormFields.årsak]: Object.keys(ValidateRequiredFieldError),\n        [UtenlandsoppholdFormFields.erBarnetInnlagt]: Object.keys(validateYesOrNoIsAnsweredError),\n        [UtenlandsoppholdFormFields.barnInnlagtPerioder]: [\n            ValidateListError.listIsEmpty,\n            ValidateListError.listHasTooFewItems,\n        ],\n    },\n};\n\nconst defaultFormValues: UtenlandsoppholdFormValues = {\n    fom: undefined,\n    tom: undefined,\n    landkode: undefined,\n    erBarnetInnlagt: YesOrNo.UNANSWERED,\n    barnInnlagtPerioder: [],\n    årsak: undefined,\n};\n\nexport const UtenlandsoppholdFormName = 'utenlandsoppholdForm';\n\nconst Form = getTypedFormComponents<UtenlandsoppholdFormFields, UtenlandsoppholdFormValues>();\n\nconst UtenlandsoppholdForm = ({ maxDate, minDate, opphold, alleOpphold = [], onSubmit, onCancel }: Props) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: Partial<UtenlandsoppholdFormValues>) => {\n        const utenlandsoppholdToSubmit = utils.mapFormValuesToUtenlandsopphold(formValues, opphold?.id);\n        if (utils.isValidUtenlandsopphold(utenlandsoppholdToSubmit)) {\n            onSubmit({\n                ...utenlandsoppholdToSubmit,\n                årsak: countryIsMemberOfEøsOrEfta(utenlandsoppholdToSubmit.landkode) ? undefined : formValues.årsak,\n            });\n        } else {\n            throw new Error('UtenlandsoppholdForm: Formvalues is not a valid Utenlandsopphold on submit.');\n        }\n    };\n\n    const registrerteTidsperioder: DateRange[] | undefined =\n        opphold === undefined\n            ? alleOpphold.map(mapFomTomToDateRange)\n            : alleOpphold.filter((o) => o.id !== opphold.id).map(mapFomTomToDateRange);\n\n    const initialValues = opphold ? utils.mapUtenlandsoppholdToFormValues(opphold) : defaultFormValues;\n    return (\n        <Form.FormikWrapper\n            initialValues={initialValues}\n            onSubmit={onFormikSubmit}\n            renderForm={(formik) => {\n                const {\n                    values: { fom, tom, landkode, erBarnetInnlagt, barnInnlagtPerioder = [], årsak },\n                } = formik;\n\n                const hasDateStringValues = hasValue(fom) && hasValue(tom);\n                const fomDate = ISOStringToDate(fom);\n                const tomDate = ISOStringToDate(tom);\n\n                const includeInnlagtPerioderQuestion =\n                    hasDateStringValues && landkode !== undefined && erBarnetInnlagt === YesOrNo.YES;\n\n                const includeInnlagtQuestion: boolean =\n                    landkode !== undefined && hasValue(landkode) && !countryIsMemberOfEøsOrEfta(landkode);\n\n                const showÅrsakQuestion = barnInnlagtPerioder.length > 0;\n\n                const areAllQuestionsAnswered: boolean =\n                    hasDateStringValues && landkode !== undefined && includeInnlagtQuestion === false\n                        ? true\n                        : erBarnetInnlagt !== YesOrNo.UNANSWERED &&\n                          (erBarnetInnlagt === YesOrNo.YES\n                              ? barnInnlagtPerioder.length > 0 && årsak !== undefined\n                              : true);\n\n                return (\n                    <Form.Form\n                        includeButtons={areAllQuestionsAnswered}\n                        onCancel={onCancel}\n                        fieldErrorRenderer={getFieldErrorRenderer(intl, UtenlandsoppholdFormName)}\n                        summaryFieldErrorRenderer={getSummaryFieldErrorRenderer(intl, UtenlandsoppholdFormName)}>\n                        <Systemtittel tag=\"h1\">\n                            <FormattedMessage id=\"utenlandsopphold.form.tittel\" />\n                        </Systemtittel>\n                        <FormBlock>\n                            <Form.DateRangePicker\n                                legend={intlHelper(intl, 'utenlandsopphold.form.tidsperiode.spm')}\n                                fullscreenOverlay={true}\n                                disabledDateRanges={registrerteTidsperioder}\n                                minDate={minDate}\n                                maxDate={maxDate}\n                                fromInputProps={{\n                                    name: UtenlandsoppholdFormFields.fom,\n                                    label: intlHelper(intl, 'utenlandsopphold.form.tidsperiode.fraDato'),\n                                    dayPickerProps: {\n                                        initialMonth: fomDate || minDate || dateToday,\n                                    },\n                                    validate: getDateRangeValidator.validateFromDate({\n                                        required: true,\n                                        min: minDate,\n                                        max: maxDate,\n                                        toDate: ISOStringToDate(tom),\n                                    }),\n                                }}\n                                toInputProps={{\n                                    name: UtenlandsoppholdFormFields.tom,\n                                    label: intlHelper(intl, 'utenlandsopphold.form.tidsperiode.tilDato'),\n                                    dayPickerProps: {\n                                        initialMonth: tomDate || fomDate || dateToday,\n                                    },\n                                    validate: getDateRangeValidator.validateToDate({\n                                        required: true,\n                                        min: minDate,\n                                        max: maxDate,\n                                        fromDate: ISOStringToDate(fom),\n                                    }),\n                                }}\n                            />\n                        </FormBlock>\n                        {hasDateStringValues && (\n                            <FormBlock>\n                                <Form.CountrySelect\n                                    name={UtenlandsoppholdFormFields.landkode}\n                                    label={intlHelper(intl, 'utenlandsopphold.form.land.spm')}\n                                    validate={getRequiredFieldValidator()}\n                                />\n                            </FormBlock>\n                        )}\n\n                        {includeInnlagtQuestion && landkode && hasDateStringValues && (\n                            <>\n                                <FormBlock>\n                                    <Form.YesOrNoQuestion\n                                        name={UtenlandsoppholdFormFields.erBarnetInnlagt}\n                                        legend={intlHelper(intl, 'utenlandsopphold.form.erBarnetInnlagt.spm', {\n                                            land: getCountryName(landkode, intl.locale),\n                                        })}\n                                        validate={getYesOrNoValidator()}\n                                    />\n                                </FormBlock>\n                                {includeInnlagtPerioderQuestion && (\n                                    <FormBlock margin=\"l\">\n                                        <TidsperiodeListAndDialog\n                                            name={UtenlandsoppholdFormFields.barnInnlagtPerioder}\n                                            minDate={ISOStringToDate(fom)}\n                                            maxDate={ISOStringToDate(tom)}\n                                            validate={getListValidator({ required: true })}\n                                            formTitle={intlHelper(\n                                                intl,\n                                                'utenlandsopphold.form.perioderBarnetErInnlag.formTitle'\n                                            )}\n                                            labels={{\n                                                addLabel: intlHelper(\n                                                    intl,\n                                                    'utenlandsopphold.form.perioderBarnetErInnlag.addLabel'\n                                                ),\n                                                modalTitle: intlHelper(\n                                                    intl,\n                                                    'utenlandsopphold.form.perioderBarnetErInnlag.modalTitle'\n                                                ),\n                                                listTitle: intlHelper(\n                                                    intl,\n                                                    'utenlandsopphold.form.perioderBarnetErInnlag.listTitle'\n                                                ),\n                                            }}\n                                        />\n                                    </FormBlock>\n                                )}\n                                {showÅrsakQuestion && (\n                                    <>\n                                        <FormBlock>\n                                            <Form.RadioPanelGroup\n                                                legend={intlHelper(intl, 'utenlandsopphold.form.årsak.spm', {\n                                                    land: getCountryName(landkode, intl.locale),\n                                                })}\n                                                name={UtenlandsoppholdFormFields.årsak}\n                                                validate={getRequiredFieldValidator()}\n                                                radios={[\n                                                    {\n                                                        value: UtenlandsoppholdÅrsak.INNLAGT_DEKKET_NORGE,\n                                                        label: intlHelper(\n                                                            intl,\n                                                            `utenlandsopphold.form.årsak.${UtenlandsoppholdÅrsak.INNLAGT_DEKKET_NORGE}`\n                                                        ),\n                                                    },\n                                                    {\n                                                        value: UtenlandsoppholdÅrsak.INNLAGT_DEKKET_ANNET_LAND,\n                                                        label: intlHelper(\n                                                            intl,\n                                                            `utenlandsopphold.form.årsak.${UtenlandsoppholdÅrsak.INNLAGT_DEKKET_ANNET_LAND}`,\n                                                            { land: getCountryName(landkode, intl.locale) }\n                                                        ),\n                                                    },\n                                                    {\n                                                        value: UtenlandsoppholdÅrsak.ANNET,\n                                                        label: intlHelper(\n                                                            intl,\n                                                            `utenlandsopphold.form.årsak.${UtenlandsoppholdÅrsak.ANNET}`\n                                                        ),\n                                                    },\n                                                ]}\n                                            />\n                                        </FormBlock>\n                                    </>\n                                )}\n                            </>\n                        )}\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default UtenlandsoppholdForm;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { getCountryName } from '@navikt/sif-common-formik';\nimport { Utenlandsopphold } from './types';\nimport './utenlandsoppholdList.less';\n\ninterface Props {\n    utenlandsopphold: Utenlandsopphold[];\n    onEdit?: (opphold: Utenlandsopphold) => void;\n    onDelete?: (opphold: Utenlandsopphold) => void;\n}\n\nconst bem = bemUtils('utenlandsoppholdList');\n\nconst UtenlandsoppholdList = ({ utenlandsopphold, onDelete, onEdit }: Props) => {\n    const intl = useIntl();\n    const renderUtenlandsoppholdLabel = (opphold: Utenlandsopphold): React.ReactNode => {\n        const navn = getCountryName(opphold.landkode, intl.locale);\n        return (\n            <div className={bem.element('label')}>\n                <span className={bem.element('land')}>\n                    {onEdit && <ActionLink onClick={() => onEdit(opphold)}>{navn}</ActionLink>}\n                    {!onEdit && <span>{navn}</span>}\n                </span>\n                <span className={bem.element('dato')}>\n                    {prettifyDateExtended(opphold.fom)} - {prettifyDateExtended(opphold.tom)}\n                </span>\n            </div>\n        );\n    };\n\n    return (\n        <ItemList<Utenlandsopphold>\n            getItemId={(opphold) => opphold.id}\n            getItemTitle={(opphold) => getCountryName(opphold.landkode, intl.locale)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderUtenlandsoppholdLabel}\n            items={utenlandsopphold}\n        />\n    );\n};\n\nexport default UtenlandsoppholdList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList,\n    ModalFormAndListLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport { Utenlandsopphold } from './types';\nimport UtenlandsoppholdForm from './UtenlandsoppholdForm';\nimport UtenlandsoppholdListe from './UtenlandsoppholdList';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps {\n    name: FieldNames;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction UtenlandsoppholdListAndDialog<FieldNames>({ name, minDate, maxDate, validate, labels }: Props<FieldNames>) {\n    return (\n        <FormikModalFormAndList<FieldNames, Utenlandsopphold>\n            name={name}\n            labels={labels}\n            validate={validate}\n            dialogWidth=\"narrow\"\n            sortFunc={sortItemsByFom}\n            formRenderer={({ onSubmit, onCancel, item, allItems }) => (\n                <UtenlandsoppholdForm\n                    opphold={item}\n                    alleOpphold={allItems}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    onSubmit={onSubmit}\n                    onCancel={onCancel}\n                />\n            )}\n            listRenderer={({ items, onEdit, onDelete }) => (\n                <UtenlandsoppholdListe utenlandsopphold={items} onEdit={onEdit} onDelete={onDelete} />\n            )}\n        />\n    );\n}\n\nexport default UtenlandsoppholdListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport {\n    getFieldErrorRenderer,\n    getSummaryFieldErrorRenderer,\n} from '@navikt/sif-common-formik/lib/utils/formikErrorRenderUtils';\n\nimport { date1YearAgo, date1YearFromNow } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport Panel from 'nav-frontend-paneler';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { Utenlandsopphold } from '../../../forms/utenlandsopphold/types';\nimport UtenlandsoppholdForm, {\n    UtenlandsoppholdFormName,\n    UtlandsoppholdFormErrorKeys,\n} from '../../../forms/utenlandsopphold/UtenlandsoppholdForm';\nimport UtenlandsoppholdListAndDialog from '../../../forms/utenlandsopphold/UtenlandsoppholdListAndDialog';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport utenlandsoppholdMessages from '../../../forms/utenlandsopphold/utenlandsoppholdMessages';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\n\nenum FormField {\n    'utenlandsopphold' = 'utenlandsopphold',\n}\n\ninterface FormValues {\n    [FormField.utenlandsopphold]: Utenlandsopphold[];\n}\nconst initialValues: FormValues = {\n    utenlandsopphold: [],\n};\n\nconst UtenlandsoppholdExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<Utenlandsopphold> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={getFieldErrorRenderer(intl, 'utenlandsoppholdExample')}\n                                summaryFieldErrorRenderer={getSummaryFieldErrorRenderer(\n                                    intl,\n                                    'utenlandsoppholdExample'\n                                )}>\n                                <UtenlandsoppholdListAndDialog\n                                    minDate={date1YearAgo}\n                                    maxDate={date1YearFromNow}\n                                    name={FormField.utenlandsopphold}\n                                    validate={getListValidator({ required: true })}\n                                    labels={{\n                                        addLabel: 'Legg til utenlandsopphold',\n                                        listTitle: 'Registrerte utenlandsopphold',\n                                        modalTitle: 'Utenlandsopphold',\n                                        emptyListText: 'Ingen utenlandsopphold er lagt til',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrors={UtlandsoppholdFormErrorKeys}\n                    formName={UtenlandsoppholdFormName}\n                    intlMessages={utenlandsoppholdMessages}\n                />\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <UtenlandsoppholdForm\n                        opphold={initialValues.utenlandsopphold[0]}\n                        minDate={date1YearAgo}\n                        maxDate={date1YearFromNow}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                    />\n                    <SubmitPreview values={singleFormValues} />\n                </Panel>\n            </DialogFormWrapper>\n\n            <MessagesPreview messages={utenlandsoppholdMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default UtenlandsoppholdExample;\n","import { YesOrNo } from '@navikt/sif-common-core/lib/types/YesOrNo';\n\nexport enum FraværÅrsak {\n    'stengtSkoleBhg' = 'STENGT_SKOLE_ELLER_BARNEHAGE',\n    'smittevernhensyn' = 'SMITTEVERNHENSYN',\n    'ordinært' = 'ORDINÆRT_FRAVÆR',\n}\n\nexport interface FraværPeriode {\n    id?: string;\n    fraOgMed: Date;\n    tilOgMed: Date;\n    årsak: FraværÅrsak;\n}\n\nexport type FraværPeriodeFormValues = Partial<{\n    id: string;\n    fraOgMed: string;\n    tilOgMed: string;\n    hjemmePgaKorona: YesOrNo;\n    årsak: FraværÅrsak;\n}>;\n\nexport interface FraværDag {\n    id?: string;\n    dato: Date;\n    timerArbeidsdag: string;\n    timerFravær: string;\n    årsak: FraværÅrsak;\n}\n\nexport type FraværDagFormValues = Partial<\n    Omit<FraværDag, 'dato'> & {\n        dato: string;\n        hjemmePgaKorona: YesOrNo;\n        årsak?: FraværÅrsak;\n    }\n>;\n","import ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { getFraværÅrsakTekstKort } from './fraværMessages';\nimport { FraværÅrsak } from './types';\n\ninterface Props {\n    title: string;\n    årsak?: FraværÅrsak;\n    onEdit?: () => void;\n}\n\nconst FraværListItem: React.FunctionComponent<Props> = ({ title, årsak, onEdit }: Props) => {\n    const intl = useIntl();\n    return (\n        <div style={{ padding: '.5rem 0' }}>\n            <div>{onEdit ? <ActionLink onClick={() => onEdit()}>{title}</ActionLink> : { title }}</div>\n            {årsak && årsak !== FraværÅrsak.ordinært && (\n                <div style={{ marginTop: '.25rem' }}>\n                    <FormattedMessage\n                        id={`fravær.list.årsak`}\n                        values={{ årsak: getFraværÅrsakTekstKort(årsak, intl) }}\n                    />\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default FraværListItem;\n","import { YesOrNo } from '@navikt/sif-common-core/lib/types/YesOrNo';\nimport { DateRange } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport dayjs from 'dayjs';\nimport isSameOrAfter from 'dayjs/plugin/isSameOrAfter';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\nimport { isString } from 'formik';\nimport { guid } from 'nav-frontend-js-utils';\nimport { FraværDag, FraværDagFormValues, FraværPeriode, FraværPeriodeFormValues, FraværÅrsak } from './types';\n\ndayjs.extend(isSameOrAfter);\ndayjs.extend(isSameOrBefore);\n\nexport const isFraværDag = (fraværDag: Partial<FraværDag>): fraværDag is FraværDag => {\n    return (\n        fraværDag.dato !== undefined &&\n        fraværDag.timerArbeidsdag !== undefined &&\n        fraværDag.timerFravær !== undefined &&\n        fraværDag.årsak !== undefined\n    );\n};\n\nexport const isFraværPeriode = (fraværPeriode: Partial<FraværPeriode>): fraværPeriode is FraværPeriode => {\n    return (\n        fraværPeriode.fraOgMed !== undefined &&\n        fraværPeriode.tilOgMed !== undefined &&\n        fraværPeriode.årsak !== undefined\n    );\n};\n\nexport const fraværDagToFraværDateRange = (fraværDag: FraværDag): DateRange => ({\n    from: fraværDag.dato,\n    to: fraværDag.dato,\n});\n\nexport const fraværPeriodeToDateRange = (fraværDag: FraværPeriode): DateRange => ({\n    from: fraværDag.fraOgMed,\n    to: fraværDag.tilOgMed,\n});\n\nexport enum Weekday {\n    monday = 'monday',\n    tuesday = 'tuesday',\n    wednesday = 'wednesday',\n    thursday = 'thursday',\n    friday = 'friday',\n    saturday = 'saturday',\n    sunday = 'sunday',\n}\n\nexport const getWeekdayName = (date: Date): Weekday | undefined => {\n    switch (date.getDay()) {\n        case 0:\n            return Weekday.sunday;\n        case 1:\n            return Weekday.monday;\n        case 2:\n            return Weekday.tuesday;\n        case 3:\n            return Weekday.wednesday;\n        case 4:\n            return Weekday.thursday;\n        case 5:\n            return Weekday.friday;\n        case 6:\n            return Weekday.saturday;\n        default:\n            return undefined;\n    }\n};\n\nexport const dateErHelg = (date: Date) =>\n    getWeekdayName(date) === Weekday.saturday || getWeekdayName(date) === Weekday.sunday;\n\nexport const rangeCollideWithRanges = (range: DateRange, ranges: DateRange[] = []): boolean => {\n    if (!range || !range.from || !range.to || ranges.length === 0) {\n        return false;\n    }\n    return ranges.some((periode) => {\n        const fromDay = dayjs(range.from);\n        const toDay = dayjs(range.to);\n        const { from, to } = periode;\n        if (fromDay.isBefore(from) && toDay.isAfter(to)) return true;\n        if (fromDay.isSameOrAfter(from, 'day') && fromDay.isSameOrBefore(to, 'day')) return true;\n        if (toDay.isSameOrAfter(from, 'day') && toDay.isSameOrBefore(to, 'day')) return true;\n    });\n};\n\nexport const dateCollideWithRanges = (date: Date | undefined, ranges: DateRange[] = []): boolean => {\n    if (!date || ranges.length === 0) {\n        return false;\n    }\n    return ranges.some((range) => {\n        return dayjs(date).isSameOrAfter(range.from, 'day') && dayjs(date).isSameOrBefore(range.to, 'day');\n    });\n};\n\nexport const timeText = (timer: string): string =>\n    timer === '0' || timer === '0.5' || timer === '1' ? 'time' : 'timer';\n\nexport const dateRangeToFomTom = (dateRange: DateRange): { fom: Date; tom: Date } => ({\n    fom: dateRange.from,\n    tom: dateRange.to,\n});\nexport const toMaybeNumber = (timerArbeidsdag: string | undefined): number | undefined => {\n    if (timerArbeidsdag && isString(timerArbeidsdag)) {\n        return parseFloat(timerArbeidsdag);\n    }\n    return undefined;\n};\n\nexport const getHjemmePgaKoronaFormValueFromFraværÅrsak = (årsak?: FraværÅrsak): YesOrNo => {\n    if (årsak === undefined) {\n        return YesOrNo.UNANSWERED;\n    }\n    return årsak === FraværÅrsak.smittevernhensyn || årsak === FraværÅrsak.stengtSkoleBhg ? YesOrNo.YES : YesOrNo.NO;\n};\n\nexport const getÅrsakFromFraværFormValues = (formValues: FraværDagFormValues | FraværPeriodeFormValues): FraværÅrsak =>\n    formValues.hjemmePgaKorona === YesOrNo.YES && formValues.årsak ? formValues.årsak : FraværÅrsak.ordinært;\n\nexport const mapFormValuesToFraværDag = (\n    formValues: FraværDagFormValues,\n    id: string | undefined\n): Partial<FraværDag> => {\n    return {\n        id: id || guid(),\n        timerArbeidsdag: formValues.timerArbeidsdag,\n        timerFravær: formValues.timerFravær,\n        dato: ISOStringToDate(formValues.dato),\n        årsak: getÅrsakFromFraværFormValues(formValues),\n    };\n};\n\nexport const mapFraværDagToFormValues = (fraværDag: Partial<FraværDag>): FraværDagFormValues => {\n    return {\n        timerArbeidsdag: fraværDag.timerArbeidsdag,\n        timerFravær: fraværDag.timerFravær,\n        dato: fraværDag.dato ? dateToISOString(fraværDag.dato) : '',\n        hjemmePgaKorona: getHjemmePgaKoronaFormValueFromFraværÅrsak(fraværDag.årsak),\n        årsak: fraværDag.årsak,\n    };\n};\n\nexport const mapFormValuesToFraværPeriode = (\n    formValues: FraværPeriodeFormValues,\n    id: string | undefined\n): Partial<FraværPeriode> => {\n    return {\n        id: id || guid(),\n        fraOgMed: ISOStringToDate(formValues.fraOgMed),\n        tilOgMed: ISOStringToDate(formValues.tilOgMed),\n        årsak: getÅrsakFromFraværFormValues(formValues),\n    };\n};\n\nexport const mapFraværPeriodeToFormValues = (fraværPeriode: Partial<FraværPeriode>): FraværPeriodeFormValues => {\n    return {\n        fraOgMed: fraværPeriode.fraOgMed ? dateToISOString(fraværPeriode.fraOgMed) : '',\n        tilOgMed: fraværPeriode.tilOgMed ? dateToISOString(fraværPeriode.tilOgMed) : '',\n        hjemmePgaKorona: getHjemmePgaKoronaFormValueFromFraværÅrsak(fraværPeriode.årsak),\n        årsak: fraværPeriode.årsak,\n    };\n};\n","import { DateRange } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { ValidationFunction } from '@navikt/sif-common-formik/lib/validation/types';\nimport {\n    dateCollideWithRanges,\n    dateErHelg,\n    fraværDagToFraværDateRange,\n    fraværPeriodeToDateRange,\n    rangeCollideWithRanges,\n} from './fraværUtilities';\nimport { FraværDag, FraværPeriode } from './types';\n\nexport enum FraværFieldValidationErrors {\n    fravær_timer_mer_enn_arbeidstimer = 'fravær_timer_mer_enn_arbeidstimer',\n    fra_og_til_er_ulike_år = 'fra_og_til_er_ulike_år',\n    er_helg = 'er_helg',\n    fra_dato_kolliderer_med_annet_fravær = 'fra_dato_kolliderer_med_annet_fravær',\n    til_dato_kolliderer_med_annet_fravær = 'til_dato_kolliderer_med_annet_fravær',\n    dato_kolliderer_med_annet_fravær = 'dato_kolliderer_med_annet_fravær',\n    dager_overlapper_med_andre_dager = 'dager_overlapper_med_andre_dager',\n}\n\nexport const validateLessOrEqualTo = (maybeMaxValue: number | undefined): ValidationFunction<any> => (\n    maybeValue: string | undefined\n) => {\n    const maybeValueFloat: number | undefined = maybeValue ? parseFloat(maybeValue) : undefined;\n    if (maybeMaxValue && maybeValueFloat) {\n        return maybeValueFloat <= maybeMaxValue\n            ? undefined\n            : FraværFieldValidationErrors.fravær_timer_mer_enn_arbeidstimer;\n    }\n    return undefined;\n};\n\nexport const validateErSammeÅr = (maybeDateFrom: string | undefined, maybeDateTo: string | undefined) => {\n    const fromDate = ISOStringToDate(maybeDateFrom);\n    const toDate = ISOStringToDate(maybeDateTo);\n    if (fromDate && toDate && fromDate.getFullYear() !== toDate.getFullYear()) {\n        return FraværFieldValidationErrors.fra_og_til_er_ulike_år;\n    }\n    return undefined;\n};\n\nexport const validateNotHelgedag = (maybeDate: string | undefined): FraværFieldValidationErrors | undefined => {\n    const date = ISOStringToDate(maybeDate);\n    return date && dateErHelg(date) ? FraværFieldValidationErrors.er_helg : undefined;\n};\n\nexport const validateFraværPeriodeCollision = (\n    from: Date | undefined,\n    to: Date | undefined,\n    ranges: DateRange[] | undefined\n): FraværFieldValidationErrors | undefined => {\n    console.log(ranges);\n\n    if (!from || !to || (ranges || []).length === 0) {\n        console.log('nope');\n\n        return undefined;\n    }\n    return rangeCollideWithRanges({ from, to }, ranges)\n        ? FraværFieldValidationErrors.dager_overlapper_med_andre_dager\n        : undefined;\n};\n\nexport const validateFraOgMedForCollision = (\n    date: Date | undefined,\n    ranges: DateRange[] | undefined\n): FraværFieldValidationErrors | undefined => {\n    if (!date || (ranges || []).length === 0) {\n        return undefined;\n    }\n    return dateCollideWithRanges(date, ranges)\n        ? FraværFieldValidationErrors.fra_dato_kolliderer_med_annet_fravær\n        : undefined;\n};\n\nexport const validateTilOgMedForCollision = (\n    date: Date | undefined,\n    ranges: DateRange[] | undefined\n): FraværFieldValidationErrors | undefined => {\n    if (!date || (ranges || []).length === 0) {\n        return undefined;\n    }\n    return dateCollideWithRanges(date, ranges)\n        ? FraværFieldValidationErrors.til_dato_kolliderer_med_annet_fravær\n        : undefined;\n};\n\nexport const validateFraværDagCollision = (\n    date: Date | undefined,\n    ranges: DateRange[] | undefined\n): FraværFieldValidationErrors | undefined => {\n    if (!date || (ranges || []).length === 0) {\n        return undefined;\n    }\n    return dateCollideWithRanges(date, ranges)\n        ? FraværFieldValidationErrors.dato_kolliderer_med_annet_fravær\n        : undefined;\n};\n\nexport const validateNoCollisions = (fraværDager: FraværDag[], fraværPerioder: FraværPeriode[]) => ():\n    | FraværFieldValidationErrors\n    | undefined => {\n    if (fraværPerioder.length === 0 && fraværDager.length === 0) {\n        return undefined;\n    }\n\n    const allFraværDagDateRanges = fraværDager.map(fraværDagToFraværDateRange);\n    const allFraværPeriodeDateRanges = fraværPerioder.map(fraværPeriodeToDateRange);\n\n    const hasDateCollision = fraværDager.some((dag) => {\n        const rangesWithoutCurrentDag = [\n            ...fraværDager.filter((d) => d !== dag).map(fraværDagToFraværDateRange),\n            ...allFraværPeriodeDateRanges,\n        ];\n        return dateCollideWithRanges(dag.dato, rangesWithoutCurrentDag);\n    });\n\n    const hasRangeCollision = fraværPerioder.some((periode) => {\n        const rangesWithoutCurrentPeriode = [\n            ...allFraværDagDateRanges,\n            ...fraværPerioder.filter((p) => p !== periode).map(fraværPeriodeToDateRange),\n        ];\n        return rangeCollideWithRanges(fraværPeriodeToDateRange(periode), rangesWithoutCurrentPeriode);\n    });\n    return hasDateCollision || hasRangeCollision\n        ? FraværFieldValidationErrors.dager_overlapper_med_andre_dager\n        : undefined;\n};\n","import React from 'react';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport FraværListItem from './FraværListItem';\nimport { timeText } from './fraværUtilities';\nimport { FraværDag } from './types';\n\ninterface Props {\n    fraværDager: FraværDag[];\n    onEdit?: (fraværDag: FraværDag) => void;\n    onDelete?: (fraværDag: FraværDag) => void;\n}\n\nconst FraværDagerList = ({ fraværDager = [], onDelete, onEdit }: Props) => {\n    const getFraværDagListItemTitle = (fraværDag: FraværDag) =>\n        `${prettifyDateExtended(fraværDag.dato)}:\n        Skulle jobbet ${fraværDag.timerArbeidsdag} ${timeText(fraværDag.timerArbeidsdag)}.\n        Borte fra jobb ${fraværDag.timerFravær}  ${timeText(fraværDag.timerFravær)}.`;\n\n    const renderFraværDagLabel = (fraværDag: FraværDag): React.ReactNode => {\n        const title = getFraværDagListItemTitle(fraværDag);\n        return (\n            <FraværListItem\n                title={title}\n                årsak={fraværDag.årsak}\n                onEdit={onEdit ? () => onEdit(fraværDag) : undefined}\n            />\n        );\n    };\n\n    return (\n        <ItemList<FraværDag>\n            getItemId={(fraværDag) => fraværDag.id}\n            getItemTitle={(fraværDag) => getFraværDagListItemTitle(fraværDag)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderFraværDagLabel}\n            items={fraværDager.filter((fraværDag) => fraværDag.id !== undefined)}\n        />\n    );\n};\n\nexport default FraværDagerList;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\ninterface Props {\n    id: string;\n    value?: Record<string, string | number | boolean | null | undefined | Date>;\n}\n\nconst basicHtmlTagRenderers = {\n    li: (value: string) => <li>{value}</li>,\n    strong: (value: string) => <strong>{value}</strong>,\n    p: (value: string) => <p>{value}</p>,\n    em: (value: string) => <em>{value}</em>,\n};\n\nconst FormattedHtmlMessage = ({ id, value }: Props) => (\n    <FormattedMessage id={id} values={{ ...value, ...basicHtmlTagRenderers }} />\n);\n\nexport default FormattedHtmlMessage;\n","import React from 'react';\nimport { TypedFormInputValidationProps } from '@navikt/sif-common-formik/lib';\nimport { FraværDagForm, FraværDagFormFields } from './FraværDagForm';\nimport { timeText } from './fraværUtilities';\n\ninterface Props extends TypedFormInputValidationProps {\n    name: FraværDagFormFields;\n    label?: string;\n    maksTid?: number;\n}\n\nconst getOptionsList: (maksTid: number) => JSX.Element[] = (maksTid: number) => {\n    const newOptionElement = (t: number): JSX.Element => {\n        return (\n            <option key={t} value={t}>\n                {t.toString(10).replace('.', ',')} {timeText(t.toString(10))}\n            </option>\n        );\n    };\n    const go = (jsxList: JSX.Element[], tid: number): JSX.Element[] => {\n        return tid >= maksTid\n            ? [...jsxList, newOptionElement(tid)]\n            : go([...jsxList, newOptionElement(tid)], tid + 0.5);\n    };\n    return go([], 0.5);\n};\n\nconst FraværTimerSelect = ({ name, validate, label, maksTid }: Props) => {\n    return (\n        <FraværDagForm.Select bredde=\"s\" label={label || 'Antall timer'} name={name} validate={validate}>\n            <option />\n            {getOptionsList(maksTid || 7.5)}\n        </FraværDagForm.Select>\n    );\n};\n\nexport default FraværTimerSelect;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport ExpandableInfo from '@navikt/sif-common-core/lib/components/expandable-content/ExpandableInfo';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { YesOrNo } from '@navikt/sif-common-core/lib/types/YesOrNo';\nimport { DateRange, dateToday } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport {\n    getFieldErrorRenderer,\n    getSummaryFieldErrorRenderer,\n} from '@navikt/sif-common-formik/lib/utils/formikErrorRenderUtils';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport datepickerUtils from '@navikt/sif-common-formik/lib/components/formik-datepicker/datepickerUtils';\nimport { FormikDatepickerProps } from '@navikt/sif-common-formik/lib/components/formik-datepicker/FormikDatepicker';\nimport {\n    getRequiredFieldValidator,\n    getYesOrNoValidator,\n    getDateValidator,\n    ValidateRequiredFieldError,\n    ValidateDateError,\n    validateYesOrNoIsAnsweredError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport dayjs from 'dayjs';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport FormattedHtmlMessage from '../components/formatted-html-message/FormattedHtmlMessage';\nimport FraværTimerSelect from './FraværTimerSelect';\nimport { isFraværDag, mapFormValuesToFraværDag, mapFraværDagToFormValues, toMaybeNumber } from './fraværUtilities';\nimport {\n    FraværFieldValidationErrors,\n    validateFraværDagCollision,\n    validateLessOrEqualTo,\n    validateNotHelgedag,\n} from './fraværValidationUtils';\nimport { getFraværÅrsakRadios } from './fraværÅrsakRadios';\nimport { FraværDag, FraværDagFormValues } from './types';\nimport ÅrsakInfo from './ÅrsakInfo';\nimport { validateAll } from '@navikt/sif-common-formik/lib/validation/validationUtils';\n\nexport interface FraværDagFormLabels {\n    tittel: string;\n    dato: string;\n    antallArbeidstimer: string;\n    timerFravær: string;\n    hjemmePgaKorona: string;\n    årsak: string;\n    ok: string;\n    avbryt: string;\n}\n\ninterface Props {\n    fraværDag?: Partial<FraværDag>;\n    dagDescription?: JSX.Element;\n    minDate: Date;\n    maxDate: Date;\n    dateRangesToDisable?: DateRange[];\n    helgedagerIkkeTillatt?: boolean;\n    headerContent?: JSX.Element;\n    maksArbeidstidPerDag?: number;\n    onSubmit: (values: FraværDag) => void;\n    onCancel: () => void;\n}\n\nexport enum FraværDagFormFields {\n    dato = 'dato',\n    timerArbeidsdag = 'timerArbeidsdag',\n    timerFravær = 'timerFravær',\n    hjemmePgaKorona = 'hjemmePgaKorona',\n    årsak = 'årsak',\n}\n\nexport const FraværDagFormErrorKeys = {\n    fields: {\n        [FraværDagFormFields.dato]: [\n            ...Object.keys(ValidateDateError),\n            FraværFieldValidationErrors.er_helg,\n            FraværFieldValidationErrors.dato_kolliderer_med_annet_fravær,\n        ],\n        [FraværDagFormFields.timerArbeidsdag]: [...Object.keys(ValidateRequiredFieldError)],\n        [FraværDagFormFields.timerFravær]: [\n            ...Object.keys(ValidateRequiredFieldError),\n            FraværFieldValidationErrors.fravær_timer_mer_enn_arbeidstimer,\n        ],\n        [FraværDagFormFields.hjemmePgaKorona]: Object.keys(validateYesOrNoIsAnsweredError),\n        [FraværDagFormFields.årsak]: Object.keys(ValidateRequiredFieldError),\n    },\n};\n\nexport const FraværDagFormName = 'fraværDagForm';\n\nexport const FraværDagForm = getTypedFormComponents<FraværDagFormFields, FraværDagFormValues>();\n\nconst FraværDagFormView = ({\n    fraværDag = {\n        dato: undefined,\n        timerArbeidsdag: undefined,\n        timerFravær: undefined,\n        årsak: undefined,\n    },\n    dagDescription,\n    maxDate,\n    minDate,\n    dateRangesToDisable,\n    helgedagerIkkeTillatt,\n    maksArbeidstidPerDag,\n    headerContent,\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n    const onFormikSubmit = (formValues: FraværDagFormValues) => {\n        const fraværDagToSubmit = mapFormValuesToFraværDag(formValues, fraværDag.id);\n        if (isFraværDag(fraværDagToSubmit)) {\n            onSubmit(fraværDagToSubmit);\n        } else {\n            throw new Error('FraværDagFOrm: Formvalues is not a valid FraværDag on submit.');\n        }\n    };\n\n    const formLabels: FraværDagFormLabels = {\n        ok: intlHelper(intl, 'fravær.form.felles.ok'),\n        avbryt: intlHelper(intl, 'fravær.form.felles.avbryt'),\n        årsak: intlHelper(intl, 'fravær.form.felles.årsak'),\n        tittel: intlHelper(intl, 'fravær.form.dag.tittel'),\n        dato: intlHelper(intl, 'fravær.form.dag.dato'),\n        antallArbeidstimer: intlHelper(intl, 'fravær.form.dag.antallArbeidstimer'),\n        timerFravær: intlHelper(intl, 'fravær.form.dag.timerFravær'),\n        hjemmePgaKorona: intlHelper(intl, 'fravær.form.felles.hjemmePgaKorona'),\n    };\n    const fraværÅrsakRadios = getFraværÅrsakRadios(intl);\n    const disabledDateRanges = dateRangesToDisable\n        ? dateRangesToDisable.filter((range) => {\n              const { dato } = fraværDag;\n              return !(dato && dayjs(dato).isSame(range.from, 'day') && dayjs(dato).isSame(range.to, 'day'));\n          })\n        : undefined;\n\n    return (\n        <>\n            <FraværDagForm.FormikWrapper\n                initialValues={mapFraværDagToFormValues(fraværDag)}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => {\n                    const { values } = formik;\n                    const valgtDato = datepickerUtils.getDateFromDateString(values.dato);\n                    const datepickerProps: FormikDatepickerProps<FraværDagFormFields> = {\n                        label: formLabels.dato,\n                        name: FraværDagFormFields.dato,\n                        fullscreenOverlay: true,\n                        dayPickerProps: {\n                            initialMonth: dayjs(dateToday).isAfter(maxDate) ? maxDate : dateToday,\n                        },\n                        minDate,\n                        maxDate,\n                        disableWeekend: helgedagerIkkeTillatt || false,\n                        disabledDateRanges,\n                        validate: helgedagerIkkeTillatt\n                            ? (value) =>\n                                  validateAll([\n                                      () => getRequiredFieldValidator()(value),\n                                      () => getDateValidator({ min: minDate, max: maxDate })(value),\n                                      () => validateNotHelgedag(value),\n                                      () => validateFraværDagCollision(valgtDato, disabledDateRanges),\n                                  ])\n                            : (value) =>\n                                  validateAll([\n                                      () => getRequiredFieldValidator()(value),\n                                      () => getDateValidator({ min: minDate, max: maxDate }),\n                                  ]),\n                        onChange: () => {\n                            setTimeout(() => {\n                                formik.validateField(FraværDagFormFields.dato);\n                            });\n                        },\n                    };\n\n                    return (\n                        <FraværDagForm.Form\n                            onCancel={onCancel}\n                            fieldErrorRenderer={getFieldErrorRenderer(intl, FraværDagFormName)}\n                            summaryFieldErrorRenderer={getSummaryFieldErrorRenderer(intl, FraværDagFormName)}>\n                            <Systemtittel tag=\"h1\">{formLabels.tittel}</Systemtittel>\n                            {headerContent && <Box>{headerContent}</Box>}\n                            <FormBlock>\n                                <FraværDagForm.DatePicker {...datepickerProps} description={dagDescription} />\n                            </FormBlock>\n                            <FormBlock>\n                                <FraværTimerSelect\n                                    name={FraværDagFormFields.timerArbeidsdag}\n                                    validate={getRequiredFieldValidator()}\n                                    label={formLabels.antallArbeidstimer}\n                                    maksTid={maksArbeidstidPerDag}\n                                />\n                            </FormBlock>\n                            <FormBlock>\n                                <FraværTimerSelect\n                                    name={FraværDagFormFields.timerFravær}\n                                    validate={(value) =>\n                                        validateAll([\n                                            () => getRequiredFieldValidator()(value),\n                                            () => validateLessOrEqualTo(toMaybeNumber(values.timerArbeidsdag))(value),\n                                        ])\n                                    }\n                                    label={formLabels.timerFravær}\n                                    maksTid={maksArbeidstidPerDag}\n                                />\n                            </FormBlock>\n                            <FormBlock>\n                                <FraværDagForm.YesOrNoQuestion\n                                    legend={formLabels.hjemmePgaKorona}\n                                    name={FraværDagFormFields.hjemmePgaKorona}\n                                    validate={getYesOrNoValidator()}\n                                    description={\n                                        <ExpandableInfo title={intlHelper(intl, 'info.smittevern.tittel')}>\n                                            <FormattedHtmlMessage id=\"info.smittevern.info.html\" />\n                                        </ExpandableInfo>\n                                    }\n                                />\n                            </FormBlock>\n                            {values.hjemmePgaKorona === YesOrNo.YES && (\n                                <FormBlock>\n                                    <FraværDagForm.RadioPanelGroup\n                                        legend={formLabels.årsak}\n                                        name={FraværDagFormFields.årsak}\n                                        validate={getRequiredFieldValidator()}\n                                        radios={fraværÅrsakRadios}\n                                        description={<ÅrsakInfo />}\n                                    />\n                                </FormBlock>\n                            )}\n                        </FraværDagForm.Form>\n                    );\n                }}\n            />\n        </>\n    );\n};\n\nexport default FraværDagFormView;\n","import intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { RadioPanelProps } from 'nav-frontend-skjema';\nimport { IntlShape } from 'react-intl';\nimport { FraværÅrsak } from './types';\n\nexport const getFraværÅrsakRadios = (intl: IntlShape): RadioPanelProps[] => [\n    {\n        label: intlHelper(intl, `fravær.årsak.${FraværÅrsak.stengtSkoleBhg}`),\n        value: FraværÅrsak.stengtSkoleBhg,\n    },\n    {\n        label: intlHelper(intl, `fravær.årsak.${FraværÅrsak.smittevernhensyn}`),\n        value: FraværÅrsak.smittevernhensyn,\n    },\n];\n","import ExpandableInfo from '@navikt/sif-common-core/lib/components/expandable-content/ExpandableInfo';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { Element } from 'nav-frontend-typografi';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormattedHtmlMessage from '../components/formatted-html-message/FormattedHtmlMessage';\n\nconst ÅrsakInfo: React.FunctionComponent = () => {\n    const intl = useIntl();\n    return (\n        <ExpandableInfo title={intlHelper(intl, 'info.årsak.tittel')}>\n            <p style={{ marginTop: '0' }}>\n                <FormattedHtmlMessage id=\"info.årsak.info.1\" />\n            </p>\n            <Element tag=\"h3\">\n                <FormattedHtmlMessage id=\"info.årsak.info.2\" />\n            </Element>\n            <FormattedHtmlMessage id=\"info.årsak.info.3\" />\n        </ExpandableInfo>\n    );\n};\n\nexport default ÅrsakInfo;\n","import React from 'react';\nimport { DateRange, sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList,\n    ModalFormAndListLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport FraværDagerList from './FraværDagerList';\nimport FraværDagFormView from './FraværDagForm';\nimport { FraværDag } from './types';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps {\n    name: FieldNames;\n    minDate: Date;\n    maxDate: Date;\n    dagDescription?: JSX.Element;\n    labels: ModalFormAndListLabels;\n    formHeaderContent?: JSX.Element;\n    dateRangesToDisable?: DateRange[];\n    helgedagerIkkeTillatt?: boolean;\n    maksArbeidstidPerDag?: number;\n}\n\nfunction FraværDagerListAndDialog<FieldNames>({\n    name,\n    minDate,\n    maxDate,\n    validate,\n    dagDescription,\n    labels,\n    formHeaderContent,\n    dateRangesToDisable,\n    helgedagerIkkeTillatt,\n    maksArbeidstidPerDag,\n}: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, FraværDag>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                sortFunc={(fraværDagA: FraværDag, fraværDagB: FraværDag) =>\n                    sortItemsByFom({ fom: fraværDagA.dato }, { fom: fraværDagB.dato })\n                }\n                formRenderer={({ onSubmit, onCancel, item }) => (\n                    <FraværDagFormView\n                        fraværDag={item}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        headerContent={formHeaderContent}\n                        dagDescription={dagDescription}\n                        dateRangesToDisable={dateRangesToDisable}\n                        helgedagerIkkeTillatt={helgedagerIkkeTillatt}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                        maksArbeidstidPerDag={maksArbeidstidPerDag}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FraværDagerList fraværDager={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FraværDagerListAndDialog;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport ExpandableInfo from '@navikt/sif-common-core/lib/components/expandable-content/ExpandableInfo';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { YesOrNo } from '@navikt/sif-common-core/lib/types/YesOrNo';\nimport { DateRange, dateToday } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport {\n    getFieldErrorRenderer,\n    getSummaryFieldErrorRenderer,\n} from '@navikt/sif-common-formik/lib/utils/formikErrorRenderUtils';\nimport { getTypedFormComponents, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport {\n    getDateRangeValidator,\n    getRequiredFieldValidator,\n    getYesOrNoValidator,\n    ValidateDateError,\n    ValidateDateInRangeError,\n    ValidateRequiredFieldError,\n    validateYesOrNoIsAnsweredError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport { ValidationResult } from '@navikt/sif-common-formik/lib/validation/types';\nimport { validateAll } from '@navikt/sif-common-formik/lib/validation/validationUtils';\nimport dayjs from 'dayjs';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport FormattedHtmlMessage from '../components/formatted-html-message/FormattedHtmlMessage';\nimport { isFraværPeriode, mapFormValuesToFraværPeriode, mapFraværPeriodeToFormValues } from './fraværUtilities';\nimport {\n    FraværFieldValidationErrors,\n    validateErSammeÅr,\n    validateFraOgMedForCollision,\n    validateFraværPeriodeCollision,\n    validateNotHelgedag,\n    validateTilOgMedForCollision,\n} from './fraværValidationUtils';\nimport { getFraværÅrsakRadios } from './fraværÅrsakRadios';\nimport { FraværPeriode, FraværPeriodeFormValues } from './types';\nimport ÅrsakInfo from './ÅrsakInfo';\n\nexport interface FraværPeriodeFormLabels {\n    tittel: string;\n    tidsrom: string;\n    fom: string;\n    tom: string;\n    hjemmePgaKorona: string;\n    årsak: string;\n    ok: string;\n    avbryt: string;\n}\n\ninterface Props {\n    fraværPeriode?: Partial<FraværPeriode>;\n    periodeDescription?: JSX.Element;\n    minDate: Date;\n    maxDate: Date;\n    dateRangesToDisable?: DateRange[];\n    helgedagerIkkeTillat?: boolean;\n    begrensTilSammeÅr?: boolean;\n    headerContent?: JSX.Element;\n    onSubmit: (values: FraværPeriode) => void;\n    onCancel: () => void;\n}\n\nenum FraværPeriodeFormFields {\n    fraOgMed = 'fraOgMed',\n    tilOgMed = 'tilOgMed',\n    årsak = 'årsak',\n    hjemmePgaKorona = 'hjemmePgaKorona',\n}\n\nexport const FraværPeriodeFormErrorKeys = {\n    fields: {\n        [FraværPeriodeFormFields.fraOgMed]: [\n            ...Object.keys(ValidateDateError),\n            ValidateDateInRangeError.fromDateIsAfterToDate,\n            FraværFieldValidationErrors.er_helg,\n            FraværFieldValidationErrors.fra_og_til_er_ulike_år,\n            FraværFieldValidationErrors.fra_dato_kolliderer_med_annet_fravær,\n        ],\n        [FraværPeriodeFormFields.tilOgMed]: [\n            ...Object.keys(ValidateDateError),\n            ValidateDateInRangeError.toDateIsBeforeFromDate,\n            FraværFieldValidationErrors.er_helg,\n            FraværFieldValidationErrors.fra_og_til_er_ulike_år,\n            FraværFieldValidationErrors.til_dato_kolliderer_med_annet_fravær,\n        ],\n        [FraværPeriodeFormFields.årsak]: Object.keys(ValidateRequiredFieldError),\n        [FraværPeriodeFormFields.hjemmePgaKorona]: Object.keys(validateYesOrNoIsAnsweredError),\n        ['fraOgMed_tilOgMed']: [FraværFieldValidationErrors.dager_overlapper_med_andre_dager],\n    },\n};\n\nexport const FraværPeriodeFormName = 'fraværPeriodeForm';\n\nconst Form = getTypedFormComponents<FraværPeriodeFormFields, FraværPeriodeFormValues>();\n\nconst FraværPeriodeForm = ({\n    fraværPeriode = {},\n    periodeDescription,\n    maxDate,\n    minDate,\n    dateRangesToDisable,\n    helgedagerIkkeTillat,\n    headerContent,\n    begrensTilSammeÅr,\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: FraværPeriodeFormValues) => {\n        const fraværPeriodeToSubmit = mapFormValuesToFraværPeriode(formValues, fraværPeriode.id);\n        if (isFraværPeriode(fraværPeriodeToSubmit)) {\n            onSubmit(fraværPeriodeToSubmit);\n        } else {\n            throw new Error('FraværPeriodeForm: Formvalues is not a valid FraværPeriode on submit.');\n        }\n    };\n\n    const formLabels: FraværPeriodeFormLabels = {\n        ok: intlHelper(intl, 'fravær.form.felles.ok'),\n        avbryt: intlHelper(intl, 'fravær.form.felles.avbryt'),\n        årsak: intlHelper(intl, 'fravær.form.felles.årsak'),\n        tittel: intlHelper(intl, 'fravær.form.periode.tittel'),\n        tidsrom: intlHelper(intl, 'fravær.form.periode.tidsrom'),\n        hjemmePgaKorona: intlHelper(intl, 'fravær.form.felles.hjemmePgaKorona'),\n        fom: intlHelper(intl, 'fravær.form.periode.fom'),\n        tom: intlHelper(intl, 'fravær.form.periode.tom'),\n    };\n    const fraværÅrsakRadios = getFraværÅrsakRadios(intl);\n\n    const disabledDateRanges = dateRangesToDisable\n        ? dateRangesToDisable.filter((range) => {\n              const { fraOgMed, tilOgMed } = fraværPeriode;\n              return !(\n                  fraOgMed &&\n                  tilOgMed &&\n                  dayjs(fraOgMed).isSame(range.from, 'day') &&\n                  dayjs(tilOgMed).isSame(range.to, 'day')\n              );\n          })\n        : undefined;\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={mapFraværPeriodeToFormValues(fraværPeriode)}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => {\n                    const { fraOgMed, tilOgMed } = formik.values;\n                    const fromDate: Date | undefined = ISOStringToDate(fraOgMed);\n                    const toDate: Date | undefined = ISOStringToDate(tilOgMed);\n                    return (\n                        <Form.Form\n                            onCancel={onCancel}\n                            fieldErrorRenderer={getFieldErrorRenderer(intl, FraværPeriodeFormName)}\n                            summaryFieldErrorRenderer={getSummaryFieldErrorRenderer(intl, FraværPeriodeFormName)}>\n                            <Systemtittel tag=\"h1\">{formLabels.tittel}</Systemtittel>\n                            {headerContent && <Box margin=\"l\">{headerContent}</Box>}\n                            <FormBlock>\n                                <Form.DateIntervalPicker\n                                    legend={formLabels.tidsrom}\n                                    description={periodeDescription}\n                                    validate={() => {\n                                        return validateFraværPeriodeCollision(fromDate, toDate, disabledDateRanges);\n                                    }}\n                                    fromDatepickerProps={{\n                                        label: formLabels.fom,\n                                        name: FraværPeriodeFormFields.fraOgMed,\n                                        fullscreenOverlay: true,\n                                        minDate: minDate,\n                                        maxDate: toDate || maxDate,\n                                        disableWeekend: helgedagerIkkeTillat || false,\n                                        disabledDateRanges,\n                                        dayPickerProps: {\n                                            initialMonth:\n                                                fromDate || toDate || dayjs(dateToday).isAfter(maxDate)\n                                                    ? maxDate\n                                                    : dateToday,\n                                        },\n                                        validate: (value) => {\n                                            const validations: Array<() => ValidationResult<any>> = [];\n                                            if (helgedagerIkkeTillat) {\n                                                validations.push(() => validateNotHelgedag(value));\n                                            }\n                                            if (begrensTilSammeÅr) {\n                                                validations.push(() => validateErSammeÅr(value, tilOgMed));\n                                            }\n                                            validations.push(() =>\n                                                validateFraOgMedForCollision(toDate, disabledDateRanges)\n                                            );\n                                            validations.push(() =>\n                                                getDateRangeValidator.validateFromDate({\n                                                    required: true,\n                                                    min: minDate,\n                                                    max: maxDate,\n                                                    toDate,\n                                                })(value)\n                                            );\n                                            return validateAll(validations);\n                                        },\n                                        onChange: () => {\n                                            setTimeout(() => {\n                                                formik.validateField(FraværPeriodeFormFields.fraOgMed);\n                                                formik.validateField(FraværPeriodeFormFields.tilOgMed);\n                                            });\n                                        },\n                                    }}\n                                    toDatepickerProps={{\n                                        label: formLabels.tom,\n                                        name: FraværPeriodeFormFields.tilOgMed,\n                                        fullscreenOverlay: true,\n                                        minDate: fromDate || minDate,\n                                        maxDate,\n                                        disableWeekend: helgedagerIkkeTillat || false,\n                                        disabledDateRanges,\n                                        dayPickerProps: {\n                                            initialMonth:\n                                                toDate || fromDate || dayjs(dateToday).isAfter(maxDate)\n                                                    ? maxDate\n                                                    : dateToday,\n                                        },\n                                        validate: (value) => {\n                                            const validations: Array<() => ValidationResult<any>> = [];\n                                            if (helgedagerIkkeTillat) {\n                                                validations.push(() => validateNotHelgedag(value));\n                                            }\n                                            if (begrensTilSammeÅr) {\n                                                validations.push(() => validateErSammeÅr(fraOgMed, value));\n                                            }\n                                            validations.push(() =>\n                                                validateTilOgMedForCollision(fromDate, disabledDateRanges)\n                                            );\n                                            validations.push(() =>\n                                                getDateRangeValidator.validateToDate({\n                                                    required: true,\n                                                    min: minDate,\n                                                    max: maxDate,\n                                                    fromDate,\n                                                })(value)\n                                            );\n\n                                            return validateAll(validations);\n                                        },\n                                        onChange: () => {\n                                            setTimeout(() => {\n                                                formik.validateField(FraværPeriodeFormFields.fraOgMed);\n                                                formik.validateField(FraværPeriodeFormFields.tilOgMed);\n                                            });\n                                        },\n                                    }}\n                                />\n                            </FormBlock>\n                            <FormBlock>\n                                <Form.YesOrNoQuestion\n                                    legend={formLabels.hjemmePgaKorona}\n                                    name={FraværPeriodeFormFields.hjemmePgaKorona}\n                                    validate={getYesOrNoValidator()}\n                                    description={\n                                        <ExpandableInfo title={intlHelper(intl, 'info.smittevern.tittel')}>\n                                            <FormattedHtmlMessage id=\"info.smittevern.info.html\" />\n                                        </ExpandableInfo>\n                                    }\n                                />\n                            </FormBlock>\n\n                            {formik.values.hjemmePgaKorona === YesOrNo.YES && (\n                                <FormBlock>\n                                    <Form.RadioPanelGroup\n                                        legend={formLabels.årsak}\n                                        name={FraværPeriodeFormFields.årsak}\n                                        validate={getRequiredFieldValidator()}\n                                        radios={fraværÅrsakRadios}\n                                        description={<ÅrsakInfo />}\n                                    />\n                                </FormBlock>\n                            )}\n                        </Form.Form>\n                    );\n                }}\n            />\n        </>\n    );\n};\n\nexport default FraværPeriodeForm;\n","import React from 'react';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { FraværPeriode } from './types';\nimport FraværListItem from './FraværListItem';\n\ninterface Props {\n    fraværPerioder: FraværPeriode[];\n    onEdit?: (fraværPeriode: FraværPeriode) => void;\n    onDelete?: (fraværPeriode: FraværPeriode) => void;\n    useTrashcan?: boolean;\n}\n\nconst FraværPerioderList = ({ fraværPerioder = [], onDelete, onEdit, useTrashcan }: Props) => {\n    const getDateTitleString = (fraværPeriode: FraværPeriode) =>\n        `${prettifyDateExtended(fraværPeriode.fraOgMed)} - ${prettifyDateExtended(fraværPeriode.tilOgMed)}`;\n\n    const renderFraværPeriodeLabel = (fraværPeriode: FraværPeriode): React.ReactNode => {\n        const title = getDateTitleString(fraværPeriode);\n        return (\n            <FraværListItem\n                title={title}\n                årsak={fraværPeriode.årsak}\n                onEdit={onEdit ? () => onEdit(fraværPeriode) : undefined}\n            />\n        );\n    };\n\n    return (\n        <ItemList<FraværPeriode>\n            getItemId={(fraværPeriode) => fraværPeriode.id}\n            getItemTitle={(fraværPeriode) => getDateTitleString(fraværPeriode)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderFraværPeriodeLabel}\n            items={fraværPerioder.filter((fraværPeriode) => fraværPeriode.id !== undefined)}\n            useTrashcan={useTrashcan || false}\n        />\n    );\n};\n\nexport default FraværPerioderList;\n","import React from 'react';\nimport { DateRange, sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList,\n    ModalFormAndListLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport FraværPeriodeForm from './FraværPeriodeForm';\nimport FraværPerioderList from './FraværPerioderList';\nimport { FraværPeriode } from './types';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps {\n    name: FieldNames;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n    periodeDescription?: JSX.Element;\n    formHeaderContent?: JSX.Element;\n    dateRangesToDisable?: DateRange[];\n    begrensTilSammeÅr?: boolean;\n    helgedagerIkkeTillat?: boolean;\n}\n\nfunction FraværPerioderListAndDialog<FieldNames>({\n    name,\n    minDate,\n    maxDate,\n    dateRangesToDisable,\n    periodeDescription,\n    formHeaderContent,\n    begrensTilSammeÅr = true,\n    validate,\n    labels,\n    helgedagerIkkeTillat,\n}: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, FraværPeriode>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                sortFunc={(fraværPeriodeA: FraværPeriode, fraværPeriodeB: FraværPeriode) =>\n                    sortItemsByFom({ fom: fraværPeriodeA.fraOgMed }, { fom: fraværPeriodeB.tilOgMed })\n                }\n                formRenderer={({ onSubmit, onCancel, item }) => (\n                    <FraværPeriodeForm\n                        fraværPeriode={item}\n                        periodeDescription={periodeDescription}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        headerContent={formHeaderContent}\n                        dateRangesToDisable={dateRangesToDisable}\n                        helgedagerIkkeTillat={helgedagerIkkeTillat}\n                        begrensTilSammeÅr={begrensTilSammeÅr}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FraværPerioderList fraværPerioder={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FraværPerioderListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport {\n    getFieldErrorRenderer,\n    getSummaryFieldErrorRenderer,\n} from '@navikt/sif-common-formik/lib/utils/formikErrorRenderUtils';\n\nimport { date1YearAgo, date1YearFromNow, dateToday } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { FraværDag, FraværPeriode } from '../../../forms/fravær';\nimport FraværDagerListAndDialog from '../../../forms/fravær/FraværDagerListAndDialog';\nimport FraværDagFormView, { FraværDagFormErrorKeys, FraværDagFormName } from '../../../forms/fravær/FraværDagForm';\nimport fraværMessages from '../../../forms/fravær/fraværMessages';\nimport FraværPeriodeForm, {\n    FraværPeriodeFormErrorKeys,\n    FraværPeriodeFormName,\n} from '../../../forms/fravær/FraværPeriodeForm';\nimport FraværPerioderListAndDialog from '../../../forms/fravær/FraværPerioderListAndDialog';\nimport { fraværDagToFraværDateRange, fraværPeriodeToDateRange } from '../../../forms/fravær/fraværUtilities';\nimport { validateNoCollisions } from '../../../forms/fravær/fraværValidationUtils';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport { validateAll } from '@navikt/sif-common-formik/lib/validation/validationUtils';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\n\nenum FormField {\n    perioder = 'perioder',\n    dager = 'dager',\n}\n\ninterface FormValues {\n    [FormField.perioder]: FraværPeriode[];\n    [FormField.dager]: FraværDag[];\n}\n\nconst initialValues: FormValues = { [FormField.perioder]: [], [FormField.dager]: [] };\n\nconst FraværExample: React.FunctionComponent = () => {\n    const [fraværPeriodeSingleFormValues, setFraværPeriodeSingleFormValues] = useState<\n        Partial<FraværPeriode> | undefined\n    >(undefined);\n    const [fraværDagSingleFormValues, setFraværDagSingleFormValues] = useState<Partial<FraværDag> | undefined>(\n        undefined\n    );\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={(formik) => {\n                        const { values } = formik;\n                        const dateRangesToDisable = [\n                            ...values.perioder.map(fraværPeriodeToDateRange),\n                            ...values.dager.map(fraværDagToFraværDateRange),\n                        ];\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={getFieldErrorRenderer(intl, 'fraværExample')}\n                                summaryFieldErrorRenderer={getSummaryFieldErrorRenderer(intl, 'fraværExample')}>\n                                <FormBlock>\n                                    <FraværPerioderListAndDialog<FormField>\n                                        name={FormField.perioder}\n                                        minDate={date1YearAgo}\n                                        maxDate={dateToday}\n                                        periodeDescription={\n                                            <p style={{ marginTop: '.5rem' }}>\n                                                Du kan kun søke for ett og samme år i en søknad. Får å søke for flere\n                                                år, må du sende en søknad for hvert år.\n                                            </p>\n                                        }\n                                        validate={(value) =>\n                                            validateAll([\n                                                () => getListValidator({ required: true })(value),\n                                                () => validateNoCollisions(values.dager, values.perioder),\n                                            ])\n                                        }\n                                        labels={{\n                                            addLabel: 'Legg til periode',\n                                            modalTitle: 'Fravær hele dager',\n                                        }}\n                                        dateRangesToDisable={dateRangesToDisable}\n                                        helgedagerIkkeTillat={true}\n                                    />\n                                </FormBlock>\n                                <FormBlock>\n                                    <FraværDagerListAndDialog<FormField>\n                                        name={FormField.dager}\n                                        minDate={date1YearAgo}\n                                        maxDate={dateToday}\n                                        validate={(value) =>\n                                            validateAll([\n                                                () => getListValidator({ required: true })(value),\n                                                () => validateNoCollisions(values.dager, values.perioder),\n                                            ])\n                                        }\n                                        labels={{\n                                            addLabel: 'Legg til dag med delvis fravær',\n                                            listTitle: 'Dager med delvis fravær',\n                                            modalTitle: 'Fravær deler av dag',\n                                            emptyListText: 'Ingen dager er lagt til',\n                                        }}\n                                        dateRangesToDisable={dateRangesToDisable}\n                                        helgedagerIkkeTillatt={true}\n                                        maksArbeidstidPerDag={24}\n                                    />\n                                </FormBlock>\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrors={FraværPeriodeFormErrorKeys}\n                    formName={FraværPeriodeFormName}\n                    intlMessages={fraværMessages}\n                />\n                <FormValidationErrorMessages\n                    validationErrors={FraværDagFormErrorKeys}\n                    formName={FraværDagFormName}\n                    intlMessages={fraværMessages}\n                />\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialoger</Undertittel>\n            </Box>\n\n            <FormBlock>\n                <DialogFormWrapper>\n                    <Panel border={true}>\n                        <FraværPeriodeForm\n                            minDate={date1YearAgo}\n                            maxDate={date1YearFromNow}\n                            fraværPeriode={{}}\n                            onSubmit={setFraværPeriodeSingleFormValues}\n                            onCancel={() => {\n                                // tslint:disable-next-line:no-console\n                                return console.log('cancel me');\n                            }}\n                        />\n                    </Panel>\n                    <SubmitPreview values={fraværPeriodeSingleFormValues} />\n                </DialogFormWrapper>\n            </FormBlock>\n\n            <FormBlock>\n                <DialogFormWrapper>\n                    <Panel border={true}>\n                        <FraværDagFormView\n                            minDate={date1YearAgo}\n                            maxDate={date1YearFromNow}\n                            fraværDag={{}}\n                            onSubmit={setFraværDagSingleFormValues}\n                            onCancel={() => {\n                                // tslint:disable-next-line:no-console\n                                return console.log('cancel me');\n                            }}\n                        />\n                    </Panel>\n                    <SubmitPreview values={fraværDagSingleFormValues} />\n                </DialogFormWrapper>\n            </FormBlock>\n\n            <MessagesPreview messages={fraværMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default FraværExample;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport {\n    getFieldErrorRenderer,\n    getSummaryFieldErrorRenderer,\n} from '@navikt/sif-common-formik/lib/utils/formikErrorRenderUtils';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport {\n    getDateValidator,\n    getFødselsnummerValidator,\n    getRequiredFieldValidator,\n    ValidateDateError,\n    ValidateFødselsnummerError,\n    ValidateRequiredFieldError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport { validateAll } from '@navikt/sif-common-formik/lib/validation/validationUtils';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport annetBarnUtils from './annetBarnUtils';\nimport { AnnetBarn, AnnetBarnFormValues } from './types';\n\nexport interface AnnetBarnFormLabels {\n    title: string;\n    fnr: string;\n    placeholderFnr?: string;\n    fødselsdato: string;\n    navn: string;\n    placeholderNavn?: string;\n    okButton: string;\n    cancelButton: string;\n    aldersGrenseText?: string;\n}\n\nenum AnnetBarnFormFields {\n    fnr = 'fnr',\n    fødselsdato = 'fødselsdato',\n    navn = 'navn',\n}\n\nexport const AnnetBarnFormErrorKeys = {\n    fields: {\n        [AnnetBarnFormFields.navn]: [...Object.keys(ValidateRequiredFieldError)],\n        [AnnetBarnFormFields.fødselsdato]: [\n            ...Object.keys(ValidateRequiredFieldError),\n            ...Object.keys(ValidateDateError),\n        ],\n        [AnnetBarnFormFields.fnr]: [\n            ...Object.keys(ValidateRequiredFieldError),\n            ...Object.keys(ValidateFødselsnummerError),\n        ],\n    },\n};\n\nexport const AnnetBarnFormName = 'annetBarnForm';\n\ninterface Props {\n    annetBarn?: Partial<AnnetBarn>;\n    labels?: Partial<AnnetBarnFormLabels>;\n    minDate: Date;\n    maxDate: Date;\n    disallowedFødselsnumre?: string[];\n    onSubmit: (values: AnnetBarn) => void;\n    onCancel: () => void;\n}\n\nconst Form = getTypedFormComponents<AnnetBarnFormFields, AnnetBarnFormValues>();\n\nconst AnnetBarnForm = ({\n    annetBarn = { fnr: '', navn: '', fødselsdato: undefined, id: undefined },\n    labels,\n    minDate,\n    maxDate,\n    disallowedFødselsnumre,\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: AnnetBarnFormValues) => {\n        const annetBarnToSubmit = annetBarnUtils.mapFormValuesToPartialAnnetBarn(formValues, annetBarn.id);\n        if (annetBarnUtils.isAnnetBarn(annetBarnToSubmit)) {\n            onSubmit(annetBarnToSubmit);\n        } else {\n            throw new Error('AnnetBarnForm: Formvalues is not a valid AnnetBarn on submit.');\n        }\n    };\n\n    const defaultLabels: AnnetBarnFormLabels = {\n        title: intlHelper(intl, 'annetBarn.form.title'),\n        fnr: intlHelper(intl, 'annetBarn.form.fnr'),\n        fødselsdato: intlHelper(intl, 'annetBarn.form.fødselsdato'),\n        navn: intlHelper(intl, 'annetBarn.form.navn'),\n        okButton: intlHelper(intl, 'annetBarn.form.okButton'),\n        cancelButton: intlHelper(intl, 'annetBarn.form.cancelButton'),\n    };\n\n    const formLabels: AnnetBarnFormLabels = { ...defaultLabels, ...labels };\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={annetBarnUtils.mapAnnetBarnToFormValues(annetBarn)}\n                onSubmit={onFormikSubmit}\n                renderForm={() => (\n                    <Form.Form\n                        onCancel={onCancel}\n                        fieldErrorRenderer={getFieldErrorRenderer(intl, AnnetBarnFormName)}\n                        summaryFieldErrorRenderer={getSummaryFieldErrorRenderer(intl, AnnetBarnFormName)}>\n                        <Systemtittel tag=\"h1\">{formLabels.title}</Systemtittel>\n                        <FormBlock>\n                            <Form.Input\n                                name={AnnetBarnFormFields.navn}\n                                label={formLabels.navn}\n                                validate={getRequiredFieldValidator()}\n                                placeholder={formLabels.placeholderNavn}\n                            />\n                        </FormBlock>\n                        <FormBlock>\n                            <Form.DatePicker\n                                name={AnnetBarnFormFields.fødselsdato}\n                                label={\n                                    formLabels.aldersGrenseText\n                                        ? `${formLabels.fødselsdato} ${formLabels.aldersGrenseText}`\n                                        : `${formLabels.fødselsdato}`\n                                }\n                                validate={(value) =>\n                                    validateAll([\n                                        () => getRequiredFieldValidator()(value),\n                                        () => getDateValidator({ min: minDate, max: maxDate })(value),\n                                    ])\n                                }\n                                maxDate={maxDate}\n                                minDate={minDate}\n                                showYearSelector={true}\n                            />\n                        </FormBlock>\n\n                        <FormBlock>\n                            <Form.Input\n                                name={AnnetBarnFormFields.fnr}\n                                label={formLabels.fnr}\n                                validate={(value) =>\n                                    validateAll([\n                                        () => getRequiredFieldValidator()(value),\n                                        () =>\n                                            getFødselsnummerValidator({\n                                                required: true,\n                                                disallowedValues: disallowedFødselsnumre,\n                                            })(value),\n                                    ])\n                                }\n                                inputMode=\"numeric\"\n                                maxLength={11}\n                                placeholder={formLabels.placeholderFnr}\n                            />\n                        </FormBlock>\n                    </Form.Form>\n                )}\n            />\n        </>\n    );\n};\n\nexport default AnnetBarnForm;\n","import { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { hasValue } from '@navikt/sif-common-formik/lib/validation/validationUtils';\nimport { guid } from 'nav-frontend-js-utils';\nimport { AnnetBarn, AnnetBarnFormValues } from './types';\n\nconst isAnnetBarn = (annetBarn: Partial<AnnetBarn>): annetBarn is AnnetBarn => {\n    const { fnr, navn, fødselsdato } = annetBarn;\n    return hasValue(fnr) && hasValue(navn) && hasValue(fødselsdato);\n};\n\nconst mapFormValuesToPartialAnnetBarn = (\n    formValues: AnnetBarnFormValues,\n    id: string | undefined\n): Partial<AnnetBarn> => {\n    return {\n        ...formValues,\n        id: id || guid(),\n        fødselsdato: ISOStringToDate(formValues.fødselsdato),\n    };\n};\n\nconst mapAnnetBarnToFormValues = (annetBarn: Partial<AnnetBarn>): AnnetBarnFormValues => {\n    return {\n        fnr: annetBarn.fnr,\n        navn: annetBarn.navn,\n        fødselsdato: dateToISOString(annetBarn.fødselsdato),\n    };\n};\n\nconst annetBarnUtils = {\n    mapAnnetBarnToFormValues,\n    mapFormValuesToPartialAnnetBarn,\n    isAnnetBarn,\n};\n\nexport default annetBarnUtils;\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { AnnetBarn } from './types';\nimport './annetBarnList.less';\n\ninterface Props {\n    annetBarn: AnnetBarn[];\n    onEdit?: (annetBarn: AnnetBarn) => void;\n    onDelete?: (annetBarn: AnnetBarn) => void;\n}\n\nconst bem = bemUtils('annetBarnList');\n\nconst AnnetBarnList = ({ annetBarn = [], onDelete, onEdit }: Props) => {\n    const renderAnnetBarnLabel = (annetBarn: AnnetBarn): React.ReactNode => {\n        return (\n            <div className={bem.element('label')}>\n                <span className={bem.element('dato')}>{prettifyDate(annetBarn.fødselsdato)}</span>\n                <span className={bem.element('land')}>\n                    {onEdit && <ActionLink onClick={() => onEdit(annetBarn)}>{annetBarn.navn}</ActionLink>}\n                    {!onEdit && <span>{annetBarn.navn}</span>}\n                </span>\n            </div>\n        );\n    };\n\n    return (\n        <ItemList<AnnetBarn>\n            getItemId={(annetBarn) => annetBarn.id}\n            getItemTitle={(annetBarn) => annetBarn.navn}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderAnnetBarnLabel}\n            items={annetBarn.filter((annetBarn) => annetBarn.id !== undefined)}\n        />\n    );\n};\n\nexport default AnnetBarnList;\n","import React from 'react';\nimport {\n    FormikModalFormAndList,\n    ModalFormAndListLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport AnnetBarnForm from './AnnetBarnForm';\nimport AnnetBarnList from './AnnetBarnList';\nimport { AnnetBarn } from './types';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps {\n    name: FieldNames;\n    labels: ModalFormAndListLabels;\n    minDate: Date;\n    maxDate: Date;\n    disallowedFødselsnumre?: string[];\n    aldersGrenseText?: string;\n    placeholderFnr?: string;\n    placeholderNavn?: string;\n}\n\nfunction AnnetBarnListAndDialog<FieldNames>({\n    name,\n    validate,\n    labels,\n    minDate,\n    maxDate,\n    disallowedFødselsnumre,\n    aldersGrenseText,\n    placeholderFnr,\n    placeholderNavn,\n}: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, AnnetBarn>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                formRenderer={({ onSubmit, onCancel, item }) => (\n                    <AnnetBarnForm\n                        annetBarn={item}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        disallowedFødselsnumre={disallowedFødselsnumre}\n                        labels={{\n                            aldersGrenseText: aldersGrenseText,\n                            placeholderFnr: placeholderFnr,\n                            placeholderNavn: placeholderNavn,\n                        }}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <AnnetBarnList annetBarn={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default AnnetBarnListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { date4YearsAgo, dateToday } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport {\n    getFieldErrorRenderer,\n    getSummaryFieldErrorRenderer,\n} from '@navikt/sif-common-formik/lib/utils/formikErrorRenderUtils';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport AnnetBarnForm, { AnnetBarnFormErrorKeys, AnnetBarnFormName } from '../../../forms/annet-barn/AnnetBarnForm';\nimport AnnetBarnListAndDialog from '../../../forms/annet-barn/AnnetBarnListAndDialog';\nimport annetBarnMessages from '../../../forms/annet-barn/annetBarnMessages';\nimport { AnnetBarn } from '../../../forms/annet-barn/types';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\n\nenum FormField {\n    'annetBarn' = 'annetBarn',\n}\n\ninterface FormValues {\n    [FormField.annetBarn]: AnnetBarn[];\n}\nconst initialValues: FormValues = { annetBarn: [] };\n\nconst AnnetBarnExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<AnnetBarn> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={getFieldErrorRenderer(intl, AnnetBarnFormName)}\n                                summaryFieldErrorRenderer={getSummaryFieldErrorRenderer(intl, AnnetBarnFormName)}>\n                                <AnnetBarnListAndDialog<FormField>\n                                    name={FormField.annetBarn}\n                                    validate={getListValidator({ required: true })}\n                                    labels={{\n                                        addLabel: 'Legg til barn',\n                                        listTitle: 'Registrerte barn',\n                                        modalTitle: 'Legg til barn',\n                                        emptyListText: 'Ingen barn er lagt til',\n                                    }}\n                                    minDate={date4YearsAgo}\n                                    maxDate={dateToday}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrors={AnnetBarnFormErrorKeys}\n                    formName={'annetBarn'}\n                    intlMessages={annetBarnMessages}\n                />\n            </Box>\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <AnnetBarnForm\n                        annetBarn={{}}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                        minDate={date4YearsAgo}\n                        maxDate={dateToday}\n                    />\n                </Panel>\n                <SubmitPreview values={singleFormValues} />\n            </DialogFormWrapper>\n\n            <MessagesPreview messages={annetBarnMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default AnnetBarnExample;\n","import { ApiStringDate } from '@navikt/sif-common-core/lib/types/ApiStringDate';\nimport { YesOrNo } from '@navikt/sif-common-core/lib/types/YesOrNo';\n\nexport enum Næringstype {\n    'FISKE' = 'FISKE',\n    'JORDBRUK_SKOGBRUK' = 'JORDBRUK_SKOGBRUK',\n    'DAGMAMMA' = 'DAGMAMMA',\n    'ANNEN' = 'ANNEN',\n}\n\nexport enum VirksomhetFormField {\n    'næringstyper' = 'næringstyper',\n    'fiskerErPåBladB' = 'fiskerErPåBladB',\n    'fom' = 'fom',\n    'tom' = 'tom',\n    'næringsinntekt' = 'næringsinntekt',\n    'erPågående' = 'erPågående',\n    'navnPåVirksomheten' = 'navnPåVirksomheten',\n    'organisasjonsnummer' = 'organisasjonsnummer',\n    'registrertINorge' = 'registrertINorge',\n    'registrertILand' = 'registrertILand',\n    'harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene' = 'harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene',\n    'blittYrkesaktivDato' = 'blittYrkesaktivDato',\n    'hattVarigEndringAvNæringsinntektSiste4Kalenderår' = 'hattVarigEndringAvNæringsinntektSiste4Kalenderår',\n    'varigEndringINæringsinntekt_dato' = 'varigEndringINæringsinntekt_dato',\n    'varigEndringINæringsinntekt_inntektEtterEndring' = 'varigEndringINæringsinntekt_inntektEtterEndring',\n    'varigEndringINæringsinntekt_forklaring' = 'varigEndringINæringsinntekt_forklaring',\n    'endretNæringsinntektInformasjon' = 'endretNæringsinntektInformasjon',\n    'harRegnskapsfører' = 'harRegnskapsfører',\n    'regnskapsfører' = 'regnskapsfører',\n    'regnskapsfører_navn' = 'regnskapsfører_navn',\n    'regnskapsfører_telefon' = 'regnskapsfører_telefon',\n}\n\nexport interface Virksomhet {\n    id?: string;\n    [VirksomhetFormField.næringstyper]: Næringstype[];\n    [VirksomhetFormField.fiskerErPåBladB]?: YesOrNo;\n    [VirksomhetFormField.fom]: Date;\n    [VirksomhetFormField.tom]?: Date;\n    [VirksomhetFormField.næringsinntekt]?: number;\n    [VirksomhetFormField.erPågående]?: boolean;\n    [VirksomhetFormField.navnPåVirksomheten]: string;\n    [VirksomhetFormField.organisasjonsnummer]?: string;\n    [VirksomhetFormField.registrertINorge]: YesOrNo;\n    [VirksomhetFormField.registrertILand]?: string;\n    [VirksomhetFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene]?: YesOrNo;\n    [VirksomhetFormField.blittYrkesaktivDato]?: Date;\n    [VirksomhetFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår]?: YesOrNo;\n    [VirksomhetFormField.varigEndringINæringsinntekt_dato]?: Date;\n    [VirksomhetFormField.varigEndringINæringsinntekt_inntektEtterEndring]?: number;\n    [VirksomhetFormField.varigEndringINæringsinntekt_forklaring]?: string;\n    [VirksomhetFormField.harRegnskapsfører]: YesOrNo;\n    [VirksomhetFormField.regnskapsfører_navn]?: string;\n    [VirksomhetFormField.regnskapsfører_telefon]?: string;\n}\nexport type VirksomhetFormValues = Partial<\n    Omit<Virksomhet, 'fom' | 'tom' | 'blittYrkesaktivDato' | 'varigEndringINæringsinntekt_dato'> & {\n        [VirksomhetFormField.fom]: string;\n        [VirksomhetFormField.tom]?: string;\n        [VirksomhetFormField.blittYrkesaktivDato]?: string;\n        [VirksomhetFormField.varigEndringINæringsinntekt_dato]?: string;\n    }\n>;\n\nexport const isVirksomhet = (virksomhet: Partial<Virksomhet>): virksomhet is Virksomhet => {\n    return virksomhet !== undefined;\n};\n\nexport interface VirksomhetApiData {\n    næringstyper: Næringstype[];\n    fiskerErPåBladB?: boolean;\n    fraOgMed: ApiStringDate;\n    tilOgMed?: ApiStringDate | null;\n    erNyoppstartet: boolean;\n    næringsinntekt?: number;\n    navnPåVirksomheten: string;\n    organisasjonsnummer?: string;\n    registrertINorge: boolean;\n    registrertIUtlandet?: {\n        landkode: string;\n        landnavn: string;\n    };\n    yrkesaktivSisteTreFerdigliknedeÅrene?: {\n        oppstartsdato: ApiStringDate;\n    };\n    varigEndring?: {\n        dato: ApiStringDate;\n        inntektEtterEndring: number;\n        forklaring: string;\n    };\n    regnskapsfører?: {\n        navn: string;\n        telefon: string;\n    };\n}\n","/* eslint-disable react/display-name */\nimport React, { useState } from 'react';\nimport Tabs from 'nav-frontend-tabs';\nimport 'nav-frontend-tabs-style';\nimport PageIntro from '../../components/page-intro/PageIntro';\nimport { RouteConfig } from '../../config/routeConfig';\nimport BostedUtlandExample from './BostedUtlandExample';\nimport FerieuttakExample from './FerieuttakExample';\nimport FosterbarnExample from './FosterbarnExample';\nimport TidsperiodeExample from './TidsperiodeExample';\nimport UtenlandsoppholdIPeriodenExample from './UtenlandsoppholdExample';\nimport FraværExample from './FraværExample';\nimport AnnetBarnExample from './AnnetBarnExample';\n\nconst tabRoutes: RouteConfig[] = [\n    {\n        path: 'fravær',\n        renderContent: () => <FraværExample />,\n        title: 'Fravær',\n    },\n    {\n        path: 'tidsrom',\n        renderContent: () => <TidsperiodeExample />,\n        title: 'Tidsperiode',\n    },\n    {\n        path: 'utenlandsopphold',\n        renderContent: () => <UtenlandsoppholdIPeriodenExample />,\n        title: 'Utenlandsopphold i perioden',\n    },\n    {\n        path: 'bosted-utland',\n        renderContent: () => <BostedUtlandExample />,\n        title: 'Bosted utland',\n    },\n    {\n        path: 'ferieuttak',\n        renderContent: () => <FerieuttakExample />,\n        title: 'Ferieuttak i perioden',\n    },\n    {\n        path: 'fosterbarn',\n        renderContent: () => <FosterbarnExample />,\n        title: 'Fosterbarn',\n    },\n    {\n        path: 'annetbarn',\n        renderContent: () => <AnnetBarnExample />,\n        title: 'Annet Barn',\n    },\n];\n\nconst DialogForms = () => {\n    const [path, setPath] = useState(tabRoutes[0].path);\n    const activeRoute = tabRoutes.find((r) => {\n        return r.path === path;\n    });\n    return (\n        <>\n            <PageIntro title=\"Dialogskjema\">\n                Skjema for ferieuttak i perioden, utenlandsopphold i perioden og bosted i utlandet.\n            </PageIntro>\n            <Tabs\n                onChange={(evt, idx) => setPath(tabRoutes[idx].path)}\n                tabs={tabRoutes.map((r) => ({\n                    label: r.title,\n                    active: r.path === path ? 'true' : 'false',\n                }))}\n            />\n            {activeRoute && activeRoute.renderContent()}\n        </>\n    );\n};\n\nexport default DialogForms;\n","import { date4YearsAgo } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport dayjs from 'dayjs';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Næringstype, Virksomhet, VirksomhetFormValues } from './types';\n\nexport const harFiskerNæringstype = (næringstyper: Næringstype[]): boolean =>\n    næringstyper.find((n) => n === Næringstype.FISKE) !== undefined;\n\nexport const erVirksomhetRegnetSomNyoppstartet = (oppstartsdato: Date) => {\n    return dayjs(oppstartsdato).startOf('day').isAfter(date4YearsAgo);\n};\n\nexport const mapFormValuesToVirksomhet = (\n    formValues: VirksomhetFormValues,\n    id: string | undefined\n): Partial<Virksomhet> => {\n    return {\n        ...formValues,\n        id: id || guid(),\n        fom: ISOStringToDate(formValues.fom),\n        tom: ISOStringToDate(formValues.tom),\n        blittYrkesaktivDato: ISOStringToDate(formValues.blittYrkesaktivDato),\n        varigEndringINæringsinntekt_dato: ISOStringToDate(formValues.varigEndringINæringsinntekt_dato),\n    };\n};\n\nexport const mapVirksomhetToFormValues = (virksomhet: Virksomhet): VirksomhetFormValues => {\n    return {\n        ...virksomhet,\n        fom: dateToISOString(virksomhet.fom),\n        tom: dateToISOString(virksomhet.tom),\n        blittYrkesaktivDato: dateToISOString(virksomhet.blittYrkesaktivDato),\n        varigEndringINæringsinntekt_dato: dateToISOString(virksomhet.varigEndringINæringsinntekt_dato),\n    };\n};\n","import { formatDateToApiFormat } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { YesOrNo, getCountryName } from '@navikt/sif-common-formik/lib';\nimport { Virksomhet, VirksomhetApiData } from './types';\nimport { erVirksomhetRegnetSomNyoppstartet, harFiskerNæringstype } from './virksomhetUtils';\n\nexport const mapVirksomhetToVirksomhetApiData = (\n    locale: string,\n    virksomhet: Virksomhet,\n    harBesvartFiskerPåBladB?: boolean\n): VirksomhetApiData => {\n    const registrertINorge = virksomhet.registrertINorge === YesOrNo.YES;\n    const harRegnskapsfører = virksomhet.harRegnskapsfører === YesOrNo.YES;\n    const erNyoppstartet = erVirksomhetRegnetSomNyoppstartet(virksomhet.fom);\n\n    const data: VirksomhetApiData = {\n        næringstyper: [...virksomhet.næringstyper],\n        navnPåVirksomheten: virksomhet.navnPåVirksomheten,\n        registrertINorge,\n        ...(registrertINorge\n            ? {\n                  organisasjonsnummer: virksomhet.organisasjonsnummer,\n              }\n            : {\n                  registrertIUtlandet: virksomhet.registrertILand\n                      ? {\n                            landkode: virksomhet.registrertILand,\n                            landnavn: getCountryName(virksomhet.registrertILand, locale),\n                        }\n                      : undefined,\n              }),\n        fraOgMed: formatDateToApiFormat(virksomhet.fom),\n        tilOgMed: virksomhet.erPågående || virksomhet.tom === undefined ? null : formatDateToApiFormat(virksomhet.tom),\n        erNyoppstartet,\n    };\n\n    if (harFiskerNæringstype(virksomhet.næringstyper) && harBesvartFiskerPåBladB !== true) {\n        data.fiskerErPåBladB = virksomhet.fiskerErPåBladB === YesOrNo.YES;\n    }\n\n    /** Bedrift regnet som nyoppstartet  */\n    if (erNyoppstartet === true) {\n        data.næringsinntekt = virksomhet.næringsinntekt;\n        const harBlittAktiv = virksomhet.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene === YesOrNo.YES;\n        if (harBlittAktiv && virksomhet.blittYrkesaktivDato) {\n            data.yrkesaktivSisteTreFerdigliknedeÅrene = {\n                oppstartsdato: formatDateToApiFormat(virksomhet.blittYrkesaktivDato),\n            };\n        }\n    }\n\n    /** Bedrift ikke regnet som nyoppstartet  */\n    if (erNyoppstartet === false) {\n        const harHattVarigEndring = virksomhet.hattVarigEndringAvNæringsinntektSiste4Kalenderår === YesOrNo.YES;\n        const {\n            varigEndringINæringsinntekt_dato,\n            varigEndringINæringsinntekt_forklaring,\n            varigEndringINæringsinntekt_inntektEtterEndring,\n        } = virksomhet;\n        if (\n            harHattVarigEndring &&\n            varigEndringINæringsinntekt_dato &&\n            varigEndringINæringsinntekt_inntektEtterEndring !== undefined &&\n            varigEndringINæringsinntekt_forklaring\n        ) {\n            data.varigEndring = {\n                dato: formatDateToApiFormat(varigEndringINæringsinntekt_dato),\n                forklaring: varigEndringINæringsinntekt_forklaring,\n                inntektEtterEndring: varigEndringINæringsinntekt_inntektEtterEndring,\n            };\n        }\n    }\n\n    if (harRegnskapsfører && virksomhet.regnskapsfører_navn && virksomhet.regnskapsfører_telefon) {\n        data.regnskapsfører = {\n            navn: virksomhet.regnskapsfører_navn,\n            telefon: virksomhet.regnskapsfører_telefon,\n        };\n    }\n\n    return data;\n};\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport CounsellorPanel from '@navikt/sif-common-core/lib/components/counsellor-panel/CounsellorPanel';\nimport ExpandableInfo from '@navikt/sif-common-core/lib/components/expandable-content/ExpandableInfo';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport ResponsivePanel from '@navikt/sif-common-core/lib/components/responsive-panel/ResponsivePanel';\nimport { date3YearsAgo, date4YearsAgo, dateToday } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport {\n    getFieldErrorRenderer,\n    getSummaryFieldErrorRenderer,\n} from '@navikt/sif-common-formik/lib/utils/formikErrorRenderUtils';\nimport { FormikYesOrNoQuestion, getTypedFormComponents, ISOStringToDate, YesOrNo } from '@navikt/sif-common-formik/lib';\nimport {\n    getListValidator,\n    getNumberValidator,\n    getOrgNumberValidator,\n    getRequiredFieldValidator,\n    getStringValidator,\n    getYesOrNoValidator,\n    ValidateListError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport { FormikProps } from 'formik';\nimport { Systemtittel, Undertittel } from 'nav-frontend-typografi';\nimport { isVirksomhet, Næringstype, Virksomhet, VirksomhetFormField, VirksomhetFormValues } from './types';\nimport {\n    erVirksomhetRegnetSomNyoppstartet,\n    harFiskerNæringstype,\n    mapFormValuesToVirksomhet,\n    mapVirksomhetToFormValues,\n} from './virksomhetUtils';\n\ninterface Props {\n    virksomhet?: Virksomhet;\n    skipOrgNumValidation?: boolean;\n    harFlereVirksomheter?: boolean;\n    onSubmit: (oppdrag: Virksomhet) => void;\n    onCancel: () => void;\n}\n\nconst MAKS_INNTEKT = 999999999;\n\nexport const VirksomhetFormErrorKeys = {\n    [VirksomhetFormField.næringstyper]: Object.keys(ValidateListError),\n};\n\nexport const VirksomhetFormName = 'virksomhetForm';\n\nconst Form = getTypedFormComponents<VirksomhetFormField, VirksomhetFormValues>();\n\nconst visNæringsinntekt = (values: VirksomhetFormValues): boolean => {\n    const fomDate = ISOStringToDate(values.fom);\n    return fomDate !== undefined && erVirksomhetRegnetSomNyoppstartet(fomDate);\n};\n\nconst ensureValidNæringsinntekt = (values: VirksomhetFormValues): number | undefined => {\n    if (visNæringsinntekt(values)) {\n        return values.næringsinntekt;\n    }\n    return undefined;\n};\n\nconst VirksomhetForm = ({ virksomhet, harFlereVirksomheter, onSubmit, onCancel, skipOrgNumValidation }: Props) => {\n    const intl = useIntl();\n    const getText = (key: string, value?: any): string => intlHelper(intl, `sifForms.virksomhet.${key}`, value);\n\n    const onFormikSubmit = (values: VirksomhetFormValues) => {\n        const virksomhetToSubmit = mapFormValuesToVirksomhet(values, virksomhet?.id);\n        if (isVirksomhet(virksomhetToSubmit)) {\n            onSubmit({\n                ...virksomhetToSubmit,\n                næringsinntekt: ensureValidNæringsinntekt(values),\n            });\n        } else {\n            throw new Error('VirksomhetForm: Formvalues is not a valid Virksomhet on submit.');\n        }\n    };\n\n    return (\n        <Form.FormikWrapper\n            initialValues={virksomhet ? mapVirksomhetToFormValues(virksomhet) : { næringstyper: [] }}\n            onSubmit={onFormikSubmit}\n            renderForm={(formik: FormikProps<VirksomhetFormValues>) => {\n                const { values, setFieldValue } = formik;\n                const { navnPåVirksomheten = 'virksomheten', næringstyper = [] } = values;\n                const fomDate = ISOStringToDate(values.fom);\n                return (\n                    <Form.Form\n                        includeValidationSummary={true}\n                        onCancel={onCancel}\n                        fieldErrorRenderer={getFieldErrorRenderer(intl, VirksomhetFormName)}\n                        summaryFieldErrorRenderer={getSummaryFieldErrorRenderer(intl, VirksomhetFormName)}>\n                        <Box padBottom=\"l\">\n                            <Systemtittel tag=\"h1\">\n                                {harFlereVirksomheter ? getText('form_title.flere') : getText('form_title')}\n                            </Systemtittel>\n                        </Box>\n\n                        <Form.CheckboxPanelGroup\n                            name={VirksomhetFormField.næringstyper}\n                            legend={getText('hvilken_type_virksomhet')}\n                            checkboxes={[\n                                {\n                                    value: Næringstype.FISKE,\n                                    label: getText(`næringstype_${Næringstype.FISKE}`),\n                                },\n                                {\n                                    value: Næringstype.JORDBRUK_SKOGBRUK,\n                                    label: getText(`næringstype_${Næringstype.JORDBRUK_SKOGBRUK}`),\n                                },\n                                {\n                                    value: Næringstype.DAGMAMMA,\n                                    label: getText(`næringstype_${Næringstype.DAGMAMMA}`),\n                                },\n                                {\n                                    value: Næringstype.ANNEN,\n                                    label: getText(`næringstype_${Næringstype.ANNEN}`),\n                                },\n                            ]}\n                            validate={getListValidator({ required: true })}\n                        />\n\n                        {harFiskerNæringstype(næringstyper) && (\n                            <Box margin=\"xl\">\n                                <FormikYesOrNoQuestion<VirksomhetFormField>\n                                    name={VirksomhetFormField.fiskerErPåBladB}\n                                    legend={getText('fisker_blad_b')}\n                                    validate={getYesOrNoValidator()}\n                                />\n                            </Box>\n                        )}\n\n                        <Box margin=\"xl\">\n                            <Form.Input\n                                name={VirksomhetFormField.navnPåVirksomheten}\n                                label={getText('hva_heter_virksomheten')}\n                                validate={getRequiredFieldValidator()}\n                                maxLength={50}\n                            />\n                        </Box>\n\n                        <Box margin=\"xl\">\n                            <Form.YesOrNoQuestion\n                                name={VirksomhetFormField.registrertINorge}\n                                legend={getText('registert_i_norge', { navnPåVirksomheten })}\n                                validate={getYesOrNoValidator()}\n                                description={\n                                    harFiskerNæringstype(næringstyper) ? (\n                                        <ExpandableInfo\n                                            title={intlHelper(intl, 'sifForms.virksomhet.veileder_fisker.tittel')}>\n                                            <FormattedMessage\n                                                id=\"sifForms.virksomhet.veileder_fisker\"\n                                                values={{ navnPåVirksomheten }}\n                                            />\n                                        </ExpandableInfo>\n                                    ) : undefined\n                                }\n                            />\n                        </Box>\n\n                        {values.registrertINorge === YesOrNo.NO && (\n                            <Box margin=\"xl\">\n                                <Form.CountrySelect\n                                    name={VirksomhetFormField.registrertILand}\n                                    label={getText('registert_i_hvilket_land', { navnPåVirksomheten })}\n                                    validate={getRequiredFieldValidator()}\n                                    useAlpha3Code={true}\n                                />\n                            </Box>\n                        )}\n\n                        {values.registrertINorge === YesOrNo.YES && (\n                            <Box margin=\"xl\">\n                                <Form.Input\n                                    name={VirksomhetFormField.organisasjonsnummer}\n                                    label={getText('organisasjonsnummer')}\n                                    style={{ maxWidth: '10rem' }}\n                                    maxLength={9}\n                                    validate={\n                                        skipOrgNumValidation ? undefined : getOrgNumberValidator({ required: true })\n                                    }\n                                />\n                            </Box>\n                        )}\n\n                        {(values.registrertINorge === YesOrNo.YES || values.registrertINorge === YesOrNo.NO) && (\n                            <Box margin=\"xl\">\n                                <Form.DateRangePicker\n                                    legend={getText('startdato', { navnPåVirksomheten })}\n                                    showYearSelector={true}\n                                    maxDate={dateToday}\n                                    fromInputProps={{\n                                        label: getText('kalender_fom'),\n                                        name: VirksomhetFormField.fom,\n                                        validate: getRequiredFieldValidator(),\n                                    }}\n                                    toInputProps={{\n                                        label: getText('kalender_tom'),\n                                        name: VirksomhetFormField.tom,\n                                        disabled: values.erPågående === true,\n                                        validate: values.erPågående === true ? undefined : getRequiredFieldValidator(),\n                                    }}\n                                />\n                                <Form.Checkbox\n                                    label={getText('kalender_pågående')}\n                                    name={VirksomhetFormField.erPågående}\n                                    afterOnChange={(checked) => {\n                                        if (checked) {\n                                            setFieldValue(VirksomhetFormField.tom, undefined);\n                                        }\n                                    }}\n                                />\n                            </Box>\n                        )}\n\n                        {fomDate && (\n                            <>\n                                {harFlereVirksomheter && (\n                                    <Box margin=\"xxl\">\n                                        {erVirksomhetRegnetSomNyoppstartet(fomDate) ? (\n                                            <>\n                                                <Undertittel>\n                                                    {getText('nyoppstartet.næringsinntektFlere.header')}\n                                                </Undertittel>\n                                                <p>{getText('nyoppstartet.næringsinntektFlere.info')}</p>\n                                            </>\n                                        ) : (\n                                            <>\n                                                <Undertittel>{getText('næringsinntektFlere.header')}</Undertittel>\n                                                <p>{getText('næringsinntektFlere.info')}</p>\n                                            </>\n                                        )}\n                                    </Box>\n                                )}\n\n                                {/* Nyoppstartet  */}\n                                {erVirksomhetRegnetSomNyoppstartet(fomDate) && (\n                                    <>\n                                        <Box margin=\"xl\">\n                                            <Form.NumberInput\n                                                name={VirksomhetFormField.næringsinntekt}\n                                                label={getText('næringsinntekt')}\n                                                maxLength={10}\n                                                style={{ maxWidth: '10rem' }}\n                                                validate={getNumberValidator({ min: 0, max: MAKS_INNTEKT })}\n                                                description={\n                                                    <>\n                                                        {getText('næringsinntekt.info')}\n                                                        <ExpandableInfo title={getText('næringsinntekt_info_title')}>\n                                                            {getText('næringsinntekt_info')}\n                                                        </ExpandableInfo>\n                                                    </>\n                                                }\n                                            />\n                                        </Box>\n                                        <Box margin=\"xl\">\n                                            <Form.YesOrNoQuestion\n                                                name={\n                                                    VirksomhetFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene\n                                                }\n                                                legend={getText('har_blitt_yrkesaktiv')}\n                                                validate={getYesOrNoValidator()}\n                                                description={\n                                                    <ExpandableInfo title={getText('har_blitt_yrkesaktiv_info_title')}>\n                                                        {getText('har_blitt_yrkesaktiv_info')}\n                                                    </ExpandableInfo>\n                                                }\n                                            />\n                                        </Box>\n                                        {values.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene ===\n                                            YesOrNo.YES && (\n                                            <FormBlock margin=\"m\">\n                                                <ResponsivePanel>\n                                                    <Form.DatePicker\n                                                        name={VirksomhetFormField.blittYrkesaktivDato}\n                                                        label={getText('har_blitt_yrkesaktiv_dato')}\n                                                        showYearSelector={true}\n                                                        minDate={date3YearsAgo}\n                                                        maxDate={dateToday}\n                                                        validate={getRequiredFieldValidator()}\n                                                    />\n                                                </ResponsivePanel>\n                                            </FormBlock>\n                                        )}\n                                    </>\n                                )}\n\n                                {/* Ikke nyoppstartet */}\n                                {erVirksomhetRegnetSomNyoppstartet(fomDate) === false && (\n                                    <>\n                                        <Box margin=\"xl\">\n                                            <Form.YesOrNoQuestion\n                                                name={\n                                                    VirksomhetFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår\n                                                }\n                                                legend={getText('varig_endring_spm')}\n                                                validate={getYesOrNoValidator()}\n                                            />\n                                        </Box>\n                                        {values.hattVarigEndringAvNæringsinntektSiste4Kalenderår === YesOrNo.YES && (\n                                            <>\n                                                <Box margin=\"xl\">\n                                                    <Form.DatePicker\n                                                        name={VirksomhetFormField.varigEndringINæringsinntekt_dato}\n                                                        label={getText('varig_endring_dato')}\n                                                        validate={getRequiredFieldValidator()}\n                                                        minDate={date4YearsAgo}\n                                                        maxDate={dateToday}\n                                                    />\n                                                </Box>\n                                                <Box margin=\"xl\">\n                                                    <Form.NumberInput\n                                                        name={\n                                                            VirksomhetFormField.varigEndringINæringsinntekt_inntektEtterEndring\n                                                        }\n                                                        label={getText('varig_endring_inntekt')}\n                                                        maxLength={10}\n                                                        style={{ maxWidth: '10rem' }}\n                                                        validate={getNumberValidator({ min: 0, max: MAKS_INNTEKT })}\n                                                    />\n                                                </Box>\n                                                <Box margin=\"xl\">\n                                                    <Form.Textarea\n                                                        name={\n                                                            VirksomhetFormField.varigEndringINæringsinntekt_forklaring\n                                                        }\n                                                        label={getText('varig_endring_tekst')}\n                                                        validate={getRequiredFieldValidator()}\n                                                        maxLength={1000}\n                                                    />\n                                                </Box>\n                                            </>\n                                        )}\n                                    </>\n                                )}\n\n                                {values.registrertINorge === YesOrNo.YES && (\n                                    <>\n                                        <Box margin=\"xl\">\n                                            <Form.YesOrNoQuestion\n                                                name={VirksomhetFormField.harRegnskapsfører}\n                                                legend={getText('regnskapsfører_spm')}\n                                                validate={getYesOrNoValidator()}\n                                            />\n                                        </Box>\n                                        {values.harRegnskapsfører === YesOrNo.YES && (\n                                            <FormBlock margin=\"m\">\n                                                <ResponsivePanel>\n                                                    <Form.Input\n                                                        name={VirksomhetFormField.regnskapsfører_navn}\n                                                        label={getText('regnskapsfører_navn')}\n                                                        validate={getRequiredFieldValidator()}\n                                                        maxLength={50}\n                                                    />\n                                                    <Box margin=\"xl\">\n                                                        <Form.Input\n                                                            name={VirksomhetFormField.regnskapsfører_telefon}\n                                                            label={getText('regnskapsfører_telefon')}\n                                                            validate={getStringValidator({ maxLength: 15 })}\n                                                            maxLength={15}\n                                                        />\n                                                    </Box>\n                                                </ResponsivePanel>\n                                            </FormBlock>\n                                        )}\n                                    </>\n                                )}\n                                {values.harRegnskapsfører === YesOrNo.YES && (\n                                    <Box margin=\"xl\">\n                                        <CounsellorPanel>\n                                            {getText('veileder_innhenter_info.1')}\n                                            <br />\n                                            {getText('veileder_innhenter_info.2')}\n                                        </CounsellorPanel>\n                                    </Box>\n                                )}\n                            </>\n                        )}\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default VirksomhetForm;\n","import React from 'react';\nimport { ApiStringDate } from '@navikt/sif-common-core/lib/types/ApiStringDate';\nimport { apiStringDateToDate, prettifyDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\n\ninterface Props {\n    apiDato: ApiStringDate;\n}\nexport const prettifyApiDate = (apiDato: ApiStringDate): string => prettifyDate(apiStringDateToDate(apiDato));\n\nconst DatoSvar: React.FunctionComponent<Props> = ({ apiDato }) => <>{prettifyApiDate(apiDato)}</>;\n\nexport default DatoSvar;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\n\ninterface Props {\n    labelKey: string;\n}\n\nconst bem = bemUtils('summaryLabelValue');\n\nconst IntlLabelValue: React.FunctionComponent<Props> = ({ labelKey: intlLabelKey, children }) => {\n    const intl = useIntl();\n    return (\n        <div className={bem.block}>\n            <span className={bem.element('label')}>{intlHelper(intl, intlLabelKey)}:</span>{' '}\n            <span className={bem.element('value')}>{children}</span>\n        </div>\n    );\n};\n\nexport default IntlLabelValue;\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\ninterface Props {\n    harSvartJa?: boolean;\n}\n\nconst JaNeiSvar: React.FunctionComponent<Props> = ({ harSvartJa }) => {\n    return <FormattedMessage id={harSvartJa === true ? 'Ja' : 'Nei'} tagName=\"span\" />;\n};\n\nexport default JaNeiSvar;\n","import React from 'react';\n\nconst Sitat: React.FunctionComponent = ({ children }) => (\n    <span\n        style={{\n            display: 'block',\n            paddingLeft: '.5rem',\n            margin: '0.5rem 0',\n            borderLeft: '2px solid #C6C2BF',\n            fontStyle: 'italic',\n        }}>\n        {children}\n    </span>\n);\n\nexport default Sitat;\n","import React from 'react';\nimport ContentWithHeader from '@navikt/sif-common-core/lib/components/content-with-header/ContentWithHeader';\nimport Box, { BoxMargin } from '@navikt/sif-common-core/lib/components/box/Box';\n\ninterface Props {\n    header: string;\n    margin?: BoxMargin;\n}\n\nconst SummaryBlock: React.FunctionComponent<Props> = ({ header, margin = 'l', children }) => (\n    <Box margin={margin}>\n        <ContentWithHeader header={header}>{children}</ContentWithHeader>\n    </Box>\n);\n\nexport default SummaryBlock;\n","import React from 'react';\nimport { FormattedNumber } from 'react-intl';\n\ninterface Props {\n    verdi?: number;\n}\n\nconst TallSvar: React.FunctionComponent<Props> = ({ verdi }) =>\n    verdi !== undefined ? <FormattedNumber value={verdi} /> : null;\n\nexport default TallSvar;\n","import React from 'react';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport TextareaSummary from '@navikt/sif-common-core/lib/components/textarea-summary/TextareaSummary';\nimport { apiStringDateToDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport DatoSvar, { prettifyApiDate } from '../components/summary/DatoSvar';\nimport IntlLabelValue from '../components/summary/IntlLabelValue';\nimport JaNeiSvar from '../components/summary/JaNeiSvar';\nimport Sitat from '../components/summary/Sitat';\nimport SummaryBlock from '../components/summary/SummaryBlock';\nimport TallSvar from '../components/summary/TallSvar';\nimport { Næringstype, VirksomhetApiData } from './types';\nimport { erVirksomhetRegnetSomNyoppstartet } from './virksomhetUtils';\n\ninterface Props {\n    virksomhet: VirksomhetApiData;\n}\n\nconst getFiskerNæringTekst = (intl: IntlShape, erPåBladB: boolean) => {\n    const næringstekst = intlHelper(intl, `sifForms.virksomhet.næringstype_${Næringstype.FISKE}`);\n    const bladBTekst = erPåBladB\n        ? intlHelper(intl, 'sifForms.virksomhet.summary.fisker.påBladB')\n        : intlHelper(intl, 'sifForms.virksomhet.summary.fisker.ikkePåBladB');\n    return `${næringstekst} (${bladBTekst})`;\n};\n\nexport const renderVirksomhetSummary = (virksomhet: VirksomhetApiData, intl: IntlShape) => {\n    const land = virksomhet.registrertIUtlandet ? virksomhet.registrertIUtlandet.landnavn : 'Norge';\n\n    const næringstyper = virksomhet.næringstyper\n        .map((næring) =>\n            næring === Næringstype.FISKE && virksomhet.fiskerErPåBladB !== undefined\n                ? getFiskerNæringTekst(intl, virksomhet.fiskerErPåBladB)\n                : intlHelper(intl, `sifForms.virksomhet.næringstype_${næring}`)\n        )\n        .join(', ');\n\n    const tidsinfo = virksomhet.tilOgMed\n        ? intlHelper(intl, 'sifForms.virksomhet.summary.tidsinfo.avsluttet', {\n              fraOgMed: prettifyApiDate(virksomhet.fraOgMed),\n              tilOgMed: prettifyApiDate(virksomhet.tilOgMed),\n          })\n        : intlHelper(intl, 'sifForms.virksomhet.summary.tidsinfo.pågående', {\n              fraOgMed: prettifyApiDate(virksomhet.fraOgMed),\n          });\n\n    return (\n        <>\n            <IntlLabelValue labelKey=\"sifForms.virksomhet.summary.navn\">\n                {virksomhet.navnPåVirksomheten}.\n            </IntlLabelValue>\n            <IntlLabelValue labelKey=\"sifForms.virksomhet.summary.næringstype\">{næringstyper}. </IntlLabelValue>\n            <div>\n                <FormattedMessage id=\"sifForms.virksomhet.summary.registrertILand\" values={{ land }} />\n                {virksomhet.registrertINorge && (\n                    <FormattedMessage\n                        id=\"sifForms.virksomhet.summary.registrertILand.orgnr\"\n                        values={{ orgnr: virksomhet.organisasjonsnummer }}\n                    />\n                )}\n                . <br />\n                {tidsinfo}\n            </div>\n        </>\n    );\n};\n\nconst VirksomhetSummary: React.FunctionComponent<Props> = ({ virksomhet }) => {\n    const intl = useIntl();\n    const erRegnetSomNyoppstartet = erVirksomhetRegnetSomNyoppstartet(apiStringDateToDate(virksomhet.fraOgMed));\n\n    return (\n        <>\n            {renderVirksomhetSummary(virksomhet, intl)}\n\n            {virksomhet.næringsinntekt !== undefined && (\n                <SummaryBlock header={intlHelper(intl, 'sifForms.virksomhet.næringsinntekt')}>\n                    <FormattedMessage id=\"sifForms.virksomhet.summary.næringsinntekst\" />\n                    {` `}\n                    <TallSvar verdi={virksomhet.næringsinntekt} />\n                </SummaryBlock>\n            )}\n\n            {erRegnetSomNyoppstartet === true && (\n                <>\n                    <SummaryBlock header={intlHelper(intl, 'sifForms.virksomhet.har_blitt_yrkesaktiv')}>\n                        {virksomhet.yrkesaktivSisteTreFerdigliknedeÅrene === undefined && (\n                            <JaNeiSvar harSvartJa={virksomhet.yrkesaktivSisteTreFerdigliknedeÅrene !== undefined} />\n                        )}\n                        {virksomhet.yrkesaktivSisteTreFerdigliknedeÅrene !== undefined && (\n                            <FormattedMessage\n                                id=\"sifForms.virksomhet.summary.yrkesaktiv.jaStartetDato\"\n                                values={{\n                                    dato: prettifyApiDate(\n                                        virksomhet.yrkesaktivSisteTreFerdigliknedeÅrene.oppstartsdato\n                                    ),\n                                }}\n                            />\n                        )}\n                    </SummaryBlock>\n                </>\n            )}\n\n            {erRegnetSomNyoppstartet === false && (\n                <>\n                    <SummaryBlock header={intlHelper(intl, 'sifForms.virksomhet.varig_endring_spm')}>\n                        <JaNeiSvar harSvartJa={virksomhet.varigEndring !== undefined} />\n                    </SummaryBlock>\n                    {virksomhet.varigEndring && (\n                        <>\n                            <SummaryBlock header={intlHelper(intl, 'sifForms.virksomhet.summary.varigEndring.dato')}>\n                                <DatoSvar apiDato={virksomhet.varigEndring.dato} />\n                            </SummaryBlock>\n                            <SummaryBlock\n                                header={intlHelper(intl, 'sifForms.virksomhet.summary.varigEndring.næringsinntekt')}>\n                                <TallSvar verdi={virksomhet.varigEndring.inntektEtterEndring} />\n                            </SummaryBlock>\n                            <SummaryBlock\n                                header={intlHelper(intl, 'sifForms.virksomhet.summary.varigEndring.beskrivelse')}>\n                                <Sitat>\n                                    <TextareaSummary text={virksomhet.varigEndring.forklaring} />\n                                </Sitat>\n                            </SummaryBlock>\n                        </>\n                    )}\n                </>\n            )}\n\n            {/* Regnskapsfører */}\n            {virksomhet.registrertINorge && (\n                <SummaryBlock header={intlHelper(intl, 'sifForms.virksomhet.regnskapsfører_spm')}>\n                    {virksomhet.regnskapsfører === undefined && <JaNeiSvar harSvartJa={false} />}\n                    {virksomhet.regnskapsfører !== undefined && (\n                        <FormattedMessage\n                            id=\"sifForms.virksomhet.summary.regnskapsfører.info\"\n                            values={{\n                                navn: virksomhet.regnskapsfører.navn,\n                                telefon: virksomhet.regnskapsfører.telefon,\n                            }}\n                        />\n                    )}\n                </SummaryBlock>\n            )}\n        </>\n    );\n};\n\nexport default VirksomhetSummary;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport {\n    FormikModalFormAndInfo,\n    ModalFormAndInfoLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport { mapVirksomhetToVirksomhetApiData } from './mapVirksomhetToApiData';\nimport { Virksomhet } from './types';\nimport VirksomhetForm from './VirksomhetForm';\nimport VirksomhetSummary from './VirksomhetSummary';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps {\n    name: FieldNames;\n    labels: ModalFormAndInfoLabels;\n    skipOrgNumValidation?: boolean;\n    harFlereVirksomheter?: boolean;\n    onAfterChange?: (virksomhet: Virksomhet) => void;\n}\n\nfunction VirksomhetInfoAndDialog<FieldNames>({\n    name,\n    labels,\n    skipOrgNumValidation,\n    harFlereVirksomheter,\n    validate,\n    onAfterChange,\n}: Props<FieldNames>) {\n    const intl = useIntl();\n    return (\n        <FormikModalFormAndInfo<FieldNames, Virksomhet>\n            name={name}\n            validate={validate}\n            labels={labels}\n            dialogWidth=\"narrow\"\n            renderEditButtons={true}\n            formRenderer={({ onSubmit, onCancel, data }) => (\n                <VirksomhetForm\n                    virksomhet={data}\n                    harFlereVirksomheter={harFlereVirksomheter}\n                    onSubmit={onSubmit}\n                    onCancel={onCancel}\n                    skipOrgNumValidation={skipOrgNumValidation}\n                />\n            )}\n            infoRenderer={({ data }) => (\n                <VirksomhetSummary virksomhet={mapVirksomhetToVirksomhetApiData(intl.locale, data)} />\n            )}\n            onAfterChange={onAfterChange}\n        />\n    );\n}\n\nexport default VirksomhetInfoAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport {\n    getFieldErrorRenderer,\n    getSummaryFieldErrorRenderer,\n} from '@navikt/sif-common-formik/lib/utils/formikErrorRenderUtils';\nimport { TypedFormikForm, TypedFormikWrapper, YesOrNo } from '@navikt/sif-common-formik/lib';\nimport Panel from 'nav-frontend-paneler';\nimport { Checkbox } from 'nav-frontend-skjema';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { mapVirksomhetToVirksomhetApiData } from '../../../forms/virksomhet/mapVirksomhetToApiData';\nimport { isVirksomhet, Næringstype, Virksomhet } from '../../../forms/virksomhet/types';\nimport VirksomhetInfoAndDialog from '../../../forms/virksomhet/VirksomhetInfoAndDialog';\nimport VirksomhetSummary from '../../../forms/virksomhet/VirksomhetSummary';\nimport PageIntro from '../../components/page-intro/PageIntro';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\n\nenum FormField {\n    'virksomhet' = 'virksomhet',\n}\n\nexport const mockVirksomhet: Virksomhet = {\n    id: '024782550-1402-01448-04932-71872390929312',\n    næringstyper: [Næringstype.ANNEN, Næringstype.DAGMAMMA, Næringstype.FISKE, Næringstype.JORDBRUK_SKOGBRUK],\n    fiskerErPåBladB: YesOrNo.YES,\n    navnPåVirksomheten: 'Virksomhet AS',\n    registrertINorge: YesOrNo.YES,\n    organisasjonsnummer: '123123123',\n    fom: new Date('2007-02-01T00:00:00.000Z'),\n    erPågående: true,\n    næringsinntekt: 20000,\n    harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene: YesOrNo.YES,\n    blittYrkesaktivDato: new Date(),\n    hattVarigEndringAvNæringsinntektSiste4Kalenderår: YesOrNo.YES,\n    varigEndringINæringsinntekt_dato: new Date('2019-12-09T00:00:00.000Z'),\n    varigEndringINæringsinntekt_inntektEtterEndring: 200000,\n    varigEndringINæringsinntekt_forklaring: 'Jeg fikk flere barn',\n    harRegnskapsfører: YesOrNo.YES,\n    regnskapsfører_navn: 'Regnskapsefører Truls',\n    regnskapsfører_telefon: '98219409',\n};\n\ninterface FormValues {\n    [FormField.virksomhet]?: Virksomhet;\n}\n\nconst initialValues: FormValues = {};\n\nconst VirksomhetExample = () => {\n    const [formValues, setFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const [harFlereVirksomheter, setHarFlereVirksomheter] = useState<boolean>(false);\n    const intl = useIntl();\n\n    const { virksomhet } = formValues || {};\n\n    const apiVirksomhet =\n        virksomhet && isVirksomhet(virksomhet) ? mapVirksomhetToVirksomhetApiData(intl.locale, virksomhet) : undefined;\n    return (\n        <>\n            <PageIntro title=\"Næringsvirksomhet\">Skjema som brukes for på registrere en næringsvirksomhet.</PageIntro>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={getFieldErrorRenderer(intl, 'virksomhetExample')}\n                                summaryFieldErrorRenderer={getSummaryFieldErrorRenderer(intl, 'virksomhetExample')}>\n                                <VirksomhetInfoAndDialog<FormField>\n                                    name={FormField.virksomhet}\n                                    harFlereVirksomheter={harFlereVirksomheter}\n                                    validate={getListValidator({ required: true })}\n                                    labels={{\n                                        addLabel: harFlereVirksomheter ? 'Registrer virksomhet' : 'Legg til',\n                                        deleteLabel: 'Fjern',\n                                        editLabel: 'Endre',\n                                        infoTitle: 'Virksomhet',\n                                        modalTitle: 'Virksomhet',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <Box margin=\"l\">\n                    <hr />\n                    <Panel style={{ padding: '1rem' }}>\n                        <Box padBottom=\"m\">Varianter:</Box>\n                        <Box margin=\"m\">\n                            <Checkbox\n                                label=\"Bruker har flere virksomheter\"\n                                checked={harFlereVirksomheter}\n                                onChange={(evt) => setHarFlereVirksomheter(evt.currentTarget.checked)}\n                            />\n                        </Box>\n                    </Panel>\n                </Box>\n            </Panel>\n\n            {apiVirksomhet && (\n                <>\n                    <Box margin=\"xxl\" padBottom=\"l\">\n                        <Undertittel>Oppsummering av api data</Undertittel>\n                    </Box>\n                    <Panel border={true}>\n                        <VirksomhetSummary virksomhet={apiVirksomhet} />\n                    </Panel>\n                </>\n            )}\n        </>\n    );\n};\n\nexport default VirksomhetExample;\n","import React from 'react';\nimport PageIntro from './components/page-intro/PageIntro';\n\nconst Intro = () => (\n    <>\n        <PageIntro title=\"SIF-common guide\">\n            Dette er starten på en enkel guide til komponenter og konsepter i SIF-common, og som kan brukes i\n            søknadsapplikasjonene til kapittel 9. Vi legger det vi trenger, etter hvert som vi ser at vi trenger det :)\n        </PageIntro>\n    </>\n);\n\nexport default Intro;\n","import React from 'react';\nimport { MessageFileFormat } from '@navikt/sif-common-core/lib/dev-utils/intl/devIntlUtils';\nimport bostedUtlandMessages from '../../../forms/bosted-utland/bostedUtlandMessages';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport MessagePreviewExplanation from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagePreviewExplanation';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport ferieuttakMessages from '../../../forms/ferieuttak/ferieuttakMessages';\nimport fosterbarnMessages from '../../../forms/fosterbarn/fosterbarnMessages';\nimport fraværMessages from '../../../forms/fravær/fraværMessages';\nimport tidsperiodeMessages from '../../../forms/tidsperiode/tidsperiodeMessages';\nimport utenlandsoppholdMessages from '../../../forms/utenlandsopphold/utenlandsoppholdMessages';\nimport virksomhetMessages from '../../../forms/virksomhet/virksomhetMessages';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport annetBarnMessages from '../../../forms/annet-barn/annetBarnMessages';\n\nconst Texts = () => {\n    const formMessages: { title: string; messages: MessageFileFormat }[] = [];\n    formMessages.push({ title: 'Bosted utland', messages: bostedUtlandMessages });\n    formMessages.push({ title: 'Ferieuttak', messages: ferieuttakMessages });\n    formMessages.push({ title: 'Fosterbarn', messages: fosterbarnMessages });\n    formMessages.push({ title: 'Fravær', messages: fraværMessages });\n    formMessages.push({ title: 'Tidsperiode', messages: tidsperiodeMessages });\n    formMessages.push({ title: 'Utenlandsopphold', messages: utenlandsoppholdMessages });\n    formMessages.push({ title: 'Næringsvirksomhet (selvstendig næringsdrivende)', messages: virksomhetMessages });\n    formMessages.push({ title: 'Annet barn', messages: annetBarnMessages });\n    return (\n        <div>\n            <Box>\n                <MessagePreviewExplanation />\n            </Box>\n            {formMessages.map(({ title, messages }) => {\n                return (\n                    <div key={title}>\n                        <FormBlock margin=\"none\" paddingBottom=\"xl\">\n                            <MessagesPreview\n                                messages={messages}\n                                title={title}\n                                showExplanation={false}\n                                showMissingTextSummary={true}\n                            />\n                        </FormBlock>\n                    </div>\n                );\n            })}\n        </div>\n    );\n};\n\nexport default Texts;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport DialogForms from '../examples/dialog-forms/DialogForms';\nimport VirksomhetExample from '../examples/virksomhet-example/VirksomhetExample';\nimport Intro from '../Intro';\nimport Texts from '../examples/texts/Texts';\n\nexport interface RouteConfig {\n    path: string;\n    title: string;\n    renderContent: () => React.ReactNode;\n}\n\nexport const routes: RouteConfig[] = [\n    {\n        path: 'frontpage',\n        title: 'Forside',\n        renderContent: () => <Intro />,\n    },\n    {\n        path: 'dialog-forms',\n        title: 'Dialogskjema',\n        renderContent: () => <DialogForms />,\n    },\n    {\n        path: 'næring',\n        title: 'Næringsvirksomhet',\n        renderContent: () => <VirksomhetExample />,\n    },\n    {\n        path: 'texts',\n        title: 'Tekster',\n        renderContent: () => <Texts />,\n    },\n];\n\nexport const isActiveRoute = (path: string, pathname: string): boolean => {\n    return pathname.indexOf(path) >= 0;\n};\n\nexport const getRouteConfig = (pathname: string): RouteConfig | undefined => {\n    return routes.find((f) => isActiveRoute(f.path, pathname));\n};\n","import * as React from 'react';\nimport { Button, Menu, MenuItem, Wrapper } from 'react-aria-menubutton';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { NedChevron } from 'nav-frontend-chevron';\nimport { isActiveRoute, RouteConfig, routes } from '../../config/routeConfig';\nimport './headerMenu.less';\n\nconst renderMenuItem = (route: RouteConfig) => {\n    return (\n        <li key={route.path}>\n            <MenuItem className=\"headerMenu__menu__item\">\n                <div data-page={route.path}>{route.title}</div>\n            </MenuItem>\n        </li>\n    );\n};\n\ntype Props = RouteComponentProps;\n\nconst HeaderMenu = ({ history }: Props) => {\n    const {\n        location: { pathname },\n    } = history;\n\n    const toggle = (element: any) => {\n        const r = element.props ? element.props['data-page'] : undefined;\n        if (r) {\n            history.push(r);\n        }\n    };\n    const route = routes.find((r) => isActiveRoute(r.path, pathname)) || routes[0];\n    return (\n        <div className=\"headerMenu\">\n            <Wrapper className=\"headerMenu__wrapper\" onSelection={toggle}>\n                <Button className=\"headerMenu__button\">\n                    <div className=\"headerMenu__button__label\">{route ? route.title : 'Velg'}</div>\n                    <div className=\"headerMenu__button__chevron\">\n                        <NedChevron />\n                    </div>\n                </Button>\n                <Menu className=\"headerMenu__menu\">\n                    <ul>{routes.map(renderMenuItem)}</ul>\n                </Menu>\n            </Wrapper>\n        </div>\n    );\n};\nexport default withRouter(HeaderMenu);\n","import React from 'react';\nimport { Link, withRouter, RouteComponentProps } from 'react-router-dom';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport 'nav-frontend-lenker-style';\nimport { isActiveRoute, routes } from '../../config/routeConfig';\n\nconst lenkeBem = bemUtils('lenke');\n\nconst LeftMenu = ({\n    history: {\n        location: { pathname },\n    },\n}: RouteComponentProps) => {\n    return (\n        <div className=\"leftMenu\">\n            {routes.map((route) => (\n                <Link\n                    key={route.path}\n                    to={route.path}\n                    className={lenkeBem.classNames(\n                        lenkeBem.block,\n                        lenkeBem.modifierConditional('active', isActiveRoute(route.path, pathname))\n                    )}>\n                    {route.title}\n                </Link>\n            ))}\n        </div>\n    );\n};\n\nexport default withRouter(LeftMenu);\n","import React from 'react';\nimport MediaQuery from 'react-responsive';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport HeaderMenu from './components/header-menu/HeaderMenu';\nimport LeftMenu from './components/left-menu/LeftMenu';\nimport { getRouteConfig } from './config/routeConfig';\nimport Intro from './Intro';\n\ntype Props = RouteComponentProps;\n\nconst DevContent = ({\n    history: {\n        location: { pathname },\n    },\n}: Props) => {\n    const routeConfig = getRouteConfig(pathname);\n    return (\n        <>\n            <MediaQuery minWidth={1072}>\n                <aside className=\"asideContent\">\n                    <LeftMenu />\n                </aside>\n                <article style={{ maxWidth: '1000px' }} className=\"mainContent\">\n                    {routeConfig ? routeConfig.renderContent() : <Intro />}\n                </article>\n            </MediaQuery>\n            <MediaQuery maxWidth={1071}>\n                <aside className=\"asideContentTop\">\n                    <HeaderMenu />\n                </aside>\n                <article style={{ maxWidth: '1000px' }} className=\"mainContent\">\n                    {routeConfig ? routeConfig.renderContent() : <Intro />}\n                </article>\n            </MediaQuery>\n        </>\n    );\n};\n\nexport default withRouter(DevContent);\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { HashRouter } from 'react-router-dom';\nimport LanguageToggle from '@navikt/sif-common-core/lib/components/language-toggle/LanguageToggle';\nimport { Locale } from '@navikt/sif-common-core/lib/types/Locale';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport NAVLogo from './components/svg/NAVLogo';\nimport DevContent from './DevContent';\nimport './styles/dev.less';\n\ninterface Props {\n    onChangeLocale: (locale: Locale) => void;\n}\n\nconst DevPage = ({ onChangeLocale }: Props) => {\n    const intl = useIntl();\n    return (\n        <main className=\"devPage\">\n            <header className=\"header\">\n                <span className=\"navLogo\">\n                    <NAVLogo />\n                </span>\n                <span className=\"header__title\">\n                    <Systemtittel>Sykdom i familien - sif-common-forms</Systemtittel>\n                </span>\n                <span className=\"languageToggler\">\n                    <LanguageToggle toggle={onChangeLocale} locale={intl.locale as Locale} />\n                </span>\n            </header>\n            <div className=\"contentWrapper\">\n                <HashRouter>\n                    <DevContent />\n                </HashRouter>\n            </div>\n        </main>\n    );\n};\n\nexport default DevPage;\n","import * as React from 'react';\nimport '@formatjs/intl-pluralrules//locale-data/nb';\nimport '@formatjs/intl-pluralrules//locale-data/nn';\nimport '@formatjs/intl-pluralrules/polyfill';\nimport { Locale } from '@navikt/sif-common-core/lib/types/Locale';\nimport { getLocaleFromSessionStorage, setLocaleInSessionStorage } from '@navikt/sif-common-core/lib/utils/localeUtils';\nimport 'nav-frontend-skjema-style';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport AppIntlProvider from './dev/components/app-intl-provider/AppIntlProvider';\nimport DevPage from './dev/DevPage';\nimport '@navikt/sif-common-core/lib/styles/globalStyles.less';\n\nconst localeFromSessionStorage = getLocaleFromSessionStorage();\n\nconst App = () => {\n    const [locale, setLocale] = React.useState(localeFromSessionStorage || 'nb');\n    return (\n        <Normaltekst tag=\"div\">\n            <AppIntlProvider locale={locale as Locale}>\n                <DevPage\n                    onChangeLocale={(l: Locale) => {\n                        setLocaleInSessionStorage(l);\n                        setLocale(l);\n                    }}\n                />\n            </AppIntlProvider>\n        </Normaltekst>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Modal from 'react-modal';\nimport App from './App';\n\nModal.setAppElement('#root');\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}