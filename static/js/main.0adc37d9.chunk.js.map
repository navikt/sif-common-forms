{"version":3,"sources":["forms/virksomhet/VirksomhetSummary.tsx","forms/components/summary/TallSvar.tsx","forms/components/summary/IntlLabelValue.tsx","forms/bosted-utland/BostedUtlandListAndDialog.tsx","forms/bosted-utland/BostedUtlandList.tsx","forms/ferieuttak/FerieuttakListAndDialog.tsx","forms/ferieuttak/FerieuttakList.tsx","forms/fosterbarn/types.ts","forms/fosterbarn/FosterbarnListAndDialog.tsx","forms/fosterbarn/FosterbarnList.tsx","forms/tidsperiode/TidsperiodeList.tsx","forms/utenlandsopphold/UtenlandsoppholdListAndDialog.tsx","forms/utenlandsopphold/UtenlandsoppholdList.tsx","forms/fravær/FraværDagerListAndDialog.tsx","forms/fravær/FraværDagerList.tsx","forms/fravær/FraværPerioderListAndDialog.tsx","forms/fravær/FraværPerioderList.tsx","forms/virksomhet/VirksomhetForm.tsx","forms/virksomhet/VirksomhetInfoAndDialog.tsx","forms/fravær/FraværListItem.tsx","forms/fravær/fraværÅrsakRadios.ts","forms/fravær/ÅrsakInfo.tsx","forms/components/summary/Sitat.tsx","forms/virksomhet/types.ts","forms/bosted-utland/index.ts","forms/ferieuttak/index.ts","forms/fosterbarn/index.ts","forms/fravær/index.ts","forms/tidsperiode/index.ts","forms/utenlandsopphold/index.ts","forms/index.ts","forms/fravær/fraværUtilities.ts","forms/fravær/fraværValidationUtils.ts","forms/utils/index.ts","forms/annet-barn/annetBarnMessages.ts","forms/omsorgstilbud/omsorgstilbudMessages.ts","dev/components/app-intl-provider/messages.ts","dev/components/app-intl-provider/AppIntlProvider.tsx","dev/components/svg/NAVLogo.tsx","dev/components/page-intro/PageIntro.tsx","dev/components/submit-preview/SubmitPreview.tsx","dev/examples/dialog-forms/BostedUtlandExample.tsx","dev/components/validation-error-messages/ValidationErrorMessages.tsx","dev/examples/dialog-forms/FerieuttakExample.tsx","dev/examples/dialog-forms/FosterbarnExample.tsx","dev/examples/dialog-forms/TidsperiodeExample.tsx","dev/examples/dialog-forms/UtenlandsoppholdExample.tsx","dev/examples/dialog-forms/FraværExample.tsx","forms/annet-barn/AnnetBarnForm.tsx","forms/annet-barn/annetBarnUtils.ts","forms/annet-barn/AnnetBarnList.tsx","forms/annet-barn/AnnetBarnListAndDialog.tsx","dev/examples/dialog-forms/AnnetBarnExample.tsx","dev/examples/virksomhet-example/VirksomhetExample.tsx","dev/examples/dialog-forms/DialogForms.tsx","dev/Intro.tsx","dev/examples/texts/Texts.tsx","forms/omsorgstilbud/CalendarGrid.tsx","forms/omsorgstilbud/OmsorgstilbudForm.tsx","forms/omsorgstilbud/OmsorgstilbudInfo.tsx","forms/omsorgstilbud/OmsorgstilbudInfoAndDialog.tsx","dev/examples/omsorgstilbud-example/OmsorgstilbudExample.tsx","dev/config/routeConfig.tsx","dev/components/header-menu/HeaderMenu.tsx","dev/components/left-menu/LeftMenu.tsx","dev/DevContent.tsx","dev/DevPage.tsx","App.tsx","index.tsx","forms/virksomhet/virksomhetUtils.ts","forms/components/summary/SummaryBlock.tsx","forms/fravær/fraværMessages.ts","forms/fravær/types.ts","forms/bosted-utland/bostedUtlandMessages.ts","forms/ferieuttak/ferieuttakMessages.ts","forms/utenlandsopphold/utenlandsoppholdMessages.ts","forms/tidsperiode/tidsperiodeMessages.ts","forms/components/summary/DatoSvar.tsx","forms/fosterbarn/fosterbarnMessages.ts","forms/virksomhet/virksomhetMessages.ts","forms/utenlandsopphold/types.ts","forms/components/formatted-html-message/FormattedHtmlMessage.tsx","forms/components/summary/JaNeiSvar.tsx","forms/fosterbarn/FosterbarnForm.tsx","forms/fravær/FraværPeriodeForm.tsx","forms/bosted-utland/BostedUtlandForm.tsx","forms/bosted-utland/bostedUtlandUtils.ts","forms/ferieuttak/FerieuttakForm.tsx","forms/ferieuttak/ferieuttakUtils.ts","forms/tidsperiode/TidsperiodeForm.tsx","forms/tidsperiode/tidsperiodeUtils.ts","forms/utenlandsopphold/UtenlandsoppholdForm.tsx","forms/utenlandsopphold/utenlandsoppholdUtils.ts","forms/fravær/FraværDagForm.tsx","forms/fravær/FraværTimerSelect.tsx","forms/tidsperiode/TidsperiodeListAndDialog.tsx","forms/virksomhet/mapVirksomhetToApiData.ts"],"names":["renderVirksomhetSummary","virksomhet","intl","land","registrertIUtlandet","landnavn","næringstyper","map","næring","Næringstype","FISKE","undefined","fiskerErPåBladB","erPåBladB","næringstekst","intlHelper","bladBTekst","getFiskerNæringTekst","join","tidsinfo","tilOgMed","fraOgMed","prettifyApiDate","labelKey","navnPåVirksomheten","id","values","registrertINorge","orgnr","organisasjonsnummer","VirksomhetSummary","harFlereVirksomheter","useIntl","erRegnetSomNyoppstartet","erVirksomhetRegnetSomNyoppstartet","apiStringDateToDate","næringsinntekt","header","verdi","yrkesaktivSisteTreFerdigliknedeÅrene","harSvartJa","dato","oppstartsdato","varigEndring","apiDato","inntektEtterEndring","text","forklaring","regnskapsfører","navn","telefon","TallSvar","value","bem","bemUtils","IntlLabelValue","intlLabelKey","children","className","block","element","BostedUtlandListAndDialog","name","minDate","maxDate","validate","labels","dialogWidth","sortFunc","sortItemsByFom","formRenderer","onSubmit","onCancel","item","allItems","bosted","alleBosteder","listRenderer","items","onEdit","onDelete","bosteder","BostedUtlandList","getItemId","opphold","getItemTitle","getCountryName","landkode","locale","labelRenderer","onClick","prettifyDateExtended","fom","tom","FerieuttakListAndDialog","ferieuttak","alleFerieuttak","FerieuttakList","getDateTitleString","uttak","title","filter","isFosterbarn","fosterbarn","includeName","fornavn","etternavn","fødselsnummer","hasValue","FosterbarnListAndDialog","texts","disallowedFødselsnumre","defaultText","liste_legg_til_knapp","liste_tittel","modal_tittel","txt","addLabel","modalTitle","emptyListText","liste_tom_liste_tekst","listTitle","FosterbarnList","getBarnTitleString","barn","style","paddingRight","formatName","TidsperiodeList","tidsperiode","UtenlandsoppholdListAndDialog","alleOpphold","utenlandsopphold","UtenlandsoppholdList","FraværDagerListAndDialog","dagDescription","formHeaderContent","dateRangesToDisable","helgedagerIkkeTillatt","maksArbeidstidPerDag","fraværDagA","fraværDagB","fraværDag","headerContent","fraværDager","FraværDagerList","getFraværDagListItemTitle","timerArbeidsdag","timeText","timerFravær","årsak","FraværPerioderListAndDialog","periodeDescription","begrensTilSammeÅr","helgedagerIkkeTillat","fraværPeriodeA","fraværPeriodeB","fraværPeriode","fraværPerioder","FraværPerioderList","useTrashcan","MAKS_INNTEKT","VirksomhetFormErrors","VirksomhetFormField","ValidateListError","listIsEmpty","ValidateYesOrNoError","yesOrNoIsUnanswered","ValidateStringError","stringHasNoValue","registrertILand","ValidateRequiredFieldError","noValue","ValidateOrgNumberError","orgNumberHasInvalidFormat","ValidateDateError","dateHasNoValue","dateIsAfterMax","dateHasInvalidFormat","ValidateDateRangeError","fromDateIsAfterToDate","dateIsBeforeMin","toDateIsBeforeFromDate","ValidateNumberError","numberHasInvalidFormat","numberIsTooSmall","numberIsTooLarge","harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene","blittYrkesaktivDato","hattVarigEndringAvNæringsinntektSiste4Kalenderår","varigEndringINæringsinntekt_dato","varigEndringINæringsinntekt_inntektEtterEndring","numberHasNoValue","varigEndringINæringsinntekt_forklaring","stringIsTooLong","stringIsTooShort","harRegnskapsfører","regnskapsfører_navn","regnskapsfører_telefon","Form","getTypedFormComponents","ensureValidNæringsinntekt","fomDate","ISOStringToDate","visNæringsinntekt","VirksomhetForm","skipOrgNumValidation","getText","key","FormikWrapper","initialValues","mapVirksomhetToFormValues","virksomhetToSubmit","mapFormValuesToVirksomhet","isVirksomhet","Error","renderForm","formik","setFieldValue","tomDate","includeValidationSummary","formErrorHandler","getFormErrorHandler","padBottom","tag","CheckboxPanelGroup","legend","checkboxes","label","JORDBRUK_SKOGBRUK","DAGMAMMA","ANNEN","getListValidator","required","harFiskerNæringstype","margin","YesOrNoQuestion","getYesOrNoValidator","Input","getStringValidator","maxLength","description","YesOrNo","NO","CountrySelect","getRequiredFieldValidator","useAlpha3Code","YES","maxWidth","getOrgNumberValidator","DateRangePicker","showYearSelector","dateToday","fromInputProps","error","getDateRangeValidator","max","toDate","validateFromDate","prettifyDate","toInputProps","disabled","erPågående","fromDate","validateToDate","handleDateRangeValidationError","Checkbox","afterOnChange","checked","NumberInput","getNumberValidator","min","maks","DatePicker","date3YearsAgo","getDateValidator","date4YearsAgo","Textarea","minLength","VirksomhetInfoAndDialog","onAfterChange","renderEditButtons","data","infoRenderer","mapVirksomhetToVirksomhetApiData","FraværListItem","padding","FraværÅrsak","ordinært","marginTop","getFraværÅrsakTekstKort","getFraværÅrsakRadios","stengtSkoleBhg","smittevernhensyn","ÅrsakInfo","Sitat","display","paddingLeft","borderLeft","fontStyle","dayjs","extend","isSameOrAfter","isSameOrBefore","Weekday","isFraværDag","isFraværPeriode","fraværDagToFraværDateRange","from","to","fraværPeriodeToDateRange","getWeekdayName","date","getDay","sunday","monday","tuesday","wednesday","thursday","friday","saturday","dateErHelg","rangeCollideWithRanges","range","ranges","length","some","periode","fromDay","toDay","isBefore","isAfter","dateCollideWithRanges","timer","toMaybeNumber","isString","parseFloat","getHjemmePgaKoronaFormValueFromFraværÅrsak","UNANSWERED","getÅrsakFromFraværFormValues","formValues","hjemmePgaKorona","mapFormValuesToFraværDag","guid","mapFraværDagToFormValues","dateToISOString","mapFormValuesToFraværPeriode","mapFraværPeriodeToFormValues","FraværFieldValidationErrors","validateLessOrEqualTo","maybeMaxValue","maybeValue","maybeValueFloat","fravær_timer_mer_enn_arbeidstimer","validateErSammeÅr","maybeDateFrom","maybeDateTo","getFullYear","fra_og_til_er_ulike_år","validateNotHelgedag","maybeDate","er_helg","validateFraværPeriodeCollision","dager_overlapper_med_andre_dager","validateFraOgMedForCollision","fra_dato_kolliderer_med_annet_fravær","validateTilOgMedForCollision","til_dato_kolliderer_med_annet_fravær","validateFraværDagCollision","dato_kolliderer_med_annet_fravær","validateNoCollisions","allFraværDagDateRanges","allFraværPeriodeDateRanges","hasDateCollision","dag","rangesWithoutCurrentDag","d","hasRangeCollision","rangesWithoutCurrentPeriode","p","mapFomTomToDateRange","annetBarnMessages","nb","nn","omsorgstilbudMessages","commonNb","require","commonNn","validationNb","validationNn","appMessages","bostedUtlandMessages","fraværMessages","ferieuttakMessages","fosterbarnMessages","utenlandsoppholdMessages","tidsperiodeMessages","virksomhetMessages","omstilbudMessages","AppIntlProvider","onError","messages","NAVLogo","props","width","viewBox","fill","fillRule","PageIntro","SubmitPreview","FormField","borderTop","paddingTop","fontSize","JSON","stringify","FormValidationErrorMessages","validationErrors","formName","intlMessages","validationErrorIntlKeys","validationeMessages","fields","Object","keys","forEach","field","errorKey","intlKey","fieldName","errorPrefix","createFieldErrorIntlKey","showExplanation","showMissingTextSummary","FormikExample","useState","singleFormValues","setSingleFormValues","listFormValues","setListFormValues","border","includeButtons","submitButtonLabel","date1YearAgo","date1YearFromNow","flat","BostedUtlandFormErrors","BostedUtlandForm","console","log","ferie","FerieuttakFormErrors","FerieuttakForm","FosterbarnExample","FosterbarnFormErrors","FosterbarnForm","TidsperiodeExample","TidsperiodeListAndDialog","TidsperiodeFormErrors","TidsperiodeForm","UtenlandsoppholdExample","UtlandsoppholdFormErrors","UtenlandsoppholdForm","AnnetBarnFormFields","perioder","dager","FraværExample","fraværPeriodeSingleFormValues","setFraværPeriodeSingleFormValues","fraværDagSingleFormValues","setFraværDagSingleFormValues","listError","collisionError","FraværPeriodeFormErrors","FraværDagFormErrors","annetBarnUtils","mapAnnetBarnToFormValues","annetBarn","fnr","fødselsdato","mapFormValuesToPartialAnnetBarn","isAnnetBarn","AnnetBarnFormErrors","ValidateFødselsnummerError","fødselsnummerHasNoValue","fødselsnummerIsInvalid","fødselsnummerIsNot11Chars","fødselsnummerIsNotAllowed","AnnetBarnForm","defaultLabels","okButton","cancelButton","formLabels","annetBarnToSubmit","placeholder","placeholderNavn","aldersGrenseText","dateError","getFødselsnummerValidator","disallowedValues","inputMode","placeholderFnr","AnnetBarnList","AnnetBarnListAndDialog","AnnetBarnExample","flatten","tabRoutes","path","renderContent","BostedUtlandExample","FerieuttakExample","DialogForms","setPath","activeRoute","find","r","onChange","evt","idx","tabs","active","Date","VirksomhetExample","setFormValues","setHarFlereVirksomheter","apiVirksomhet","deleteLabel","editLabel","infoTitle","currentTarget","Intro","Texts","formMessages","push","paddingBottom","minMax","getDaysToRender","month","calendarDayContent","weekday","isoWeekday","add","getFirstWeekdayOnOrAfter","firstDayInMonth","startOf","firstWeekday","getFirstWeekdayInMonth","endOf","days","current","subtract","dayContent","c","isSame","content","CalendarGrid","dateFormatter","dateFormatterFull","format","noContentRenderer","weeks","groupBy","day","isoWeek","role","aria-hidden","daysInWeek","weekNum","classNames","modifierConditional","weekOfYear","mapOmsorgsdagerToFormValues","omsorgsdager","omsorgsdag","tid","OmsorgstilbudForm","fraDato","tilDato","isNarrow","useMediaQuery","isWide","minWidth","dates","dayOfWeek","dayName","dateString","week","year","yearAndWeek","substring","getDates","groupby","mndOgÅr","formDager","submitDager","time","isValidTime","modifier","weekDates","mndYearAndWeek","TimeInput","hours","minutes","timeInputLayout","srOnlyLabels","layout","getTimeValidator","maksTimer","keepKeyUnaltered","formatTime","minutter","whiteSpace","formatTimeFull","pluralize","tall","singular","plural","DagContent","Clock","visibleText","ariaText","OmsorgstilbudInfo","måned","filterDagerIPeriode","datoErIPeriode","OmsorgstilbudInfoAndDialog","dialogClassName","wrapInfoInPanel","periodeFra","datepickerUtils","getDateStringFromValue","periodeTil","FormComponents","OmsorgstilbudExample","getDateFromDateString","måneder","monthRange","getAlleMånederIPerioden","getIntlFormErrorHandler","DateIntervalPicker","fromDatepickerProps","toDatepickerProps","m","inputName","skalIOmsorgstilbud","routes","isActiveRoute","pathname","indexOf","renderMenuItem","route","data-page","withRouter","history","location","onSelection","lenkeBem","routeConfig","f","getRouteConfig","DevPage","onChangeLocale","toggle","localeFromSessionStorage","getLocaleFromSessionStorage","App","React","setLocale","l","setLocaleInSessionStorage","Modal","setAppElement","ReactDOM","render","document","getElementById","n","SummaryBlock","DatoSvar","UtenlandsoppholdÅrsak","basicHtmlTagRenderers","li","strong","em","FormattedHtmlMessage","JaNeiSvar","tagName","FosterbarnFormField","form_etternavn_label","form_fornavn_label","form_fødselsnummer_label","columns","FraværPeriodeFormFields","getFromDateValidator","disabledDateRanges","getToDateValidator","FraværPeriodeForm","ok","avbryt","tittel","tidsrom","fraværÅrsakRadios","fraværPeriodeToSubmit","fraOgMed_tilOgMed","fullscreenOverlay","disableWeekend","dayPickerProps","initialMonth","setTimeout","validateField","RadioPanelGroup","radios","BostedUtlandFormFields","bostedUtlandUtils","isValidBostedUtland","mapBostedUtlandToFormValues","mapFormValuesToBostedUtland","bostedToSubmit","fomDateLimits","tomDateLimits","andreBosteder","b","allowRangesToStartAndStopOnSameDate","FerieuttakFormFields","ferieuttakUtils","isValidFerieuttak","mapFerieuttakToFormValues","mapFormValuesToFerieuttak","intervalTitle","andreFerieuttak","ferieuttakToSubmit","TidsperiodeFormFields","tidsperiodeUtils","isValidDateTidsperiode","mapDateTidsperiodeToFormValues","mapFormValuesToDateTidsperiode","alleTidsperioder","inlineLabels","dateTidsperiodeToSubmit","t","UtenlandsoppholdFormFields","utenlandsoppholdUtils","isValidUtenlandsopphold","mapFormValuesToUtenlandsopphold","barnInnlagtPerioder","mapUtenlandsoppholdToFormValues","erBarnetInnlagt","defaultFormValues","registrerteTidsperioder","o","utils","utenlandsoppholdToSubmit","countryIsMemberOfEøsOrEfta","hasDateStringValues","includeInnlagtPerioderQuestion","includeInnlagtQuestion","showÅrsakQuestion","formTitle","INNLAGT_DEKKET_NORGE","INNLAGT_DEKKET_ANNET_LAND","ANNET","FraværDagFormFields","getOptionsList","maksTid","newOptionElement","toString","replace","go","jsxList","FraværTimerSelect","FraværDagForm","Select","bredde","FraværDagFormView","antallArbeidstimer","fraværDagToSubmit","valgtDato","datepickerProps","harBesvartFiskerPåBladB","erNyoppstartet","formatDateToApiFormat","harFlereAktiveVirksomheter","harHattVarigEndring"],"mappings":"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","file":"static/js/main.0adc37d9.chunk.js","sourcesContent":["import React from 'react';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport TextareaSummary from '@navikt/sif-common-core/lib/components/textarea-summary/TextareaSummary';\nimport { apiStringDateToDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport DatoSvar, { prettifyApiDate } from '../components/summary/DatoSvar';\nimport IntlLabelValue from '../components/summary/IntlLabelValue';\nimport JaNeiSvar from '../components/summary/JaNeiSvar';\nimport Sitat from '../components/summary/Sitat';\nimport SummaryBlock from '../components/summary/SummaryBlock';\nimport TallSvar from '../components/summary/TallSvar';\nimport { Næringstype, VirksomhetApiData } from './types';\nimport { erVirksomhetRegnetSomNyoppstartet } from './virksomhetUtils';\n\ninterface Props {\n    virksomhet: VirksomhetApiData;\n    harFlereVirksomheter?: boolean;\n}\n\nconst getFiskerNæringTekst = (intl: IntlShape, erPåBladB: boolean) => {\n    const næringstekst = intlHelper(intl, `sifForms.virksomhet.næringstype_${Næringstype.FISKE}`);\n    const bladBTekst = erPåBladB\n        ? intlHelper(intl, 'sifForms.virksomhet.summary.fisker.påBladB')\n        : intlHelper(intl, 'sifForms.virksomhet.summary.fisker.ikkePåBladB');\n    return `${næringstekst} (${bladBTekst})`;\n};\n\nexport const renderVirksomhetSummary = (virksomhet: VirksomhetApiData, intl: IntlShape) => {\n    const land = virksomhet.registrertIUtlandet ? virksomhet.registrertIUtlandet.landnavn : 'Norge';\n\n    const næringstyper = virksomhet.næringstyper\n        .map((næring) =>\n            næring === Næringstype.FISKE && virksomhet.fiskerErPåBladB !== undefined\n                ? getFiskerNæringTekst(intl, virksomhet.fiskerErPåBladB)\n                : intlHelper(intl, `sifForms.virksomhet.næringstype_${næring}`)\n        )\n        .join(', ');\n\n    const tidsinfo = virksomhet.tilOgMed\n        ? intlHelper(intl, 'sifForms.virksomhet.summary.tidsinfo.avsluttet', {\n              fraOgMed: prettifyApiDate(virksomhet.fraOgMed),\n              tilOgMed: prettifyApiDate(virksomhet.tilOgMed),\n          })\n        : intlHelper(intl, 'sifForms.virksomhet.summary.tidsinfo.pågående', {\n              fraOgMed: prettifyApiDate(virksomhet.fraOgMed),\n          });\n\n    return (\n        <>\n            <IntlLabelValue labelKey=\"sifForms.virksomhet.summary.navn\">\n                {virksomhet.navnPåVirksomheten}.\n            </IntlLabelValue>\n            <IntlLabelValue labelKey=\"sifForms.virksomhet.summary.næringstype\">{næringstyper}. </IntlLabelValue>\n            <div>\n                <FormattedMessage id=\"sifForms.virksomhet.summary.registrertILand\" values={{ land }} />\n                {virksomhet.registrertINorge && (\n                    <FormattedMessage\n                        id=\"sifForms.virksomhet.summary.registrertILand.orgnr\"\n                        values={{ orgnr: virksomhet.organisasjonsnummer }}\n                    />\n                )}\n                . <br />\n                {tidsinfo}\n            </div>\n        </>\n    );\n};\n\nconst VirksomhetSummary: React.FunctionComponent<Props> = ({ virksomhet, harFlereVirksomheter }) => {\n    const intl = useIntl();\n    const erRegnetSomNyoppstartet = erVirksomhetRegnetSomNyoppstartet(apiStringDateToDate(virksomhet.fraOgMed));\n\n    return (\n        <>\n            {renderVirksomhetSummary(virksomhet, intl)}\n\n            {virksomhet.næringsinntekt !== undefined && (\n                <SummaryBlock\n                    header={intlHelper(\n                        intl,\n                        harFlereVirksomheter\n                            ? 'sifForms.virksomhet.næringsinntekt.flereVirksomheter.spm'\n                            : 'sifForms.virksomhet.næringsinntekt.enVirksomhet.spm'\n                    )}>\n                    <FormattedMessage id=\"sifForms.virksomhet.summary.næringsinntekst\" />\n                    {` `}\n                    <TallSvar verdi={virksomhet.næringsinntekt} />\n                </SummaryBlock>\n            )}\n\n            {erRegnetSomNyoppstartet === true && (\n                <>\n                    <SummaryBlock header={intlHelper(intl, 'sifForms.virksomhet.har_blitt_yrkesaktiv')}>\n                        {virksomhet.yrkesaktivSisteTreFerdigliknedeÅrene === undefined && (\n                            <JaNeiSvar harSvartJa={virksomhet.yrkesaktivSisteTreFerdigliknedeÅrene !== undefined} />\n                        )}\n                        {virksomhet.yrkesaktivSisteTreFerdigliknedeÅrene !== undefined && (\n                            <FormattedMessage\n                                id=\"sifForms.virksomhet.summary.yrkesaktiv.jaStartetDato\"\n                                values={{\n                                    dato: prettifyApiDate(\n                                        virksomhet.yrkesaktivSisteTreFerdigliknedeÅrene.oppstartsdato\n                                    ),\n                                }}\n                            />\n                        )}\n                    </SummaryBlock>\n                </>\n            )}\n\n            {erRegnetSomNyoppstartet === false && (\n                <>\n                    <SummaryBlock header={intlHelper(intl, 'sifForms.virksomhet.varig_endring_spm')}>\n                        <JaNeiSvar harSvartJa={virksomhet.varigEndring !== undefined} />\n                    </SummaryBlock>\n                    {virksomhet.varigEndring && (\n                        <>\n                            <SummaryBlock header={intlHelper(intl, 'sifForms.virksomhet.summary.varigEndring.dato')}>\n                                <DatoSvar apiDato={virksomhet.varigEndring.dato} />\n                            </SummaryBlock>\n                            <SummaryBlock\n                                header={intlHelper(intl, 'sifForms.virksomhet.summary.varigEndring.næringsinntekt')}>\n                                <TallSvar verdi={virksomhet.varigEndring.inntektEtterEndring} />\n                            </SummaryBlock>\n                            <SummaryBlock\n                                header={intlHelper(intl, 'sifForms.virksomhet.summary.varigEndring.beskrivelse')}>\n                                <Sitat>\n                                    <TextareaSummary text={virksomhet.varigEndring.forklaring} />\n                                </Sitat>\n                            </SummaryBlock>\n                        </>\n                    )}\n                </>\n            )}\n\n            {/* Regnskapsfører */}\n            {virksomhet.registrertINorge && (\n                <SummaryBlock header={intlHelper(intl, 'sifForms.virksomhet.regnskapsfører_spm')}>\n                    {virksomhet.regnskapsfører === undefined && <JaNeiSvar harSvartJa={false} />}\n                    {virksomhet.regnskapsfører !== undefined && (\n                        <FormattedMessage\n                            id=\"sifForms.virksomhet.summary.regnskapsfører.info\"\n                            values={{\n                                navn: virksomhet.regnskapsfører.navn,\n                                telefon: virksomhet.regnskapsfører.telefon,\n                            }}\n                        />\n                    )}\n                </SummaryBlock>\n            )}\n        </>\n    );\n};\n\nexport default VirksomhetSummary;\n","import React from 'react';\nimport { FormattedNumber } from 'react-intl';\n\ninterface Props {\n    verdi?: number;\n}\n\nconst TallSvar: React.FunctionComponent<Props> = ({ verdi }) =>\n    verdi !== undefined ? <FormattedNumber value={verdi} /> : null;\n\nexport default TallSvar;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\n\ninterface Props {\n    labelKey: string;\n}\n\nconst bem = bemUtils('summaryLabelValue');\n\nconst IntlLabelValue: React.FunctionComponent<Props> = ({ labelKey: intlLabelKey, children }) => {\n    const intl = useIntl();\n    return (\n        <div className={bem.block}>\n            <span className={bem.element('label')}>{intlHelper(intl, intlLabelKey)}:</span>{' '}\n            <span className={bem.element('value')}>{children}</span>\n        </div>\n    );\n};\n\nexport default IntlLabelValue;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList,\n    ModalFormAndListLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport BostedUtlandForm from './BostedUtlandForm';\nimport BostedUtlandListe from './BostedUtlandList';\nimport { BostedUtland } from './types';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames, ValidationError> {\n    name: FieldNames;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction BostedUtlandListAndDialog<FieldNames>({ name, minDate, maxDate, validate, labels }: Props<FieldNames>) {\n    return (\n        <FormikModalFormAndList<FieldNames, BostedUtland, ValidationError>\n            name={name}\n            labels={labels}\n            validate={validate}\n            dialogWidth=\"narrow\"\n            sortFunc={sortItemsByFom}\n            formRenderer={({ onSubmit, onCancel, item, allItems }) => (\n                <BostedUtlandForm\n                    bosted={item}\n                    alleBosteder={allItems}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    onSubmit={onSubmit}\n                    onCancel={onCancel}\n                />\n            )}\n            listRenderer={({ items, onEdit, onDelete }) => (\n                <BostedUtlandListe bosteder={items} onEdit={onEdit} onDelete={onDelete} />\n            )}\n        />\n    );\n}\n\nexport default BostedUtlandListAndDialog;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { getCountryName } from '@navikt/sif-common-formik';\nimport { BostedUtland } from './types';\nimport './bostedUtlandList.less';\n\ninterface Props {\n    bosteder: BostedUtland[];\n    onEdit?: (opphold: BostedUtland) => void;\n    onDelete?: (opphold: BostedUtland) => void;\n}\n\nconst bem = bemUtils('bostedUtlandList');\n\nconst BostedUtlandList = ({ bosteder, onDelete, onEdit }: Props) => {\n    const intl = useIntl();\n    const renderBostedUtlandLabel = (opphold: BostedUtland): React.ReactNode => {\n        const navn = getCountryName(opphold.landkode, intl.locale);\n        return (\n            <div className={bem.element('label')}>\n                <span className={bem.element('land')}>\n                    {onEdit && <ActionLink onClick={() => onEdit(opphold)}>{navn}</ActionLink>}\n                    {!onEdit && <span>{navn}</span>}\n                </span>\n                <span className={bem.element('dato')}>\n                    {prettifyDateExtended(opphold.fom)} - {prettifyDateExtended(opphold.tom)}\n                </span>\n            </div>\n        );\n    };\n\n    return (\n        <ItemList<BostedUtland>\n            getItemId={(opphold) => opphold.id}\n            getItemTitle={(opphold) => getCountryName(opphold.landkode, intl.locale)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderBostedUtlandLabel}\n            items={bosteder}\n        />\n    );\n};\n\nexport default BostedUtlandList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList,\n    ModalFormAndListLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport FerieuttakForm from './FerieuttakForm';\nimport FerieuttakList from './FerieuttakList';\nimport { Ferieuttak } from './types';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames, ValidationError> {\n    name: FieldNames;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction FerieuttakListAndDialog<FieldNames>({ name, minDate, maxDate, validate, labels }: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, Ferieuttak, ValidationError>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                sortFunc={sortItemsByFom}\n                formRenderer={({ onSubmit, onCancel, item, allItems }) => (\n                    <FerieuttakForm\n                        ferieuttak={item}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                        alleFerieuttak={allItems}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FerieuttakList ferieuttak={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FerieuttakListAndDialog;\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { Ferieuttak } from './types';\n\ninterface Props {\n    ferieuttak: Ferieuttak[];\n    onEdit?: (opphold: Ferieuttak) => void;\n    onDelete?: (opphold: Ferieuttak) => void;\n}\n\nconst FerieuttakList = ({ ferieuttak = [], onDelete, onEdit }: Props) => {\n    const getDateTitleString = (uttak: Ferieuttak) =>\n        `${prettifyDateExtended(uttak.fom)} - ${prettifyDateExtended(uttak.tom)}`;\n\n    const renderFerieuttakLabel = (uttak: Ferieuttak): React.ReactNode => {\n        const title = getDateTitleString(uttak);\n        return (\n            <>\n                {onEdit && <ActionLink onClick={() => onEdit(uttak)}>{title}</ActionLink>}\n                {!onEdit && <span>{title}</span>}\n            </>\n        );\n    };\n\n    return (\n        <ItemList<Ferieuttak>\n            getItemId={(uttak) => uttak.id}\n            getItemTitle={(uttak) => getDateTitleString(uttak)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderFerieuttakLabel}\n            items={ferieuttak.filter((uttak) => uttak.id !== undefined)}\n        />\n    );\n};\n\nexport default FerieuttakList;\n","import { hasValue } from '@navikt/sif-common-formik/lib/validation/validationUtils';\n\nexport interface Fosterbarn {\n    id?: string;\n    fødselsnummer: string;\n    fornavn?: string;\n    etternavn?: string;\n}\n\nexport const isFosterbarn = (fosterbarn: Partial<Fosterbarn>, includeName?: boolean): fosterbarn is Fosterbarn => {\n    const { fornavn, etternavn, fødselsnummer } = fosterbarn;\n    if (includeName) {\n        return hasValue(fornavn) && hasValue(etternavn) && hasValue(fødselsnummer);\n    }\n    return hasValue(fødselsnummer);\n};\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { FormikModalFormAndList, TypedFormInputValidationProps } from '@navikt/sif-common-formik';\nimport FosterbarnForm from './FosterbarnForm';\nimport FosterbarnList from './FosterbarnList';\nimport { Fosterbarn } from './types';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\nexport interface FosterbarnListAndDialogText {\n    liste_legg_til_knapp: string;\n    liste_tittel?: string;\n    liste_tom_liste_tekst?: string;\n    modal_tittel: string;\n}\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames, ValidationError> {\n    name: FieldNames;\n    texts?: FosterbarnListAndDialogText;\n    includeName?: boolean;\n    disallowedFødselsnumre?: string[];\n}\n\nfunction FosterbarnListAndDialog<FieldNames>({\n    name,\n    validate,\n    texts,\n    includeName,\n    disallowedFødselsnumre,\n}: Props<FieldNames>) {\n    const intl = useIntl();\n\n    const defaultText: FosterbarnListAndDialogText = {\n        liste_legg_til_knapp: intlHelper(intl, 'fosterbarn.list.legg_til_knapp'),\n        liste_tittel: intlHelper(intl, 'fosterbarn.list.tittel'),\n        modal_tittel: intlHelper(intl, 'fosterbarn.modal.tittel'),\n    };\n\n    const txt = { ...defaultText, ...texts };\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, Fosterbarn, ValidationError>\n                name={name}\n                labels={{\n                    addLabel: txt.liste_legg_til_knapp,\n                    modalTitle: txt.modal_tittel,\n                    emptyListText: txt.liste_tom_liste_tekst,\n                    listTitle: txt.liste_tittel,\n                }}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                formRenderer={({ onSubmit, onCancel, item }) => (\n                    <FosterbarnForm\n                        fosterbarn={item}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                        includeName={includeName}\n                        disallowedFødselsnumre={disallowedFødselsnumre}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FosterbarnList fosterbarn={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FosterbarnListAndDialog;\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { formatName } from '@navikt/sif-common-core/lib/utils/personUtils';\nimport { Fosterbarn } from './types';\n\ninterface Props {\n    fosterbarn: Fosterbarn[];\n    onEdit?: (opphold: Fosterbarn) => void;\n    onDelete?: (opphold: Fosterbarn) => void;\n}\n\nconst FosterbarnList = ({ fosterbarn = [], onDelete, onEdit }: Props) => {\n    const getBarnTitleString = (barn: Fosterbarn) => {\n        return (\n            <>\n                <span style={{ paddingRight: '1rem' }}>{barn.fødselsnummer}</span>{' '}\n                {barn.fornavn && barn.etternavn && <span>{formatName(barn.fornavn, barn.etternavn)}</span>}\n            </>\n        );\n    };\n    const renderFosterbarnLabel = (barn: Fosterbarn): React.ReactNode => {\n        return (\n            <>\n                {onEdit && <ActionLink onClick={() => onEdit(barn)}>{getBarnTitleString(barn)}</ActionLink>}\n                {!onEdit && <span>{getBarnTitleString(barn)}</span>}\n            </>\n        );\n    };\n\n    return (\n        <ItemList<Fosterbarn>\n            getItemId={(barn) => barn.id}\n            getItemTitle={(barn) =>\n                barn.fornavn && barn.etternavn ? formatName(barn.fornavn, barn.etternavn) : barn.fødselsnummer\n            }\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderFosterbarnLabel}\n            items={fosterbarn.filter((barn) => barn.id !== undefined)}\n        />\n    );\n};\n\nexport default FosterbarnList;\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { DateTidsperiode } from './types';\n\ninterface Props {\n    tidsperiode: DateTidsperiode[];\n    onEdit?: (opphold: DateTidsperiode) => void;\n    onDelete?: (opphold: DateTidsperiode) => void;\n}\n\nconst TidsperiodeList = ({ tidsperiode = [], onDelete, onEdit }: Props) => {\n    const getDateTitleString = (uttak: DateTidsperiode) =>\n        `${prettifyDateExtended(uttak.fom)} - ${prettifyDateExtended(uttak.tom)}`;\n\n    const renderTidsperiodeLabel = (uttak: DateTidsperiode): React.ReactNode => {\n        const title = getDateTitleString(uttak);\n        return (\n            <>\n                {onEdit && <ActionLink onClick={() => onEdit(uttak)}>{title}</ActionLink>}\n                {!onEdit && <span>{title}</span>}\n            </>\n        );\n    };\n\n    return (\n        <ItemList<DateTidsperiode>\n            getItemId={(uttak) => uttak.id}\n            getItemTitle={(uttak) => getDateTitleString(uttak)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderTidsperiodeLabel}\n            items={tidsperiode.filter((uttak) => uttak.id !== undefined)}\n        />\n    );\n};\n\nexport default TidsperiodeList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList,\n    ModalFormAndListLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport { Utenlandsopphold } from './types';\nimport UtenlandsoppholdForm from './UtenlandsoppholdForm';\nimport UtenlandsoppholdListe from './UtenlandsoppholdList';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames, ValidationError> {\n    name: FieldNames;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction UtenlandsoppholdListAndDialog<FieldNames>({ name, minDate, maxDate, validate, labels }: Props<FieldNames>) {\n    return (\n        <FormikModalFormAndList<FieldNames, Utenlandsopphold, ValidationError>\n            name={name}\n            labels={labels}\n            validate={validate}\n            dialogWidth=\"narrow\"\n            sortFunc={sortItemsByFom}\n            formRenderer={({ onSubmit, onCancel, item, allItems }) => (\n                <UtenlandsoppholdForm\n                    opphold={item}\n                    alleOpphold={allItems}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    onSubmit={onSubmit}\n                    onCancel={onCancel}\n                />\n            )}\n            listRenderer={({ items, onEdit, onDelete }) => (\n                <UtenlandsoppholdListe utenlandsopphold={items} onEdit={onEdit} onDelete={onDelete} />\n            )}\n        />\n    );\n}\n\nexport default UtenlandsoppholdListAndDialog;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { getCountryName } from '@navikt/sif-common-formik';\nimport { Utenlandsopphold } from './types';\nimport './utenlandsoppholdList.less';\n\ninterface Props {\n    utenlandsopphold: Utenlandsopphold[];\n    onEdit?: (opphold: Utenlandsopphold) => void;\n    onDelete?: (opphold: Utenlandsopphold) => void;\n}\n\nconst bem = bemUtils('utenlandsoppholdList');\n\nconst UtenlandsoppholdList = ({ utenlandsopphold, onDelete, onEdit }: Props) => {\n    const intl = useIntl();\n    const renderUtenlandsoppholdLabel = (opphold: Utenlandsopphold): React.ReactNode => {\n        const navn = getCountryName(opphold.landkode, intl.locale);\n        return (\n            <div className={bem.element('label')}>\n                <span className={bem.element('land')}>\n                    {onEdit && <ActionLink onClick={() => onEdit(opphold)}>{navn}</ActionLink>}\n                    {!onEdit && <span>{navn}</span>}\n                </span>\n                <span className={bem.element('dato')}>\n                    {prettifyDateExtended(opphold.fom)} - {prettifyDateExtended(opphold.tom)}\n                </span>\n            </div>\n        );\n    };\n\n    return (\n        <ItemList<Utenlandsopphold>\n            getItemId={(opphold) => opphold.id}\n            getItemTitle={(opphold) => getCountryName(opphold.landkode, intl.locale)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderUtenlandsoppholdLabel}\n            items={utenlandsopphold}\n        />\n    );\n};\n\nexport default UtenlandsoppholdList;\n","import React from 'react';\nimport { DateRange, sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList,\n    ModalFormAndListLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport FraværDagerList from './FraværDagerList';\nimport FraværDagFormView from './FraværDagForm';\nimport { FraværDag } from './types';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames, ValidationError> {\n    name: FieldNames;\n    minDate: Date;\n    maxDate: Date;\n    dagDescription?: JSX.Element;\n    labels: ModalFormAndListLabels;\n    formHeaderContent?: JSX.Element;\n    dateRangesToDisable?: DateRange[];\n    helgedagerIkkeTillatt?: boolean;\n    maksArbeidstidPerDag?: number;\n}\n\nfunction FraværDagerListAndDialog<FieldNames>({\n    name,\n    minDate,\n    maxDate,\n    validate,\n    dagDescription,\n    labels,\n    formHeaderContent,\n    dateRangesToDisable,\n    helgedagerIkkeTillatt,\n    maksArbeidstidPerDag,\n}: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, FraværDag, ValidationError>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                sortFunc={(fraværDagA: FraværDag, fraværDagB: FraværDag) =>\n                    sortItemsByFom({ fom: fraværDagA.dato }, { fom: fraværDagB.dato })\n                }\n                formRenderer={({ onSubmit, onCancel, item }) => (\n                    <FraværDagFormView\n                        fraværDag={item}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        headerContent={formHeaderContent}\n                        dagDescription={dagDescription}\n                        dateRangesToDisable={dateRangesToDisable}\n                        helgedagerIkkeTillatt={helgedagerIkkeTillatt}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                        maksArbeidstidPerDag={maksArbeidstidPerDag}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FraværDagerList fraværDager={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FraværDagerListAndDialog;\n","import React from 'react';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport FraværListItem from './FraværListItem';\nimport { timeText } from './fraværUtilities';\nimport { FraværDag } from './types';\n\ninterface Props {\n    fraværDager: FraværDag[];\n    onEdit?: (fraværDag: FraværDag) => void;\n    onDelete?: (fraværDag: FraværDag) => void;\n}\n\nconst FraværDagerList = ({ fraværDager = [], onDelete, onEdit }: Props) => {\n    const getFraværDagListItemTitle = (fraværDag: FraværDag) =>\n        `${prettifyDateExtended(fraværDag.dato)}:\n        Skulle jobbet ${fraværDag.timerArbeidsdag} ${timeText(fraværDag.timerArbeidsdag)}.\n        Borte fra jobb ${fraværDag.timerFravær}  ${timeText(fraværDag.timerFravær)}.`;\n\n    const renderFraværDagLabel = (fraværDag: FraværDag): React.ReactNode => {\n        const title = getFraværDagListItemTitle(fraværDag);\n        return (\n            <FraværListItem\n                title={title}\n                årsak={fraværDag.årsak}\n                onEdit={onEdit ? () => onEdit(fraværDag) : undefined}\n            />\n        );\n    };\n\n    return (\n        <ItemList<FraværDag>\n            getItemId={(fraværDag) => fraværDag.id}\n            getItemTitle={(fraværDag) => getFraværDagListItemTitle(fraværDag)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderFraværDagLabel}\n            items={fraværDager.filter((fraværDag) => fraværDag.id !== undefined)}\n        />\n    );\n};\n\nexport default FraværDagerList;\n","import React from 'react';\nimport { DateRange, sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList,\n    ModalFormAndListLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport FraværPeriodeForm from './FraværPeriodeForm';\nimport FraværPerioderList from './FraværPerioderList';\nimport { FraværPeriode } from './types';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames, ValidationError> {\n    name: FieldNames;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n    periodeDescription?: JSX.Element;\n    formHeaderContent?: JSX.Element;\n    dateRangesToDisable?: DateRange[];\n    begrensTilSammeÅr?: boolean;\n    helgedagerIkkeTillat?: boolean;\n}\n\nfunction FraværPerioderListAndDialog<FieldNames>({\n    name,\n    minDate,\n    maxDate,\n    dateRangesToDisable,\n    periodeDescription,\n    formHeaderContent,\n    begrensTilSammeÅr = true,\n    validate,\n    labels,\n    helgedagerIkkeTillat,\n}: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, FraværPeriode, ValidationError>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                sortFunc={(fraværPeriodeA: FraværPeriode, fraværPeriodeB: FraværPeriode) =>\n                    sortItemsByFom({ fom: fraværPeriodeA.fraOgMed }, { fom: fraværPeriodeB.tilOgMed })\n                }\n                formRenderer={({ onSubmit, onCancel, item }) => (\n                    <FraværPeriodeForm\n                        fraværPeriode={item}\n                        periodeDescription={periodeDescription}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        headerContent={formHeaderContent}\n                        dateRangesToDisable={dateRangesToDisable}\n                        helgedagerIkkeTillat={helgedagerIkkeTillat}\n                        begrensTilSammeÅr={begrensTilSammeÅr}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FraværPerioderList fraværPerioder={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FraværPerioderListAndDialog;\n","import React from 'react';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { FraværPeriode } from './types';\nimport FraværListItem from './FraværListItem';\n\ninterface Props {\n    fraværPerioder: FraværPeriode[];\n    onEdit?: (fraværPeriode: FraværPeriode) => void;\n    onDelete?: (fraværPeriode: FraværPeriode) => void;\n    useTrashcan?: boolean;\n}\n\nconst FraværPerioderList = ({ fraværPerioder = [], onDelete, onEdit, useTrashcan }: Props) => {\n    const getDateTitleString = (fraværPeriode: FraværPeriode) =>\n        `${prettifyDateExtended(fraværPeriode.fraOgMed)} - ${prettifyDateExtended(fraværPeriode.tilOgMed)}`;\n\n    const renderFraværPeriodeLabel = (fraværPeriode: FraværPeriode): React.ReactNode => {\n        const title = getDateTitleString(fraværPeriode);\n        return (\n            <FraværListItem\n                title={title}\n                årsak={fraværPeriode.årsak}\n                onEdit={onEdit ? () => onEdit(fraværPeriode) : undefined}\n            />\n        );\n    };\n\n    return (\n        <ItemList<FraværPeriode>\n            getItemId={(fraværPeriode) => fraværPeriode.id}\n            getItemTitle={(fraværPeriode) => getDateTitleString(fraværPeriode)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderFraværPeriodeLabel}\n            items={fraværPerioder.filter((fraværPeriode) => fraværPeriode.id !== undefined)}\n            useTrashcan={useTrashcan || false}\n        />\n    );\n};\n\nexport default FraværPerioderList;\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport CounsellorPanel from '@navikt/sif-common-core/lib/components/counsellor-panel/CounsellorPanel';\nimport ExpandableInfo from '@navikt/sif-common-core/lib/components/expandable-content/ExpandableInfo';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport ResponsivePanel from '@navikt/sif-common-core/lib/components/responsive-panel/ResponsivePanel';\nimport { date3YearsAgo, date4YearsAgo, dateToday, prettifyDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { getTypedFormComponents, ISOStringToDate, YesOrNo } from '@navikt/sif-common-formik/lib';\nimport {\n    getDateRangeValidator,\n    getDateValidator,\n    getListValidator,\n    getNumberValidator,\n    getOrgNumberValidator,\n    getRequiredFieldValidator,\n    getStringValidator,\n    getYesOrNoValidator,\n    ValidateDateError,\n    ValidateDateRangeError,\n    ValidateListError,\n    ValidateNumberError,\n    ValidateOrgNumberError,\n    ValidateRequiredFieldError,\n    ValidateStringError,\n    ValidateYesOrNoError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport { FormikProps } from 'formik';\nimport { Systemtittel, Undertittel } from 'nav-frontend-typografi';\nimport { isVirksomhet, Næringstype, Virksomhet, VirksomhetFormField, VirksomhetFormValues } from './types';\nimport {\n    erVirksomhetRegnetSomNyoppstartet,\n    harFiskerNæringstype,\n    mapFormValuesToVirksomhet,\n    mapVirksomhetToFormValues,\n} from './virksomhetUtils';\nimport { handleDateRangeValidationError } from '../utils';\n\ninterface Props {\n    virksomhet?: Virksomhet;\n    skipOrgNumValidation?: boolean;\n    harFlereVirksomheter?: boolean;\n    onSubmit: (oppdrag: Virksomhet) => void;\n    onCancel: () => void;\n}\n\nconst MAKS_INNTEKT = 999999999;\n\nexport const VirksomhetFormErrors = {\n    [VirksomhetFormField.næringstyper]: {\n        [ValidateListError.listIsEmpty]: 'virksomhetForm.næringstyper.listIsEmpty',\n    },\n    [VirksomhetFormField.fiskerErPåBladB]: {\n        [ValidateYesOrNoError.yesOrNoIsUnanswered]: 'virksomhetForm.fiskerErPåBladB.yesOrNoIsUnanswered',\n    },\n    [VirksomhetFormField.navnPåVirksomheten]: {\n        [ValidateStringError.stringHasNoValue]: 'virksomhetForm.navnPåVirksomheten.stringHasNoValue',\n    },\n    [VirksomhetFormField.registrertINorge]: {\n        [ValidateYesOrNoError.yesOrNoIsUnanswered]: 'virksomhetForm.registrertINorge.yesOrNoIsUnanswered',\n    },\n    [VirksomhetFormField.registrertILand]: {\n        [ValidateRequiredFieldError.noValue]: 'virksomhetForm.registrertILand.noValue',\n    },\n    [VirksomhetFormField.organisasjonsnummer]: {\n        [ValidateOrgNumberError.orgNumberHasInvalidFormat]:\n            'virksomhetForm.organisasjonsnummer.orgNumberHasInvalidFormat',\n    },\n    [VirksomhetFormField.fom]: {\n        [ValidateDateError.dateHasNoValue]: 'virksomhetForm.fom.dateHasNoValue',\n        [ValidateDateError.dateIsAfterMax]: 'virksomhetForm.fom.dateIsAfterMax',\n        [ValidateDateError.dateHasInvalidFormat]: 'virksomhetForm.fom.dateHasInvalidFormat',\n        [ValidateDateRangeError.fromDateIsAfterToDate]: 'virksomhetForm.fom.fromDateIsAfterToDate',\n    },\n    [VirksomhetFormField.tom]: {\n        [ValidateDateError.dateHasNoValue]: 'virksomhetForm.tom.dateHasNoValue',\n        [ValidateDateError.dateIsBeforeMin]: 'virksomhetForm.tom.dateIsBeforeMin',\n        [ValidateDateError.dateIsAfterMax]: 'virksomhetForm.tom.dateIsAfterMax',\n        [ValidateDateError.dateHasInvalidFormat]: 'virksomhetForm.tom.dateHasInvalidFormat',\n        [ValidateDateRangeError.toDateIsBeforeFromDate]: 'virksomhetForm.tom.toDateIsBeforeFromDate',\n    },\n    [VirksomhetFormField.næringsinntekt]: {\n        [ValidateNumberError.numberHasInvalidFormat]: 'virksomhetForm.næringsinntekt.numberHasInvalidFormat',\n        [ValidateNumberError.numberIsTooSmall]: 'virksomhetForm.næringsinntekt.numberIsTooSmall',\n        [ValidateNumberError.numberIsTooLarge]: 'virksomhetForm.næringsinntekt.numberIsTooLarge',\n    },\n    [VirksomhetFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene]: {\n        [ValidateYesOrNoError.yesOrNoIsUnanswered]:\n            'virksomhetForm.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene.yesOrNoIsUnanswered',\n    },\n    [VirksomhetFormField.blittYrkesaktivDato]: {\n        [ValidateDateError.dateHasNoValue]: 'virksomhetForm.blittYrkesaktivDato.dateHasNoValue',\n        [ValidateDateError.dateHasInvalidFormat]: 'virksomhetForm.blittYrkesaktivDato.dateHasInvalidFormat',\n        [ValidateDateError.dateIsAfterMax]: 'virksomhetForm.blittYrkesaktivDato.dateIsAfterMax',\n        [ValidateDateError.dateIsBeforeMin]: 'virksomhetForm.blittYrkesaktivDato.dateIsBeforeMin',\n    },\n    [VirksomhetFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår]: {\n        [ValidateYesOrNoError.yesOrNoIsUnanswered]:\n            'virksomhetForm.hattVarigEndringAvNæringsinntektSiste4Kalenderår.yesOrNoIsUnanswered',\n    },\n    [VirksomhetFormField.varigEndringINæringsinntekt_dato]: {\n        [ValidateDateError.dateHasNoValue]: 'virksomhetForm.varigEndringINæringsinntekt_dato.dateHasNoValue',\n        [ValidateDateError.dateHasInvalidFormat]:\n            'virksomhetForm.varigEndringINæringsinntekt_dato.dateHasInvalidFormat',\n        [ValidateDateError.dateIsAfterMax]: 'virksomhetForm.varigEndringINæringsinntekt_dato.dateIsAfterMax',\n        [ValidateDateError.dateIsBeforeMin]: 'virksomhetForm.varigEndringINæringsinntekt_dato.dateIsBeforeMin',\n    },\n    [VirksomhetFormField.varigEndringINæringsinntekt_inntektEtterEndring]: {\n        [ValidateNumberError.numberHasNoValue]:\n            'virksomhetForm.varigEndringINæringsinntekt_inntektEtterEndring.numberHasNoValue',\n        [ValidateNumberError.numberHasInvalidFormat]:\n            'virksomhetForm.varigEndringINæringsinntekt_inntektEtterEndring.numberHasInvalidFormat',\n        [ValidateNumberError.numberIsTooLarge]:\n            'virksomhetForm.varigEndringINæringsinntekt_inntektEtterEndring.numberIsTooLarge',\n        [ValidateNumberError.numberIsTooSmall]:\n            'virksomhetForm.varigEndringINæringsinntekt_inntektEtterEndring.numberIsTooSmall',\n    },\n    [VirksomhetFormField.varigEndringINæringsinntekt_forklaring]: {\n        [ValidateStringError.stringHasNoValue]:\n            'virksomhetForm.varigEndringINæringsinntekt_forklaring.stringHasNoValue',\n        [ValidateStringError.stringIsTooLong]: 'virksomhetForm.varigEndringINæringsinntekt_forklaring.stringIsTooLong',\n        [ValidateStringError.stringIsTooShort]:\n            'virksomhetForm.varigEndringINæringsinntekt_forklaring.stringIsTooShort',\n    },\n    [VirksomhetFormField.harRegnskapsfører]: {\n        [ValidateYesOrNoError.yesOrNoIsUnanswered]: 'virksomhetForm.harRegnskapsfører.yesOrNoIsUnanswered',\n    },\n    [VirksomhetFormField.regnskapsfører_navn]: {\n        [ValidateStringError.stringHasNoValue]: 'virksomhetForm.regnskapsfører_navn.stringHasNoValue',\n        [ValidateStringError.stringIsTooLong]: 'virksomhetForm.regnskapsfører_navn.stringIsTooLong',\n        [ValidateStringError.stringIsTooShort]: 'virksomhetForm.regnskapsfører_navn.stringIsTooShort',\n    },\n    [VirksomhetFormField.regnskapsfører_telefon]: {\n        [ValidateStringError.stringHasNoValue]: 'virksomhetForm.regnskapsfører_telefon.stringHasNoValue',\n        [ValidateStringError.stringIsTooLong]: 'virksomhetForm.regnskapsfører_telefon.stringIsTooLong',\n        [ValidateStringError.stringIsTooShort]: 'virksomhetForm.regnskapsfører_telefon.stringIsTooShort',\n    },\n};\n\nconst Form = getTypedFormComponents<VirksomhetFormField, VirksomhetFormValues, ValidationError>();\n\nconst visNæringsinntekt = (values: VirksomhetFormValues): boolean => {\n    const fomDate = ISOStringToDate(values.fom);\n    return fomDate !== undefined && erVirksomhetRegnetSomNyoppstartet(fomDate);\n};\n\nconst ensureValidNæringsinntekt = (values: VirksomhetFormValues): number | undefined => {\n    if (visNæringsinntekt(values)) {\n        return values.næringsinntekt;\n    }\n    return undefined;\n};\n\nconst VirksomhetForm = ({ virksomhet, harFlereVirksomheter, onSubmit, onCancel, skipOrgNumValidation }: Props) => {\n    const intl = useIntl();\n    const getText = (key: string, value?: any): string => intlHelper(intl, `${key}`, value);\n\n    const onFormikSubmit = (values: VirksomhetFormValues) => {\n        const virksomhetToSubmit = mapFormValuesToVirksomhet(values, virksomhet?.id);\n        if (isVirksomhet(virksomhetToSubmit)) {\n            onSubmit({\n                ...virksomhetToSubmit,\n                næringsinntekt: ensureValidNæringsinntekt(values),\n            });\n        } else {\n            throw new Error('VirksomhetForm: Formvalues is not a valid Virksomhet on submit.');\n        }\n    };\n\n    return (\n        <Form.FormikWrapper\n            initialValues={virksomhet ? mapVirksomhetToFormValues(virksomhet) : { næringstyper: [] }}\n            onSubmit={onFormikSubmit}\n            renderForm={(formik: FormikProps<VirksomhetFormValues>) => {\n                const { values, setFieldValue } = formik;\n                const { navnPåVirksomheten = 'virksomheten', næringstyper = [] } = values;\n                const fomDate = ISOStringToDate(values.fom);\n                const tomDate = ISOStringToDate(values.tom);\n                return (\n                    <Form.Form\n                        includeValidationSummary={true}\n                        onCancel={onCancel}\n                        formErrorHandler={getFormErrorHandler(intl, 'virksomhetForm')}>\n                        <Box padBottom=\"l\">\n                            <Systemtittel tag=\"h1\">\n                                {harFlereVirksomheter\n                                    ? getText('sifForms.virksomhet.form_title.flere')\n                                    : getText('sifForms.virksomhet.form_title')}\n                            </Systemtittel>\n                        </Box>\n\n                        <Form.CheckboxPanelGroup\n                            name={VirksomhetFormField.næringstyper}\n                            legend={getText('sifForms.virksomhet.hvilken_type_virksomhet')}\n                            checkboxes={[\n                                {\n                                    value: Næringstype.FISKE,\n                                    label: getText(`sifForms.virksomhet.næringstype_${Næringstype.FISKE}`),\n                                },\n                                {\n                                    value: Næringstype.JORDBRUK_SKOGBRUK,\n                                    label: getText(`sifForms.virksomhet.næringstype_${Næringstype.JORDBRUK_SKOGBRUK}`),\n                                },\n                                {\n                                    value: Næringstype.DAGMAMMA,\n                                    label: getText(`sifForms.virksomhet.næringstype_${Næringstype.DAGMAMMA}`),\n                                },\n                                {\n                                    value: Næringstype.ANNEN,\n                                    label: getText(`sifForms.virksomhet.næringstype_${Næringstype.ANNEN}`),\n                                },\n                            ]}\n                            validate={getListValidator({ required: true })}\n                        />\n\n                        {harFiskerNæringstype(næringstyper) && (\n                            <Box margin=\"xl\">\n                                <Form.YesOrNoQuestion\n                                    name={VirksomhetFormField.fiskerErPåBladB}\n                                    legend={getText('sifForms.virksomhet.fisker_blad_b')}\n                                    validate={getYesOrNoValidator()}\n                                />\n                            </Box>\n                        )}\n\n                        <Box margin=\"xl\">\n                            <Form.Input\n                                name={VirksomhetFormField.navnPåVirksomheten}\n                                label={getText('sifForms.virksomhet.hva_heter_virksomheten')}\n                                validate={getStringValidator({ required: true })}\n                                maxLength={50}\n                            />\n                        </Box>\n\n                        <Box margin=\"xl\">\n                            <Form.YesOrNoQuestion\n                                name={VirksomhetFormField.registrertINorge}\n                                legend={getText('sifForms.virksomhet.registert_i_norge', { navnPåVirksomheten })}\n                                validate={getYesOrNoValidator()}\n                                description={\n                                    harFiskerNæringstype(næringstyper) ? (\n                                        <ExpandableInfo\n                                            title={intlHelper(intl, 'sifForms.virksomhet.veileder_fisker.tittel')}>\n                                            <FormattedMessage\n                                                id=\"sifForms.virksomhet.veileder_fisker\"\n                                                values={{ navnPåVirksomheten }}\n                                            />\n                                        </ExpandableInfo>\n                                    ) : undefined\n                                }\n                            />\n                        </Box>\n\n                        {values.registrertINorge === YesOrNo.NO && (\n                            <Box margin=\"xl\">\n                                <Form.CountrySelect\n                                    name={VirksomhetFormField.registrertILand}\n                                    label={getText('sifForms.virksomhet.registert_i_hvilket_land', {\n                                        navnPåVirksomheten,\n                                    })}\n                                    validate={getRequiredFieldValidator()}\n                                    useAlpha3Code={true}\n                                />\n                            </Box>\n                        )}\n\n                        {values.registrertINorge === YesOrNo.YES && (\n                            <Box margin=\"xl\">\n                                <Form.Input\n                                    name={VirksomhetFormField.organisasjonsnummer}\n                                    label={getText('sifForms.virksomhet.organisasjonsnummer')}\n                                    style={{ maxWidth: '10rem' }}\n                                    maxLength={9}\n                                    validate={\n                                        skipOrgNumValidation ? undefined : getOrgNumberValidator({ required: true })\n                                    }\n                                />\n                            </Box>\n                        )}\n\n                        {(values.registrertINorge === YesOrNo.YES || values.registrertINorge === YesOrNo.NO) && (\n                            <Box margin=\"xl\">\n                                <Form.DateRangePicker\n                                    legend={getText('sifForms.virksomhet.startdato', { navnPåVirksomheten })}\n                                    showYearSelector={true}\n                                    maxDate={dateToday}\n                                    fromInputProps={{\n                                        label: getText('sifForms.virksomhet.kalender_fom'),\n                                        name: VirksomhetFormField.fom,\n                                        validate: (value) => {\n                                            const error = getDateRangeValidator({\n                                                required: true,\n                                                max: dateToday,\n                                                toDate: tomDate,\n                                            }).validateFromDate(value);\n                                            if (error === ValidateDateError.dateIsAfterMax) {\n                                                return {\n                                                    key: error,\n                                                    values: { dato: prettifyDate(dateToday) },\n                                                };\n                                            }\n                                            return error;\n                                        },\n                                    }}\n                                    toInputProps={{\n                                        label: getText('sifForms.virksomhet.kalender_tom'),\n                                        name: VirksomhetFormField.tom,\n                                        disabled: values.erPågående === true,\n                                        validate:\n                                            values.erPågående === true\n                                                ? undefined\n                                                : (value) => {\n                                                      const error = getDateRangeValidator({\n                                                          required: true,\n                                                          max: dateToday,\n                                                          fromDate: fomDate,\n                                                      }).validateToDate(value);\n                                                      return handleDateRangeValidationError(\n                                                          error,\n                                                          undefined,\n                                                          dateToday\n                                                      );\n                                                  },\n                                    }}\n                                />\n                                <Form.Checkbox\n                                    label={getText('sifForms.virksomhet.kalender_pågående')}\n                                    name={VirksomhetFormField.erPågående}\n                                    afterOnChange={(checked) => {\n                                        if (checked) {\n                                            setFieldValue(VirksomhetFormField.tom, undefined);\n                                        }\n                                    }}\n                                />\n                            </Box>\n                        )}\n\n                        {fomDate && (\n                            <>\n                                {harFlereVirksomheter && (\n                                    <Box margin=\"xxl\">\n                                        {erVirksomhetRegnetSomNyoppstartet(fomDate) ? (\n                                            <>\n                                                <Undertittel>\n                                                    {getText(\n                                                        'sifForms.virksomhet.nyoppstartet.næringsinntektFlere.header'\n                                                    )}\n                                                </Undertittel>\n                                                <p>\n                                                    {getText(\n                                                        'sifForms.virksomhet.nyoppstartet.næringsinntektFlere.info'\n                                                    )}\n                                                </p>\n                                            </>\n                                        ) : (\n                                            <>\n                                                <Undertittel>\n                                                    {getText(\n                                                        'sifForms.virksomhet.ikkeNyoppstartet.næringsinntektFlere.header'\n                                                    )}\n                                                </Undertittel>\n                                                <p>\n                                                    {getText(\n                                                        'sifForms.virksomhet.ikkeNyoppstartet.næringsinntektFlere.info'\n                                                    )}\n                                                </p>\n                                            </>\n                                        )}\n                                    </Box>\n                                )}\n\n                                {/* Nyoppstartet  */}\n                                {erVirksomhetRegnetSomNyoppstartet(fomDate) && (\n                                    <>\n                                        <Box margin=\"xl\">\n                                            <Form.NumberInput\n                                                name={VirksomhetFormField.næringsinntekt}\n                                                label={\n                                                    harFlereVirksomheter\n                                                        ? getText(\n                                                              'sifForms.virksomhet.næringsinntekt.flereVirksomheter.spm'\n                                                          )\n                                                        : getText('sifForms.virksomhet.næringsinntekt.enVirksomhet.spm')\n                                                }\n                                                maxLength={10}\n                                                style={{ maxWidth: '10rem' }}\n                                                validate={(value) => {\n                                                    const error = getNumberValidator({\n                                                        required: true,\n                                                        min: 0,\n                                                        max: MAKS_INNTEKT,\n                                                    })(value);\n                                                    return error\n                                                        ? {\n                                                              key: error,\n                                                              values: {\n                                                                  navn: navnPåVirksomheten,\n                                                                  maks: MAKS_INNTEKT,\n                                                                  min: 0,\n                                                              },\n                                                          }\n                                                        : undefined;\n                                                }}\n                                                description={\n                                                    <>\n                                                        {harFlereVirksomheter\n                                                            ? getText(\n                                                                  'sifForms.virksomhet.næringsinntekt.flereVirksomheter.spm.description'\n                                                              )\n                                                            : getText(\n                                                                  'sifForms.virksomhet.næringsinntekt.enVirksomhet.spm.description'\n                                                              )}\n                                                        <ExpandableInfo\n                                                            title={getText(\n                                                                'sifForms.virksomhet.hvaErNæringsresultat.title'\n                                                            )}>\n                                                            {harFlereVirksomheter\n                                                                ? getText(\n                                                                      'sifForms.virksomhet.hvaErNæringsresultat.flereVirksomheter.text'\n                                                                  )\n                                                                : getText(\n                                                                      'sifForms.virksomhet.hvaErNæringsresultat.enVirksomhet.text'\n                                                                  )}\n                                                        </ExpandableInfo>\n                                                    </>\n                                                }\n                                            />\n                                        </Box>\n                                        <Box margin=\"xl\">\n                                            <Form.YesOrNoQuestion\n                                                name={\n                                                    VirksomhetFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene\n                                                }\n                                                legend={getText('sifForms.virksomhet.har_blitt_yrkesaktiv')}\n                                                validate={getYesOrNoValidator()}\n                                                description={\n                                                    <ExpandableInfo\n                                                        title={getText(\n                                                            'sifForms.virksomhet.har_blitt_yrkesaktiv_info_title'\n                                                        )}>\n                                                        {getText('sifForms.virksomhet.har_blitt_yrkesaktiv_info')}\n                                                    </ExpandableInfo>\n                                                }\n                                            />\n                                        </Box>\n                                        {values.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene ===\n                                            YesOrNo.YES && (\n                                            <FormBlock margin=\"m\">\n                                                <ResponsivePanel>\n                                                    <Form.DatePicker\n                                                        name={VirksomhetFormField.blittYrkesaktivDato}\n                                                        label={getText('sifForms.virksomhet.har_blitt_yrkesaktiv_dato')}\n                                                        showYearSelector={true}\n                                                        minDate={date3YearsAgo}\n                                                        maxDate={dateToday}\n                                                        validate={getDateValidator({\n                                                            required: true,\n                                                            max: dateToday,\n                                                            min: date3YearsAgo,\n                                                        })}\n                                                    />\n                                                </ResponsivePanel>\n                                            </FormBlock>\n                                        )}\n                                    </>\n                                )}\n\n                                {/* Ikke nyoppstartet */}\n                                {erVirksomhetRegnetSomNyoppstartet(fomDate) === false && (\n                                    <>\n                                        <Box margin=\"xl\">\n                                            <Form.YesOrNoQuestion\n                                                name={\n                                                    VirksomhetFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår\n                                                }\n                                                legend={getText('sifForms.virksomhet.varig_endring_spm')}\n                                                validate={getYesOrNoValidator()}\n                                            />\n                                        </Box>\n                                        {values.hattVarigEndringAvNæringsinntektSiste4Kalenderår === YesOrNo.YES && (\n                                            <>\n                                                <Box margin=\"xl\">\n                                                    <Form.DatePicker\n                                                        name={VirksomhetFormField.varigEndringINæringsinntekt_dato}\n                                                        label={getText('sifForms.virksomhet.varig_endring_dato')}\n                                                        validate={(value) => {\n                                                            const error = getDateValidator({\n                                                                required: true,\n                                                                min: date4YearsAgo,\n                                                                max: dateToday,\n                                                            })(value);\n                                                            if (error) {\n                                                                return {\n                                                                    key: error,\n                                                                    values: {\n                                                                        navn: navnPåVirksomheten,\n                                                                        min: prettifyDate(date4YearsAgo),\n                                                                        max: prettifyDate(dateToday),\n                                                                    },\n                                                                };\n                                                            }\n                                                        }}\n                                                        minDate={date4YearsAgo}\n                                                        maxDate={dateToday}\n                                                    />\n                                                </Box>\n                                                <Box margin=\"xl\">\n                                                    <Form.NumberInput\n                                                        name={\n                                                            VirksomhetFormField.varigEndringINæringsinntekt_inntektEtterEndring\n                                                        }\n                                                        label={getText('sifForms.virksomhet.varig_endring_inntekt')}\n                                                        maxLength={10}\n                                                        style={{ maxWidth: '10rem' }}\n                                                        validate={(value) => {\n                                                            const error = getNumberValidator({\n                                                                required: true,\n                                                                min: 0,\n                                                                max: MAKS_INNTEKT,\n                                                            })(value);\n                                                            return error\n                                                                ? {\n                                                                      key: error,\n                                                                      values: {\n                                                                          navn: navnPåVirksomheten,\n                                                                          min: 0,\n                                                                          maks: MAKS_INNTEKT,\n                                                                      },\n                                                                  }\n                                                                : undefined;\n                                                        }}\n                                                    />\n                                                </Box>\n                                                <Box margin=\"xl\">\n                                                    <Form.Textarea\n                                                        name={\n                                                            VirksomhetFormField.varigEndringINæringsinntekt_forklaring\n                                                        }\n                                                        label={getText('sifForms.virksomhet.varig_endring_tekst')}\n                                                        maxLength={1000}\n                                                        validate={(value) => {\n                                                            const error = getStringValidator({\n                                                                required: true,\n                                                                minLength: 5,\n                                                                maxLength: 1000,\n                                                            })(value);\n                                                            return error\n                                                                ? {\n                                                                      key: error,\n                                                                      values: {\n                                                                          navn: navnPåVirksomheten,\n                                                                          min: 5,\n                                                                          maks: 1000,\n                                                                      },\n                                                                  }\n                                                                : undefined;\n                                                        }}\n                                                    />\n                                                </Box>\n                                            </>\n                                        )}\n                                    </>\n                                )}\n\n                                {values.registrertINorge === YesOrNo.YES && (\n                                    <>\n                                        <Box margin=\"xl\">\n                                            <Form.YesOrNoQuestion\n                                                name={VirksomhetFormField.harRegnskapsfører}\n                                                legend={getText('sifForms.virksomhet.regnskapsfører_spm')}\n                                                validate={getYesOrNoValidator()}\n                                            />\n                                        </Box>\n                                        {values.harRegnskapsfører === YesOrNo.YES && (\n                                            <FormBlock margin=\"m\">\n                                                <ResponsivePanel>\n                                                    <Form.Input\n                                                        name={VirksomhetFormField.regnskapsfører_navn}\n                                                        label={getText('sifForms.virksomhet.regnskapsfører_navn')}\n                                                        validate={(value) => {\n                                                            const error = getStringValidator({\n                                                                required: true,\n                                                                minLength: 2,\n                                                                maxLength: 50,\n                                                            })(value);\n\n                                                            return error\n                                                                ? {\n                                                                      key: error,\n                                                                      values: {\n                                                                          navn: navnPåVirksomheten,\n                                                                          min: 2,\n                                                                          maks: 1000,\n                                                                      },\n                                                                  }\n                                                                : undefined;\n                                                        }}\n                                                        maxLength={50}\n                                                    />\n                                                    <Box margin=\"xl\">\n                                                        <Form.Input\n                                                            name={VirksomhetFormField.regnskapsfører_telefon}\n                                                            label={getText(\n                                                                'sifForms.virksomhet.regnskapsfører_telefon'\n                                                            )}\n                                                            validate={(value) => {\n                                                                const error = getStringValidator({\n                                                                    required: true,\n                                                                    minLength: 5,\n                                                                    maxLength: 15,\n                                                                })(value);\n\n                                                                return error\n                                                                    ? {\n                                                                          key: error,\n                                                                          values: {\n                                                                              navn: navnPåVirksomheten,\n                                                                              min: 5,\n                                                                              maks: 15,\n                                                                          },\n                                                                      }\n                                                                    : undefined;\n                                                            }}\n                                                            maxLength={15}\n                                                        />\n                                                    </Box>\n                                                </ResponsivePanel>\n                                            </FormBlock>\n                                        )}\n                                    </>\n                                )}\n                                {values.harRegnskapsfører === YesOrNo.YES && (\n                                    <Box margin=\"xl\">\n                                        <CounsellorPanel>\n                                            {getText('sifForms.virksomhet.veileder_innhenter_info.1')}\n                                            <br />\n                                            {getText('sifForms.virksomhet.veileder_innhenter_info.2')}\n                                        </CounsellorPanel>\n                                    </Box>\n                                )}\n                            </>\n                        )}\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default VirksomhetForm;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport {\n    FormikModalFormAndInfo,\n    ModalFormAndInfoLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport { mapVirksomhetToVirksomhetApiData } from './mapVirksomhetToApiData';\nimport { Virksomhet } from './types';\nimport VirksomhetForm from './VirksomhetForm';\nimport VirksomhetSummary from './VirksomhetSummary';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames, ValidationError> {\n    name: FieldNames;\n    labels: ModalFormAndInfoLabels;\n    skipOrgNumValidation?: boolean;\n    harFlereVirksomheter?: boolean;\n    onAfterChange?: (virksomhet: Virksomhet) => void;\n}\n\nfunction VirksomhetInfoAndDialog<FieldNames>({\n    name,\n    labels,\n    skipOrgNumValidation,\n    harFlereVirksomheter,\n    validate,\n    onAfterChange,\n}: Props<FieldNames>) {\n    const intl = useIntl();\n    return (\n        <FormikModalFormAndInfo<FieldNames, Virksomhet, ValidationError>\n            name={name}\n            validate={validate}\n            labels={labels}\n            dialogWidth=\"narrow\"\n            renderEditButtons={true}\n            formRenderer={({ onSubmit, onCancel, data }) => (\n                <VirksomhetForm\n                    virksomhet={data}\n                    harFlereVirksomheter={harFlereVirksomheter}\n                    onSubmit={onSubmit}\n                    onCancel={onCancel}\n                    skipOrgNumValidation={skipOrgNumValidation}\n                />\n            )}\n            infoRenderer={({ data }) => (\n                <VirksomhetSummary\n                    virksomhet={mapVirksomhetToVirksomhetApiData(intl.locale, data, harFlereVirksomheter)}\n                    harFlereVirksomheter={harFlereVirksomheter}\n                />\n            )}\n            onAfterChange={onAfterChange}\n        />\n    );\n}\n\nexport default VirksomhetInfoAndDialog;\n","import ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { getFraværÅrsakTekstKort } from './fraværMessages';\nimport { FraværÅrsak } from './types';\n\ninterface Props {\n    title: string;\n    årsak?: FraværÅrsak;\n    onEdit?: () => void;\n}\n\nconst FraværListItem: React.FunctionComponent<Props> = ({ title, årsak, onEdit }: Props) => {\n    const intl = useIntl();\n    return (\n        <div style={{ padding: '.5rem 0' }}>\n            <div>{onEdit ? <ActionLink onClick={() => onEdit()}>{title}</ActionLink> : { title }}</div>\n            {årsak && årsak !== FraværÅrsak.ordinært && (\n                <div style={{ marginTop: '.25rem' }}>\n                    <FormattedMessage\n                        id={`fravær.list.årsak`}\n                        values={{ årsak: getFraværÅrsakTekstKort(årsak, intl) }}\n                    />\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default FraværListItem;\n","import intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { RadioPanelProps } from 'nav-frontend-skjema';\nimport { IntlShape } from 'react-intl';\nimport { FraværÅrsak } from './types';\n\nexport const getFraværÅrsakRadios = (intl: IntlShape): RadioPanelProps[] => [\n    {\n        label: intlHelper(intl, `fravær.årsak.${FraværÅrsak.stengtSkoleBhg}`),\n        value: FraværÅrsak.stengtSkoleBhg,\n    },\n    {\n        label: intlHelper(intl, `fravær.årsak.${FraværÅrsak.smittevernhensyn}`),\n        value: FraværÅrsak.smittevernhensyn,\n    },\n];\n","import ExpandableInfo from '@navikt/sif-common-core/lib/components/expandable-content/ExpandableInfo';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { Element } from 'nav-frontend-typografi';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormattedHtmlMessage from '../components/formatted-html-message/FormattedHtmlMessage';\n\nconst ÅrsakInfo: React.FunctionComponent = () => {\n    const intl = useIntl();\n    return (\n        <ExpandableInfo title={intlHelper(intl, 'info.årsak.tittel')}>\n            <p style={{ marginTop: '0' }}>\n                <FormattedHtmlMessage id=\"info.årsak.info.1\" />\n            </p>\n            <Element tag=\"h3\">\n                <FormattedHtmlMessage id=\"info.årsak.info.2\" />\n            </Element>\n            <FormattedHtmlMessage id=\"info.årsak.info.3\" />\n        </ExpandableInfo>\n    );\n};\n\nexport default ÅrsakInfo;\n","import React from 'react';\n\nconst Sitat: React.FunctionComponent = ({ children }) => (\n    <span\n        style={{\n            display: 'block',\n            paddingLeft: '.5rem',\n            margin: '0.5rem 0',\n            borderLeft: '2px solid #C6C2BF',\n            fontStyle: 'italic',\n        }}>\n        {children}\n    </span>\n);\n\nexport default Sitat;\n","import { ApiStringDate } from '@navikt/sif-common-core/lib/types/ApiStringDate';\nimport { YesOrNo } from '@navikt/sif-common-core/lib/types/YesOrNo';\n\nexport enum Næringstype {\n    'FISKE' = 'FISKE',\n    'JORDBRUK_SKOGBRUK' = 'JORDBRUK_SKOGBRUK',\n    'DAGMAMMA' = 'DAGMAMMA',\n    'ANNEN' = 'ANNEN',\n}\n\nexport enum VirksomhetFormField {\n    'næringstyper' = 'næringstyper',\n    'fiskerErPåBladB' = 'fiskerErPåBladB',\n    'fom' = 'fom',\n    'tom' = 'tom',\n    'næringsinntekt' = 'næringsinntekt',\n    'erPågående' = 'erPågående',\n    'navnPåVirksomheten' = 'navnPåVirksomheten',\n    'organisasjonsnummer' = 'organisasjonsnummer',\n    'registrertINorge' = 'registrertINorge',\n    'registrertILand' = 'registrertILand',\n    'harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene' = 'harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene',\n    'blittYrkesaktivDato' = 'blittYrkesaktivDato',\n    'hattVarigEndringAvNæringsinntektSiste4Kalenderår' = 'hattVarigEndringAvNæringsinntektSiste4Kalenderår',\n    'varigEndringINæringsinntekt_dato' = 'varigEndringINæringsinntekt_dato',\n    'varigEndringINæringsinntekt_inntektEtterEndring' = 'varigEndringINæringsinntekt_inntektEtterEndring',\n    'varigEndringINæringsinntekt_forklaring' = 'varigEndringINæringsinntekt_forklaring',\n    'endretNæringsinntektInformasjon' = 'endretNæringsinntektInformasjon',\n    'harRegnskapsfører' = 'harRegnskapsfører',\n    'regnskapsfører' = 'regnskapsfører',\n    'regnskapsfører_navn' = 'regnskapsfører_navn',\n    'regnskapsfører_telefon' = 'regnskapsfører_telefon',\n}\n\nexport interface Virksomhet {\n    id?: string;\n    [VirksomhetFormField.næringstyper]: Næringstype[];\n    [VirksomhetFormField.fiskerErPåBladB]?: YesOrNo;\n    [VirksomhetFormField.fom]: Date;\n    [VirksomhetFormField.tom]?: Date;\n    [VirksomhetFormField.næringsinntekt]?: number;\n    [VirksomhetFormField.erPågående]?: boolean;\n    [VirksomhetFormField.navnPåVirksomheten]: string;\n    [VirksomhetFormField.organisasjonsnummer]?: string;\n    [VirksomhetFormField.registrertINorge]: YesOrNo;\n    [VirksomhetFormField.registrertILand]?: string;\n    [VirksomhetFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene]?: YesOrNo;\n    [VirksomhetFormField.blittYrkesaktivDato]?: Date;\n    [VirksomhetFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår]?: YesOrNo;\n    [VirksomhetFormField.varigEndringINæringsinntekt_dato]?: Date;\n    [VirksomhetFormField.varigEndringINæringsinntekt_inntektEtterEndring]?: number;\n    [VirksomhetFormField.varigEndringINæringsinntekt_forklaring]?: string;\n    [VirksomhetFormField.harRegnskapsfører]: YesOrNo;\n    [VirksomhetFormField.regnskapsfører_navn]?: string;\n    [VirksomhetFormField.regnskapsfører_telefon]?: string;\n}\nexport type VirksomhetFormValues = Partial<\n    Omit<Virksomhet, 'fom' | 'tom' | 'blittYrkesaktivDato' | 'varigEndringINæringsinntekt_dato'> & {\n        [VirksomhetFormField.fom]: string;\n        [VirksomhetFormField.tom]?: string;\n        [VirksomhetFormField.blittYrkesaktivDato]?: string;\n        [VirksomhetFormField.varigEndringINæringsinntekt_dato]?: string;\n    }\n>;\n\nexport const isVirksomhet = (virksomhet: Partial<Virksomhet>): virksomhet is Virksomhet => {\n    return virksomhet !== undefined;\n};\n\nexport interface VirksomhetApiData {\n    næringstyper: Næringstype[];\n    fiskerErPåBladB?: boolean;\n    fraOgMed: ApiStringDate;\n    tilOgMed?: ApiStringDate | null;\n    erNyoppstartet: boolean;\n    næringsinntekt?: number;\n    navnPåVirksomheten: string;\n    organisasjonsnummer?: string;\n    registrertINorge: boolean;\n    registrertIUtlandet?: {\n        landkode: string;\n        landnavn: string;\n    };\n    yrkesaktivSisteTreFerdigliknedeÅrene?: {\n        oppstartsdato: ApiStringDate;\n    };\n    varigEndring?: {\n        dato: ApiStringDate;\n        inntektEtterEndring: number;\n        forklaring: string;\n    };\n    regnskapsfører?: {\n        navn: string;\n        telefon: string;\n    };\n    harFlereAktiveVirksomheter: boolean;\n}\n","export * from './bostedUtlandMessages';\nexport * from './BostedUtlandForm';\nexport * from './BostedUtlandListAndDialog';\nexport * from './BostedUtlandList';\nexport * from './bostedUtlandMessages';\nexport * from './types';\n","export * from './ferieuttakMessages';\nexport * from './FerieuttakForm';\nexport * from './FerieuttakListAndDialog';\nexport * from './FerieuttakList';\nexport * from './ferieuttakMessages';\nexport * from './types';\n","export * from './FosterbarnForm';\nexport * from './FosterbarnListAndDialog';\nexport * from './FosterbarnList';\nexport * from './fosterbarnMessages';\nexport * from './types';\n","export * from './fraværMessages';\nexport * from './FraværPeriodeForm';\nexport * from './FraværDagForm';\nexport * from './FraværPerioderListAndDialog';\nexport * from './FraværDagerListAndDialog';\nexport * from './FraværPerioderList';\nexport * from './FraværDagerList';\nexport * from './fraværUtilities';\nexport * from './fraværMessages';\nexport * from './types';\n","export * from './tidsperiodeMessages';\nexport * from './TidsperiodeForm';\nexport * from './TidsperiodeListAndDialog';\nexport * from './TidsperiodeList';\nexport * from './tidsperiodeMessages';\nexport * from './types';\n","export * from './utenlandsoppholdMessages';\nexport * from './UtenlandsoppholdForm';\nexport * from './UtenlandsoppholdListAndDialog';\nexport * from './UtenlandsoppholdList';\nexport * from './utenlandsoppholdMessages';\nexport * from './types';\n","export * from './bosted-utland';\nexport * from './ferieuttak';\nexport * from './fosterbarn';\nexport * from './fravær';\nexport * from './tidsperiode';\nexport * from './utenlandsopphold';\nexport * from './virksomhet';\n","import { YesOrNo } from '@navikt/sif-common-core/lib/types/YesOrNo';\nimport { DateRange } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport dayjs from 'dayjs';\nimport isSameOrAfter from 'dayjs/plugin/isSameOrAfter';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\nimport { isString } from 'formik';\nimport { guid } from 'nav-frontend-js-utils';\nimport { FraværDag, FraværDagFormValues, FraværPeriode, FraværPeriodeFormValues, FraværÅrsak } from './types';\n\ndayjs.extend(isSameOrAfter);\ndayjs.extend(isSameOrBefore);\n\nexport const isFraværDag = (fraværDag: Partial<FraværDag>): fraværDag is FraværDag => {\n    return (\n        fraværDag.dato !== undefined &&\n        fraværDag.timerArbeidsdag !== undefined &&\n        fraværDag.timerFravær !== undefined &&\n        fraværDag.årsak !== undefined\n    );\n};\n\nexport const isFraværPeriode = (fraværPeriode: Partial<FraværPeriode>): fraværPeriode is FraværPeriode => {\n    return (\n        fraværPeriode.fraOgMed !== undefined &&\n        fraværPeriode.tilOgMed !== undefined &&\n        fraværPeriode.årsak !== undefined\n    );\n};\n\nexport const fraværDagToFraværDateRange = (fraværDag: FraværDag): DateRange => ({\n    from: fraværDag.dato,\n    to: fraværDag.dato,\n});\n\nexport const fraværPeriodeToDateRange = (fraværDag: FraværPeriode): DateRange => ({\n    from: fraværDag.fraOgMed,\n    to: fraværDag.tilOgMed,\n});\n\nexport enum Weekday {\n    monday = 'monday',\n    tuesday = 'tuesday',\n    wednesday = 'wednesday',\n    thursday = 'thursday',\n    friday = 'friday',\n    saturday = 'saturday',\n    sunday = 'sunday',\n}\n\nexport const getWeekdayName = (date: Date): Weekday | undefined => {\n    switch (date.getDay()) {\n        case 0:\n            return Weekday.sunday;\n        case 1:\n            return Weekday.monday;\n        case 2:\n            return Weekday.tuesday;\n        case 3:\n            return Weekday.wednesday;\n        case 4:\n            return Weekday.thursday;\n        case 5:\n            return Weekday.friday;\n        case 6:\n            return Weekday.saturday;\n        default:\n            return undefined;\n    }\n};\n\nexport const dateErHelg = (date: Date) =>\n    getWeekdayName(date) === Weekday.saturday || getWeekdayName(date) === Weekday.sunday;\n\nexport const rangeCollideWithRanges = (range: DateRange, ranges: DateRange[] = []): boolean => {\n    if (!range || !range.from || !range.to || ranges.length === 0) {\n        return false;\n    }\n    return ranges.some((periode) => {\n        const fromDay = dayjs(range.from);\n        const toDay = dayjs(range.to);\n        const { from, to } = periode;\n        if (fromDay.isBefore(from) && toDay.isAfter(to)) return true;\n        if (fromDay.isSameOrAfter(from, 'day') && fromDay.isSameOrBefore(to, 'day')) return true;\n        if (toDay.isSameOrAfter(from, 'day') && toDay.isSameOrBefore(to, 'day')) return true;\n    });\n};\n\nexport const dateCollideWithRanges = (date: Date | undefined, ranges: DateRange[] = []): boolean => {\n    if (!date || ranges.length === 0) {\n        return false;\n    }\n    return ranges.some((range) => {\n        return dayjs(date).isSameOrAfter(range.from, 'day') && dayjs(date).isSameOrBefore(range.to, 'day');\n    });\n};\n\nexport const timeText = (timer: string): string =>\n    timer === '0' || timer === '0.5' || timer === '1' ? 'time' : 'timer';\n\nexport const dateRangeToFomTom = (dateRange: DateRange): { fom: Date; tom: Date } => ({\n    fom: dateRange.from,\n    tom: dateRange.to,\n});\nexport const toMaybeNumber = (timerArbeidsdag: string | undefined): number | undefined => {\n    if (timerArbeidsdag && isString(timerArbeidsdag)) {\n        return parseFloat(timerArbeidsdag);\n    }\n    return undefined;\n};\n\nexport const getHjemmePgaKoronaFormValueFromFraværÅrsak = (årsak?: FraværÅrsak): YesOrNo => {\n    if (årsak === undefined) {\n        return YesOrNo.UNANSWERED;\n    }\n    return årsak === FraværÅrsak.smittevernhensyn || årsak === FraværÅrsak.stengtSkoleBhg ? YesOrNo.YES : YesOrNo.NO;\n};\n\nexport const getÅrsakFromFraværFormValues = (formValues: FraværDagFormValues | FraværPeriodeFormValues): FraværÅrsak =>\n    formValues.hjemmePgaKorona === YesOrNo.YES && formValues.årsak ? formValues.årsak : FraværÅrsak.ordinært;\n\nexport const mapFormValuesToFraværDag = (\n    formValues: FraværDagFormValues,\n    id: string | undefined\n): Partial<FraværDag> => {\n    return {\n        id: id || guid(),\n        timerArbeidsdag: formValues.timerArbeidsdag,\n        timerFravær: formValues.timerFravær,\n        dato: ISOStringToDate(formValues.dato),\n        årsak: getÅrsakFromFraværFormValues(formValues),\n    };\n};\n\nexport const mapFraværDagToFormValues = (fraværDag: Partial<FraværDag>): FraværDagFormValues => {\n    return {\n        timerArbeidsdag: fraværDag.timerArbeidsdag,\n        timerFravær: fraværDag.timerFravær,\n        dato: fraværDag.dato ? dateToISOString(fraværDag.dato) : '',\n        hjemmePgaKorona: getHjemmePgaKoronaFormValueFromFraværÅrsak(fraværDag.årsak),\n        årsak: fraværDag.årsak,\n    };\n};\n\nexport const mapFormValuesToFraværPeriode = (\n    formValues: FraværPeriodeFormValues,\n    id: string | undefined\n): Partial<FraværPeriode> => {\n    return {\n        id: id || guid(),\n        fraOgMed: ISOStringToDate(formValues.fraOgMed),\n        tilOgMed: ISOStringToDate(formValues.tilOgMed),\n        årsak: getÅrsakFromFraværFormValues(formValues),\n    };\n};\n\nexport const mapFraværPeriodeToFormValues = (fraværPeriode: Partial<FraværPeriode>): FraværPeriodeFormValues => {\n    return {\n        fraOgMed: fraværPeriode.fraOgMed ? dateToISOString(fraværPeriode.fraOgMed) : '',\n        tilOgMed: fraværPeriode.tilOgMed ? dateToISOString(fraværPeriode.tilOgMed) : '',\n        hjemmePgaKorona: getHjemmePgaKoronaFormValueFromFraværÅrsak(fraværPeriode.årsak),\n        årsak: fraværPeriode.årsak,\n    };\n};\n","import { DateRange } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { ValidationFunction } from '@navikt/sif-common-formik/lib/validation/types';\nimport {\n    dateCollideWithRanges,\n    dateErHelg,\n    fraværDagToFraværDateRange,\n    fraværPeriodeToDateRange,\n    rangeCollideWithRanges,\n} from './fraværUtilities';\nimport { FraværDag, FraværPeriode } from './types';\n\nexport enum FraværFieldValidationErrors {\n    fravær_timer_mer_enn_arbeidstimer = 'fravær_timer_mer_enn_arbeidstimer',\n    fra_og_til_er_ulike_år = 'fra_og_til_er_ulike_år',\n    er_helg = 'er_helg',\n    fra_dato_kolliderer_med_annet_fravær = 'fra_dato_kolliderer_med_annet_fravær',\n    til_dato_kolliderer_med_annet_fravær = 'til_dato_kolliderer_med_annet_fravær',\n    dato_kolliderer_med_annet_fravær = 'dato_kolliderer_med_annet_fravær',\n    dager_overlapper_med_andre_dager = 'dager_overlapper_med_andre_dager',\n}\n\nexport const validateLessOrEqualTo =\n    (maybeMaxValue: number | undefined): ValidationFunction<any> =>\n    (maybeValue: string | undefined) => {\n        const maybeValueFloat: number | undefined = maybeValue ? parseFloat(maybeValue) : undefined;\n        if (maybeMaxValue && maybeValueFloat) {\n            return maybeValueFloat <= maybeMaxValue\n                ? undefined\n                : FraværFieldValidationErrors.fravær_timer_mer_enn_arbeidstimer;\n        }\n        return undefined;\n    };\n\nexport const validateErSammeÅr = (maybeDateFrom: string | undefined, maybeDateTo: string | undefined) => {\n    const fromDate = ISOStringToDate(maybeDateFrom);\n    const toDate = ISOStringToDate(maybeDateTo);\n    if (fromDate && toDate && fromDate.getFullYear() !== toDate.getFullYear()) {\n        return FraværFieldValidationErrors.fra_og_til_er_ulike_år;\n    }\n    return undefined;\n};\n\nexport const validateNotHelgedag = (maybeDate: string | undefined): FraværFieldValidationErrors | undefined => {\n    const date = ISOStringToDate(maybeDate);\n    return date && dateErHelg(date) ? FraværFieldValidationErrors.er_helg : undefined;\n};\n\nexport const validateFraværPeriodeCollision = (\n    from: Date | undefined,\n    to: Date | undefined,\n    ranges: DateRange[] | undefined\n): FraværFieldValidationErrors | undefined => {\n    if (!from || !to || (ranges || []).length === 0) {\n        return undefined;\n    }\n    return rangeCollideWithRanges({ from, to }, ranges)\n        ? FraværFieldValidationErrors.dager_overlapper_med_andre_dager\n        : undefined;\n};\n\nexport const validateFraOgMedForCollision = (\n    date: Date | undefined,\n    ranges: DateRange[] | undefined\n): FraværFieldValidationErrors | undefined => {\n    if (!date || (ranges || []).length === 0) {\n        return undefined;\n    }\n    return dateCollideWithRanges(date, ranges)\n        ? FraværFieldValidationErrors.fra_dato_kolliderer_med_annet_fravær\n        : undefined;\n};\n\nexport const validateTilOgMedForCollision = (\n    date: Date | undefined,\n    ranges: DateRange[] | undefined\n): FraværFieldValidationErrors | undefined => {\n    if (!date || (ranges || []).length === 0) {\n        return undefined;\n    }\n    return dateCollideWithRanges(date, ranges)\n        ? FraværFieldValidationErrors.til_dato_kolliderer_med_annet_fravær\n        : undefined;\n};\n\nexport const validateFraværDagCollision = (\n    date: Date | undefined,\n    ranges: DateRange[] | undefined\n): FraværFieldValidationErrors | undefined => {\n    if (!date || (ranges || []).length === 0) {\n        return undefined;\n    }\n    return dateCollideWithRanges(date, ranges)\n        ? FraværFieldValidationErrors.dato_kolliderer_med_annet_fravær\n        : undefined;\n};\n\nexport const validateNoCollisions = (\n    fraværDager: FraværDag[],\n    fraværPerioder: FraværPeriode[]\n): FraværFieldValidationErrors.dager_overlapper_med_andre_dager | undefined => {\n    if (fraværPerioder.length === 0 && fraværDager.length === 0) {\n        return undefined;\n    }\n\n    const allFraværDagDateRanges = fraværDager.map(fraværDagToFraværDateRange);\n    const allFraværPeriodeDateRanges = fraværPerioder.map(fraværPeriodeToDateRange);\n\n    const hasDateCollision = fraværDager.some((dag) => {\n        const rangesWithoutCurrentDag = [\n            ...fraværDager.filter((d) => d !== dag).map(fraværDagToFraværDateRange),\n            ...allFraværPeriodeDateRanges,\n        ];\n        return dateCollideWithRanges(dag.dato, rangesWithoutCurrentDag);\n    });\n\n    const hasRangeCollision = fraværPerioder.some((periode) => {\n        const rangesWithoutCurrentPeriode = [\n            ...allFraværDagDateRanges,\n            ...fraværPerioder.filter((p) => p !== periode).map(fraværPeriodeToDateRange),\n        ];\n        return rangeCollideWithRanges(fraværPeriodeToDateRange(periode), rangesWithoutCurrentPeriode);\n    });\n    return hasDateCollision || hasRangeCollision\n        ? FraværFieldValidationErrors.dager_overlapper_med_andre_dager\n        : undefined;\n};\n","import { DateRange, prettifyDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    ValidateDateError,\n    ValidateDateRangeError,\n    ValidateRequiredFieldError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport { DateTidsperiode } from '../tidsperiode';\n\nexport const mapFomTomToDateRange = ({ fom, tom }: DateTidsperiode): DateRange => ({\n    from: fom,\n    to: tom,\n});\n\nexport const handleDateRangeValidationError = (\n    error: ValidateDateError | ValidateDateRangeError | ValidateRequiredFieldError | undefined,\n    minDate: Date | undefined,\n    maxDate: Date | undefined\n): ValidationError | undefined => {\n    if (minDate && error === ValidateDateError.dateIsBeforeMin) {\n        return {\n            key: error,\n            values: { dato: prettifyDate(minDate) },\n        };\n    }\n    if (maxDate && error === ValidateDateError.dateIsAfterMax) {\n        return {\n            key: error,\n            values: { dato: prettifyDate(maxDate) },\n        };\n    }\n    return error;\n};\n","const annetBarnMessages = {\n    nb: {\n        'annetBarn.form.title': 'Legg til barn',\n        'annetBarn.form.fnr': 'Barnets fødselsnummer/D-nummer',\n        'annetBarn.form.fødselsdato': 'Barnets fødselsdato',\n        'annetBarn.form.navn': 'Barnets navn',\n        'annetBarn.form.okButton': 'Ok',\n        'annetBarn.form.cancelButton': 'Avbryt',\n        'annetBarn.list.født': 'Født',\n        'annetBarnForm.navn.stringHasNoValue': 'Skriv inn barnets navn',\n        'annetBarnForm.fødselsdato.dateHasNoValue':\n            'Du må oppgi barnets fødselsdato. Skriv inn eller velg dato fra datovelgeren.',\n        'annetBarnForm.fødselsdato.dateIsBeforeMin':\n            'Barnets fødselsdato kan ikke være før {dato}. Skriv inn eller velg startdato fra datovelgeren.',\n        'annetBarnForm.fødselsdato.dateIsAfterMax': 'Barnets fødselsdato kan ikke være etter dagens dato',\n        'annetBarnForm.fødselsdato.dateHasInvalidFormat':\n            'Du må oppgi barnets fødselsdato i et gyldig format. Gyldig format er dd.mm.ååå.',\n        'annetBarnForm.fnr.fødselsnummerHasNoValue': 'Skriv inn barnets fødselsnummer',\n        'annetBarnForm.fnr.fødselsnummerIsInvalid':\n            'Du har oppgitt et ugyldig fødselsnummer. Et gyldig fødselsnummer består av 11 siffer.',\n        'annetBarnForm.fnr.fødselsnummerIsNot11Chars':\n            'Du har oppgitt et ugyldig fødselsnummer som ikke består av 11 siffer. Et gyldig fødselsnummer består av 11 siffer.',\n        'annetBarnForm.fnr.fødselsnummerIsNotAllowed':\n            'Du har oppgitt ditt eget fødselsnummer som barnets fødselsnummer. Skriv inn barnets fødselsnummer.',\n    },\n    nn: {\n        'annetBarn.form.title': 'Legg til barn',\n        'annetBarn.form.fnr': 'Fødselsnummeret/D-nummeret til barnet',\n        'annetBarn.form.fødselsdato': 'Fødselsdatoen til barnet',\n        'annetBarn.form.navn': 'Namnet til barnet',\n        'annetBarn.form.okButton': 'Ok',\n        'annetBarn.form.cancelButton': 'Avbryt',\n        'annetBarn.list.født': 'Født',\n    },\n};\n\nexport default annetBarnMessages;\n","const omsorgstilbudMessages = {\n    nb: {\n        'omsorgstilbud.validation.hoursAreInvalid': 'Antall timer {dag} er ikke et gyldig tall.',\n        'omsorgstilbud.validation.minutesAreInvalid': 'Antall minutter {dag} er ikke et gyldig tall.',\n        'omsorgstilbud.validation.tooManyHours': 'Antall timer {dag} er for høyt. Maks antall timer er {maksTimer}.',\n        'omsorgstilbud.validation.tooManyMinutes': 'Antall minutter {dag} er for høyt. Maks antall minutter er 59.',\n        'omsorgstilbud.validation.durationIsTooLong':\n            'Antall timer og minutter {dag} er for høyt. Tiden kan ikke være mer enn 7 timer og 30 minutter.',\n        'omsorgstilbud.validation.durationIsTooShort':\n            'Antall timer og minutter {dag} er for lavt. Tiden må være minst ett minutt.',\n    },\n};\n\nexport default omsorgstilbudMessages;\n","import bostedUtlandMessages from '../../../forms/bosted-utland/bostedUtlandMessages';\nimport ferieuttakMessages from '../../../forms/ferieuttak/ferieuttakMessages';\nimport fraværMessages from '../../../forms/fravær/fraværMessages';\nimport utenlandsoppholdMessages from '../../../forms/utenlandsopphold/utenlandsoppholdMessages';\nimport fosterbarnMessages from '../../../forms/fosterbarn/fosterbarnMessages';\nimport virksomhetMessages from '../../../forms/virksomhet/virksomhetMessages';\nimport tidsperiodeMessages from '../../../forms/tidsperiode/tidsperiodeMessages';\nimport annetBarnMessages from '../../../forms/annet-barn/annetBarnMessages';\nimport omstilbudMessages from '../../../forms/omsorgstilbud/omsorgstilbudMessages';\n\nconst commonNb = require('@navikt/sif-common-core/lib/i18n/common.nb.json');\nconst commonNn = require('@navikt/sif-common-core/lib/i18n/common.nn.json');\nconst validationNb = require('@navikt/sif-common-core/lib/i18n/validationErrors.nb.json');\nconst validationNn = require('@navikt/sif-common-core/lib/i18n/validationErrors.nn.json');\n\nconst bokmålstekster = {\n    ...commonNb,\n    ...validationNb,\n    ...bostedUtlandMessages.nb,\n    ...fraværMessages.nb,\n    ...ferieuttakMessages.nb,\n    ...fosterbarnMessages.nb,\n    ...utenlandsoppholdMessages.nb,\n    ...tidsperiodeMessages.nb,\n    ...virksomhetMessages.nb,\n    ...annetBarnMessages.nb,\n    ...omstilbudMessages.nb,\n    'common.fieldvalidation.ugyldigTall': 'Ugyldig tall',\n};\n\nconst nynorsktekster = {\n    ...commonNn,\n    ...validationNn,\n    ...bostedUtlandMessages.nn,\n    ...fraværMessages.nn,\n    ...ferieuttakMessages.nn,\n    ...fosterbarnMessages.nn,\n    ...utenlandsoppholdMessages.nn,\n    ...tidsperiodeMessages.nn,\n    ...virksomhetMessages.nn,\n    ...annetBarnMessages.nn,\n    'common.fieldvalidation.ugyldigTall': 'Ugyldig tall',\n};\n\nexport const appMessages = {\n    nb: bokmålstekster,\n    nn: nynorsktekster,\n};\n","import * as React from 'react';\nimport { IntlProvider } from 'react-intl';\nimport '@formatjs/intl-pluralrules//locale-data/en';\nimport '@formatjs/intl-pluralrules//locale-data/nb';\nimport '@formatjs/intl-pluralrules//locale-data/nn';\nimport '@formatjs/intl-pluralrules/polyfill';\nimport { Locale } from '@navikt/sif-common-core/lib/types/Locale';\nimport { appMessages } from './messages';\nimport dayjs from 'dayjs';\nrequire('dayjs/locale/nb');\nrequire('dayjs/locale/nn');\n\nexport interface IntlProviderProps {\n    locale: Locale;\n    children: React.ReactNode;\n    onError?: (error: any) => void;\n}\n\nconst AppIntlProvider = ({ locale, onError, children }: IntlProviderProps) => {\n    const messages = locale === 'nb' ? appMessages.nb : appMessages.nn;\n    dayjs.locale(locale === 'nb' ? 'nb' : 'nn');\n    return (\n        <IntlProvider locale={locale} messages={messages} onError={onError}>\n            {children}\n        </IntlProvider>\n    );\n};\n\nexport default AppIntlProvider;\n","import React from 'react';\n\nfunction NAVLogo(props) {\n    return (\n        <svg className=\"prefix__navLogo\" width={90} viewBox=\"0 0 269 169\" {...props}>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <path\n                    fill=\"#C30000\"\n                    d=\"M125.31 168.942c-46.642 0-84.46-37.817-84.46-84.465C40.85 37.824 78.667 0 125.31 0c46.657 0 84.48 37.824 84.48 84.477 0 46.648-37.823 84.465-84.48 84.465zM0 121.359l17.265-42.73h16.589l-17.243 42.73zm213.044 0l17.044-42.73h9.044l-17.043 42.73zM246.564 121.359l17.04-42.73h4.803l-17.043 42.731z\"\n                />\n                <path\n                    fill=\"#FEFEFE\"\n                    d=\"M197.36 78.63h-15.016s-1.035 0-1.4.914l-8.31 25.439-8.304-25.44c-.366-.913-1.407-.913-1.407-.913h-28.872c-.625 0-1.149.522-1.149 1.143v8.639c0-6.853-7.292-9.782-11.562-9.782-9.562 0-15.963 6.298-17.956 15.873-.108-6.352-.636-8.628-2.347-10.96-.786-1.141-1.922-2.101-3.159-2.895-2.547-1.492-4.834-2.018-9.749-2.018h-5.77s-1.044 0-1.412.914l-5.25 13.013V79.773c0-.621-.52-1.143-1.145-1.143H61.198s-1.03 0-1.406.914l-5.459 13.53s-.545 1.354.701 1.354h5.133v25.784c0 .64.504 1.147 1.147 1.147h13.238c.624 0 1.144-.507 1.144-1.147V94.428h5.16c2.961 0 3.588.08 4.74.618.694.262 1.32.792 1.66 1.403.698 1.314.873 2.892.873 7.545v16.218c0 .64.514 1.147 1.15 1.147h12.687s1.434 0 2.001-1.416l2.812-6.95c3.74 5.237 9.893 8.366 17.541 8.366h1.671s1.443 0 2.014-1.416l4.897-12.128v12.397c0 .64.524 1.147 1.15 1.147h12.951s1.43 0 2.003-1.416c0 0 5.18-12.861 5.2-12.958h.008c.2-1.07-1.153-1.07-1.153-1.07h-4.623V83.847l14.545 36.096c.568 1.416 2 1.416 2 1.416h15.301s1.44 0 2.008-1.416l16.125-39.93c.558-1.383-1.057-1.383-1.057-1.383zm-64.458 27.285h-8.7c-3.463 0-6.28-2.804-6.28-6.271 0-3.461 2.817-6.283 6.28-6.283h2.433c3.454 0 6.267 2.822 6.267 6.283v6.27z\"\n                />\n            </g>\n        </svg>\n    );\n}\n\nexport default NAVLogo;\n","import React from 'react';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { Ingress, Undertittel } from 'nav-frontend-typografi';\n\ninterface Props {\n    title: string;\n    children: React.ReactNode;\n}\n\nconst PageIntro = ({ title, children }: Props) => (\n    <>\n        <Box padBottom=\"xl\" margin=\"m\">\n            <Box padBottom={children ? 'm' : 'none'}>\n                <Undertittel>{title}</Undertittel>\n            </Box>\n            {children && <Ingress tag=\"div\">{children}</Ingress>}\n        </Box>\n    </>\n);\n\nexport default PageIntro;\n","import React from 'react';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport Panel from 'nav-frontend-paneler';\n\ninterface Props {\n    values?: any;\n}\n\nfunction SubmitPreview({ values }: Props) {\n    return (\n        <Box margin=\"xl\">\n            <div style={{ borderTop: '1px dashed #59514B', paddingTop: '1rem', margin: '0 -1rem' }}>\n                <Box margin=\"m\">\n                    {values && (\n                        <Panel style={{ padding: '1rem' }}>\n                            <pre style={{ margin: 0, fontSize: '.8rem' }}>{JSON.stringify(values, null, 2)}</pre>\n                        </Panel>\n                    )}\n                    {values === undefined && <Panel style={{ padding: '1rem' }}>Ingen data</Panel>}\n                </Box>\n            </div>\n        </Box>\n    );\n}\n\nexport default SubmitPreview;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { date1YearAgo, date1YearFromNow } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport flat from 'flat';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport BostedUtlandForm, { BostedUtlandFormErrors } from '../../../forms/bosted-utland/BostedUtlandForm';\nimport BostedUtlandListAndDialog from '../../../forms/bosted-utland/BostedUtlandListAndDialog';\nimport bostedUtlandMessages from '../../../forms/bosted-utland/bostedUtlandMessages';\nimport { BostedUtland } from '../../../forms/bosted-utland/types';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\n\nenum FormField {\n    'bosted' = 'bosted',\n}\n\ninterface FormValues {\n    [FormField.bosted]: BostedUtland[];\n}\nconst initialValues: FormValues = { bosted: [] };\n\nconst FormikExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<BostedUtland> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues, ValidationError>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                formErrorHandler={getFormErrorHandler(intl)}>\n                                <BostedUtlandListAndDialog<FormField>\n                                    name={FormField.bosted}\n                                    minDate={date1YearAgo}\n                                    maxDate={date1YearFromNow}\n                                    validate={getListValidator({ required: true })}\n                                    labels={{\n                                        addLabel: 'Legg til bosted',\n                                        listTitle: 'Registrerte bosteder',\n                                        modalTitle: 'Bosted',\n                                        emptyListText: 'Ingen bosteder er lagt til',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrorIntlKeys={flat(BostedUtlandFormErrors)}\n                    intlMessages={bostedUtlandMessages}\n                />\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <DialogFormWrapper>\n                    <Panel border={true}>\n                        <BostedUtlandForm\n                            minDate={date1YearAgo}\n                            maxDate={date1YearFromNow}\n                            onSubmit={setSingleFormValues}\n                            onCancel={() => console.log('cancel me')}\n                        />\n                    </Panel>\n                    <SubmitPreview values={singleFormValues} />\n                </DialogFormWrapper>\n            </Box>\n\n            <MessagesPreview title=\"Alle tekster\" messages={bostedUtlandMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default FormikExample;\n","import React from 'react';\nimport { MessageFileFormat } from '@navikt/sif-common-core/lib/dev-utils/intl/devIntlUtils';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\nconst createFieldErrorIntlKey = (error: ValidationError, fieldName: string, errorPrefix?: string): string =>\n    `${errorPrefix ? `${errorPrefix}.` : ''}${fieldName}.${error}`;\n\nexport type ValidationErrorMessagesDocType = {\n    fields: { [key: string]: string[] };\n};\n\ninterface Props {\n    formName?: string;\n    validationErrors?: ValidationErrorMessagesDocType;\n    validationErrorIntlKeys?: { [key: string]: string };\n    intlMessages: MessageFileFormat;\n}\n\nconst FormValidationErrorMessages: React.FunctionComponent<Props> = ({\n    validationErrors,\n    formName,\n    intlMessages,\n    validationErrorIntlKeys,\n}) => {\n    const validationeMessages: MessageFileFormat = {\n        nb: {},\n        nn: {},\n    };\n\n    if (validationErrors) {\n        const fields = validationErrors.fields;\n\n        Object.keys(fields).forEach((field) =>\n            Object.keys(fields[field]).forEach((errorKey) => {\n                const error = fields[field][errorKey];\n                const intlKey = createFieldErrorIntlKey(error, field, formName);\n                validationeMessages['nb'][intlKey] = intlMessages['nb'][intlKey];\n                validationeMessages['nn'][intlKey] = intlMessages['nn'][intlKey];\n            })\n        );\n    }\n\n    if (validationErrorIntlKeys) {\n        Object.keys(validationErrorIntlKeys).forEach((key) => {\n            const intlKey = validationErrorIntlKeys[key];\n            validationeMessages['nb'][intlKey] = intlMessages['nb'][intlKey];\n            validationeMessages['nn'][intlKey] = intlMessages['nn'][intlKey];\n        });\n    }\n    return (\n        <MessagesPreview\n            title=\"Feilmeldinger\"\n            messages={validationeMessages}\n            showExplanation={false}\n            showMissingTextSummary={false}\n        />\n    );\n};\n\nexport default FormValidationErrorMessages;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { date1YearAgo, date1YearFromNow } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport flat from 'flat';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport FerieuttakForm, { FerieuttakFormErrors } from '../../../forms/ferieuttak/FerieuttakForm';\nimport FerieuttakListAndDialog from '../../../forms/ferieuttak/FerieuttakListAndDialog';\nimport ferieuttakMessages from '../../../forms/ferieuttak/ferieuttakMessages';\nimport { Ferieuttak } from '../../../forms/ferieuttak/types';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\nenum FormField {\n    'ferie' = 'ferie',\n}\n\ninterface FormValues {\n    [FormField.ferie]: Ferieuttak[];\n}\nconst initialValues: FormValues = { ferie: [] };\n\nconst FormikExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<Ferieuttak> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues, ValidationError>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                formErrorHandler={getFormErrorHandler(intl)}>\n                                <FerieuttakListAndDialog<FormField>\n                                    name={FormField.ferie}\n                                    minDate={date1YearAgo}\n                                    maxDate={date1YearFromNow}\n                                    validate={getListValidator({ required: true })}\n                                    labels={{\n                                        addLabel: 'Legg til ferie',\n                                        listTitle: 'Registrerte ferier',\n                                        modalTitle: 'Ferie',\n                                        emptyListText: 'Ingen ferier er lagt til',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrorIntlKeys={flat(FerieuttakFormErrors)}\n                    intlMessages={ferieuttakMessages}\n                />\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <FerieuttakForm\n                        minDate={date1YearAgo}\n                        maxDate={date1YearFromNow}\n                        ferieuttak={{}}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                    />\n                </Panel>\n                <SubmitPreview values={singleFormValues} />\n            </DialogFormWrapper>\n\n            <MessagesPreview messages={ferieuttakMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default FormikExample;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport flat from 'flat';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { Fosterbarn } from '../../../forms/fosterbarn';\nimport FosterbarnForm, { FosterbarnFormErrors } from '../../../forms/fosterbarn/FosterbarnForm';\nimport FosterbarnListAndDialog from '../../../forms/fosterbarn/FosterbarnListAndDialog';\nimport fosterbarnMessages from '../../../forms/fosterbarn/fosterbarnMessages';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\n\nenum FormField {\n    'fosterbarn' = 'fosterbarn',\n}\n\ninterface FormValues {\n    [FormField.fosterbarn]: Fosterbarn[];\n}\nconst initialValues: FormValues = { fosterbarn: [] };\n\nconst FosterbarnExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<Fosterbarn> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues, ValidationError>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                formErrorHandler={getFormErrorHandler(intl)}>\n                                <FosterbarnListAndDialog<FormField>\n                                    name={FormField.fosterbarn}\n                                    validate={getListValidator({ required: true })}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrorIntlKeys={flat(FosterbarnFormErrors)}\n                    intlMessages={fosterbarnMessages}\n                />\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <FosterbarnForm\n                        fosterbarn={{}}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                    />\n                </Panel>\n                <SubmitPreview values={singleFormValues} />\n            </DialogFormWrapper>\n\n            <MessagesPreview messages={fosterbarnMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default FosterbarnExample;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { date1YearAgo, date1YearFromNow, dateToday } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport flat from 'flat';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { DateTidsperiode } from '../../../forms/tidsperiode';\nimport TidsperiodeForm, { TidsperiodeFormErrors } from '../../../forms/tidsperiode/TidsperiodeForm';\nimport TidsperiodeListAndDialog from '../../../forms/tidsperiode/TidsperiodeListAndDialog';\nimport tidsperiodeMessages from '../../../forms/tidsperiode/tidsperiodeMessages';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\n\nenum FormField {\n    'tidsperiode' = 'tidsperiode',\n}\n\ninterface FormValues {\n    [FormField.tidsperiode]: DateTidsperiode[];\n}\nconst initialValues: FormValues = { tidsperiode: [] };\n\nconst TidsperiodeExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<DateTidsperiode> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues, ValidationError>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                formErrorHandler={getFormErrorHandler(intl)}>\n                                <TidsperiodeListAndDialog<FormField>\n                                    name={FormField.tidsperiode}\n                                    minDate={date1YearAgo}\n                                    maxDate={dateToday}\n                                    validate={getListValidator({ required: true })}\n                                    labels={{\n                                        addLabel: 'Legg til periode',\n                                        listTitle: 'Registrerte periode',\n                                        modalTitle: 'Periode',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrorIntlKeys={flat(TidsperiodeFormErrors)}\n                    intlMessages={tidsperiodeMessages}\n                />\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <TidsperiodeForm\n                        minDate={date1YearAgo}\n                        maxDate={date1YearFromNow}\n                        tidsperiode={{}}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                    />\n                </Panel>\n                <SubmitPreview values={singleFormValues} />\n            </DialogFormWrapper>\n\n            <MessagesPreview messages={tidsperiodeMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default TidsperiodeExample;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { date1YearAgo, date1YearFromNow } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport flat from 'flat';\nimport Panel from 'nav-frontend-paneler';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { Utenlandsopphold } from '../../../forms/utenlandsopphold/types';\nimport UtenlandsoppholdForm, { UtlandsoppholdFormErrors } from '../../../forms/utenlandsopphold/UtenlandsoppholdForm';\nimport UtenlandsoppholdListAndDialog from '../../../forms/utenlandsopphold/UtenlandsoppholdListAndDialog';\nimport utenlandsoppholdMessages from '../../../forms/utenlandsopphold/utenlandsoppholdMessages';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\n\nenum FormField {\n    'utenlandsopphold' = 'utenlandsopphold',\n}\n\ninterface FormValues {\n    [FormField.utenlandsopphold]: Utenlandsopphold[];\n}\nconst initialValues: FormValues = {\n    utenlandsopphold: [],\n};\n\nconst UtenlandsoppholdExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<Utenlandsopphold> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues, ValidationError>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                formErrorHandler={getFormErrorHandler(intl)}>\n                                <UtenlandsoppholdListAndDialog\n                                    minDate={date1YearAgo}\n                                    maxDate={date1YearFromNow}\n                                    name={FormField.utenlandsopphold}\n                                    validate={getListValidator({ required: true })}\n                                    labels={{\n                                        addLabel: 'Legg til utenlandsopphold',\n                                        listTitle: 'Registrerte utenlandsopphold',\n                                        modalTitle: 'Utenlandsopphold',\n                                        emptyListText: 'Ingen utenlandsopphold er lagt til',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrorIntlKeys={flat(UtlandsoppholdFormErrors)}\n                    intlMessages={utenlandsoppholdMessages}\n                />\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <UtenlandsoppholdForm\n                        opphold={initialValues.utenlandsopphold[0]}\n                        minDate={date1YearAgo}\n                        maxDate={date1YearFromNow}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                    />\n                    <SubmitPreview values={singleFormValues} />\n                </Panel>\n            </DialogFormWrapper>\n\n            <MessagesPreview messages={utenlandsoppholdMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default UtenlandsoppholdExample;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { date1YearAgo, date1YearFromNow, dateToday } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport flat from 'flat';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { FraværDag, FraværPeriode } from '../../../forms/fravær';\nimport FraværDagerListAndDialog from '../../../forms/fravær/FraværDagerListAndDialog';\nimport FraværDagFormView, { FraværDagFormErrors } from '../../../forms/fravær/FraværDagForm';\nimport fraværMessages from '../../../forms/fravær/fraværMessages';\nimport FraværPeriodeForm, { FraværPeriodeFormErrors } from '../../../forms/fravær/FraværPeriodeForm';\nimport FraværPerioderListAndDialog from '../../../forms/fravær/FraværPerioderListAndDialog';\nimport { fraværDagToFraværDateRange, fraværPeriodeToDateRange } from '../../../forms/fravær/fraværUtilities';\nimport { FraværFieldValidationErrors, validateNoCollisions } from '../../../forms/fravær/fraværValidationUtils';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\n\nenum FormField {\n    perioder = 'perioder',\n    dager = 'dager',\n}\n\ninterface FormValues {\n    [FormField.perioder]: FraværPeriode[];\n    [FormField.dager]: FraværDag[];\n}\n\nconst initialValues: FormValues = { [FormField.perioder]: [], [FormField.dager]: [] };\n\nconst FraværExample: React.FunctionComponent = () => {\n    const [fraværPeriodeSingleFormValues, setFraværPeriodeSingleFormValues] =\n        useState<Partial<FraværPeriode> | undefined>(undefined);\n    const [fraværDagSingleFormValues, setFraværDagSingleFormValues] =\n        useState<Partial<FraværDag> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={(formik) => {\n                        const { values } = formik;\n                        const dateRangesToDisable = [\n                            ...values.perioder.map(fraværPeriodeToDateRange),\n                            ...values.dager.map(fraværDagToFraværDateRange),\n                        ];\n                        return (\n                            <TypedFormikForm<FormValues, ValidationError | FraværFieldValidationErrors>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                formErrorHandler={getFormErrorHandler(intl)}>\n                                <FormBlock>\n                                    <FraværPerioderListAndDialog<FormField>\n                                        name={FormField.perioder}\n                                        minDate={date1YearAgo}\n                                        maxDate={dateToday}\n                                        periodeDescription={\n                                            <p style={{ marginTop: '.5rem' }}>\n                                                Du kan kun søke for ett og samme år i en søknad. Får å søke for flere\n                                                år, må du sende en søknad for hvert år.\n                                            </p>\n                                        }\n                                        validate={(value) => {\n                                            const listError = getListValidator({ required: true })(value);\n                                            if (listError) {\n                                                return listError;\n                                            }\n                                            const collisionError = validateNoCollisions(values.dager, values.perioder);\n                                            if (collisionError) {\n                                                return collisionError;\n                                            }\n                                        }}\n                                        labels={{\n                                            addLabel: 'Legg til periode',\n                                            modalTitle: 'Fravær hele dager',\n                                        }}\n                                        dateRangesToDisable={dateRangesToDisable}\n                                        helgedagerIkkeTillat={true}\n                                    />\n                                </FormBlock>\n                                <FormBlock>\n                                    <FraværDagerListAndDialog<FormField>\n                                        name={FormField.dager}\n                                        minDate={date1YearAgo}\n                                        maxDate={dateToday}\n                                        validate={(value) => {\n                                            const listError = getListValidator({ required: true })(value);\n                                            if (listError) {\n                                                return listError;\n                                            }\n                                            const collisionError = validateNoCollisions(values.dager, values.perioder);\n                                            if (collisionError) {\n                                                return collisionError;\n                                            }\n                                        }}\n                                        labels={{\n                                            addLabel: 'Legg til dag med delvis fravær',\n                                            listTitle: 'Dager med delvis fravær',\n                                            modalTitle: 'Fravær deler av dag',\n                                            emptyListText: 'Ingen dager er lagt til',\n                                        }}\n                                        dateRangesToDisable={dateRangesToDisable}\n                                        helgedagerIkkeTillatt={true}\n                                        maksArbeidstidPerDag={24}\n                                    />\n                                </FormBlock>\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrorIntlKeys={flat(FraværPeriodeFormErrors)}\n                    intlMessages={fraværMessages}\n                />\n                <FormValidationErrorMessages\n                    validationErrorIntlKeys={flat(FraværDagFormErrors)}\n                    intlMessages={fraværMessages}\n                />\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialoger</Undertittel>\n            </Box>\n\n            <FormBlock>\n                <DialogFormWrapper>\n                    <Panel border={true}>\n                        <FraværPeriodeForm\n                            minDate={date1YearAgo}\n                            maxDate={date1YearFromNow}\n                            fraværPeriode={{}}\n                            onSubmit={setFraværPeriodeSingleFormValues}\n                            onCancel={() => {\n                                // tslint:disable-next-line:no-console\n                                return console.log('cancel me');\n                            }}\n                        />\n                    </Panel>\n                    <SubmitPreview values={fraværPeriodeSingleFormValues} />\n                </DialogFormWrapper>\n            </FormBlock>\n\n            <FormBlock>\n                <DialogFormWrapper>\n                    <Panel border={true}>\n                        <FraværDagFormView\n                            minDate={date1YearAgo}\n                            maxDate={date1YearFromNow}\n                            fraværDag={{}}\n                            onSubmit={setFraværDagSingleFormValues}\n                            onCancel={() => {\n                                // tslint:disable-next-line:no-console\n                                return console.log('cancel me');\n                            }}\n                        />\n                    </Panel>\n                    <SubmitPreview values={fraværDagSingleFormValues} />\n                </DialogFormWrapper>\n            </FormBlock>\n\n            <MessagesPreview messages={fraværMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default FraværExample;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { prettifyDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport {\n    getDateValidator,\n    getFødselsnummerValidator,\n    getStringValidator,\n    ValidateDateError,\n    ValidateFødselsnummerError,\n    ValidateStringError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport annetBarnUtils from './annetBarnUtils';\nimport { AnnetBarn, AnnetBarnFormValues } from './types';\n\nexport interface AnnetBarnFormLabels {\n    title: string;\n    fnr: string;\n    placeholderFnr?: string;\n    fødselsdato: string;\n    navn: string;\n    placeholderNavn?: string;\n    okButton: string;\n    cancelButton: string;\n    aldersGrenseText?: string;\n}\n\nenum AnnetBarnFormFields {\n    fnr = 'fnr',\n    fødselsdato = 'fødselsdato',\n    navn = 'navn',\n}\n\nexport const AnnetBarnFormErrors = {\n    [AnnetBarnFormFields.navn]: { [ValidateStringError.stringHasNoValue]: 'annetBarnForm.navn.stringHasNoValue' },\n    [AnnetBarnFormFields.fødselsdato]: {\n        [ValidateDateError.dateHasNoValue]: 'annetBarnForm.fødselsdato.dateHasNoValue',\n        [ValidateDateError.dateIsBeforeMin]: 'annetBarnForm.fødselsdato.dateIsBeforeMin',\n        [ValidateDateError.dateIsAfterMax]: 'annetBarnForm.fødselsdato.dateIsAfterMax',\n        [ValidateDateError.dateHasInvalidFormat]: 'annetBarnForm.fødselsdato.dateHasInvalidFormat',\n    },\n    [AnnetBarnFormFields.fnr]: {\n        [ValidateFødselsnummerError.fødselsnummerHasNoValue]: 'annetBarnForm.fnr.fødselsnummerHasNoValue',\n        [ValidateFødselsnummerError.fødselsnummerIsInvalid]: 'annetBarnForm.fnr.fødselsnummerIsInvalid',\n        [ValidateFødselsnummerError.fødselsnummerIsNot11Chars]: 'annetBarnForm.fnr.fødselsnummerIsNot11Chars',\n        [ValidateFødselsnummerError.fødselsnummerIsNotAllowed]: 'annetBarnForm.fnr.fødselsnummerIsNotAllowed',\n    },\n};\n\ninterface Props {\n    annetBarn?: Partial<AnnetBarn>;\n    labels?: Partial<AnnetBarnFormLabels>;\n    minDate: Date;\n    maxDate: Date;\n    disallowedFødselsnumre?: string[];\n    onSubmit: (values: AnnetBarn) => void;\n    onCancel: () => void;\n}\n\nconst Form = getTypedFormComponents<AnnetBarnFormFields, AnnetBarnFormValues, ValidationError>();\n\nconst AnnetBarnForm = ({\n    annetBarn = { fnr: '', navn: '', fødselsdato: undefined, id: undefined },\n    labels,\n    minDate,\n    maxDate,\n    disallowedFødselsnumre,\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: AnnetBarnFormValues) => {\n        const annetBarnToSubmit = annetBarnUtils.mapFormValuesToPartialAnnetBarn(formValues, annetBarn.id);\n        if (annetBarnUtils.isAnnetBarn(annetBarnToSubmit)) {\n            onSubmit(annetBarnToSubmit);\n        } else {\n            throw new Error('AnnetBarnForm: Formvalues is not a valid AnnetBarn on submit.');\n        }\n    };\n\n    const defaultLabels: AnnetBarnFormLabels = {\n        title: intlHelper(intl, 'annetBarn.form.title'),\n        fnr: intlHelper(intl, 'annetBarn.form.fnr'),\n        fødselsdato: intlHelper(intl, 'annetBarn.form.fødselsdato'),\n        navn: intlHelper(intl, 'annetBarn.form.navn'),\n        okButton: intlHelper(intl, 'annetBarn.form.okButton'),\n        cancelButton: intlHelper(intl, 'annetBarn.form.cancelButton'),\n    };\n\n    const formLabels: AnnetBarnFormLabels = { ...defaultLabels, ...labels };\n\n    return (\n        <Form.FormikWrapper\n            initialValues={annetBarnUtils.mapAnnetBarnToFormValues(annetBarn)}\n            onSubmit={onFormikSubmit}\n            renderForm={() => (\n                <Form.Form onCancel={onCancel} formErrorHandler={getFormErrorHandler(intl, 'annetBarnForm')}>\n                    <Systemtittel tag=\"h1\">{formLabels.title}</Systemtittel>\n                    <FormBlock>\n                        <Form.Input\n                            name={AnnetBarnFormFields.navn}\n                            label={formLabels.navn}\n                            validate={getStringValidator({ required: true })}\n                            placeholder={formLabels.placeholderNavn}\n                        />\n                    </FormBlock>\n                    <FormBlock>\n                        <Form.DatePicker\n                            name={AnnetBarnFormFields.fødselsdato}\n                            label={\n                                formLabels.aldersGrenseText\n                                    ? `${formLabels.fødselsdato} ${formLabels.aldersGrenseText}`\n                                    : `${formLabels.fødselsdato}`\n                            }\n                            validate={(value) => {\n                                const dateError = getDateValidator({ required: true, min: minDate, max: maxDate })(\n                                    value\n                                );\n                                if (dateError === ValidateDateError.dateIsBeforeMin) {\n                                    return {\n                                        key: dateError,\n                                        values: { dato: prettifyDate(minDate) },\n                                    };\n                                }\n                                return dateError;\n                            }}\n                            maxDate={maxDate}\n                            minDate={minDate}\n                            showYearSelector={true}\n                        />\n                    </FormBlock>\n\n                    <FormBlock>\n                        <Form.Input\n                            name={AnnetBarnFormFields.fnr}\n                            label={formLabels.fnr}\n                            validate={getFødselsnummerValidator({\n                                required: true,\n                                disallowedValues: disallowedFødselsnumre,\n                            })}\n                            inputMode=\"numeric\"\n                            maxLength={11}\n                            placeholder={formLabels.placeholderFnr}\n                        />\n                    </FormBlock>\n                </Form.Form>\n            )}\n        />\n    );\n};\n\nexport default AnnetBarnForm;\n","import { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { hasValue } from '@navikt/sif-common-formik/lib/validation/validationUtils';\nimport { guid } from 'nav-frontend-js-utils';\nimport { AnnetBarn, AnnetBarnFormValues } from './types';\n\nconst isAnnetBarn = (annetBarn: Partial<AnnetBarn>): annetBarn is AnnetBarn => {\n    const { fnr, navn, fødselsdato } = annetBarn;\n    return hasValue(fnr) && hasValue(navn) && hasValue(fødselsdato);\n};\n\nconst mapFormValuesToPartialAnnetBarn = (\n    formValues: AnnetBarnFormValues,\n    id: string | undefined\n): Partial<AnnetBarn> => {\n    return {\n        ...formValues,\n        id: id || guid(),\n        fødselsdato: ISOStringToDate(formValues.fødselsdato),\n    };\n};\n\nconst mapAnnetBarnToFormValues = (annetBarn: Partial<AnnetBarn>): AnnetBarnFormValues => {\n    return {\n        fnr: annetBarn.fnr,\n        navn: annetBarn.navn,\n        fødselsdato: dateToISOString(annetBarn.fødselsdato),\n    };\n};\n\nconst annetBarnUtils = {\n    mapAnnetBarnToFormValues,\n    mapFormValuesToPartialAnnetBarn,\n    isAnnetBarn,\n};\n\nexport default annetBarnUtils;\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { AnnetBarn } from './types';\nimport './annetBarnList.less';\n\ninterface Props {\n    annetBarn: AnnetBarn[];\n    onEdit?: (annetBarn: AnnetBarn) => void;\n    onDelete?: (annetBarn: AnnetBarn) => void;\n}\n\nconst bem = bemUtils('annetBarnList');\n\nconst AnnetBarnList = ({ annetBarn = [], onDelete, onEdit }: Props) => {\n    const renderAnnetBarnLabel = (annetBarn: AnnetBarn): React.ReactNode => {\n        return (\n            <div className={bem.element('label')}>\n                <span className={bem.element('dato')}>{prettifyDate(annetBarn.fødselsdato)}</span>\n                <span className={bem.element('land')}>\n                    {onEdit && <ActionLink onClick={() => onEdit(annetBarn)}>{annetBarn.navn}</ActionLink>}\n                    {!onEdit && <span>{annetBarn.navn}</span>}\n                </span>\n            </div>\n        );\n    };\n\n    return (\n        <ItemList<AnnetBarn>\n            getItemId={(annetBarn) => annetBarn.id}\n            getItemTitle={(annetBarn) => annetBarn.navn}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderAnnetBarnLabel}\n            items={annetBarn.filter((annetBarn) => annetBarn.id !== undefined)}\n        />\n    );\n};\n\nexport default AnnetBarnList;\n","import React from 'react';\nimport {\n    FormikModalFormAndList,\n    ModalFormAndListLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport AnnetBarnForm from './AnnetBarnForm';\nimport AnnetBarnList from './AnnetBarnList';\nimport { AnnetBarn } from './types';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames, ValidationError> {\n    name: FieldNames;\n    labels: ModalFormAndListLabels;\n    minDate: Date;\n    maxDate: Date;\n    disallowedFødselsnumre?: string[];\n    aldersGrenseText?: string;\n    placeholderFnr?: string;\n    placeholderNavn?: string;\n}\n\nfunction AnnetBarnListAndDialog<FieldNames>({\n    name,\n    validate,\n    labels,\n    minDate,\n    maxDate,\n    disallowedFødselsnumre,\n    aldersGrenseText,\n    placeholderFnr,\n    placeholderNavn,\n}: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, AnnetBarn, ValidationError>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                formRenderer={({ onSubmit, onCancel, item }) => (\n                    <AnnetBarnForm\n                        annetBarn={item}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        disallowedFødselsnumre={disallowedFødselsnumre}\n                        labels={{\n                            aldersGrenseText: aldersGrenseText,\n                            placeholderFnr: placeholderFnr,\n                            placeholderNavn: placeholderNavn,\n                        }}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <AnnetBarnList annetBarn={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default AnnetBarnListAndDialog;\n","import React, { useState } from 'react';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { date4YearsAgo, dateToday } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport flatten from 'flat';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport AnnetBarnForm, { AnnetBarnFormErrors } from '../../../forms/annet-barn/AnnetBarnForm';\nimport AnnetBarnListAndDialog from '../../../forms/annet-barn/AnnetBarnListAndDialog';\nimport annetBarnMessages from '../../../forms/annet-barn/annetBarnMessages';\nimport { AnnetBarn } from '../../../forms/annet-barn/types';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\nenum FormField {\n    'annetBarn' = 'annetBarn',\n}\n\ninterface FormValues {\n    [FormField.annetBarn]: AnnetBarn[];\n}\nconst initialValues: FormValues = { annetBarn: [] };\n\nconst AnnetBarnExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<AnnetBarn> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    // const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues, ValidationError>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\">\n                                <AnnetBarnListAndDialog<FormField>\n                                    name={FormField.annetBarn}\n                                    validate={getListValidator({ required: true })}\n                                    labels={{\n                                        addLabel: 'Legg til barn',\n                                        listTitle: 'Registrerte barn',\n                                        modalTitle: 'Legg til barn',\n                                        emptyListText: 'Ingen barn er lagt til',\n                                    }}\n                                    minDate={date4YearsAgo}\n                                    maxDate={dateToday}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrorIntlKeys={flatten(AnnetBarnFormErrors)}\n                    formName={'annetBarn'}\n                    intlMessages={annetBarnMessages}\n                />\n            </Box>\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <AnnetBarnForm\n                        annetBarn={{}}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                        minDate={date4YearsAgo}\n                        maxDate={dateToday}\n                    />\n                </Panel>\n                <SubmitPreview values={singleFormValues} />\n            </DialogFormWrapper>\n\n            <MessagesPreview messages={annetBarnMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default AnnetBarnExample;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { TypedFormikForm, TypedFormikWrapper, YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport flat from 'flat';\nimport Panel from 'nav-frontend-paneler';\nimport { Checkbox } from 'nav-frontend-skjema';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { VirksomhetFormErrors } from '../../../forms';\nimport { mapVirksomhetToVirksomhetApiData } from '../../../forms/virksomhet/mapVirksomhetToApiData';\nimport { isVirksomhet, Næringstype, Virksomhet } from '../../../forms/virksomhet/types';\nimport VirksomhetInfoAndDialog from '../../../forms/virksomhet/VirksomhetInfoAndDialog';\nimport virksomhetMessages from '../../../forms/virksomhet/virksomhetMessages';\nimport VirksomhetSummary from '../../../forms/virksomhet/VirksomhetSummary';\nimport PageIntro from '../../components/page-intro/PageIntro';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\n\nenum FormField {\n    'virksomhet' = 'virksomhet',\n}\n\nexport const mockVirksomhet: Virksomhet = {\n    id: '024782550-1402-01448-04932-71872390929312',\n    næringstyper: [Næringstype.ANNEN, Næringstype.DAGMAMMA, Næringstype.FISKE, Næringstype.JORDBRUK_SKOGBRUK],\n    fiskerErPåBladB: YesOrNo.YES,\n    navnPåVirksomheten: 'Virksomhet AS',\n    registrertINorge: YesOrNo.YES,\n    organisasjonsnummer: '123123123',\n    fom: new Date('2007-02-01T00:00:00.000Z'),\n    erPågående: true,\n    næringsinntekt: 20000,\n    harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene: YesOrNo.YES,\n    blittYrkesaktivDato: new Date(),\n    hattVarigEndringAvNæringsinntektSiste4Kalenderår: YesOrNo.YES,\n    varigEndringINæringsinntekt_dato: new Date('2019-12-09T00:00:00.000Z'),\n    varigEndringINæringsinntekt_inntektEtterEndring: 200000,\n    varigEndringINæringsinntekt_forklaring: 'Jeg fikk flere barn',\n    harRegnskapsfører: YesOrNo.YES,\n    regnskapsfører_navn: 'Regnskapsefører Truls',\n    regnskapsfører_telefon: '98219409',\n};\n\ninterface FormValues {\n    [FormField.virksomhet]?: Virksomhet;\n}\n\nconst initialValues: FormValues = {};\n\nconst VirksomhetExample = () => {\n    const [formValues, setFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const [harFlereVirksomheter, setHarFlereVirksomheter] = useState<boolean>(false);\n    const intl = useIntl();\n\n    const { virksomhet } = formValues || {};\n\n    const apiVirksomhet =\n        virksomhet && isVirksomhet(virksomhet) ? mapVirksomhetToVirksomhetApiData(intl.locale, virksomhet) : undefined;\n    return (\n        <>\n            <PageIntro title=\"Næringsvirksomhet\">Skjema som brukes for på registrere en næringsvirksomhet.</PageIntro>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues, ValidationError>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                formErrorHandler={getFormErrorHandler(intl)}>\n                                <VirksomhetInfoAndDialog<FormField>\n                                    name={FormField.virksomhet}\n                                    harFlereVirksomheter={harFlereVirksomheter}\n                                    validate={getListValidator({ required: true })}\n                                    labels={{\n                                        addLabel: harFlereVirksomheter ? 'Registrer virksomhet' : 'Legg til',\n                                        deleteLabel: 'Fjern',\n                                        editLabel: 'Endre',\n                                        infoTitle: 'Virksomhet',\n                                        modalTitle: 'Virksomhet',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <Box margin=\"l\">\n                    <hr />\n                    <Panel style={{ padding: '1rem' }}>\n                        <Box padBottom=\"m\">Varianter:</Box>\n                        <Box margin=\"m\">\n                            <Checkbox\n                                label=\"Bruker har flere virksomheter\"\n                                checked={harFlereVirksomheter}\n                                onChange={(evt) => setHarFlereVirksomheter(evt.currentTarget.checked)}\n                            />\n                        </Box>\n                    </Panel>\n                </Box>\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrorIntlKeys={flat(VirksomhetFormErrors)}\n                    intlMessages={virksomhetMessages}\n                />\n            </Box>\n\n            {apiVirksomhet && (\n                <>\n                    <Box margin=\"xxl\" padBottom=\"l\">\n                        <Undertittel>Oppsummering av api data</Undertittel>\n                    </Box>\n                    <Panel border={true}>\n                        <VirksomhetSummary virksomhet={apiVirksomhet} harFlereVirksomheter={harFlereVirksomheter} />\n                    </Panel>\n                </>\n            )}\n        </>\n    );\n};\n\nexport default VirksomhetExample;\n","/* eslint-disable react/display-name */\nimport React, { useState } from 'react';\nimport Tabs from 'nav-frontend-tabs';\nimport 'nav-frontend-tabs-style';\nimport PageIntro from '../../components/page-intro/PageIntro';\nimport { RouteConfig } from '../../config/routeConfig';\nimport BostedUtlandExample from './BostedUtlandExample';\nimport FerieuttakExample from './FerieuttakExample';\nimport FosterbarnExample from './FosterbarnExample';\nimport TidsperiodeExample from './TidsperiodeExample';\nimport UtenlandsoppholdIPeriodenExample from './UtenlandsoppholdExample';\nimport FraværExample from './FraværExample';\nimport AnnetBarnExample from './AnnetBarnExample';\n\nconst tabRoutes: RouteConfig[] = [\n    {\n        path: 'fravær',\n        renderContent: () => <FraværExample />,\n        title: 'Fravær',\n    },\n    {\n        path: 'tidsrom',\n        renderContent: () => <TidsperiodeExample />,\n        title: 'Tidsperiode',\n    },\n    {\n        path: 'utenlandsopphold',\n        renderContent: () => <UtenlandsoppholdIPeriodenExample />,\n        title: 'Utenlandsopphold i perioden',\n    },\n    {\n        path: 'bosted-utland',\n        renderContent: () => <BostedUtlandExample />,\n        title: 'Bosted utland',\n    },\n    {\n        path: 'ferieuttak',\n        renderContent: () => <FerieuttakExample />,\n        title: 'Ferieuttak i perioden',\n    },\n    {\n        path: 'fosterbarn',\n        renderContent: () => <FosterbarnExample />,\n        title: 'Fosterbarn',\n    },\n    {\n        path: 'annetbarn',\n        renderContent: () => <AnnetBarnExample />,\n        title: 'Annet Barn',\n    },\n];\n\nconst DialogForms = () => {\n    const [path, setPath] = useState(tabRoutes[0].path);\n    const activeRoute = tabRoutes.find((r) => {\n        return r.path === path;\n    });\n    return (\n        <>\n            <PageIntro title=\"Dialogskjema\">\n                Skjema for ferieuttak i perioden, utenlandsopphold i perioden og bosted i utlandet.\n            </PageIntro>\n            <Tabs\n                onChange={(evt, idx) => setPath(tabRoutes[idx].path)}\n                tabs={tabRoutes.map((r) => ({\n                    label: r.title,\n                    active: r.path === path ? 'true' : 'false',\n                }))}\n            />\n            {activeRoute && activeRoute.renderContent()}\n        </>\n    );\n};\n\nexport default DialogForms;\n","import React from 'react';\nimport PageIntro from './components/page-intro/PageIntro';\n\nconst Intro = () => (\n    <>\n        <PageIntro title=\"SIF-common guide\">\n            Dette er starten på en enkel guide til komponenter og konsepter i SIF-common, og som kan brukes i\n            søknadsapplikasjonene til kapittel 9. Vi legger det vi trenger, etter hvert som vi ser at vi trenger det :)\n        </PageIntro>\n    </>\n);\n\nexport default Intro;\n","import React from 'react';\nimport { MessageFileFormat } from '@navikt/sif-common-core/lib/dev-utils/intl/devIntlUtils';\nimport bostedUtlandMessages from '../../../forms/bosted-utland/bostedUtlandMessages';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport MessagePreviewExplanation from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagePreviewExplanation';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport ferieuttakMessages from '../../../forms/ferieuttak/ferieuttakMessages';\nimport fosterbarnMessages from '../../../forms/fosterbarn/fosterbarnMessages';\nimport fraværMessages from '../../../forms/fravær/fraværMessages';\nimport tidsperiodeMessages from '../../../forms/tidsperiode/tidsperiodeMessages';\nimport utenlandsoppholdMessages from '../../../forms/utenlandsopphold/utenlandsoppholdMessages';\nimport virksomhetMessages from '../../../forms/virksomhet/virksomhetMessages';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport annetBarnMessages from '../../../forms/annet-barn/annetBarnMessages';\n\nconst Texts = () => {\n    const formMessages: { title: string; messages: MessageFileFormat }[] = [];\n    formMessages.push({ title: 'Bosted utland', messages: bostedUtlandMessages });\n    formMessages.push({ title: 'Ferieuttak', messages: ferieuttakMessages });\n    formMessages.push({ title: 'Fosterbarn', messages: fosterbarnMessages });\n    formMessages.push({ title: 'Fravær', messages: fraværMessages });\n    formMessages.push({ title: 'Tidsperiode', messages: tidsperiodeMessages });\n    formMessages.push({ title: 'Utenlandsopphold', messages: utenlandsoppholdMessages });\n    formMessages.push({ title: 'Næringsvirksomhet (selvstendig næringsdrivende)', messages: virksomhetMessages });\n    formMessages.push({ title: 'Annet barn', messages: annetBarnMessages });\n    return (\n        <div>\n            <Box>\n                <MessagePreviewExplanation />\n            </Box>\n            {formMessages.map(({ title, messages }) => {\n                return (\n                    <div key={title}>\n                        <FormBlock margin=\"none\" paddingBottom=\"xl\">\n                            <MessagesPreview\n                                messages={messages}\n                                title={title}\n                                showExplanation={false}\n                                showMissingTextSummary={true}\n                            />\n                        </FormBlock>\n                    </div>\n                );\n            })}\n        </div>\n    );\n};\n\nexport default Texts;\n","import React from 'react';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { DateRange, prettifyDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport dayjs from 'dayjs';\nimport minMax from 'dayjs/plugin/minMax';\nimport './calendarGrid.less';\nimport { groupBy } from 'lodash';\nimport { guid } from 'nav-frontend-js-utils';\n\ndayjs.extend(minMax);\n\ninterface CalendarDayContent {\n    date: Date;\n    content: JSX.Element | undefined;\n}\n\ninterface Props {\n    content: CalendarDayContent[];\n    month: Date;\n    min?: Date;\n    max?: Date;\n    dateFormatter?: (date: Date) => React.ReactNode;\n    dateFormatterFull?: (date: Date) => React.ReactNode;\n    noContentRenderer?: (date: Date) => React.ReactNode;\n}\n\nconst getFirstWeekdayInMonth = (month: Date): Date => {\n    const firstDayInMonth = dayjs(month).startOf('month');\n    const firstWeekday = firstDayInMonth.isoWeekday();\n    if (firstWeekday <= 5) {\n        return firstDayInMonth.toDate();\n    } else if (firstWeekday === 6) {\n        return firstDayInMonth.add(2, 'days').toDate();\n    }\n    return firstDayInMonth.add(1, 'day').toDate();\n};\n\nconst getFirstWeekdayOnOrAfter = (date: Date): Date => {\n    const weekday = dayjs(date).isoWeekday();\n    if (weekday <= 5) {\n        return date;\n    } else if (weekday === 6) {\n        return dayjs(date).add(2, 'days').toDate();\n    }\n    return dayjs(date).add(1, 'day').toDate();\n};\n\nconst getDaysToRender = (\n    month: Date,\n    calendarDayContent: CalendarDayContent[],\n    range?: Partial<DateRange>\n): CalendarDayContent[] => {\n    const from = range?.from ? getFirstWeekdayOnOrAfter(range.from) : getFirstWeekdayInMonth(month);\n    const to = range?.to || dayjs(month).endOf('month');\n    const days: Array<CalendarDayContent> = [];\n\n    let current = dayjs(from).subtract(dayjs(from).isoWeekday() - 1, 'days');\n\n    do {\n        const date = current.toDate();\n        if (current.isoWeekday() <= 5) {\n            const dayContent = calendarDayContent.find((c) => dayjs(c.date).isSame(date, 'day'));\n            days.push({ date, content: dayContent !== undefined ? dayContent.content : undefined });\n        }\n        current = current.add(1, 'day');\n    } while (current.isSameOrBefore(to));\n    return days;\n};\n\nconst getWeekKey = (date: Date) => `${date.getFullYear()}_${dayjs(date).isoWeek()}`;\n\nconst bem = bemUtils('calendarGrid');\n\nconst CalendarGrid: React.FunctionComponent<Props> = ({\n    content,\n    month,\n    min,\n    max,\n    dateFormatter = prettifyDate,\n    dateFormatterFull = (date) => dayjs(date).format('dddd DD. MMM'),\n    noContentRenderer,\n}) => {\n    const days = getDaysToRender(month, content, { from: min, to: max });\n    const weeks = groupBy(days, (day) => getWeekKey(day.date));\n    return (\n        <div className={bem.block}>\n            <span role=\"presentation\" aria-hidden={true} className={bem.element('day')}>\n                Uke\n            </span>\n            <span role=\"presentation\" aria-hidden={true} className={bem.element('day')}>\n                Mandag\n            </span>\n            <span role=\"presentation\" aria-hidden={true} className={bem.element('day')}>\n                Tirsdag\n            </span>\n            <span role=\"presentation\" aria-hidden={true} className={bem.element('day')}>\n                Onsdag\n            </span>\n            <span role=\"presentation\" aria-hidden={true} className={bem.element('day')}>\n                Torsdag\n            </span>\n            <span role=\"presentation\" aria-hidden={true} className={bem.element('day')}>\n                Fredag\n            </span>\n            {Object.keys(weeks).map((key) => {\n                const daysInWeek = weeks[key];\n                const weekNum = dayjs(daysInWeek[0].date).isoWeek();\n                return [\n                    <span role=\"presentation\" aria-hidden={true} className={bem.element('weekNum')} key={guid()}>\n                        <span className={bem.element('weekNum_label')}>Uke {` `}</span>\n                        <span>{weekNum}</span>\n                    </span>,\n                    daysInWeek.map((d) => {\n                        return dayjs(d.date).isSame(month, 'month') === false ||\n                            (min && dayjs(d.date).isBefore(min)) ? (\n                            <div\n                                key={guid()}\n                                aria-hidden={true}\n                                className={bem.classNames(bem.element('contentWrapper', 'outsideMonth'))}\n                            />\n                        ) : (\n                            <div\n                                key={guid()}\n                                aria-hidden={d.content === undefined}\n                                className={bem.classNames(\n                                    bem.element('contentWrapper'),\n                                    bem.modifierConditional('noData', d.content === undefined)\n                                )}>\n                                <div className={bem.element('date')}>\n                                    <span className={bem.classNames(bem.element('date__full'), 'capsFirstLetter')}>\n                                        <span className=\"capsFirstLetter\">{dateFormatterFull(d.date)}</span>\n                                    </span>\n                                    <span className={bem.element('date__short')}>{dateFormatter(d.date)}</span>\n                                </div>\n                                <div className={bem.element('dateContent')}>\n                                    {d.content || (noContentRenderer !== undefined ? noContentRenderer(d.date) : null)}\n                                </div>\n                            </div>\n                        );\n                    }),\n                ];\n            })}\n        </div>\n    );\n};\n\nexport default CalendarGrid;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useMediaQuery } from 'react-responsive';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport ResponsivePanel from '@navikt/sif-common-core/lib/components/responsive-panel/ResponsivePanel';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { dateToISOString, getTypedFormComponents, ISOStringToDate, Time } from '@navikt/sif-common-formik/lib';\nimport getTimeValidator from '@navikt/sif-common-formik/lib/validation/getTimeValidator';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport dayjs from 'dayjs';\nimport isoWeek from 'dayjs/plugin/isoWeek';\nimport weekOfYear from 'dayjs/plugin/weekOfYear';\nimport groupby from 'lodash.groupby';\nimport { Normaltekst, Systemtittel, Undertittel } from 'nav-frontend-typografi';\nimport { Omsorgsdag } from './types';\nimport './omsorgstilbudForm.less';\nimport { isValidTime } from '@navikt/sif-common-formik/lib/components/formik-time-input/TimeInput';\nimport { hasValue } from '@navikt/sif-common-formik/lib/validation/validationUtils';\n\ndayjs.extend(isoWeek);\ndayjs.extend(weekOfYear);\n\ninterface Props {\n    omsorgsdager?: Omsorgsdag[];\n    fraDato: Date;\n    tilDato: Date;\n    onSubmit: (omsorgsdager: Omsorgsdag[]) => void;\n    onCancel?: () => void;\n}\n\ntype OmsorgsgdagFormType = { [key: string]: Partial<Time> };\n\ninterface FormValues {\n    [key: string]: Partial<Time>;\n}\n\nconst Form = getTypedFormComponents<string, FormValues, ValidationError>();\n\ninterface DateInput {\n    key: string;\n    dayOfWeek: number;\n    dayName: string;\n    dateString: string;\n    week: number;\n    yearAndWeek: string;\n    label: string;\n    time?: Time;\n}\n\nconst getDates = (from: Date, to: Date): DateInput[] => {\n    const dates: DateInput[] = [];\n    let date = dayjs(from);\n    while (date.isSameOrBefore(to, 'day')) {\n        const dayOfWeek = date.isoWeekday();\n        if (dayOfWeek <= 5) {\n            const dayName = date.format('dddd');\n            const dateString = date.format('DD.MM.YYYY');\n            const week = date.isoWeek();\n            const year = date.year();\n            const yearAndWeek = `${week},  ${year}`;\n            dates.push({\n                key: dateToISOString(date.toDate()),\n                dayOfWeek,\n                dayName,\n                dateString,\n                week,\n                yearAndWeek,\n                label: `${dayName.substring(0, 3)}. ${dateString}`,\n            });\n        }\n        date = date.add(1, 'day');\n    }\n    return dates;\n};\nconst bem = bemUtils('omsorgstilbudDager');\n\nconst mapOmsorgsdagerToFormValues = (omsorgsdager?: Omsorgsdag[]) => {\n    const omsorgsdag: OmsorgsgdagFormType = {};\n    omsorgsdager?.forEach((dag) => {\n        const key = dateToISOString(dag.dato);\n        omsorgsdag[key] = dag.tid;\n    });\n    return omsorgsdag;\n};\n\nconst OmsorgstilbudForm = ({ fraDato, tilDato, omsorgsdager, onSubmit, onCancel }: Props) => {\n    const intl = useIntl();\n    const isNarrow = useMediaQuery({ maxWidth: 700 });\n    const isWide = useMediaQuery({ minWidth: 1050 });\n\n    const onFormikSubmit = (formDager: Partial<FormValues>) => {\n        const submitDager: Omsorgsdag[] = [];\n        if (formDager) {\n            Object.keys(formDager).forEach((key) => {\n                const time = formDager[key];\n                const date = ISOStringToDate(key);\n                if (date && time && isValidTime(time)) {\n                    submitDager.push({\n                        dato: date,\n                        tid: time,\n                    });\n                }\n            });\n        }\n        onSubmit(submitDager);\n    };\n\n    const fromDate = dayjs(fraDato);\n    const toDate = dayjs(tilDato);\n\n    if (fromDate.isAfter(toDate)) {\n        return <div>Fra dato er før til-dato</div>;\n    }\n\n    const dates = getDates(fraDato, tilDato);\n    const weeks = groupby(dates, (date) => date.yearAndWeek);\n    const mndOgÅr = fromDate.format('MMMM YYYY');\n    return (\n        <Normaltekst tag=\"div\">\n            <Form.FormikWrapper\n                initialValues={mapOmsorgsdagerToFormValues(omsorgsdager)}\n                onSubmit={onFormikSubmit}\n                renderForm={() => {\n                    return (\n                        <Form.Form\n                            onCancel={onCancel}\n                            formErrorHandler={getFormErrorHandler(intl, 'tidsperiodeForm')}\n                            includeButtons={true}>\n                            <Systemtittel tag=\"h1\">Omsorgstilbud - {mndOgÅr}</Systemtittel>\n                            <Box margin=\"l\">\n                                <p>\n                                    Fyll ut antall timer og minutter de dagene barnet skal være i omsorgstilbud. Dager\n                                    hvor barnet ikke skal være i omsorgstilbud, trenger du ikke fylle ut noe.\n                                </p>\n                                <p>\n                                    <strong>Du kan registrere opp til 7 timer og 30 minutter på én dag.</strong>\n                                </p>\n                            </Box>\n                            <div className={bem.classNames(bem.block, bem.modifier())}>\n                                {Object.keys(weeks).map((key) => {\n                                    const weekDates = weeks[key];\n                                    const mndYearAndWeek = weekDates[0].yearAndWeek;\n                                    return (\n                                        <Box key={key} margin=\"m\">\n                                            <ResponsivePanel>\n                                                <Undertittel>Uke {mndYearAndWeek}</Undertittel>\n                                                <div className={isWide ? 'omsorgstilbud__uke' : undefined}>\n                                                    {weekDates.map((day) => (\n                                                        <Box key={day.key} margin={isWide ? 'm' : 'l'}>\n                                                            <Form.TimeInput\n                                                                name={day.key}\n                                                                className={\n                                                                    hasValue(day.time?.hours) ||\n                                                                    hasValue(day.time?.minutes)\n                                                                        ? 'with-value'\n                                                                        : undefined\n                                                                }\n                                                                label={<span className=\"caps\">{day.label}</span>}\n                                                                timeInputLayout={{\n                                                                    srOnlyLabels: false,\n                                                                    layout: isNarrow\n                                                                        ? 'compactWithSpace'\n                                                                        : isWide\n                                                                        ? undefined\n                                                                        : 'horizontal',\n                                                                    // suffix: { hours: 'tim', minutes: 'min' },\n                                                                    // placeholders: {\n                                                                    //     hours: '0',\n                                                                    //     minutes: '0',\n                                                                    // },\n                                                                }}\n                                                                validate={(time) => {\n                                                                    const error = getTimeValidator({\n                                                                        required: false,\n                                                                        max: { hours: 7, minutes: 30 },\n                                                                    })(time);\n                                                                    return error\n                                                                        ? {\n                                                                              key: `omsorgstilbud.validation.${error}`,\n                                                                              values: { dag: day.label, maksTimer: 7 },\n                                                                              keepKeyUnaltered: true,\n                                                                          }\n                                                                        : undefined;\n                                                                }}\n                                                            />\n                                                        </Box>\n                                                    ))}\n                                                </div>\n                                            </ResponsivePanel>\n                                        </Box>\n                                    );\n                                })}\n                            </div>\n                        </Form.Form>\n                    );\n                }}\n            />\n        </Normaltekst>\n    );\n};\n\nexport default OmsorgstilbudForm;\n","import React, { useState } from 'react';\nimport { Clock } from '@navikt/ds-icons';\nimport AriaAlternative from '@navikt/sif-common-core/lib/components/aria/AriaAlternative';\nimport AriaText from '@navikt/sif-common-core/lib/components/aria/AriaText';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { Time } from '@navikt/sif-common-formik/lib';\nimport dayjs from 'dayjs';\nimport { groupBy } from 'lodash';\nimport { EtikettInfo } from 'nav-frontend-etiketter';\nimport { Element, Undertittel } from 'nav-frontend-typografi';\nimport CalendarGrid from './CalendarGrid';\nimport { Omsorgsdag } from './types';\n\ninterface Props {\n    omsorgsdager: Omsorgsdag[];\n    fraDato: Date;\n    tilDato: Date;\n}\n\nconst bem = bemUtils('omsorgstilbudListe');\n\nconst formatTime = (time: Partial<Time>): JSX.Element => {\n    const timer = time.hours || '0';\n    const minutter = time.minutes || '0';\n    return (\n        <>\n            <span style={{ whiteSpace: 'nowrap' }}>{timer} tim.</span>\n            {` `}\n            <span style={{ whiteSpace: 'nowrap' }}>{minutter} min.</span>\n        </>\n    );\n};\n\nconst formatTimeFull = (time: Partial<Time>): string => {\n    const timer = time.hours || '0';\n    const minutter = time.minutes || '0';\n    return `${timer} ${pluralize(timer, 'time', 'timer')}, ${minutter} ${pluralize(minutter, 'minutt', 'minutter')}`;\n};\n\nconst pluralize = (tall: number | string, singular: string, plural: string): string =>\n    typeof tall === 'number' ? (tall === 1 ? singular : plural) : tall === '1' ? singular : plural;\n\nconst DagContent = ({ tid }: { tid: Time }) => {\n    return (\n        <EtikettInfo className={'varighet'}>\n            <div className={'varighet__info'}>\n                <span className=\"varighet__info__ikon\">\n                    <Clock />\n                </span>\n                <span className=\"varighet__info__tid\">\n                    <AriaAlternative visibleText={formatTime(tid)} ariaText={formatTimeFull(tid)} />\n                </span>\n            </div>\n        </EtikettInfo>\n    );\n};\n\nconst OmsorgstilbudInfo: React.FunctionComponent<Props> = ({ omsorgsdager, fraDato, tilDato }) => {\n    // const [visning, setVisning] = useState<'liste' | 'kalender'>('kalender');\n    if (omsorgsdager.length === 0) {\n        return <>Ingen dager registrert</>;\n    }\n    const måned = omsorgsdager[0].dato;\n    return (\n        <>\n            {/* <Tabs\n                defaultAktiv={1}\n                onChange={(_, idx) => {\n                    setVisning(idx === 0 ? 'liste' : 'kalender');\n                }}>\n                <Tab>Vis liste</Tab>\n                <Tab>Vis kalender</Tab>\n            </Tabs> */}\n            {/* {visning === 'kalender' && ( */}\n            <CalendarGrid\n                month={måned}\n                min={fraDato}\n                max={tilDato}\n                dateFormatter={(date: Date) => (\n                    <AriaAlternative\n                        visibleText={dayjs(date).format('D.')}\n                        ariaText={dayjs(date).format('dddd DD. MMM YYYY')}\n                    />\n                )}\n                noContentRenderer={() => {\n                    // return <AriaAlternative visibleText={''} ariaText={'Ingen tid registrert'} />;\n                    return <AriaText>Ingen tid registrert</AriaText>;\n                }}\n                content={omsorgsdager.map((dag) => ({\n                    date: dag.dato,\n                    content: <DagContent tid={dag.tid} />,\n                }))}\n            />\n            {/* )}\n            {visning === 'liste' && <OmsorgsdagerListe omsorgsdager={omsorgsdager} />} */}\n        </>\n    );\n};\n\nconst sortDays = (d1: Omsorgsdag, d2: Omsorgsdag): number => (dayjs(d1.dato).isSameOrBefore(d2.dato) ? -1 : 1);\n\nexport const OmsorgsdagerListe = ({ omsorgsdager }: { omsorgsdager: Omsorgsdag[] }) => {\n    if (omsorgsdager.length === 0) {\n        return <>Ingen omsorgsdager registrert</>;\n    }\n\n    const weeksWithDays = groupBy(omsorgsdager, (dag) => `${dag.dato.getFullYear()}-${dayjs(dag.dato).isoWeek()}`);\n    return (\n        <>\n            <Undertittel className=\"m-caps\">{dayjs(omsorgsdager[0].dato).format('MMM YYYY')}</Undertittel>\n            <div className={bem.block}>\n                {Object.keys(weeksWithDays).map((key) => {\n                    const days = weeksWithDays[key];\n                    return (\n                        <div key={key}>\n                            <Box margin=\"l\">\n                                <Element tag=\"h3\">Uke {dayjs(days[0].dato).isoWeek()}</Element>\n                            </Box>\n                            <Box margin=\"m\">\n                                {days.sort(sortDays).map((dag, idx) => {\n                                    const timer = dag.tid.hours || '0';\n                                    const minutter = dag.tid.minutes || '0';\n\n                                    return (\n                                        <EtikettInfo\n                                            className={bem.element('dag')}\n                                            key={idx}\n                                            style={{ marginRight: '.5rem', marginBottom: '.5rem' }}>\n                                            <span className={bem.element('dato')}>\n                                                {dayjs(dag.dato).format('dddd D.')}\n                                            </span>\n                                            <br />\n                                            <span className={bem.element('tid')}>\n                                                {formatTime({ hours: timer, minutes: minutter })}\n                                            </span>\n                                        </EtikettInfo>\n                                    );\n                                })}\n                            </Box>\n                        </div>\n                    );\n                })}\n            </div>\n        </>\n    );\n};\n\nexport default OmsorgstilbudInfo;\n","import React from 'react';\nimport {\n    FormikModalFormAndInfo,\n    ModalFormAndInfoLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport { datoErIPeriode } from '../../dev/examples/omsorgstilbud-example/OmsorgstilbudExample';\nimport OmsorgstilbudForm from './OmsorgstilbudForm';\nimport OmsorgstilbudInfo from './OmsorgstilbudInfo';\nimport { Omsorgsdag } from './types';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames, ValidationError> {\n    name: FieldNames;\n    labels: ModalFormAndInfoLabels;\n    fraDato: Date;\n    tilDato: Date;\n    omsorgsdager: Omsorgsdag[];\n    onAfterChange?: (omsorgsdager: Omsorgsdag[]) => void;\n}\n\nconst filterDagerIPeriode = (data: Omsorgsdag[], fraDato: Date, tilDato: Date): Omsorgsdag[] =>\n    data.filter((dag) => datoErIPeriode(dag.dato, { from: fraDato, to: tilDato }));\n\nfunction OmsorgstilbudInfoAndDialog<FieldNames>({\n    name,\n    fraDato,\n    tilDato,\n    labels,\n    validate,\n    onAfterChange,\n}: Props<FieldNames>) {\n    return (\n        <FormikModalFormAndInfo<FieldNames, Omsorgsdag[], ValidationError>\n            name={name}\n            validate={validate}\n            labels={labels}\n            renderEditButtons={true}\n            dialogClassName={'omsorgstilbudDialog'}\n            wrapInfoInPanel={false}\n            formRenderer={({ onSubmit, onCancel, data = [] }) => {\n                return (\n                    <OmsorgstilbudForm\n                        fraDato={fraDato}\n                        tilDato={tilDato}\n                        omsorgsdager={filterDagerIPeriode(data, fraDato, tilDato)}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                    />\n                );\n            }}\n            infoRenderer={({ data }) => {\n                return (\n                    <OmsorgstilbudInfo\n                        omsorgsdager={filterDagerIPeriode(data, fraDato, tilDato)}\n                        fraDato={fraDato}\n                        tilDato={tilDato}\n                    />\n                );\n            }}\n            onAfterChange={onAfterChange}\n        />\n    );\n}\n\nexport default OmsorgstilbudInfoAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { Clock } from '@navikt/ds-icons';\nimport AriaAlternative from '@navikt/sif-common-core/lib/components/aria/AriaAlternative';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { DateRange, dateToday } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { getTypedFormComponents, YesOrNo } from '@navikt/sif-common-formik/lib';\nimport datepickerUtils from '@navikt/sif-common-formik/lib/components/formik-datepicker/datepickerUtils';\nimport getIntlFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport dayjs from 'dayjs';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport CalendarGrid from '../../../forms/omsorgstilbud/CalendarGrid';\nimport OmsorgstilbudInfoAndDialog from '../../../forms/omsorgstilbud/OmsorgstilbudInfoAndDialog';\nimport { Omsorgsdag } from '../../../forms/omsorgstilbud/types';\nimport PageIntro from '../../components/page-intro/PageIntro';\nimport Panel from 'nav-frontend-paneler';\nimport ResponsivePanel from '@navikt/sif-common-core/lib/components/responsive-panel/ResponsivePanel';\n\nenum FormField {\n    periodeFra = 'periodeFra',\n    periodeTil = 'periodeTil',\n    omsorgsdager = 'omsorgsdager',\n}\n\ninterface FormValues {\n    [FormField.periodeFra]?: string;\n    [FormField.periodeTil]?: string;\n    [FormField.omsorgsdager]?: Omsorgsdag[];\n}\n\nconst initialValues: FormValues = {\n    periodeFra: datepickerUtils.getDateStringFromValue(dayjs().subtract(10, 'days').toDate()),\n    periodeTil: datepickerUtils.getDateStringFromValue(dayjs().add(15, 'days').toDate()),\n};\n\nconst FormComponents = getTypedFormComponents<FormField, FormValues, ValidationError>();\n\ninterface OmsorgsdagerIMåned {\n    key: string;\n    from: Date;\n    to: Date;\n    omsorgsdager: Omsorgsdag[];\n}\n\nexport const datoErIPeriode = (dato: Date, range: DateRange): boolean =>\n    dayjs(dato).isSameOrAfter(range.from, 'day') && dayjs(dato).isSameOrBefore(range.to, 'day');\n\nconst getAlleMånederIPerioden = (range: DateRange, omsorgsdager: Omsorgsdag[]): OmsorgsdagerIMåned[] => {\n    const måneder: OmsorgsdagerIMåned[] = [];\n    let current = dayjs(range.from);\n\n    do {\n        const monthRange: DateRange = { from: current.toDate(), to: current.endOf('month').toDate() };\n        const dager = omsorgsdager.filter(\n            (dag) =>\n                dayjs(dag.dato).isSameOrAfter(monthRange.from, 'day') &&\n                dayjs(dag.dato).isSameOrBefore(monthRange.to, 'day')\n        );\n\n        måneder.push({\n            key: `${FormField.omsorgsdager}-${current.format('MM-YY')}`,\n            omsorgsdager: dager,\n            from: monthRange.from,\n            to: dayjs(monthRange.to).isAfter(range.to) ? range.to : monthRange.to,\n        });\n        current = current.add(1, 'month').startOf('month');\n    } while (current.isBefore(range.to));\n    return måneder;\n};\n\nconst OmsorgstilbudExample = () => {\n    const [formValues, setFormValues] = useState<FormValues>({\n        periodeFra: datepickerUtils.getDateStringFromValue(new Date()),\n        periodeTil: datepickerUtils.getDateStringFromValue(dayjs().add(15, 'days').toDate()),\n    });\n    const intl = useIntl();\n    return (\n        <>\n            <PageIntro title=\"Omsorgstilbud\">Skjema som brukes for å registrere omsorgstilbud.</PageIntro>\n            <Box padBottom=\"l\">\n                <Undertittel>Dialoginnhold</Undertittel>\n            </Box>\n            <FormComponents.FormikWrapper\n                initialValues={initialValues}\n                onSubmit={setFormValues}\n                renderForm={({ values }) => {\n                    const { omsorgsdager, periodeFra, periodeTil } = values;\n                    const from = datepickerUtils.getDateFromDateString(periodeFra) || dateToday;\n                    const to =\n                        datepickerUtils.getDateFromDateString(periodeTil) || dayjs(from).add(1, 'month').toDate();\n\n                    const range = { from, to };\n                    const måneder = getAlleMånederIPerioden(range, omsorgsdager || []);\n\n                    return (\n                        <FormComponents.Form\n                            includeButtons={true}\n                            submitButtonLabel=\"Valider skjema\"\n                            formErrorHandler={getIntlFormErrorHandler(intl)}>\n                            <FormBlock>\n                                {1 + 1 === 3 && (\n                                    <CalendarGrid\n                                        month={new Date()}\n                                        dateFormatter={(date: Date) => (\n                                            <AriaAlternative\n                                                visibleText={dayjs(date).format('D.')}\n                                                ariaText={dayjs(date).format('DD.MM.YYYY')}\n                                            />\n                                        )}\n                                        content={[\n                                            {\n                                                date: new Date(),\n                                                content: (\n                                                    <span className={'varighet'}>\n                                                        <span className=\"varighet__ikon\">\n                                                            <Clock />\n                                                        </span>\n                                                        <span className=\"varighet__tid\">1t 20 min</span>\n                                                    </span>\n                                                ),\n                                            },\n                                        ]}\n                                    />\n                                )}\n                            </FormBlock>\n\n                            <FormComponents.DateIntervalPicker\n                                fromDatepickerProps={{\n                                    label: 'Fra',\n                                    name: FormField.periodeFra,\n                                }}\n                                toDatepickerProps={{\n                                    label: 'Til',\n                                    name: FormField.periodeTil,\n                                }}\n                            />\n                            {måneder.map((m) => {\n                                const mndOgÅr = dayjs(m.from).format('MMMM YYYY');\n                                const inputName = `omsorgstilbud-${dayjs(m.from).format('MM-YY')}`;\n                                const skalIOmsorgstilbud = values[inputName] === YesOrNo.YES;\n                                return (\n                                    <Box key={dayjs(m.from).format('MM.YYYY')} margin=\"xl\">\n                                        <FormComponents.YesOrNoQuestion\n                                            name={inputName as any}\n                                            legend={`Skal barnet i omsorgstilbud ${mndOgÅr}`}\n                                        />\n                                        {skalIOmsorgstilbud && (\n                                            <FormBlock margin=\"l\">\n                                                <ResponsivePanel className={'omsorgstilbudInfoDialogWrapper'}>\n                                                    <OmsorgstilbudInfoAndDialog\n                                                        name={`${m.key}`}\n                                                        fraDato={m.from}\n                                                        tilDato={m.to}\n                                                        omsorgsdager={m.omsorgsdager}\n                                                        labels={{\n                                                            addLabel: `Legg til timer`,\n                                                            deleteLabel: `Fjern alle timer`,\n                                                            editLabel: `Endre timer`,\n                                                            infoTitle: `Omsorgstilbud - ${mndOgÅr}`,\n                                                            modalTitle: `Omsorgstilbud - ${mndOgÅr}`,\n                                                        }}\n                                                    />\n                                                </ResponsivePanel>\n                                            </FormBlock>\n                                        )}\n                                    </Box>\n                                );\n                            })}\n                        </FormComponents.Form>\n                    );\n                }}\n            />\n        </>\n    );\n};\n\nexport default OmsorgstilbudExample;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport DialogForms from '../examples/dialog-forms/DialogForms';\nimport VirksomhetExample from '../examples/virksomhet-example/VirksomhetExample';\nimport Intro from '../Intro';\nimport Texts from '../examples/texts/Texts';\nimport OmsorgstilbudExample from '../examples/omsorgstilbud-example/OmsorgstilbudExample';\n\nexport interface RouteConfig {\n    path: string;\n    title: string;\n    renderContent: () => React.ReactNode;\n}\n\nexport const routes: RouteConfig[] = [\n    {\n        path: 'frontpage',\n        title: 'Forside',\n        renderContent: () => <Intro />,\n    },\n    {\n        path: 'dialog-forms',\n        title: 'Dialogskjema',\n        renderContent: () => <DialogForms />,\n    },\n    {\n        path: 'næring',\n        title: 'Næringsvirksomhet',\n        renderContent: () => <VirksomhetExample />,\n    },\n    {\n        path: 'omsorgstilbud',\n        title: 'Omsorgstilbud',\n        renderContent: () => <OmsorgstilbudExample />,\n    },\n    {\n        path: 'texts',\n        title: 'Tekster',\n        renderContent: () => <Texts />,\n    },\n];\n\nexport const isActiveRoute = (path: string, pathname: string): boolean => {\n    return pathname.indexOf(path) >= 0;\n};\n\nexport const getRouteConfig = (pathname: string): RouteConfig | undefined => {\n    return routes.find((f) => isActiveRoute(f.path, pathname));\n};\n","import * as React from 'react';\nimport { Button, Menu, MenuItem, Wrapper } from 'react-aria-menubutton';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { NedChevron } from 'nav-frontend-chevron';\nimport { isActiveRoute, RouteConfig, routes } from '../../config/routeConfig';\nimport './headerMenu.less';\n\nconst renderMenuItem = (route: RouteConfig) => {\n    return (\n        <li key={route.path}>\n            <MenuItem className=\"headerMenu__menu__item\">\n                <div data-page={route.path}>{route.title}</div>\n            </MenuItem>\n        </li>\n    );\n};\n\ntype Props = RouteComponentProps;\n\nconst HeaderMenu = ({ history }: Props) => {\n    const {\n        location: { pathname },\n    } = history;\n\n    const toggle = (element: any) => {\n        const r = element.props ? element.props['data-page'] : undefined;\n        if (r) {\n            history.push(r);\n        }\n    };\n    const route = routes.find((r) => isActiveRoute(r.path, pathname)) || routes[0];\n    return (\n        <div className=\"headerMenu\">\n            <Wrapper className=\"headerMenu__wrapper\" onSelection={toggle}>\n                <Button className=\"headerMenu__button\">\n                    <div className=\"headerMenu__button__label\">{route ? route.title : 'Velg'}</div>\n                    <div className=\"headerMenu__button__chevron\">\n                        <NedChevron />\n                    </div>\n                </Button>\n                <Menu className=\"headerMenu__menu\">\n                    <ul>{routes.map(renderMenuItem)}</ul>\n                </Menu>\n            </Wrapper>\n        </div>\n    );\n};\nexport default withRouter(HeaderMenu);\n","import React from 'react';\nimport { Link, RouteComponentProps, withRouter } from 'react-router-dom';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport 'nav-frontend-lenker-style';\nimport { isActiveRoute, routes } from '../../config/routeConfig';\n\nconst lenkeBem = bemUtils('lenke');\n\nconst LeftMenu = ({\n    history: {\n        location: { pathname },\n    },\n}: RouteComponentProps) => {\n    return (\n        <div className=\"leftMenu\">\n            {routes.map((route) => (\n                <Link\n                    key={route.path}\n                    to={route.path}\n                    className={lenkeBem.classNames(\n                        lenkeBem.block,\n                        lenkeBem.modifierConditional('active', isActiveRoute(route.path, pathname))\n                    )}>\n                    {route.title}\n                </Link>\n            ))}\n        </div>\n    );\n};\n\nexport default withRouter(LeftMenu);\n","import React from 'react';\nimport MediaQuery from 'react-responsive';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport HeaderMenu from './components/header-menu/HeaderMenu';\nimport LeftMenu from './components/left-menu/LeftMenu';\nimport { getRouteConfig } from './config/routeConfig';\nimport Intro from './Intro';\n\ntype Props = RouteComponentProps;\n\nconst DevContent = ({\n    history: {\n        location: { pathname },\n    },\n}: Props) => {\n    const routeConfig = getRouteConfig(pathname);\n    return (\n        <>\n            <MediaQuery minWidth={1072}>\n                <aside className=\"asideContent\">\n                    <LeftMenu />\n                </aside>\n                <article style={{ maxWidth: '1000px' }} className=\"mainContent\">\n                    {routeConfig ? routeConfig.renderContent() : <Intro />}\n                </article>\n            </MediaQuery>\n            <MediaQuery maxWidth={1071}>\n                <aside className=\"asideContentTop\">\n                    <HeaderMenu />\n                </aside>\n                <article style={{ maxWidth: '1000px' }} className=\"mainContent\">\n                    {routeConfig ? routeConfig.renderContent() : <Intro />}\n                </article>\n            </MediaQuery>\n        </>\n    );\n};\n\nexport default withRouter(DevContent);\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { HashRouter } from 'react-router-dom';\nimport LanguageToggle from '@navikt/sif-common-core/lib/components/language-toggle/LanguageToggle';\nimport { Locale } from '@navikt/sif-common-core/lib/types/Locale';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport NAVLogo from './components/svg/NAVLogo';\nimport DevContent from './DevContent';\nimport './styles/dev.less';\n\ninterface Props {\n    onChangeLocale: (locale: Locale) => void;\n}\n\nconst DevPage = ({ onChangeLocale }: Props) => {\n    const intl = useIntl();\n    return (\n        <main className=\"devPage\">\n            <header className=\"header\">\n                <span className=\"navLogo\">\n                    <NAVLogo />\n                </span>\n                <span className=\"header__title\">\n                    <Systemtittel>Sykdom i familien - sif-common-forms</Systemtittel>\n                </span>\n                <span className=\"languageToggler\">\n                    <LanguageToggle toggle={onChangeLocale} locale={intl.locale as Locale} />\n                </span>\n            </header>\n            <div className=\"contentWrapper\">\n                <HashRouter>\n                    <DevContent />\n                </HashRouter>\n            </div>\n        </main>\n    );\n};\n\nexport default DevPage;\n","import * as React from 'react';\nimport '@formatjs/intl-pluralrules//locale-data/nb';\nimport '@formatjs/intl-pluralrules//locale-data/nn';\nimport '@formatjs/intl-pluralrules/polyfill';\nimport { Locale } from '@navikt/sif-common-core/lib/types/Locale';\nimport { getLocaleFromSessionStorage, setLocaleInSessionStorage } from '@navikt/sif-common-core/lib/utils/localeUtils';\nimport 'nav-frontend-skjema-style';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport AppIntlProvider from './dev/components/app-intl-provider/AppIntlProvider';\nimport DevPage from './dev/DevPage';\nimport '@navikt/sif-common-core/lib/styles/globalStyles.less';\n\nconst localeFromSessionStorage = getLocaleFromSessionStorage();\n\nconst App = () => {\n    const [locale, setLocale] = React.useState(localeFromSessionStorage || 'nb');\n    return (\n        <Normaltekst tag=\"div\">\n            <AppIntlProvider locale={locale as Locale}>\n                <DevPage\n                    onChangeLocale={(l: Locale) => {\n                        setLocaleInSessionStorage(l);\n                        setLocale(l);\n                    }}\n                />\n            </AppIntlProvider>\n        </Normaltekst>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Modal from 'react-modal';\nimport App from './App';\n\nModal.setAppElement('#root');\nReactDOM.render(<App />, document.getElementById('root'));\n","import { date4YearsAgo } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport dayjs from 'dayjs';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Næringstype, Virksomhet, VirksomhetFormValues } from './types';\n\nexport const harFiskerNæringstype = (næringstyper: Næringstype[]): boolean =>\n    næringstyper.find((n) => n === Næringstype.FISKE) !== undefined;\n\nexport const erVirksomhetRegnetSomNyoppstartet = (oppstartsdato: Date) => {\n    return dayjs(oppstartsdato).startOf('day').isAfter(date4YearsAgo);\n};\n\nexport const mapFormValuesToVirksomhet = (\n    formValues: VirksomhetFormValues,\n    id: string | undefined\n): Partial<Virksomhet> => {\n    return {\n        ...formValues,\n        id: id || guid(),\n        fom: ISOStringToDate(formValues.fom),\n        tom: ISOStringToDate(formValues.tom),\n        blittYrkesaktivDato: ISOStringToDate(formValues.blittYrkesaktivDato),\n        varigEndringINæringsinntekt_dato: ISOStringToDate(formValues.varigEndringINæringsinntekt_dato),\n    };\n};\n\nexport const mapVirksomhetToFormValues = (virksomhet: Virksomhet): VirksomhetFormValues => {\n    return {\n        ...virksomhet,\n        fom: dateToISOString(virksomhet.fom),\n        tom: dateToISOString(virksomhet.tom),\n        blittYrkesaktivDato: dateToISOString(virksomhet.blittYrkesaktivDato),\n        varigEndringINæringsinntekt_dato: dateToISOString(virksomhet.varigEndringINæringsinntekt_dato),\n    };\n};\n","import React from 'react';\nimport ContentWithHeader from '@navikt/sif-common-core/lib/components/content-with-header/ContentWithHeader';\nimport Box, { BoxMargin } from '@navikt/sif-common-core/lib/components/box/Box';\n\ninterface Props {\n    header: string;\n    margin?: BoxMargin;\n}\n\nconst SummaryBlock: React.FunctionComponent<Props> = ({ header, margin = 'l', children }) => (\n    <Box margin={margin}>\n        <ContentWithHeader header={header}>{children}</ContentWithHeader>\n    </Box>\n);\n\nexport default SummaryBlock;\n","import intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { IntlShape } from 'react-intl';\nimport { FraværÅrsak } from './types';\n\nconst fraværMessages = {\n    nb: {\n        'fravær.årsak.STENGT_SKOLE_ELLER_BARNEHAGE': 'Skolen/barnehagen var stengt på grunn av koronasituasjonen.',\n        'fravær.årsak.SMITTEVERNHENSYN':\n            'Skolen/barnehagen var åpen, men barnet måtte være hjemme på grunn av særlige smittevernhensyn.',\n        'fravær.årsak.STENGT_SKOLE_ELLER_BARNEHAGE.kort': 'stengt skole/barnehage',\n        'fravær.årsak.SMITTEVERNHENSYN.kort': 'særlige smittevernhensyn',\n\n        'fravær.list.årsak': 'På grunn av {årsak}',\n        'fravær.form.validation.dateOutsideRange': 'Første gyldige dato er {fom}, og siste gyldige dato er {tom}',\n        'fravær.form.validation.fromDateAfterToDate': 'Fra-dato må være lik eller før til-dato',\n        'fravær.form.validation.toDateBeforeFromDate': 'Til-dato må være lik eller etter fra-dato',\n        'fravær.form.validation.fra_og_til_er_ulike_år': 'Fra og til dato må være i samme år',\n        'fravær.form.validation.timer_mer_enn_arbeidstimer':\n            'Antall timer med fravær kan ikke være mer enn antall timer du skulle ha jobbet denne dagen',\n        'fravær.form.validation.er_helg': 'Lørdag og søndag er ikke gyldig.',\n        'fieldvalidation.dager_overlapper_med_andre_dager':\n            'Én eller flere dager med fravær overlapper med andre dager med fravær.',\n        'fieldvalidation.fra_dato_kolliderer_med_annet_fravær':\n            'Fra og med datoen overlapper med allerede registrert fraværsdag',\n        'fieldvalidation.til_dato_kolliderer_med_annet_fravær':\n            'Til og med datoen overlapper med allerede registrert fraværsdag',\n        'fieldvalidation.dato_kolliderer_med_annet_fravær': 'Datoen overlapper med allerede registrert fraværsdag',\n        'info.smittevern.tittel': 'Hva menes med særlige smittevernhensyn?',\n        'info.smittevern.info.html':\n            'Når barnehagen eller skolen er åpen, men du må være hjemme med barnet ditt på grunn <strong>av særlige smittevernhensyn</strong>, kan du bruke omsorgsdager. Det er en lege som avgjør om det foreligger særlige smittevernhensyn. Det kan være smittevernhensyn til barnet eller andre familiemedlemmer som bor med barnet.',\n        'info.årsak.tittel': 'Hva om begge årsakene gjelder i perioden jeg har lagt inn?',\n        'info.årsak.info.1': `Hvis du har vært hjemme med barn både fordi barnehage/skole var stengt, og på grunn av særlige smittevernshensyn, må du legge inn flere perioder. Når du har lagt inn én periode og trykker OK, får du mulighet til å legge til flere perioder.`,\n        'info.årsak.info.2': `Eksempel:`,\n        'info.årsak.info.3': `1.-2. mars var du hjemme med barn fordi barnehage/skole var stengt. Da legger du inn 1.-2. mars som en periode. I tillegg var du hjemme 3.-5. mars på grunn av særlige smittevernshensyn. Da legger du inn 3.-5. mars som en egen periode.`,\n\n        'fravær.form.felles.hjemmePgaKorona':\n            'Var du hjemme med barn fordi barnehage/skole var stengt på grunn av koronaviruset, eller på grunn av særlige smittevernshensyn?',\n        'fravær.form.felles.årsak': 'Velg årsaken til at du var hjemme med barn i perioden du har lagt inn',\n        'fravær.form.felles.ok': 'Ok',\n        'fravær.form.felles.avbryt': 'Avbryt',\n        'fravær.form.periode.tittel': 'Periode med fravær fra jobb',\n        'fravær.form.periode.tidsrom': 'Velg tidsrom',\n        'fravær.form.periode.fom': 'Fra og med',\n        'fravær.form.periode.tom': 'Til og med',\n        'fravær.form.dag.tittel': 'Dag med delvis fravær fra jobb',\n        'fravær.form.dag.dato': 'Dato',\n        'fravær.form.dag.antallArbeidstimer': 'Antall timer du skulle ha jobbet denne dagen',\n        'fravær.form.dag.timerFravær': 'Antall timer du var borte fra jobb denne dagen',\n\n        'fraværDagForm.dato.dateHasNoValue': 'Du må oppgi dato for når du hadde delvis fravær.',\n        'fraværDagForm.dato.dateHasInvalidFormat':\n            'Du må oppgi dato for når du hadde delvis fravær i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'fraværDagForm.dato.dateIsAfterMax':\n            'Dato for når du hadde delvis fravær kan ikke være etter dagens dato. Skriv inn eller velg dato fra datovelgeren.',\n        'fraværDagForm.dato.dateIsBeforeMin':\n            'Datoen for når du hadde delvis fravær kan ikke være før {dato}. Skriv inn eller velg dato fra datovelgeren.',\n        'fraværDagForm.dato.er_helg':\n            'Dato for når du hadde delvis fravær må være en ukedag, det kan ikke være lørdag eller søndag.',\n        'fraværDagForm.dato.dato_kolliderer_med_annet_fravær': 'Datoen overlapper med allerede registrert fraværsdag',\n        'fraværDagForm.timerArbeidsdag.noValue': 'Du må velge antall timer du skulle ha jobbet denne dagen.',\n        'fraværDagForm.timerFravær.noValue': 'Du må velge antall timer du var borte fra jobb denne dagen',\n        'fraværDagForm.timerFravær.fravær_timer_mer_enn_arbeidstimer': 'Fravær kan ikke være høyere enn arbeidstimer',\n        'fraværDagForm.hjemmePgaKorona.yesOrNoIsUnanswered':\n            'Velg ja eller nei om du hjemme med barn fordi barnehage/skole var stengt på grunn av koronaviruset, eller på grunn av særlige smittevernshensyn.',\n        'fraværDagForm.årsak.noValue': 'Velg årsaken til at du var hjemme med barn i perioden du har lagt inn.',\n\n        'fraværPeriodeForm.fraOgMed.dateHasNoValue':\n            'Du må oppgi når perioden startet. Skriv inn eller velg dato fra datovelgeren.',\n        'fraværPeriodeForm.fraOgMed.dateIsAfterMax':\n            'Datoen for når perioden startet kan ikke være etter dagens dato. Skriv inn eller velg dato fra datovelgeren.',\n        'fraværPeriodeForm.fraOgMed.dateIsBeforeMin':\n            'Datoen for når perioden startet kan ikke være før {dato}. Skriv inn eller velg sluttdato fra datovelgeren.',\n        'fraværPeriodeForm.fraOgMed.dateHasInvalidFormat':\n            'Du må oppgi dato for når perioden startet i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'fraværPeriodeForm.fraOgMed.fromDateIsAfterToDate':\n            'Startdatoen for perioden må være før sluttdatoen, eller på samme dag som sluttdatoen. Skriv inn eller velg dato fra datovelgeren.',\n        'fraværPeriodeForm.tilOgMed.dateHasNoValue':\n            'Du må oppgi når perioden sluttet. Skriv inn eller velg dato fra datovelgeren.',\n        'fraværPeriodeForm.tilOgMed.dateIsAfterMax':\n            'Datoen for når perioden sluttet kan ikke være etter dagens dato. Skriv inn eller velg dato fra datovelgeren.',\n        'fraværPeriodeForm.tilOgMed.dateIsBeforeMin':\n            'Datoen for når perioden sluttet kan ikke være før {dato}. Skriv inn eller velg dato fra datovelgeren.',\n        'fraværPeriodeForm.tilOgMed.dateHasInvalidFormat':\n            'Du må oppgi dato for når perioden sluttet i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'fraværPeriodeForm.tilOgMed.toDateIsBeforeFromDate':\n            'Sluttdatoen for perioden kan ikke være før startdatoen. Skriv inn eller velg dato fra datovelgeren.',\n        'fraværPeriodeForm.fraOgMed.er_helg':\n            'Periodens fra-dato må være en ukedag, det kan ikke være lørdag eller søndag. Hvis perioden startet en lørdag eller søndag må du velge mandagen etter som startdato.',\n        'fraværPeriodeForm.fraOgMed.fra_og_til_er_ulike_år': 'Fra og til dato må være i samme år',\n        'fraværPeriodeForm.fraOgMed.fra_dato_kolliderer_med_annet_fravær':\n            'Fra og med datoen overlapper med allerede registrert fraværsdag.',\n        'fraværPeriodeForm.tilOgMed.er_helg':\n            'Periodens til-dato må være en ukedag, det kan ikke være lørdag eller søndag. Hvis perioden sluttet en lørdag eller søndag må du velge fredagen før som sluttdato.',\n        'fraværPeriodeForm.tilOgMed.fra_og_til_er_ulike_år': 'Fra og til dato må være i samme år',\n        'fraværPeriodeForm.tilOgMed.til_dato_kolliderer_med_annet_fravær':\n            'Til og med datoen overlapper med allerede registrert fraværsdag',\n        'fraværPeriodeForm.årsak.noValue': 'Velg årsaken til at du var hjemme med barn i perioden du har lagt inn.',\n        'fraværPeriodeForm.periode.dager_overlapper_med_andre_dager':\n            'Én eller flere dager med fravær overlapper med andre dager med fravær.',\n        'fraværPeriodeForm.hjemmePgaKorona.yesOrNoIsUnanswered':\n            'Velg ja eller nei om du hjemme med barn fordi barnehage/skole var stengt på grunn av koronaviruset, eller på grunn av særlige smittevernshensyn.',\n    },\n    nn: {\n        'fravær.list.årsak': 'På grunn av {årsak}',\n        'fravær.form.validation.dateOutsideRange': 'Første gyldige dato er {fom}, og siste gyldige dato er {tom}',\n        'fravær.form.validation.fromDateAfterToDate': 'Frå-datoen må vere lik eller før til-datoen',\n        'fravær.form.validation.toDateBeforeFromDate': 'Til-datoen må vere lik eller etter frå-datoen',\n        'fravær.form.validation.fra_og_til_er_ulike_år': 'Fra og til dato må vera i same år',\n        'fieldvalidation.dager_overlapper_med_andre_dager':\n            'Ein eller fleire dagar med fråvær overlappar andre dagar med fråvær.',\n        'fieldvalidation.fra_dato_kolliderer_med_annet_fravær':\n            'Frå og med datoen overlappar med allereie registrert fråværsdag',\n        'fieldvalidation.til_dato_kolliderer_med_annet_fravær':\n            'Til og med datoen overlappar med allereie registrert fråværsdag',\n        'fieldvalidation.dato_kolliderer_med_annet_fravær': 'Datoen overlappar med allereie registrert fråværsdag',\n        'fravær.form.validation.timer_mer_enn_arbeidstimer':\n            'Talet på timar med fråvær kan ikkje vere meir enn talet på timar du skulle ha jobba denne dagen',\n        'fravær.form.validation.er_helg': 'Laurdag og søndag er ikkje gyldig.',\n\n        'fravær.årsak.STENGT_SKOLE_ELLER_BARNEHAGE': 'Skolen/barnehagen var stengt på grunn av koronasituasjonen',\n        'fravær.årsak.SMITTEVERNHENSYN':\n            'Skolen/barnehagen var åpen, men barnet måtte være hjemme på grunn av særlige smittevernhensyn.',\n        'fravær.årsak.ORDINÆRT_FRAVÆR': 'Ordinært fravær',\n        'fravær.årsak.STENGT_SKOLE_ELLER_BARNEHAGE.kort': 'stengt skole/barnehage',\n        'fravær.årsak.SMITTEVERNHENSYN.kort': 'særlige smittevernhensyn',\n        'fravær.årsak.ORDINÆRT_FRAVÆR.kort': 'ordinært fravær',\n        'info.smittevern.tittel': 'Hva menes med særlige smittevernhensyn?',\n        'info.smittevern.info.html':\n            'Når barnehagen eller skolen er åpen, men du må være hjemme med barnet ditt på grunn <strong>av særlige smittevernhensyn</strong>, kan du bruke omsorgsdager. Det er en lege som avgjør om det foreligger særlige smittevernhensyn. Det kan være smittevernhensyn til barnet eller andre familiemedlemmer som bor med barnet.',\n        'info.årsak.tittel': 'Hva om begge årsakene gjelder i perioden jeg har lagt inn?',\n        'info.årsak.info.1': `Hvis du har vært hjemme med barn både fordi barnehage/skole var stengt, og på grunn av særlige smittevernshensyn, må du legge inn flere perioder. Når du har lagt inn én periode og trykker OK, får du mulighet til å legge til flere perioder.`,\n        'info.årsak.info.2': `Eksempel:`,\n        'info.årsak.info.3': `1.-2. mars var du hjemme med barn fordi barnehage/skole var stengt. Da legger du inn 1.-2. mars som en periode. I tillegg var du hjemme 3.-5. mars på grunn av særlige smittevernshensyn. Da legger du inn 3.-5. mars som en egen periode.`,\n    },\n};\n\nexport const getFraværÅrsakTekst = (årsak: FraværÅrsak, intl: IntlShape): string => {\n    return intlHelper(intl, `fravær.årsak.${årsak}`);\n};\n\nexport const getFraværÅrsakTekstKort = (årsak: FraværÅrsak, intl: IntlShape): string => {\n    return intlHelper(intl, `fravær.årsak.${årsak}.kort`);\n};\n\nexport default fraværMessages;\n","import { YesOrNo } from '@navikt/sif-common-core/lib/types/YesOrNo';\n\nexport enum FraværÅrsak {\n    'stengtSkoleBhg' = 'STENGT_SKOLE_ELLER_BARNEHAGE',\n    'smittevernhensyn' = 'SMITTEVERNHENSYN',\n    'ordinært' = 'ORDINÆRT_FRAVÆR',\n}\n\nexport interface FraværPeriode {\n    id?: string;\n    fraOgMed: Date;\n    tilOgMed: Date;\n    årsak: FraværÅrsak;\n}\n\nexport type FraværPeriodeFormValues = Partial<{\n    id: string;\n    fraOgMed: string;\n    tilOgMed: string;\n    hjemmePgaKorona: YesOrNo;\n    årsak: FraværÅrsak;\n}>;\n\nexport interface FraværDag {\n    id?: string;\n    dato: Date;\n    timerArbeidsdag: string;\n    timerFravær: string;\n    årsak: FraværÅrsak;\n}\n\nexport type FraværDagFormValues = Partial<\n    Omit<FraværDag, 'dato'> & {\n        dato: string;\n        hjemmePgaKorona: YesOrNo;\n        årsak?: FraværÅrsak;\n    }\n>;\n","const bostedUtlandMessages = {\n    nb: {\n        'bostedUtland.list.add': 'Legg til opphold',\n        'bostedUtland.form.tittel': 'Utenlandsopphold',\n        'bostedUtland.form.tidsperiode.spm': 'Tidsperiode',\n        'bostedUtland.form.tidsperiode.fraDato': 'Fra og med',\n        'bostedUtland.form.tidsperiode.tilDato': 'Til og med',\n        'bostedUtland.form.land.spm': 'Velg land',\n        'bostedUtland.form.ok': 'Legg til',\n        'bostedUtland.form.avbryt': 'Avbryt',\n        'bostedUtlandForm.fom.dateHasNoValue':\n            'Du må oppgi hvilken dato utenlandsoppholdet startet. Skriv inn eller velg dato.',\n        'bostedUtlandForm.fom.dateIsAfterMax':\n            'Datoen utenlandsoppholdet startet kan ikke være etter {dato}. Skriv inn eller velg dato fra datovelgeren.',\n        'bostedUtlandForm.fom.dateIsBeforeMin':\n            'Datoen utenlandsoppholdet startet kan ikke være før {dato}. Skriv inn eller velg sluttdato fra datovelgeren.',\n        'bostedUtlandForm.fom.dateHasInvalidFormat':\n            'Du må oppgi når utenlandsoppholdet startet i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'bostedUtlandForm.fom.fromDateIsAfterToDate':\n            'Datoen utenlandsoppholdet startet kan ikke være etter datoen det ble avsluttet. Skriv inn eller velg sluttdato fra datovelgeren.',\n        'bostedUtlandForm.tom.dateHasNoValue':\n            'Du må oppgi hvilken dato utenlandsoppholdet ble avsluttet. Skriv inn eller velg dato fra datovelgeren.',\n        'bostedUtlandForm.tom.dateIsAfterMax':\n            'Datoen utenlandsoppholdet ble avsluttet kan ikke være etter {dato}. Skriv inn eller velg dato fra datovelgeren.',\n        'bostedUtlandForm.tom.dateIsBeforeMin':\n            'Datoen utenlandsoppholdet ble avsluttet kan ikke være før {dato}. Skriv inn eller velg dato fra datovelgeren.',\n        'bostedUtlandForm.tom.dateHasInvalidFormat':\n            'Du må oppgi når utenlandsoppholdet ble avsluttet i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'bostedUtlandForm.tom.toDateIsBeforeFromDate':\n            'Datoen utenlandsoppholdet ble avsluttet kan ikke være før datoen det ble startet. Skriv inn eller velg sluttdato fra datovelgeren.',\n        'bostedUtlandForm.landkode.noValue': 'Du må velge land',\n    },\n    nn: {\n        'bostedUtland.list.add': 'Legg til opphald',\n        'bostedUtland.form.tittel': 'Utenlandsopphald',\n        'bostedUtland.form.tidsperiode.spm': 'Tidsperiode',\n        'bostedUtland.form.tidsperiode.fraDato': 'Frå og med',\n        'bostedUtland.form.tidsperiode.tilDato': 'Til og med',\n        'bostedUtland.form.land.spm': 'Velg land',\n        'bostedUtland.form.ok': 'Legg til',\n        'bostedUtland.form.avbryt': 'Avbryt',\n    },\n};\n\nexport default bostedUtlandMessages;\n","const ferieuttakMessages = {\n    nb: {\n        'ferieuttak.list.title': 'Registrer uttak av ferie',\n        'ferieuttak.list.fromDate': 'Fra og med',\n        'ferieuttak.list.toDate': 'Til og med',\n        'ferieuttak.list.intervalTitle': 'Velg tidsrom',\n        'ferieuttak.list.okButton': 'Ok',\n        'ferieuttak.list.cancelButton': 'Avbryt',\n        'ferieuttakForm.fom.dateHasNoValue':\n            'Du må oppgi når ferien startet. Skriv inn eller velg dato fra datovelgeren.',\n        'ferieuttakForm.fom.dateIsAfterMax':\n            'Datoen for når ferien startet kan ikke være etter dagens dato. Skriv inn eller velg dato fra datovelgeren.',\n        'ferieuttakForm.fom.dateIsBeforeMin':\n            'Datoen for når ferien startet kan ikke være før {dato}. Skriv inn eller velg sluttdato fra datovelgeren.',\n        'ferieuttakForm.fom.dateHasInvalidFormat':\n            'Du må oppgi dato for når ferien startet i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'ferieuttakForm.fom.fromDateIsAfterToDate':\n            'Startdatoen for ferien må være før sluttdatoen, eller på samme dag som sluttdatoen. Skriv inn eller velg dato fra datovelgeren.',\n        'ferieuttakForm.tom.dateHasNoValue':\n            'Du må oppgi når ferien sluttet. Skriv inn eller velg dato fra datovelgeren.',\n        'ferieuttakForm.tom.dateIsAfterMax':\n            'Datoen for når ferien sluttet kan ikke være etter dagens dato. Skriv inn eller velg dato fra datovelgeren.',\n        'ferieuttakForm.tom.dateIsBeforeMin':\n            'Datoen for når ferien sluttet kan ikke være før {dato}. Skriv inn eller velg dato fra datovelgeren.',\n        'ferieuttakForm.tom.dateHasInvalidFormat':\n            'Du må oppgi dato for når ferien sluttet i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'ferieuttakForm.tom.toDateIsBeforeFromDate':\n            'Sluttdatoen for ferien kan ikke være før startdatoen. Skriv inn eller velg dato fra datovelgeren.',\n    },\n    nn: {\n        'ferieuttak.list.title': 'Registrer uttak av ferie',\n        'ferieuttak.list.fromDate': 'Frå og med',\n        'ferieuttak.list.toDate': 'Til og med',\n        'ferieuttak.list.intervalTitle': 'Velg tidsrom',\n        'ferieuttak.list.okButton': 'Ok',\n        'ferieuttak.list.cancelButton': 'Avbryt',\n    },\n};\n\nexport default ferieuttakMessages;\n","const utenlandsoppholdMessages = {\n    nb: {\n        'utenlandsopphold.list.add': '+ Legg til opphold',\n        'utenlandsopphold.form.tittel': 'Utenlandsopphold',\n        'utenlandsopphold.form.tidsperiode.spm': 'Velg tidsperiode for oppholdet',\n        'utenlandsopphold.form.tidsperiode.fraDato': 'Fra og med',\n        'utenlandsopphold.form.tidsperiode.tilDato': 'Til og med',\n        'utenlandsopphold.form.land.spm': 'Velg land',\n        'utenlandsopphold.form.erBarnetInnlagt.spm': 'Er, eller skal, barnet være innlagt i helseinstitusjon i {land}?',\n        'utenlandsopphold.form.perioderBarnetErInnlag.formTitle': 'Periode barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.addLabel': 'Legg til periode barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.modalTitle': 'Periode(r) barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.listTitle': 'Periode(r) barnet er innlagt',\n        'utenlandsopphold.form.årsak.spm': 'Hvordan dekkes utgiftene til innleggelsen?',\n        'utenlandsopphold.form.årsak.BARNET_INNLAGT_I_HELSEINSTITUSJON_FOR_NORSK_OFFENTLIG_REGNING':\n            'For norsk offentlig regning',\n        'utenlandsopphold.form.årsak.BARNET_INNLAGT_I_HELSEINSTITUSJON_DEKKET_ETTER_AVTALE_MED_ET_ANNET_LAND_OM_TRYGD':\n            'Etter trygdeavtale med et annet land',\n        'utenlandsopphold.form.årsak.ANNET': 'Jeg dekker utgiftene selv',\n        'utenlandsopphold.oppsummering.årsak.ANNET': 'Jeg dekker utgiftene selv',\n        'utenlandsopphold.form.ok': 'Legg til',\n        'utenlandsopphold.form.avbryt': 'Avbryt',\n        'utenlandsoppholdForm.fom.dateHasNoValue':\n            'Du må oppgi når utenlandsoppholdet startet. Skriv inn eller velg dato fra datovelgeren.',\n        'utenlandsoppholdForm.fom.dateIsAfterMax':\n            'Datoen for når utenlandsoppholdet startet kan ikke være etter dagens dato. Skriv inn eller velg dato fra datovelgeren.',\n        'utenlandsoppholdForm.fom.dateIsBeforeMin':\n            'Datoen for når utenlandsoppholdet startet kan ikke være før {dato}. Skriv inn eller velg sluttdato fra datovelgeren.',\n        'utenlandsoppholdForm.fom.dateHasInvalidFormat':\n            'Du må oppgi dato for når utenlandsoppholdet startet i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'utenlandsoppholdForm.fom.fromDateIsAfterToDate':\n            'Startdatoen for utenlandsoppholdet må være før sluttdatoen, eller på samme dag som sluttdatoen. Skriv inn eller velg dato fra datovelgeren.',\n        'utenlandsoppholdForm.tom.dateHasNoValue':\n            'Du må oppgi når utenlandsoppholdet sluttet. Skriv inn eller velg dato fra datovelgeren.',\n        'utenlandsoppholdForm.tom.dateIsAfterMax':\n            'Datoen for når utenlandsoppholdet sluttet kan ikke være etter dagens dato. Skriv inn eller velg dato fra datovelgeren.',\n        'utenlandsoppholdForm.tom.dateIsBeforeMin':\n            'Datoen for når utenlandsoppholdet sluttet kan ikke være før {dato}. Skriv inn eller velg dato fra datovelgeren.',\n        'utenlandsoppholdForm.tom.dateHasInvalidFormat':\n            'Du må oppgi dato for når utenlandsoppholdet sluttet i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'utenlandsoppholdForm.tom.toDateIsBeforeFromDate':\n            'Sluttdatoen for utenlandsoppholdet kan ikke være før startdatoen. Skriv inn eller velg dato fra datovelgeren.',\n        'utenlandsoppholdForm.landkode.noValue': 'Du må velge land.',\n        'utenlandsoppholdForm.årsak.noValue': 'Du må velge hvordan utgiftene til innleggelsen dekkes.',\n        'utenlandsoppholdForm.erBarnetInnlagt.yesOrNoIsUnanswered':\n            'Du må svare ja eller nei på om barnet er, eller skal være innlagt i helseinstitusjon i {land}.',\n        'utenlandsoppholdForm.barnInnlagtPerioder.listIsEmpty': 'Du har ikke lagt til periode for innleggelse.',\n    },\n    nn: {\n        'utenlandsopphold.list.add': 'Legg til opphald',\n        'utenlandsopphold.form.tittel': 'Utanlandsopphald',\n        'utenlandsopphold.form.tidsperiode.spm': 'Tidsperiode',\n        'utenlandsopphold.form.tidsperiode.fraDato': 'Frå og med',\n        'utenlandsopphold.form.tidsperiode.tilDato': 'Til og med',\n        'utenlandsopphold.form.land.spm': 'Vel land',\n        'utenlandsopphold.form.erBarnetInnlagt.spm': 'Er, eller skal, barnet bli lagt inn i helseinstitusjon i {land}?',\n        'utenlandsopphold.form.perioderBarnetErInnlag.formTitle': 'Perioden barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.addLabel': 'Legg til perioden barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.modalTitle': 'Perioden/periodane barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.listTitle': 'Perioden/periodane barnet er innlagt',\n        'utenlandsopphold.form.årsak.spm': 'Korleis blir utgiftene til innlegginga dekte?',\n        'utenlandsopphold.form.årsak.BARNET_INNLAGT_I_HELSEINSTITUSJON_FOR_NORSK_OFFENTLIG_REGNING':\n            'For norsk offentleg rekning',\n        'utenlandsopphold.form.årsak.BARNET_INNLAGT_I_HELSEINSTITUSJON_DEKKET_ETTER_AVTALE_MED_ET_ANNET_LAND_OM_TRYGD':\n            'Etter trygdeavtale med eit anna land',\n        'utenlandsopphold.form.årsak.ANNET': 'Eg dekkjer utgiftene sjølv',\n        'utenlandsopphold.oppsummering.årsak.ANNET': 'Eg dekkjer utgiftene sjølv',\n        'utenlandsopphold.form.ok': 'Legg til',\n        'utenlandsopphold.form.avbryt': 'Avbryt',\n    },\n};\n\nexport default utenlandsoppholdMessages;\n","const tidsperiodeMessages = {\n    nb: {\n        'tidsperiode.form.title': 'Tidsperiode',\n        'tidsperiode.form.fromDate': 'Fra og med',\n        'tidsperiode.form.toDate': 'Til og med',\n        'tidsperiode.form.okButton': 'Ok',\n        'tidsperiode.form.cancelButton': 'Avbryt',\n        'tidsperiodeForm.fom.dateHasNoValue':\n            'Du må oppgi når perioden startet. Skriv inn eller velg dato fra datovelgeren.',\n        'tidsperiodeForm.fom.dateIsAfterMax':\n            'Datoen for når perioden startet kan ikke være etter dagens dato. Skriv inn eller velg dato fra datovelgeren.',\n        'tidsperiodeForm.fom.dateIsBeforeMin':\n            'Datoen for når perioden startet kan ikke være før {dato}. Skriv inn eller velg sluttdato fra datovelgeren.',\n        'tidsperiodeForm.fom.dateHasInvalidFormat':\n            'Du må oppgi dato for når perioden startet i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'tidsperiodeForm.fom.fromDateIsAfterToDate':\n            'Startdatoen for perioden må være før sluttdatoen, eller på samme dag som sluttdatoen. Skriv inn eller velg dato fra datovelgeren.',\n        'tidsperiodeForm.tom.dateHasNoValue':\n            'Du må oppgi når perioden sluttet. Skriv inn eller velg dato fra datovelgeren.',\n        'tidsperiodeForm.tom.dateIsAfterMax':\n            'Datoen for når perioden sluttet kan ikke være etter dagens dato. Skriv inn eller velg dato fra datovelgeren.',\n        'tidsperiodeForm.tom.dateIsBeforeMin':\n            'Datoen for når perioden sluttet kan ikke være før {dato}. Skriv inn eller velg dato fra datovelgeren.',\n        'tidsperiodeForm.tom.dateHasInvalidFormat':\n            'Du må oppgi dato for når perioden sluttet i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'tidsperiodeForm.tom.toDateIsBeforeFromDate':\n            'Sluttdatoen for perioden kan ikke være før startdatoen. Skriv inn eller velg dato fra datovelgeren.',\n    },\n    nn: {\n        'tidsperiode.form.title': 'Tidsperiode',\n        'tidsperiode.form.fromDate': 'Frå og med',\n        'tidsperiode.form.toDate': 'Til og med',\n        'tidsperiode.form.okButton': 'Ok',\n        'tidsperiode.form.cancelButton': 'Avbryt',\n    },\n};\n\nexport default tidsperiodeMessages;\n","import React from 'react';\nimport { ApiStringDate } from '@navikt/sif-common-core/lib/types/ApiStringDate';\nimport { apiStringDateToDate, prettifyDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\n\ninterface Props {\n    apiDato: ApiStringDate;\n}\nexport const prettifyApiDate = (apiDato: ApiStringDate): string => prettifyDate(apiStringDateToDate(apiDato));\n\nconst DatoSvar: React.FunctionComponent<Props> = ({ apiDato }) => <>{prettifyApiDate(apiDato)}</>;\n\nexport default DatoSvar;\n","const fosterbarnMessages = {\n    nb: {\n        'fosterbarn.form.etternavn_label': 'Etternavn',\n        'fosterbarn.form.fornavn_label': 'Fornavn',\n        'fosterbarn.form.fødselsnummer_label': 'Fødselsnummer',\n        'fosterbarn.list.legg_til_knapp': 'Legg til fosterbarn',\n        'fosterbarn.list.tittel': 'Registrerte fosterbarn',\n        'fosterbarn.modal.tittel': 'Fosterbarn',\n        'fosterbarnForm.fødselsnummer.fødselsnummerHasNoValue': 'Skriv inn barnets fødselsnummer',\n        'fosterbarnForm.fødselsnummer.fødselsnummerIsInvalid':\n            'Du har oppgitt et ugyldig fødselsnummer. Et gyldig fødselsnummer består av 11 siffer.',\n        'fosterbarnForm.fødselsnummer.fødselsnummerIsNot11Chars':\n            'Du har oppgitt et ugyldig fødselsnummer som ikke består av 11 siffer. Et gyldig fødselsnummer består av 11 siffer.',\n        'fosterbarnForm.fødselsnummer.fødselsnummerIsNotAllowed':\n            'Du har oppgitt ditt eget fødselsnummer som barnets fødselsnummer. Skriv inn barnets fødselsnummer.',\n    },\n    nn: {\n        'fosterbarn.form.etternavn_label': 'Etternavn',\n        'fosterbarn.form.fornavn_label': 'Fornavn',\n        'fosterbarn.form.fødselsnummer_label': 'Fødselsnummer',\n        'fosterbarn.list.legg_til_knapp': 'Legg til fosterbarn',\n        'fosterbarn.list.tittel': 'Registrerte fosterbarn',\n        'fosterbarn.modal.tittel': 'Fosterbarn',\n    },\n};\n\nexport default fosterbarnMessages;\n","const virksomhetMessages = {\n    nb: {\n        'sifForms.virksomhet.næringstype_FISKE': 'Fisker',\n        'sifForms.virksomhet.næringstype_JORDBRUK_SKOGBRUK': 'Jordbruker',\n        'sifForms.virksomhet.næringstype_DAGMAMMA': 'Dagmamma eller familiebarnehage i eget hjem',\n        'sifForms.virksomhet.næringstype_ANNEN': 'Annet',\n        'sifForms.virksomhet.form_title': 'Opplysninger om virksomheten din',\n        'sifForms.virksomhet.form_title.flere': 'Opplysninger om den eldste virksomheten din',\n        'sifForms.virksomhet.hvilken_type_virksomhet': 'Hvilken type virksomhet har du?',\n        'sifForms.virksomhet.hvilken_type_virksomhet.flere': 'Hvilken type virksomhet er den eldste virksomheten din?',\n        'sifForms.virksomhet.hva_heter_virksomheten': 'Hva heter virksomheten?',\n        'sifForms.virksomhet.fisker_blad_b': 'Er du fisker på blad B?',\n        'sifForms.virksomhet.veileder_fisker.tittel': `Hvis du ikke har organiasjonsnummer`,\n        'sifForms.virksomhet.veileder_fisker': `Hvis du ikke har organisasjonsnummer, svarer du nei på spørsmålet \"Er {navnPåVirksomheten} registrert i Norge?\" I nedtrekkslisten velger du at virksomheten er registrert i Norge.`,\n        'sifForms.virksomhet.registert_i_norge': `Er {navnPåVirksomheten} registert i Norge?`,\n        'sifForms.virksomhet.registert_i_hvilket_land': `I hvilket land er {navnPåVirksomheten} din registrert i?`,\n        'sifForms.virksomhet.organisasjonsnummer': 'Hva er organisasjonsnummeret?',\n        'sifForms.virksomhet.startdato': `Når startet du {navnPåVirksomheten}?`,\n        'sifForms.virksomhet.kalender_fom': 'Startdato',\n        'sifForms.virksomhet.kalender_tom': 'Eventuell sluttdato',\n        'sifForms.virksomhet.kalender_pågående': 'Er pågående',\n        'sifForms.virksomhet.nyoppstartet.næringsinntektFlere.header': 'Næringsresultat for alle virksomhetene dine',\n        'sifForms.virksomhet.nyoppstartet.næringsinntektFlere.info':\n            'Du har opplyst at du har flere næringsvirksomheter. Her skal du legge inn næringsresultatet totalt for alle virksomhetene du har.',\n        'sifForms.virksomhet.ikkeNyoppstartet.næringsinntektFlere.header': 'Næringsvirksomhetene dine',\n        'sifForms.virksomhet.ikkeNyoppstartet.næringsinntektFlere.info':\n            'Du har opplyst at du har flere næringsvirksomheter som selvstendig næringsdrivende. Nå skal du svare på spørsmål som gjelder alle virksomhetene dine.',\n        'sifForms.virksomhet.næringsinntekt': 'Næringsinntekt',\n        'sifForms.virksomhet.næringsinntekt.enVirksomhet.spm':\n            'Hva har du hatt i næringsresultat før skatt de siste 12 månedene?',\n        'sifForms.virksomhet.næringsinntekt.enVirksomhet.spm.description':\n            'Hvis virksomheten har vart i kortere tid enn 12 måneder, kan du bruke denne perioden og regne om til årsinntekt. Oppgi beløpet i hele kroner.',\n        'sifForms.virksomhet.næringsinntekt.flereVirksomheter.spm':\n            'Hva har du hatt totalt i næringsresultat før skatt de siste 12 månedene?',\n        'sifForms.virksomhet.næringsinntekt.flereVirksomheter.spm.description':\n            'Hvis virksomhetene har vart i kortere tid enn 12 måneder, kan du bruke denne perioden og regne om til årsinntekt. Oppgi beløpet i hele kroner.',\n        'sifForms.virksomhet.hvaErNæringsresultat.enVirksomhet.text':\n            'Næringsresultatet er inntekter du har i næringen din, minus utgifter og avskrivninger.',\n        'sifForms.virksomhet.hvaErNæringsresultat.flereVirksomheter.text':\n            'Næringsresultatet er inntekter du har i næringene din, minus utgifter og avskrivninger.',\n        'sifForms.virksomhet.hvaErNæringsresultat.title': 'Hva er næringsresultatet?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv':\n            'Har du begynt i arbeidslivet i løpet av de 3 siste ferdigliknede årene?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_info_title': 'Hva betyr dette?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_info':\n            'Du skal svare ja på spørsmålet hvis du før oppstart av næringsvirksomheten din hadde lav eller ingen inntekt.',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_dato': 'Oppgi dato for når du begynte i arbeidslivet',\n        'sifForms.virksomhet.varig_endring_spm':\n            'Har du hatt en varig endring i noen av arbeidsforholdene, virksomhetene eller arbeidssituasjonen din de siste fire årene?',\n        'sifForms.virksomhet.varig_endring_dato': 'Oppgi dato for endringen',\n        'sifForms.virksomhet.varig_endring_inntekt':\n            'Oppgi næringsinntekten din etter endringen. Oppgi årsinntekten i hele kroner.',\n        'sifForms.virksomhet.varig_endring_tekst':\n            'Her kan du skrive kort hva som har endret seg i arbeidsforholdene, virksomhetene eller arbeidssituasjonen din',\n        'sifForms.virksomhet.regnskapsfører_spm': 'Har du regnskapsfører?',\n        'sifForms.virksomhet.regnskapsfører_navn': 'Oppgi navnet til regnskapsfører',\n        'sifForms.virksomhet.regnskapsfører_telefon': 'Oppgi telefonnummeret til regnskapsfører',\n        'sifForms.virksomhet.veileder_innhenter_info.1':\n            'Vi henter inn opplysninger om virksomheten og inntekten din fra offentlige registre.',\n        'sifForms.virksomhet.veileder_innhenter_info.2': 'Vi tar kontakt med deg hvis vi trenger flere opplysninger.',\n\n        'sifForms.virksomhet.summary.tittel': 'Næringsvirksomhet som du har lagt inn:',\n        'sifForms.virksomhet.summary.navn': 'Navn',\n        'sifForms.virksomhet.summary.næringstype': 'Næringstype',\n        'sifForms.virksomhet.summary.varigEndring.dato': 'Dato for varig endring',\n        'sifForms.virksomhet.summary.varigEndring.næringsinntekt': 'Næringsinntekt etter endring',\n        'sifForms.virksomhet.summary.varigEndring.beskrivelse': 'Beskrivelse av endring',\n        'sifForms.virksomhet.summary.ikkeRegnskapsfører': 'Har ikke regnskapsfører.',\n        'sifForms.virksomhet.summary.tidsinfo.avsluttet': 'Startet {fraOgMed}, avsluttet {tilOgMed}.',\n        'sifForms.virksomhet.summary.tidsinfo.pågående': 'Startet {fraOgMed} (pågående).',\n        'sifForms.virksomhet.summary.fisker.påBladB': 'på Blad B',\n        'sifForms.virksomhet.summary.fisker.ikkePåBladB': 'ikke på Blad B',\n        'sifForms.virksomhet.summary.registrertILand': 'Registrert i {land}',\n        'sifForms.virksomhet.summary.registrertILand.orgnr': ' (organisasjonsnummer {orgnr})',\n        'sifForms.virksomhet.summary.yrkesaktiv.jaStartetDato': 'Ja, ble yrkesaktiv {dato}',\n        'sifForms.virksomhet.summary.næringsinntekst': 'Næringsinntekt:',\n        'sifForms.virksomhet.summary.regnskapsfører.header': 'Regnskapsfører',\n        'sifForms.virksomhet.summary.regnskapsfører.info': 'Ja, {navn}, telefon {telefon}',\n\n        'virksomhetForm.næringstyper.listIsEmpty': 'Velg hvilken type virksomhet du har fra listen.',\n        'virksomhetForm.fiskerErPåBladB.yesOrNoIsUnanswered':\n            'Du må svare ja eller nei på spørsmålet om du er fisker på Blad B.',\n        'virksomhetForm.navnPåVirksomheten.stringHasNoValue': 'Skriv inn navnet på virksomheten din.',\n        'virksomhetForm.registrertINorge.yesOrNoIsUnanswered':\n            'Du må svare ja eller nei på spørsmålet om virksomheten din er registrert i Norge.',\n        'virksomhetForm.registrertILand.noValue':\n            'Du må velge hvilket land virksomheten din er registrert i. Velg land fra listen.',\n        'virksomhetForm.organisasjonsnummer.orgNumberHasNoValue':\n            'Skriv inn organisasjonsnummeret. Et gyldig organsisasjonsnummer inneholder 9 siffer',\n        'virksomhetForm.organisasjonsnummer.orgNumberHasInvalidFormat':\n            'Du har oppgitt et ugyldig organisasjonsnummer. Oppgi et gyldig organsisasjonsnummer som inneholder 9 siffer.',\n        'virksomhetForm.fom.dateHasNoValue':\n            'Du må oppgi hvilken dato du startet virksomheten. Skriv inn eller velg startdato fra datovelgeren.',\n        'virksomhetForm.fom.dateIsAfterMax':\n            'Startdatoen for når du startet {navn} må være før dagens dato. Skriv inn eller velg startdato fra datovelgeren.',\n        'virksomhetForm.fom.dateHasInvalidFormat':\n            'Du må oppgi startdato for virksomheten i et gyldig format. Gyldig format er dd.mm.ååå.',\n        'virksomhetForm.fom.fromDateIsAfterToDate':\n            'Startdatoen for når du startet {navn} må være før sluttdatoen, eller på samme dag som sluttdatoen. Skriv inn eller velg dato fra datovelgeren.',\n        'virksomhetForm.tom.dateHasNoValue':\n            'Du må oppgi hvilken dato du avsluttet virksomheten. Skriv inn eller velg dato fra datovelgeren.',\n        'virksomhetForm.tom.dateIsBeforeMin':\n            'Sluttdatoen for når du avsluttet virksomheten kan ikke være før startdatoen. Skriv inn eller velg sluttdato fra datovelgeren.',\n        'virksomhetForm.tom.dateIsAfterMax':\n            'Sluttdatoen for når du avsluttet virksomheten kan ikke være etter dagens dato. Skriv inn eller velg sluttdato fra datovelgeren.',\n        'virksomhetForm.tom.dateHasInvalidFormat':\n            'Du må oppgi dato for når du avsluttet virksomheten i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'virksomhetForm.tom.toDateIsBeforeFromDate':\n            'Sluttdatoen for når du avsluttet virksomheten kan ikke være før startdatoen. Skriv inn eller velg sluttdato fra datovelgeren.',\n        'virksomhetForm.næringsinntekt.numberHasNoValue': 'Du må oppgi næringsinntekten i {navn}.',\n        'virksomhetForm.næringsinntekt.numberHasInvalidFormat':\n            'Du må oppgi et gyldig tall for næringsinntekten i {navn}. Et gyldig tall inneholder kun siffer.',\n        'virksomhetForm.næringsinntekt.numberIsTooSmall':\n            'Tallet du har oppgitt som næringsinntekt for {navn} er for lavt. Tallet kan ikke være lavere enn {min}.',\n        'virksomhetForm.næringsinntekt.numberIsTooLarge':\n            'Tallet du har oppgitt som næringsinntekt for {navn} er for høyt. Tallet kan ikke være høyere enn {maks}.',\n        'virksomhetForm.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene.yesOrNoIsUnanswered':\n            'Du må svare ja eller nei på spørsmålet om du har begynt arbeidslivet i løpet av de 3 siste ferdigliknede årene.',\n        'virksomhetForm.blittYrkesaktivDato.dateHasNoValue':\n            'Du må oppgi dato for når du begynte i arbeidslivet. Skriv inn eller velg dato fra datovelgeren.',\n        'virksomhetForm.blittYrkesaktivDato.dateHasInvalidFormat':\n            'Du må oppgi dato for når du begynte i arbeidslivet i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'virksomhetForm.blittYrkesaktivDato.dateIsAfterMax':\n            'Datoen for når du begynte i arbeidslivet kan ikke være etter dagens dato. Skriv inn eller velg dato fra datovelgeren.',\n        'virksomhetForm.blittYrkesaktivDato.dateIsBeforeMin':\n            'Datoen for når du begynte i arbeidslivet kan ikke være før {dato}. Skriv inn eller velg dato fra datovelgeren.',\n        'virksomhetForm.hattVarigEndringAvNæringsinntektSiste4Kalenderår.yesOrNoIsUnanswered':\n            'Du må svare ja eller nei på spørsmålet om du har hatt varig endring i næringsinntekten i de siste 4 kalenderårene.',\n        'virksomhetForm.varigEndringINæringsinntekt_dato.dateHasNoValue':\n            'Du må oppgi fra hvilken dato du fikk en varig endring i næringsinntekten i {navn}. Skriv inn eller velg dato fra datovelgeren.',\n        'virksomhetForm.varigEndringINæringsinntekt_dato.dateHasInvalidFormat':\n            'Du må oppgi dato for når du fikk varig endring i næringsinntekt i {navn} i et gyldig format. Gyldig format er dd.mm.åååå.',\n        'virksomhetForm.varigEndringINæringsinntekt_dato.dateIsAfterMax':\n            'Datoen for når du fikk varig endring i næringsinntekt kan ikke være etter {dato}. Skriv inn eller velg dato fra datovelgeren.',\n        'virksomhetForm.varigEndringINæringsinntekt_dato.dateIsBeforeMin':\n            'Datoen for når du fikk varig endring i næringsinntekt kan ikke være før {dato}. Skriv inn eller velg dato fra datovelgeren.',\n        'virksomhetForm.varigEndringINæringsinntekt_inntektEtterEndring.numberHasNoValue':\n            'Du må oppgi inntekt etter inntektsendring for {navn}.',\n        'virksomhetForm.varigEndringINæringsinntekt_inntektEtterEndring.numberHasInvalidFormat':\n            'Du må oppgi et gyldig tall for ny inntekt etter inntektsendring i {navn}. Et gyldig tall inneholder kun siffer.',\n        'virksomhetForm.varigEndringINæringsinntekt_inntektEtterEndring.numberIsTooLarge':\n            'Tallet du har oppgitt som ny inntekt etter inntektsendring for {navn} er for høyt. Tallet kan ikke være høyere enn {maks}.',\n        'virksomhetForm.varigEndringINæringsinntekt_inntektEtterEndring.numberIsTooSmall':\n            'Tallet du har oppgitt som ny inntekt etter inntektsendring for {navn} er for lavt. Tallet kan ikke være lavere enn {min}.',\n        'virksomhetForm.varigEndringINæringsinntekt_forklaring.stringHasNoValue':\n            'Skriv en forklaring på hvorfor du har hatt en varig endring i næringsinntekten for {navn}.',\n        'virksomhetForm.varigEndringINæringsinntekt_forklaring.stringIsTooLong':\n            'Du har brukt for mange tegn i forklaringen din. Teksten kan ikke inneholde flere enn {maks} tegn.',\n        'virksomhetForm.varigEndringINæringsinntekt_forklaring.stringIsTooShort':\n            'Du har brukt for få tegn i forklaringen din. Teksten må inneholde minst {min} tegn.',\n        'virksomhetForm.harRegnskapsfører.yesOrNoIsUnanswered':\n            'Du må svare ja eller nei på spørsmålet om du har regnskapsfører.',\n        'virksomhetForm.regnskapsfører_navn.stringHasNoValue': 'Skriv inn navnet på regnskapsføreren din.',\n        'virksomhetForm.regnskapsfører_navn.stringIsTooLong':\n            'Navnet på regnskapsfører kan ikke inneholde flere enn {maks} tegn.',\n        'virksomhetForm.regnskapsfører_navn.stringIsTooShort':\n            'Navnet på regnskapsfører må inneholde minst {min} tegn.',\n        'virksomhetForm.regnskapsfører_telefon.stringHasNoValue': 'Skriv inn telefonnummeret til regnskapsføreren din.',\n        'virksomhetForm.regnskapsfører_telefon.stringIsTooLong':\n            'Telefonnummeret til regnskapsfører kan ikke inneholde flere enn {maks} tegn.',\n        'virksomhetForm.regnskapsfører_telefon.stringIsTooShort':\n            'Telefonnummeret til regnskapsfører må inneholde minst {min} tegn.',\n    },\n    nn: {\n        'sifForms.virksomhet.næringstype_FISKE': 'Fisker',\n        'sifForms.virksomhet.næringstype_JORDBRUK_SKOGBRUK': 'Jordbrukar',\n        'sifForms.virksomhet.næringstype_DAGMAMMA': 'Dagmamma eller familiebarnehage i eigen heim',\n        'sifForms.virksomhet.næringstype_ANNEN': 'Anna',\n        'sifForms.virksomhet.form_title': 'Opplysningar om verksemda di',\n        'sifForms.virksomhet.form_title.flere': 'Opplysningar om den eldste verksemda di',\n        'sifForms.virksomhet.hvilken_type_virksomhet': 'Kva type verksemd har du?',\n        'sifForms.virksomhet.hvilken_type_virksomhet.flere': 'Kva type er den eldste verksemda di?',\n        'sifForms.virksomhet.hva_heter_virksomheten': 'Kva heiter verksemda?',\n        'sifForms.virksomhet.fisker_blad_b': 'Er du fiskar på blad B?',\n        'sifForms.virksomhet.veileder_fisker.tittel': `Dersom du ikkje har organiasjonsnummer`,\n        'sifForms.virksomhet.veileder_fisker': `Dersom du ikkje har organisasjonsnummer, svarer du nei på spørsmålet \"Er {navnPåVirksomheten} registrert i Noreg?\". I nedtrekkslista vel du at verksemda er registrert i Noreg.`,\n        'sifForms.virksomhet.registert_i_norge': `Er {navnPåVirksomheten} registert i Noreg?`,\n        'sifForms.virksomhet.registert_i_hvilket_land': `I kva land er {navnPåVirksomheten} registrert?`,\n        'sifForms.virksomhet.organisasjonsnummer': 'Kva er organisasjonsnummeret?',\n        'sifForms.virksomhet.startdato': `Når starta du {navnPåVirksomheten}?`,\n        'sifForms.virksomhet.kalender_fom': 'Startdato',\n        'sifForms.virksomhet.kalender_tom': 'Eventuell sluttdato',\n        'sifForms.virksomhet.kalender_pågående': 'Er i gang',\n        'sifForms.virksomhet.nyoppstartet.næringsinntektFlere.header': 'Næringsresultat for alle verksemdene dine',\n        'sifForms.virksomhet.nyoppstartet.næringsinntektFlere.info':\n            'Du har opplyst at du har fleire næringsverksemder. Her skal du leggje inn næringsresultatet totalt for alle verksemdene du har.',\n        'sifForms.virksomhet.ikkeNyoppstartet.næringsinntektFlere.header': 'Næringsverksemdene dine',\n        'sifForms.virksomhet.ikkeNyoppstartet.næringsinntektFlere.info':\n            'Du har opplyst at du har fleire næringsverksemder som sjølvstendig næringsdrivande. Nå skal du svare på spørsmål som gjeld alle verksemdene dine.',\n        'sifForms.virksomhet.næringsinntekt.enVirksomhet.spm':\n            'Kva har du hatt i næringsresultat før skatt dei siste 12 månadene?',\n        'sifForms.virksomhet.næringsinntekt.enVirksomhet.spm.description':\n            'Dersom verksemda har vart i kortare tid enn 12 månader, kan du bruke denne perioden og rekne om til årsinntekt. Gi opp beløpet i heile kroner.',\n        'sifForms.virksomhet.næringsinntekt.flereVirksomheter.spm':\n            'Kva har du hatt totalt i næringsresultat før skatt dei siste 12 månadene?',\n        'sifForms.virksomhet.næringsinntekt.flereVirksomheter.spm.description':\n            'Dersom verksemdene har vart i kortare tid enn 12 månader, kan du bruke denne perioden og rekne om til årsinntekt. Gi opp beløpet i heile kroner.',\n        'sifForms.virksomhet.hvaErNæringsresultat.enVirksomhet.text':\n            'Næringsresultatet er inntekter du har i næringa di, minus utgifter og avskrivingar.',\n        'sifForms.virksomhet.hvaErNæringsresultat.flereVirksomheter.text':\n            'Næringsresultatet er inntekter du har i næringane dine, minus utgifter og avskrivingar.',\n        'sifForms.virksomhet.hvaErNæringsresultat.title': 'Kva er næringsresultatet?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv':\n            'Har du begynt i arbeidslivet i løpet av dei 3 siste ferdiglikna åra?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_info_title': 'Kva betyr dette?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_info':\n            'Du skal svare ja på spørsmålet dersom du før oppstart av næringsverksemda di hadde låg eller inga inntekt.',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_dato': 'Gi opp datoen for når du begynte i arbeidslivet',\n        'sifForms.virksomhet.varig_endring_spm':\n            'Har du hatt ei varig endring i nokre av arbeidsforholda, verksemdene eller arbeidssituasjonen din dei siste fire åra?',\n        'sifForms.virksomhet.varig_endring_dato': 'Gi opp datoen for endringa',\n        'sifForms.virksomhet.varig_endring_inntekt':\n            'Gi opp næringsinntekta di etter endringa. Gi opp årsinntekta i heile kroner.',\n        'sifForms.virksomhet.varig_endring_tekst':\n            'Her kan du skrive kort kva som har endra seg i arbeidsforholda, verksemdene eller arbeidssituasjonen din',\n        'sifForms.virksomhet.regnskapsfører_spm': 'Har du rekneskapsførar?',\n        'sifForms.virksomhet.regnskapsfører_navn': 'Gi opp namnet til rekneskapsføraren',\n        'sifForms.virksomhet.regnskapsfører_telefon': 'Gi opp telefonnummeret til rekneskapsføraren',\n        'sifForms.virksomhet.veileder_innhenter_info.1':\n            'Vi hentar inn opplysningar om verksemda og inntekta di frå offentlege register.',\n        'sifForms.virksomhet.veileder_innhenter_info.2': 'Vi tek kontakt med deg dersom vi treng fleire opplysningar',\n\n        'sifForms.virksomhet.summary.tittel': 'Næringsvirksomhet som du har lagt inn:',\n        'sifForms.virksomhet.summary.navn': 'Namn',\n        'sifForms.virksomhet.summary.næringstype': 'Næringstype',\n        'sifForms.virksomhet.summary.varigEndring.dato': 'Dato for varig endring',\n        'sifForms.virksomhet.summary.varigEndring.næringsinntekt': 'Næringsinntekt etter endring',\n        'sifForms.virksomhet.summary.varigEndring.beskrivelse': 'Skildring av endring',\n        'sifForms.virksomhet.summary.ikkeRegnskapsfører': 'Har ikkje regnskapsførar.',\n        'sifForms.virksomhet.summary.tidsinfo.avsluttet': 'Startet {fraOgMed}, avsluttet {tilOgMed}.',\n        'sifForms.virksomhet.summary.tidsinfo.pågående': 'Startet {fraOgMed} (pågåande).',\n        'sifForms.virksomhet.summary.fisker.påBladB': 'på Blad B',\n        'sifForms.virksomhet.summary.fisker.ikkePåBladB': 'ikkje på Blad B',\n        'sifForms.virksomhet.summary.registrertILand': 'Registrert i {land}',\n        'sifForms.virksomhet.summary.registrertILand.orgnr': ' (organisasjonsnummer {orgnr})',\n        'sifForms.virksomhet.summary.næringsinntekst': 'Næringsinntekt:',\n        'sifForms.virksomhet.summary.yrkesaktiv.jaStartetDato': 'Ja, vart yrkesaktiv {dato}',\n        'sifForms.virksomhet.summary.regnskapsfører.header': 'Regnskapsførar',\n        'sifForms.virksomhet.summary.regnskapsfører.info': 'Ja, {navn}, telefon {telefon}',\n    },\n};\nexport default virksomhetMessages;\n","import { YesOrNo } from '@navikt/sif-common-formik/lib';\n\nexport enum UtenlandsoppholdÅrsak {\n    'INNLAGT_DEKKET_NORGE' = 'BARNET_INNLAGT_I_HELSEINSTITUSJON_FOR_NORSK_OFFENTLIG_REGNING',\n    'INNLAGT_DEKKET_ANNET_LAND' = 'BARNET_INNLAGT_I_HELSEINSTITUSJON_DEKKET_ETTER_AVTALE_MED_ET_ANNET_LAND_OM_TRYGD',\n    'ANNET' = 'ANNET',\n}\n\nexport interface UtenlandsoppholdInnlagtPeriode {\n    fom: Date;\n    tom: Date;\n}\n\nexport interface Utenlandsopphold {\n    id?: string;\n    fom: Date;\n    tom: Date;\n    landkode: string;\n    erBarnetInnlagt?: YesOrNo;\n    barnInnlagtPerioder?: UtenlandsoppholdInnlagtPeriode[];\n    årsak?: UtenlandsoppholdÅrsak;\n}\n\nexport type UtenlandsoppholdFormValues = Partial<\n    Omit<Utenlandsopphold, 'id' | 'fom' | 'tom' | 'barnInnlagtPerioder'> & {\n        fom?: string;\n        tom?: string;\n        barnInnlagtPerioder?: UtenlandsoppholdInnlagtPeriode[];\n    }\n>;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\ninterface Props {\n    id: string;\n    value?: Record<string, string | number | boolean | null | undefined | Date>;\n}\n\nconst basicHtmlTagRenderers = {\n    li: (value: string) => <li>{value}</li>,\n    strong: (value: string) => <strong>{value}</strong>,\n    p: (value: string) => <p>{value}</p>,\n    em: (value: string) => <em>{value}</em>,\n};\n\nconst FormattedHtmlMessage = ({ id, value }: Props) => (\n    <FormattedMessage id={id} values={{ ...value, ...basicHtmlTagRenderers }} />\n);\n\nexport default FormattedHtmlMessage;\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\ninterface Props {\n    harSvartJa?: boolean;\n}\n\nconst JaNeiSvar: React.FunctionComponent<Props> = ({ harSvartJa }) => {\n    return <FormattedMessage id={harSvartJa === true ? 'Ja' : 'Nei'} tagName=\"span\" />;\n};\n\nexport default JaNeiSvar;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport Tiles from '@navikt/sif-common-core/lib/components/tiles/Tiles';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport {\n    getFødselsnummerValidator,\n    getRequiredFieldValidator,\n    ValidateFødselsnummerError,\n    ValidateStringError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { Fosterbarn, isFosterbarn } from './types';\n\ninterface FosterbarnFormText {\n    form_fødselsnummer_label: string;\n    form_fornavn_label: string;\n    form_etternavn_label: string;\n}\n\ninterface Props {\n    fosterbarn?: Partial<Fosterbarn>;\n    onSubmit: (values: Fosterbarn) => void;\n    onCancel: () => void;\n    disallowedFødselsnumre?: string[];\n    includeName?: boolean;\n    text?: FosterbarnFormText;\n}\n\nenum FosterbarnFormField {\n    fødselsnummer = 'fødselsnummer',\n    fornavn = 'fornavn',\n    etternavn = 'etternavn',\n}\n\ntype FormValues = Partial<Fosterbarn>;\n\nexport const FosterbarnFormErrors = {\n    [FosterbarnFormField.fornavn]: {\n        [ValidateStringError.stringHasNoValue]: 'fosterbarnForm.fornavn.stringHasNoValue',\n    },\n    [FosterbarnFormField.etternavn]: {\n        [ValidateStringError.stringHasNoValue]: 'fosterbarnForm.etternavn.stringHasNoValue',\n    },\n    [FosterbarnFormField.fødselsnummer]: {\n        [ValidateStringError.stringHasNoValue]: 'fosterbarnForm.fødselsnummer.stringHasNoValue',\n        [ValidateFødselsnummerError.fødselsnummerIsNotAllowed]:\n            'fosterbarnForm.fødselsnummer.fødselsnummerIsNotAllowed',\n        [ValidateFødselsnummerError.fødselsnummerIsNot11Chars]:\n            'fosterbarnForm.fødselsnummer.fødselsnummerIsNot11Chars',\n        [ValidateFødselsnummerError.fødselsnummerIsInvalid]: 'fosterbarnForm.fødselsnummer.fødselsnummerIsInvalid',\n    },\n};\n\nconst Form = getTypedFormComponents<FosterbarnFormField, FormValues, ValidationError>();\n\nconst FosterbarnForm = ({\n    fosterbarn: initialValues = { fornavn: '', etternavn: '', fødselsnummer: '' },\n    disallowedFødselsnumre,\n    text,\n    includeName,\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n    const onFormikSubmit = (formValues: FormValues) => {\n        if (isFosterbarn(formValues, includeName)) {\n            onSubmit({ ...formValues, id: initialValues.id || guid() });\n        } else {\n            throw new Error('Fosterbarn skjema: Formvalues is not a valid Fosterbarn on submit.');\n        }\n    };\n\n    const defaultText: FosterbarnFormText = {\n        form_etternavn_label: intlHelper(intl, 'fosterbarn.form.etternavn_label'),\n        form_fornavn_label: intlHelper(intl, 'fosterbarn.form.fornavn_label'),\n        form_fødselsnummer_label: intlHelper(intl, 'fosterbarn.form.fødselsnummer_label'),\n    };\n\n    const txt = { ...defaultText, ...text };\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={initialValues}\n                onSubmit={onFormikSubmit}\n                renderForm={() => (\n                    <Form.Form onCancel={onCancel} formErrorHandler={getFormErrorHandler(intl, 'fosterbarnForm')}>\n                        <Systemtittel tag=\"h1\">Fosterbarn</Systemtittel>\n                        <FormBlock>\n                            <Form.Input\n                                name={FosterbarnFormField.fødselsnummer}\n                                label={txt.form_fødselsnummer_label}\n                                validate={getFødselsnummerValidator({\n                                    required: true,\n                                    disallowedValues: disallowedFødselsnumre,\n                                })}\n                                inputMode=\"numeric\"\n                                maxLength={11}\n                                style={{ width: '11rem' }}\n                            />\n                        </FormBlock>\n                        {includeName && (\n                            <Tiles columns={2}>\n                                <FormBlock>\n                                    <Form.Input\n                                        name={FosterbarnFormField.fornavn}\n                                        label={txt.form_fornavn_label}\n                                        validate={getRequiredFieldValidator()}\n                                    />\n                                </FormBlock>\n                                <FormBlock>\n                                    <Form.Input\n                                        name={FosterbarnFormField.etternavn}\n                                        label={txt.form_etternavn_label}\n                                        validate={getRequiredFieldValidator()}\n                                    />\n                                </FormBlock>\n                            </Tiles>\n                        )}\n                    </Form.Form>\n                )}\n            />\n        </>\n    );\n};\n\nexport default FosterbarnForm;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport ExpandableInfo from '@navikt/sif-common-core/lib/components/expandable-content/ExpandableInfo';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { YesOrNo } from '@navikt/sif-common-core/lib/types/YesOrNo';\nimport { DateRange, dateToday } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { getTypedFormComponents, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport {\n    getDateRangeValidator,\n    getRequiredFieldValidator,\n    getYesOrNoValidator,\n    ValidateDateError,\n    ValidateDateRangeError,\n    ValidateRequiredFieldError,\n    ValidateYesOrNoError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport dayjs from 'dayjs';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport FormattedHtmlMessage from '../components/formatted-html-message/FormattedHtmlMessage';\nimport { isFraværPeriode, mapFormValuesToFraværPeriode, mapFraværPeriodeToFormValues } from './fraværUtilities';\nimport {\n    FraværFieldValidationErrors,\n    validateErSammeÅr,\n    validateFraOgMedForCollision,\n    validateFraværPeriodeCollision,\n    validateNotHelgedag,\n    validateTilOgMedForCollision,\n} from './fraværValidationUtils';\nimport { getFraværÅrsakRadios } from './fraværÅrsakRadios';\nimport { FraværPeriode, FraværPeriodeFormValues } from './types';\nimport ÅrsakInfo from './ÅrsakInfo';\nimport { handleDateRangeValidationError } from '../utils';\n\nexport interface FraværPeriodeFormLabels {\n    tittel: string;\n    tidsrom: string;\n    fom: string;\n    tom: string;\n    hjemmePgaKorona: string;\n    årsak: string;\n    ok: string;\n    avbryt: string;\n}\n\ninterface Props {\n    fraværPeriode?: Partial<FraværPeriode>;\n    periodeDescription?: JSX.Element;\n    minDate: Date;\n    maxDate: Date;\n    dateRangesToDisable?: DateRange[];\n    helgedagerIkkeTillat?: boolean;\n    begrensTilSammeÅr?: boolean;\n    headerContent?: JSX.Element;\n    onSubmit: (values: FraværPeriode) => void;\n    onCancel: () => void;\n}\n\nenum FraværPeriodeFormFields {\n    fraOgMed = 'fraOgMed',\n    tilOgMed = 'tilOgMed',\n    årsak = 'årsak',\n    hjemmePgaKorona = 'hjemmePgaKorona',\n}\n\nexport const FraværPeriodeFormErrors = {\n    [FraværPeriodeFormFields.fraOgMed]: {\n        [ValidateDateError.dateHasNoValue]: 'fraværPeriodeForm.fraOgMed.dateHasNoValue',\n        [ValidateDateError.dateIsAfterMax]: 'fraværPeriodeForm.fraOgMed.dateIsAfterMax',\n        [ValidateDateError.dateIsBeforeMin]: 'fraværPeriodeForm.fraOgMed.dateIsBeforeMin',\n        [ValidateDateError.dateHasInvalidFormat]: 'fraværPeriodeForm.fraOgMed.dateHasInvalidFormat',\n        [ValidateDateRangeError.fromDateIsAfterToDate]: 'fraværPeriodeForm.fraOgMed.fromDateIsAfterToDate',\n        [FraværFieldValidationErrors.er_helg]: 'fraværPeriodeForm.fraOgMed.er_helg',\n        [FraværFieldValidationErrors.fra_og_til_er_ulike_år]: 'fraværPeriodeForm.fraOgMed.fra_og_til_er_ulike_år',\n        [FraværFieldValidationErrors.fra_dato_kolliderer_med_annet_fravær]:\n            'fraværPeriodeForm.fraOgMed.fra_dato_kolliderer_med_annet_fravær',\n    },\n    [FraværPeriodeFormFields.tilOgMed]: {\n        [ValidateDateError.dateHasNoValue]: 'fraværPeriodeForm.tilOgMed.dateHasNoValue',\n        [ValidateDateError.dateIsAfterMax]: 'fraværPeriodeForm.tilOgMed.dateIsAfterMax',\n        [ValidateDateError.dateIsBeforeMin]: 'fraværPeriodeForm.tilOgMed.dateIsBeforeMin',\n        [ValidateDateError.dateHasInvalidFormat]: 'fraværPeriodeForm.tilOgMed.dateHasInvalidFormat',\n        [ValidateDateRangeError.toDateIsBeforeFromDate]: 'fraværPeriodeForm.tilOgMed.toDateIsBeforeFromDate',\n        [FraværFieldValidationErrors.er_helg]: 'fraværPeriodeForm.tilOgMed.er_helg',\n        [FraværFieldValidationErrors.fra_og_til_er_ulike_år]: 'fraværPeriodeForm.tilOgMed.fra_og_til_er_ulike_år',\n        [FraværFieldValidationErrors.til_dato_kolliderer_med_annet_fravær]:\n            'fraværPeriodeForm.tilOgMed.til_dato_kolliderer_med_annet_fravær',\n    },\n    [FraværPeriodeFormFields.årsak]: {\n        [ValidateRequiredFieldError.noValue]: 'fraværPeriodeForm.årsak.noValue',\n    },\n    [FraværPeriodeFormFields.hjemmePgaKorona]: {\n        [ValidateYesOrNoError.yesOrNoIsUnanswered]: 'fraværPeriodeForm.årsak.yesOrNoIsUnanswered',\n    },\n    ['fraOgMed_tilOgMed']: {\n        [FraværFieldValidationErrors.dager_overlapper_med_andre_dager]:\n            'fraværPeriodeForm.periode.dager_overlapper_med_andre_dager',\n    },\n};\n\nexport const FraværPeriodeFormName = 'fraværPeriodeForm';\n\nconst Form = getTypedFormComponents<FraværPeriodeFormFields, FraværPeriodeFormValues, ValidationError>();\n\nconst FraværPeriodeForm = ({\n    fraværPeriode = {},\n    periodeDescription,\n    maxDate,\n    minDate,\n    dateRangesToDisable,\n    helgedagerIkkeTillat,\n    headerContent,\n    begrensTilSammeÅr,\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: FraværPeriodeFormValues) => {\n        const fraværPeriodeToSubmit = mapFormValuesToFraværPeriode(formValues, fraværPeriode.id);\n        if (isFraværPeriode(fraværPeriodeToSubmit)) {\n            onSubmit(fraværPeriodeToSubmit);\n        } else {\n            throw new Error('FraværPeriodeForm: Formvalues is not a valid FraværPeriode on submit.');\n        }\n    };\n\n    const formLabels: FraværPeriodeFormLabels = {\n        ok: intlHelper(intl, 'fravær.form.felles.ok'),\n        avbryt: intlHelper(intl, 'fravær.form.felles.avbryt'),\n        årsak: intlHelper(intl, 'fravær.form.felles.årsak'),\n        tittel: intlHelper(intl, 'fravær.form.periode.tittel'),\n        tidsrom: intlHelper(intl, 'fravær.form.periode.tidsrom'),\n        hjemmePgaKorona: intlHelper(intl, 'fravær.form.felles.hjemmePgaKorona'),\n        fom: intlHelper(intl, 'fravær.form.periode.fom'),\n        tom: intlHelper(intl, 'fravær.form.periode.tom'),\n    };\n    const fraværÅrsakRadios = getFraværÅrsakRadios(intl);\n\n    const disabledDateRanges = dateRangesToDisable\n        ? dateRangesToDisable.filter((range) => {\n              const { fraOgMed, tilOgMed } = fraværPeriode;\n              return !(\n                  fraOgMed &&\n                  tilOgMed &&\n                  dayjs(fraOgMed).isSame(range.from, 'day') &&\n                  dayjs(tilOgMed).isSame(range.to, 'day')\n              );\n          })\n        : undefined;\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={mapFraværPeriodeToFormValues(fraværPeriode)}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => {\n                    const { fraOgMed, tilOgMed } = formik.values;\n                    const fromDate: Date | undefined = ISOStringToDate(fraOgMed);\n                    const toDate: Date | undefined = ISOStringToDate(tilOgMed);\n                    return (\n                        <Form.Form\n                            onCancel={onCancel}\n                            formErrorHandler={getFormErrorHandler(intl, 'fraværPeriodeForm')}>\n                            <Systemtittel tag=\"h1\">{formLabels.tittel}</Systemtittel>\n                            {headerContent && <Box margin=\"l\">{headerContent}</Box>}\n                            <FormBlock>\n                                <Form.DateIntervalPicker\n                                    legend={formLabels.tidsrom}\n                                    description={periodeDescription}\n                                    validate={() => {\n                                        const err = validateFraværPeriodeCollision(\n                                            fromDate,\n                                            toDate,\n                                            disabledDateRanges\n                                        );\n                                        if (err) {\n                                            return {\n                                                key: FraværPeriodeFormErrors.fraOgMed_tilOgMed\n                                                    .dager_overlapper_med_andre_dager,\n                                                keepKeyUnaltered: true,\n                                            };\n                                        }\n                                    }}\n                                    fromDatepickerProps={{\n                                        label: formLabels.fom,\n                                        name: FraværPeriodeFormFields.fraOgMed,\n                                        fullscreenOverlay: true,\n                                        minDate: minDate,\n                                        maxDate: toDate || maxDate,\n                                        disableWeekend: helgedagerIkkeTillat || false,\n                                        disabledDateRanges,\n                                        dayPickerProps: {\n                                            initialMonth:\n                                                fromDate || toDate || dayjs(dateToday).isAfter(maxDate)\n                                                    ? maxDate\n                                                    : dateToday,\n                                        },\n                                        validate: getFromDateValidator({\n                                            begrensTilSammeÅr,\n                                            minDate,\n                                            maxDate,\n                                            helgedagerIkkeTillat,\n                                            disabledDateRanges,\n                                            toDate,\n                                            tilOgMed,\n                                        }),\n                                        onChange: () => {\n                                            setTimeout(() => {\n                                                formik.validateField(FraværPeriodeFormFields.fraOgMed);\n                                                formik.validateField(FraværPeriodeFormFields.tilOgMed);\n                                            });\n                                        },\n                                    }}\n                                    toDatepickerProps={{\n                                        label: formLabels.tom,\n                                        name: FraværPeriodeFormFields.tilOgMed,\n                                        fullscreenOverlay: true,\n                                        minDate: fromDate || minDate,\n                                        maxDate,\n                                        disableWeekend: helgedagerIkkeTillat || false,\n                                        disabledDateRanges,\n                                        dayPickerProps: {\n                                            initialMonth:\n                                                toDate || fromDate || dayjs(dateToday).isAfter(maxDate)\n                                                    ? maxDate\n                                                    : dateToday,\n                                        },\n                                        validate: getToDateValidator({\n                                            begrensTilSammeÅr,\n                                            disabledDateRanges,\n                                            fraOgMed,\n                                            fromDate,\n                                            helgedagerIkkeTillat,\n                                            maxDate,\n                                            minDate,\n                                        }),\n                                        onChange: () => {\n                                            setTimeout(() => {\n                                                formik.validateField(FraværPeriodeFormFields.fraOgMed);\n                                                formik.validateField(FraværPeriodeFormFields.tilOgMed);\n                                            });\n                                        },\n                                    }}\n                                />\n                            </FormBlock>\n                            <FormBlock>\n                                <Form.YesOrNoQuestion\n                                    legend={formLabels.hjemmePgaKorona}\n                                    name={FraværPeriodeFormFields.hjemmePgaKorona}\n                                    validate={getYesOrNoValidator()}\n                                    description={\n                                        <ExpandableInfo title={intlHelper(intl, 'info.smittevern.tittel')}>\n                                            <FormattedHtmlMessage id=\"info.smittevern.info.html\" />\n                                        </ExpandableInfo>\n                                    }\n                                />\n                            </FormBlock>\n\n                            {formik.values.hjemmePgaKorona === YesOrNo.YES && (\n                                <FormBlock>\n                                    <Form.RadioPanelGroup\n                                        legend={formLabels.årsak}\n                                        name={FraværPeriodeFormFields.årsak}\n                                        validate={getRequiredFieldValidator()}\n                                        radios={fraværÅrsakRadios}\n                                        description={<ÅrsakInfo />}\n                                    />\n                                </FormBlock>\n                            )}\n                        </Form.Form>\n                    );\n                }}\n            />\n        </>\n    );\n};\n\nconst getFromDateValidator =\n    ({\n        helgedagerIkkeTillat,\n        begrensTilSammeÅr,\n        tilOgMed,\n        toDate,\n        disabledDateRanges,\n        minDate,\n        maxDate,\n    }: {\n        helgedagerIkkeTillat?: boolean;\n        begrensTilSammeÅr?: boolean;\n        tilOgMed?: string;\n        toDate?: Date;\n        disabledDateRanges?: DateRange[];\n        minDate?: Date;\n        maxDate?: Date;\n    }) =>\n    (value): ValidationError | undefined => {\n        if (helgedagerIkkeTillat && validateNotHelgedag(value)) {\n            return {\n                key: FraværPeriodeFormErrors.fraOgMed.er_helg,\n                keepKeyUnaltered: true,\n            };\n        }\n        if (begrensTilSammeÅr && validateErSammeÅr(value, tilOgMed)) {\n            return {\n                key: FraværPeriodeFormErrors.fraOgMed.fra_og_til_er_ulike_år,\n                keepKeyUnaltered: true,\n            };\n        }\n        if (validateFraOgMedForCollision(toDate, disabledDateRanges)) {\n            return {\n                key: FraværPeriodeFormErrors.fraOgMed.fra_dato_kolliderer_med_annet_fravær,\n                keepKeyUnaltered: true,\n            };\n        }\n        const dateError = getDateRangeValidator({\n            required: true,\n            min: minDate,\n            max: maxDate,\n            toDate,\n        }).validateFromDate(value);\n\n        return handleDateRangeValidationError(dateError, minDate, maxDate);\n    };\n\nconst getToDateValidator =\n    ({\n        helgedagerIkkeTillat,\n        begrensTilSammeÅr,\n        fraOgMed,\n        fromDate,\n        disabledDateRanges,\n        minDate,\n        maxDate,\n    }: {\n        helgedagerIkkeTillat?: boolean;\n        begrensTilSammeÅr?: boolean;\n        fraOgMed?: string;\n        fromDate?: Date;\n        disabledDateRanges?: DateRange[];\n        minDate?: Date;\n        maxDate?: Date;\n    }) =>\n    (value) => {\n        if (helgedagerIkkeTillat && validateNotHelgedag(value)) {\n            return {\n                key: FraværPeriodeFormErrors.tilOgMed.er_helg,\n                keepKeyUnaltered: true,\n            };\n        }\n        if (begrensTilSammeÅr && validateErSammeÅr(fraOgMed, value)) {\n            return {\n                key: FraværPeriodeFormErrors.tilOgMed.fra_og_til_er_ulike_år,\n                keepKeyUnaltered: true,\n            };\n        }\n        if (validateTilOgMedForCollision(fromDate, disabledDateRanges)) {\n            return {\n                key: FraværPeriodeFormErrors.tilOgMed.til_dato_kolliderer_med_annet_fravær,\n                keepKeyUnaltered: true,\n            };\n        }\n        const dateError = getDateRangeValidator({\n            required: true,\n            min: minDate,\n            max: maxDate,\n            fromDate,\n        }).validateToDate(value);\n        return handleDateRangeValidationError(dateError, minDate, maxDate);\n    };\nexport default FraværPeriodeForm;\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { getTypedFormComponents, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport {\n    getDateRangeValidator,\n    getRequiredFieldValidator,\n    ValidateDateError,\n    ValidateDateRangeError,\n    ValidateRequiredFieldError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { handleDateRangeValidationError, mapFomTomToDateRange } from '../utils';\nimport bostedUtlandUtils from './bostedUtlandUtils';\nimport { BostedUtland, BostedUtlandFormValues } from './types';\n\nexport interface BostedUtlandFormLabels {\n    tittel: string;\n}\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    bosted?: BostedUtland;\n    alleBosteder?: BostedUtland[];\n    onSubmit: (values: BostedUtland) => void;\n    onCancel: () => void;\n}\n\nenum BostedUtlandFormFields {\n    fom = 'fom',\n    tom = 'tom',\n    landkode = 'landkode',\n}\n\ninterface DateLimits {\n    minDate: Date;\n    maxDate: Date;\n}\n\nexport const BostedUtlandFormErrors = {\n    [BostedUtlandFormFields.fom]: {\n        [ValidateDateError.dateHasNoValue]: 'bostedUtlandForm.fom.dateHasNoValue',\n        [ValidateDateError.dateIsAfterMax]: 'bostedUtlandForm.fom.dateIsAfterMax',\n        [ValidateDateError.dateIsBeforeMin]: 'bostedUtlandForm.fom.dateIsBeforeMin',\n        [ValidateDateError.dateHasInvalidFormat]: 'bostedUtlandForm.fom.dateHasInvalidFormat',\n        [ValidateDateRangeError.fromDateIsAfterToDate]: 'bostedUtlandForm.fom.fromDateIsAfterToDate',\n    },\n    [BostedUtlandFormFields.tom]: {\n        [ValidateDateError.dateHasNoValue]: 'bostedUtlandForm.tom.dateHasNoValue',\n        [ValidateDateError.dateIsAfterMax]: 'bostedUtlandForm.tom.dateIsAfterMax',\n        [ValidateDateError.dateIsBeforeMin]: 'bostedUtlandForm.tom.dateIsBeforeMin',\n        [ValidateDateError.dateHasInvalidFormat]: 'bostedUtlandForm.tom.dateHasInvalidFormat',\n        [ValidateDateRangeError.toDateIsBeforeFromDate]: 'bostedUtlandForm.tom.toDateIsBeforeFromDate',\n    },\n    [BostedUtlandFormFields.landkode]: {\n        [ValidateRequiredFieldError.noValue]: 'bostedUtlandForm.landkode.noValue',\n    },\n};\n\nconst Form = getTypedFormComponents<BostedUtlandFormFields, BostedUtlandFormValues, ValidationError>();\n\nconst BostedUtlandForm = ({ maxDate, minDate, bosted, alleBosteder = [], onSubmit, onCancel }: Props) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: BostedUtlandFormValues) => {\n        const bostedToSubmit = bostedUtlandUtils.mapFormValuesToBostedUtland(formValues, bosted?.id);\n        if (bostedUtlandUtils.isValidBostedUtland(bostedToSubmit)) {\n            onSubmit(bostedToSubmit);\n        } else {\n            throw new Error('BostedUtlandForm: Formvalues is not a valid BostedUtland on submit.');\n        }\n    };\n\n    return (\n        <Form.FormikWrapper\n            initialValues={bostedUtlandUtils.mapBostedUtlandToFormValues(bosted || {})}\n            onSubmit={onFormikSubmit}\n            renderForm={(formik) => {\n                const { values } = formik;\n                const fomDateLimits: DateLimits = {\n                    minDate,\n                    maxDate: ISOStringToDate(values.tom) || maxDate,\n                };\n                const tomDateLimits: DateLimits = {\n                    minDate: ISOStringToDate(values.fom) || minDate,\n                    maxDate: maxDate,\n                };\n\n                const andreBosteder =\n                    bosted === undefined\n                        ? alleBosteder.map(mapFomTomToDateRange)\n                        : alleBosteder.filter((b) => b.id !== bosted.id).map(mapFomTomToDateRange);\n\n                return (\n                    <Form.Form onCancel={onCancel} formErrorHandler={getFormErrorHandler(intl, 'bostedUtlandForm')}>\n                        <Systemtittel tag=\"h1\">\n                            <FormattedMessage id=\"bostedUtland.form.tittel\" />\n                        </Systemtittel>\n\n                        <FormBlock>\n                            <Form.DateRangePicker\n                                legend={intlHelper(intl, 'bostedUtland.form.tidsperiode.spm')}\n                                fullscreenOverlay={true}\n                                minDate={minDate}\n                                maxDate={maxDate}\n                                allowRangesToStartAndStopOnSameDate={false}\n                                disabledDateRanges={andreBosteder}\n                                fromInputProps={{\n                                    name: BostedUtlandFormFields.fom,\n                                    label: intlHelper(intl, 'bostedUtland.form.tidsperiode.fraDato'),\n                                    validate: (value) => {\n                                        const error = getDateRangeValidator({\n                                            required: true,\n                                            min: fomDateLimits.minDate,\n                                            max: fomDateLimits.maxDate,\n                                            toDate: ISOStringToDate(values.tom),\n                                        }).validateFromDate(value);\n                                        return handleDateRangeValidationError(\n                                            error,\n                                            fomDateLimits.minDate,\n                                            fomDateLimits.maxDate\n                                        );\n                                    },\n                                }}\n                                toInputProps={{\n                                    name: BostedUtlandFormFields.tom,\n                                    label: intlHelper(intl, 'bostedUtland.form.tidsperiode.tilDato'),\n                                    validate: (value) => {\n                                        const error = getDateRangeValidator({\n                                            required: true,\n                                            min: tomDateLimits.minDate,\n                                            max: tomDateLimits.maxDate,\n                                            fromDate: ISOStringToDate(values.fom),\n                                        }).validateToDate(value);\n                                        return handleDateRangeValidationError(\n                                            error,\n                                            tomDateLimits.minDate,\n                                            tomDateLimits.maxDate\n                                        );\n                                    },\n                                }}\n                            />\n                        </FormBlock>\n                        <FormBlock>\n                            <Form.CountrySelect\n                                name={BostedUtlandFormFields.landkode}\n                                label={intlHelper(intl, 'bostedUtland.form.land.spm')}\n                                validate={getRequiredFieldValidator()}\n                            />\n                        </FormBlock>\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default BostedUtlandForm;\n","import { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { guid } from 'nav-frontend-js-utils';\nimport { BostedUtland, BostedUtlandFormValues } from './types';\n\nconst isValidBostedUtland = (bosted: Partial<BostedUtland>): bosted is BostedUtland => {\n    const { fom, landkode, tom } = bosted;\n    return fom !== undefined && landkode !== undefined && tom !== undefined;\n};\n\nconst mapFormValuesToBostedUtland = (\n    formValues: BostedUtlandFormValues,\n    id: string | undefined\n): Partial<BostedUtland> => {\n    return {\n        id: id || guid(),\n        fom: ISOStringToDate(formValues.fom),\n        tom: ISOStringToDate(formValues.tom),\n        landkode: formValues.landkode,\n    };\n};\n\nconst mapBostedUtlandToFormValues = ({ fom, tom, landkode }: Partial<BostedUtland>): BostedUtlandFormValues => {\n    return {\n        fom: dateToISOString(fom),\n        tom: dateToISOString(tom),\n        landkode,\n    };\n};\n\nconst bostedUtlandUtils = {\n    isValidBostedUtland,\n    mapBostedUtlandToFormValues,\n    mapFormValuesToBostedUtland,\n};\n\nexport default bostedUtlandUtils;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { DateRange, prettifyDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { getTypedFormComponents, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport {\n    getDateRangeValidator,\n    ValidateDateError,\n    ValidateDateRangeError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { handleDateRangeValidationError, mapFomTomToDateRange } from '../utils';\nimport ferieuttakUtils from './ferieuttakUtils';\nimport { Ferieuttak, FerieuttakFormValues } from './types';\n\nexport interface FerieuttakFormLabels {\n    title: string;\n    fromDate: string;\n    toDate: string;\n    intervalTitle: string;\n    okButton: string;\n    cancelButton: string;\n}\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    ferieuttak?: Partial<Ferieuttak>;\n    alleFerieuttak?: Ferieuttak[];\n    labels?: Partial<FerieuttakFormLabels>;\n    onSubmit: (values: Ferieuttak) => void;\n    onCancel: () => void;\n}\n\nenum FerieuttakFormFields {\n    tom = 'tom',\n    fom = 'fom',\n}\n\nexport const FerieuttakFormErrors = {\n    [FerieuttakFormFields.fom]: {\n        [ValidateDateError.dateHasNoValue]: 'ferieuttakForm.fom.dateHasNoValue',\n        [ValidateDateRangeError.fromDateIsAfterToDate]: 'ferieuttakForm.fom.fromDateIsAfterToDate',\n        [ValidateDateError.dateHasInvalidFormat]: 'ferieuttakForm.fom.dateHasInvalidFormat',\n        [ValidateDateError.dateIsBeforeMin]: 'ferieuttakForm.fom.dateIsBeforeMin',\n        [ValidateDateError.dateIsAfterMax]: 'ferieuttakForm.fom.dateIsAfterMax',\n    },\n    [FerieuttakFormFields.tom]: {\n        [ValidateDateError.dateHasNoValue]: 'ferieuttakForm.tom.dateHasNoValue',\n        [ValidateDateRangeError.toDateIsBeforeFromDate]: 'ferieuttakForm.tom.toDateIsBeforeFromDate',\n        [ValidateDateError.dateHasInvalidFormat]: 'ferieuttakForm.tom.dateHasInvalidFormat',\n        [ValidateDateError.dateIsBeforeMin]: 'ferieuttakForm.tom.dateIsBeforeMin',\n        [ValidateDateError.dateIsAfterMax]: 'ferieuttakForm.tom.dateIsAfterMax',\n    },\n};\n\nconst Form = getTypedFormComponents<FerieuttakFormFields, FerieuttakFormValues, ValidationError>();\n\nconst FerieuttakForm = ({ maxDate, minDate, labels, ferieuttak, alleFerieuttak = [], onSubmit, onCancel }: Props) => {\n    const intl = useIntl();\n    const onFormikSubmit = (formValues: FerieuttakFormValues) => {\n        const ferieuttakToSubmit = ferieuttakUtils.mapFormValuesToFerieuttak(formValues, ferieuttak?.id);\n        if (ferieuttakUtils.isValidFerieuttak(ferieuttakToSubmit)) {\n            onSubmit({ ...ferieuttak, ...ferieuttakToSubmit });\n        } else {\n            throw new Error('FerieuttakForm: Formvalues is not a valid Ferieuttak on submit.');\n        }\n    };\n\n    const defaultLabels: FerieuttakFormLabels = {\n        title: intlHelper(intl, 'ferieuttak.list.title'),\n        fromDate: intlHelper(intl, 'ferieuttak.list.fromDate'),\n        toDate: intlHelper(intl, 'ferieuttak.list.toDate'),\n        intervalTitle: intlHelper(intl, 'ferieuttak.list.intervalTitle'),\n        okButton: intlHelper(intl, 'ferieuttak.list.okButton'),\n        cancelButton: intlHelper(intl, 'ferieuttak.list.cancelButton'),\n    };\n\n    const formLabels: FerieuttakFormLabels = { ...defaultLabels, ...labels };\n\n    const andreFerieuttak: DateRange[] | undefined =\n        ferieuttak === undefined\n            ? alleFerieuttak.map(mapFomTomToDateRange)\n            : alleFerieuttak.filter((f) => f.id !== ferieuttak.id).map(mapFomTomToDateRange);\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={ferieuttakUtils.mapFerieuttakToFormValues(ferieuttak || {})}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => (\n                    <Form.Form onCancel={onCancel} formErrorHandler={getFormErrorHandler(intl, 'ferieuttakForm')}>\n                        <Systemtittel tag=\"h1\">{formLabels.title}</Systemtittel>\n                        <FormBlock>\n                            <Form.DateRangePicker\n                                legend={formLabels.intervalTitle}\n                                fullscreenOverlay={true}\n                                minDate={minDate}\n                                maxDate={maxDate}\n                                allowRangesToStartAndStopOnSameDate={true}\n                                disabledDateRanges={andreFerieuttak}\n                                fromInputProps={{\n                                    label: formLabels.fromDate,\n                                    name: FerieuttakFormFields.fom,\n                                    validate: (value) => {\n                                        const error = getDateRangeValidator({\n                                            required: true,\n                                            min: minDate,\n                                            max: maxDate,\n                                            toDate: ISOStringToDate(formik.values.tom),\n                                        }).validateFromDate(value);\n                                        return handleDateRangeValidationError(error, minDate, maxDate);\n                                    },\n                                    onChange: () => {\n                                        setTimeout(() => {\n                                            formik.validateField(FerieuttakFormFields.tom);\n                                        });\n                                    },\n                                }}\n                                toInputProps={{\n                                    label: formLabels.toDate,\n                                    name: FerieuttakFormFields.tom,\n                                    validate: (value) => {\n                                        const dateError = getDateRangeValidator({\n                                            required: true,\n                                            min: minDate,\n                                            max: maxDate,\n                                            fromDate: ISOStringToDate(formik.values.fom),\n                                        }).validateToDate(value);\n                                        switch (dateError) {\n                                            case ValidateDateError.dateIsBeforeMin:\n                                                return {\n                                                    key: dateError,\n                                                    values: { dato: prettifyDate(minDate) },\n                                                };\n                                            case ValidateDateError.dateIsAfterMax:\n                                                return {\n                                                    key: dateError,\n                                                    values: { dato: prettifyDate(maxDate) },\n                                                };\n                                            default:\n                                                return dateError;\n                                        }\n                                    },\n                                    onChange: () => {\n                                        setTimeout(() => {\n                                            formik.validateField(FerieuttakFormFields.fom);\n                                        });\n                                    },\n                                }}\n                            />\n                        </FormBlock>\n                    </Form.Form>\n                )}\n            />\n        </>\n    );\n};\n\nexport default FerieuttakForm;\n","import { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Ferieuttak, FerieuttakFormValues } from './types';\n\nexport const isValidFerieuttak = (ferieuttak: Partial<Ferieuttak>): ferieuttak is Ferieuttak => {\n    return ferieuttak.fom !== undefined && ferieuttak.tom !== undefined;\n};\n\nconst mapFormValuesToFerieuttak = (formValues: FerieuttakFormValues, id: string | undefined): Partial<Ferieuttak> => {\n    return {\n        id: id || guid(),\n        fom: ISOStringToDate(formValues.fom),\n        tom: ISOStringToDate(formValues.tom),\n    };\n};\n\nconst mapFerieuttakToFormValues = ({ fom, tom }: Partial<Ferieuttak>): FerieuttakFormValues => {\n    return {\n        fom: dateToISOString(fom),\n        tom: dateToISOString(tom),\n    };\n};\n\nconst ferieuttakUtils = {\n    isValidFerieuttak,\n    mapFerieuttakToFormValues,\n    mapFormValuesToFerieuttak,\n};\n\nexport default ferieuttakUtils;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { getTypedFormComponents, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport {\n    getDateRangeValidator,\n    ValidateDateError,\n    ValidateDateRangeError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { handleDateRangeValidationError, mapFomTomToDateRange } from '../utils';\nimport tidsperiodeUtils from './tidsperiodeUtils';\nimport { DateTidsperiode, DateTidsperiodeFormValues } from './types';\n\nexport interface TidsperiodeFormLabels {\n    title?: string;\n    fromDate: string;\n    toDate: string;\n    intervalTitle?: string;\n    okButton: string;\n    cancelButton: string;\n}\n\ninterface Props {\n    minDate?: Date;\n    maxDate?: Date;\n    tidsperiode?: Partial<DateTidsperiode>;\n    alleTidsperioder?: DateTidsperiode[];\n    formLabels?: Partial<TidsperiodeFormLabels>;\n    onSubmit: (values: DateTidsperiode) => void;\n    onCancel: () => void;\n}\n\nenum TidsperiodeFormFields {\n    tom = 'tom',\n    fom = 'fom',\n}\n\nexport const TidsperiodeFormErrors = {\n    [TidsperiodeFormFields.fom]: {\n        [ValidateDateError.dateHasNoValue]: 'tidsperiodeForm.fom.dateHasNoValue',\n        [ValidateDateRangeError.fromDateIsAfterToDate]: 'tidsperiodeForm.fom.fromDateIsAfterToDate',\n        [ValidateDateError.dateHasInvalidFormat]: 'tidsperiodeForm.fom.dateHasInvalidFormat',\n        [ValidateDateError.dateIsBeforeMin]: 'tidsperiodeForm.fom.dateIsBeforeMin',\n        [ValidateDateError.dateIsAfterMax]: 'tidsperiodeForm.fom.dateIsAfterMax',\n    },\n    [TidsperiodeFormFields.tom]: {\n        [ValidateDateError.dateHasNoValue]: 'tidsperiodeForm.tom.dateHasNoValue',\n        [ValidateDateRangeError.toDateIsBeforeFromDate]: 'tidsperiodeForm.tom.toDateIsBeforeFromDate',\n        [ValidateDateError.dateHasInvalidFormat]: 'tidsperiodeForm.tom.dateHasInvalidFormat',\n        [ValidateDateError.dateIsBeforeMin]: 'tidsperiodeForm.tom.dateIsBeforeMin',\n        [ValidateDateError.dateIsAfterMax]: 'tidsperiodeForm.tom.dateIsAfterMax',\n    },\n};\n\nconst Form = getTypedFormComponents<TidsperiodeFormFields, DateTidsperiodeFormValues, ValidationError>();\n\nconst TidsperiodeForm = ({\n    maxDate,\n    minDate,\n    formLabels,\n    tidsperiode,\n    alleTidsperioder = [],\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: DateTidsperiodeFormValues) => {\n        const dateTidsperiodeToSubmit = tidsperiodeUtils.mapFormValuesToDateTidsperiode(formValues, tidsperiode?.id);\n        if (tidsperiodeUtils.isValidDateTidsperiode(dateTidsperiodeToSubmit)) {\n            onSubmit(dateTidsperiodeToSubmit);\n        } else {\n            throw new Error('TidsperiodeForm: Formvalues is not a valid Tidsperiode on submit.');\n        }\n    };\n\n    const defaultLabels: TidsperiodeFormLabels = {\n        title: intlHelper(intl, 'tidsperiode.form.title'),\n        fromDate: intlHelper(intl, 'tidsperiode.form.fromDate'),\n        toDate: intlHelper(intl, 'tidsperiode.form.toDate'),\n        okButton: intlHelper(intl, 'tidsperiode.form.okButton'),\n        cancelButton: intlHelper(intl, 'tidsperiode.form.cancelButton'),\n    };\n\n    const inlineLabels: TidsperiodeFormLabels = { ...defaultLabels, ...formLabels };\n\n    console.log({ minDate, maxDate });\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={tidsperiodeUtils.mapDateTidsperiodeToFormValues(tidsperiode || {})}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => {\n                    const disabledDateRanges =\n                        tidsperiode === undefined\n                            ? alleTidsperioder.map(mapFomTomToDateRange)\n                            : alleTidsperioder.filter((t) => t.id !== tidsperiode.id).map(mapFomTomToDateRange);\n\n                    return (\n                        <Form.Form onCancel={onCancel} formErrorHandler={getFormErrorHandler(intl, 'tidsperiodeForm')}>\n                            <Systemtittel tag=\"h1\">{inlineLabels.title}</Systemtittel>\n                            <FormBlock>\n                                <Form.DateRangePicker\n                                    legend={inlineLabels.intervalTitle}\n                                    fullscreenOverlay={true}\n                                    minDate={minDate}\n                                    maxDate={maxDate}\n                                    disabledDateRanges={disabledDateRanges}\n                                    fromInputProps={{\n                                        label: inlineLabels.fromDate,\n                                        name: TidsperiodeFormFields.fom,\n                                        validate: (value) => {\n                                            const error = getDateRangeValidator({\n                                                required: true,\n                                                min: minDate,\n                                                max: maxDate,\n                                                toDate: ISOStringToDate(formik.values.tom),\n                                            }).validateFromDate(value);\n                                            return handleDateRangeValidationError(error, minDate, maxDate);\n                                        },\n                                        onChange: () => {\n                                            setTimeout(() => {\n                                                formik.validateField(TidsperiodeFormFields.tom);\n                                            });\n                                        },\n                                    }}\n                                    toInputProps={{\n                                        label: inlineLabels.toDate,\n                                        name: TidsperiodeFormFields.tom,\n                                        validate: getDateRangeValidator({\n                                            required: true,\n                                            min: minDate,\n                                            max: maxDate,\n                                            fromDate: ISOStringToDate(formik.values.fom),\n                                        }).validateToDate,\n                                        onChange: () => {\n                                            setTimeout(() => {\n                                                formik.validateField(TidsperiodeFormFields.fom);\n                                            });\n                                        },\n                                    }}\n                                />\n                            </FormBlock>\n                        </Form.Form>\n                    );\n                }}\n            />\n        </>\n    );\n};\n\nexport default TidsperiodeForm;\n","import { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { guid } from 'nav-frontend-js-utils';\nimport { DateTidsperiode, DateTidsperiodeFormValues } from './types';\n\nconst isValidDateTidsperiode = (tidsperiode: Partial<DateTidsperiode>): tidsperiode is DateTidsperiode => {\n    return tidsperiode.fom !== undefined && tidsperiode.tom !== undefined;\n};\n\nconst mapFormValuesToDateTidsperiode = (\n    formValues: DateTidsperiodeFormValues,\n    id: string | undefined\n): Partial<DateTidsperiode> => {\n    return {\n        id: id || guid(),\n        fom: ISOStringToDate(formValues.fom),\n        tom: ISOStringToDate(formValues.tom),\n    };\n};\n\nconst mapDateTidsperiodeToFormValues = ({ fom, tom }: Partial<DateTidsperiode>): DateTidsperiodeFormValues => {\n    return {\n        fom: dateToISOString(fom),\n        tom: dateToISOString(tom),\n    };\n};\n\nconst tidsperiodeUtils = {\n    isValidDateTidsperiode,\n    mapDateTidsperiodeToFormValues,\n    mapFormValuesToDateTidsperiode,\n};\n\nexport default tidsperiodeUtils;\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { countryIsMemberOfEøsOrEfta } from '@navikt/sif-common-core/lib/utils/countryUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { DateRange, getCountryName, ISOStringToDate, YesOrNo } from '@navikt/sif-common-formik';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport {\n    getDateRangeValidator,\n    getListValidator,\n    getRequiredFieldValidator,\n    getYesOrNoValidator,\n    ValidateDateError,\n    ValidateDateRangeError,\n    ValidateListError,\n    ValidateRequiredFieldError,\n    ValidateYesOrNoError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport { hasValue } from '@navikt/sif-common-formik/lib/validation/validationUtils';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport TidsperiodeListAndDialog from '../tidsperiode/TidsperiodeListAndDialog';\nimport { handleDateRangeValidationError, mapFomTomToDateRange } from '../utils';\nimport { Utenlandsopphold, UtenlandsoppholdFormValues, UtenlandsoppholdÅrsak } from './types';\nimport utils from './utenlandsoppholdUtils';\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    opphold?: Utenlandsopphold;\n    alleOpphold?: Utenlandsopphold[];\n    onSubmit: (values: Utenlandsopphold) => void;\n    onCancel: () => void;\n}\n\nenum UtenlandsoppholdFormFields {\n    fom = 'fom',\n    tom = 'tom',\n    landkode = 'landkode',\n    årsak = 'årsak',\n    erBarnetInnlagt = 'erBarnetInnlagt',\n    barnInnlagtPerioder = 'barnInnlagtPerioder',\n}\n\nexport const UtlandsoppholdFormErrors = {\n    [UtenlandsoppholdFormFields.fom]: {\n        [ValidateDateError.dateHasNoValue]: 'utenlandsoppholdForm.fom.dateHasNoValue',\n        [ValidateDateRangeError.fromDateIsAfterToDate]: 'utenlandsoppholdForm.fom.fromDateIsAfterToDate',\n        [ValidateDateError.dateHasInvalidFormat]: 'utenlandsoppholdForm.fom.dateHasInvalidFormat',\n        [ValidateDateError.dateIsBeforeMin]: 'utenlandsoppholdForm.fom.dateIsBeforeMin',\n        [ValidateDateError.dateIsAfterMax]: 'utenlandsoppholdForm.fom.dateIsAfterMax',\n    },\n    [UtenlandsoppholdFormFields.tom]: {\n        [ValidateDateError.dateHasNoValue]: 'utenlandsoppholdForm.tom.dateHasNoValue',\n        [ValidateDateRangeError.toDateIsBeforeFromDate]: 'utenlandsoppholdForm.tom.toDateIsBeforeFromDate',\n        [ValidateDateError.dateHasInvalidFormat]: 'utenlandsoppholdForm.tom.dateHasInvalidFormat',\n        [ValidateDateError.dateIsBeforeMin]: 'utenlandsoppholdForm.tom.dateIsBeforeMin',\n        [ValidateDateError.dateIsAfterMax]: 'utenlandsoppholdForm.tom.dateIsAfterMax',\n    },\n    [UtenlandsoppholdFormFields.landkode]: {\n        [ValidateRequiredFieldError.noValue]: 'utenlandsoppholdForm.landkode.noValue',\n    },\n    [UtenlandsoppholdFormFields.årsak]: { [ValidateRequiredFieldError.noValue]: 'utenlandsoppholdForm.årsak.noValue' },\n    [UtenlandsoppholdFormFields.erBarnetInnlagt]: {\n        [ValidateYesOrNoError.yesOrNoIsUnanswered]: 'utenlandsoppholdForm.erBarnetInnlagt.yesOrNoIsUnanswered',\n    },\n    [UtenlandsoppholdFormFields.barnInnlagtPerioder]: {\n        [ValidateListError.listIsEmpty]: 'utenlandsoppholdForm.barnInnlagtPerioder.listIsEmpty',\n    },\n};\n\nconst defaultFormValues: UtenlandsoppholdFormValues = {\n    fom: undefined,\n    tom: undefined,\n    landkode: undefined,\n    erBarnetInnlagt: YesOrNo.UNANSWERED,\n    barnInnlagtPerioder: [],\n    årsak: undefined,\n};\n\nconst Form = getTypedFormComponents<UtenlandsoppholdFormFields, UtenlandsoppholdFormValues, ValidationError>();\n\nconst UtenlandsoppholdForm = ({ maxDate, minDate, opphold, alleOpphold = [], onSubmit, onCancel }: Props) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: Partial<UtenlandsoppholdFormValues>) => {\n        const utenlandsoppholdToSubmit = utils.mapFormValuesToUtenlandsopphold(formValues, opphold?.id);\n        if (utils.isValidUtenlandsopphold(utenlandsoppholdToSubmit)) {\n            onSubmit({\n                ...utenlandsoppholdToSubmit,\n                årsak: countryIsMemberOfEøsOrEfta(utenlandsoppholdToSubmit.landkode) ? undefined : formValues.årsak,\n            });\n        } else {\n            throw new Error('UtenlandsoppholdForm: Formvalues is not a valid Utenlandsopphold on submit.');\n        }\n    };\n\n    const registrerteTidsperioder: DateRange[] | undefined =\n        opphold === undefined\n            ? alleOpphold.map(mapFomTomToDateRange)\n            : alleOpphold.filter((o) => o.id !== opphold.id).map(mapFomTomToDateRange);\n\n    const initialValues = opphold ? utils.mapUtenlandsoppholdToFormValues(opphold) : defaultFormValues;\n    return (\n        <Form.FormikWrapper\n            initialValues={initialValues}\n            onSubmit={onFormikSubmit}\n            renderForm={(formik) => {\n                const {\n                    values: { fom, tom, landkode, erBarnetInnlagt, barnInnlagtPerioder = [] },\n                } = formik;\n\n                const hasDateStringValues = hasValue(fom) && hasValue(tom);\n\n                const includeInnlagtPerioderQuestion =\n                    hasDateStringValues && landkode !== undefined && erBarnetInnlagt === YesOrNo.YES;\n\n                const includeInnlagtQuestion: boolean =\n                    landkode !== undefined && hasValue(landkode) && !countryIsMemberOfEøsOrEfta(landkode);\n\n                const showÅrsakQuestion = barnInnlagtPerioder.length > 0;\n\n                return (\n                    <Form.Form\n                        includeButtons={true}\n                        onCancel={onCancel}\n                        formErrorHandler={getFormErrorHandler(intl, 'utenlandsoppholdForm')}>\n                        <Systemtittel tag=\"h1\">\n                            <FormattedMessage id=\"utenlandsopphold.form.tittel\" />\n                        </Systemtittel>\n                        <FormBlock>\n                            <Form.DateRangePicker\n                                legend={intlHelper(intl, 'utenlandsopphold.form.tidsperiode.spm')}\n                                fullscreenOverlay={true}\n                                disabledDateRanges={registrerteTidsperioder}\n                                minDate={minDate}\n                                maxDate={maxDate}\n                                fromInputProps={{\n                                    name: UtenlandsoppholdFormFields.fom,\n                                    label: intlHelper(intl, 'utenlandsopphold.form.tidsperiode.fraDato'),\n                                    validate: (value) => {\n                                        const error = getDateRangeValidator({\n                                            required: true,\n                                            min: minDate,\n                                            max: maxDate,\n                                            toDate: ISOStringToDate(tom),\n                                        }).validateFromDate(value);\n                                        return handleDateRangeValidationError(error, minDate, maxDate);\n                                    },\n                                }}\n                                toInputProps={{\n                                    name: UtenlandsoppholdFormFields.tom,\n                                    label: intlHelper(intl, 'utenlandsopphold.form.tidsperiode.tilDato'),\n                                    validate: (value) => {\n                                        const error = getDateRangeValidator({\n                                            required: true,\n                                            min: minDate,\n                                            max: maxDate,\n                                            fromDate: ISOStringToDate(fom),\n                                        }).validateToDate(value);\n                                        return handleDateRangeValidationError(error, minDate, maxDate);\n                                    },\n                                }}\n                            />\n                        </FormBlock>\n                        {hasDateStringValues && (\n                            <FormBlock>\n                                <Form.CountrySelect\n                                    name={UtenlandsoppholdFormFields.landkode}\n                                    label={intlHelper(intl, 'utenlandsopphold.form.land.spm')}\n                                    validate={getRequiredFieldValidator()}\n                                />\n                            </FormBlock>\n                        )}\n\n                        {includeInnlagtQuestion && landkode && hasDateStringValues && (\n                            <>\n                                <FormBlock>\n                                    <Form.YesOrNoQuestion\n                                        name={UtenlandsoppholdFormFields.erBarnetInnlagt}\n                                        legend={intlHelper(intl, 'utenlandsopphold.form.erBarnetInnlagt.spm', {\n                                            land: getCountryName(landkode, intl.locale),\n                                        })}\n                                        validate={(value) => {\n                                            const error = getYesOrNoValidator()(value);\n                                            return error\n                                                ? {\n                                                      key: error,\n                                                      values: { land: getCountryName(landkode, intl.locale) },\n                                                  }\n                                                : undefined;\n                                        }}\n                                    />\n                                </FormBlock>\n                                {includeInnlagtPerioderQuestion && (\n                                    <FormBlock margin=\"l\">\n                                        <TidsperiodeListAndDialog\n                                            name={UtenlandsoppholdFormFields.barnInnlagtPerioder}\n                                            minDate={ISOStringToDate(fom)}\n                                            maxDate={ISOStringToDate(tom)}\n                                            validate={getListValidator({ required: true })}\n                                            formTitle={intlHelper(\n                                                intl,\n                                                'utenlandsopphold.form.perioderBarnetErInnlag.formTitle'\n                                            )}\n                                            labels={{\n                                                addLabel: intlHelper(\n                                                    intl,\n                                                    'utenlandsopphold.form.perioderBarnetErInnlag.addLabel'\n                                                ),\n                                                modalTitle: intlHelper(\n                                                    intl,\n                                                    'utenlandsopphold.form.perioderBarnetErInnlag.modalTitle'\n                                                ),\n                                                listTitle: intlHelper(\n                                                    intl,\n                                                    'utenlandsopphold.form.perioderBarnetErInnlag.listTitle'\n                                                ),\n                                            }}\n                                        />\n                                    </FormBlock>\n                                )}\n                                {showÅrsakQuestion && (\n                                    <>\n                                        <FormBlock>\n                                            <Form.RadioPanelGroup\n                                                legend={intlHelper(intl, 'utenlandsopphold.form.årsak.spm', {\n                                                    land: getCountryName(landkode, intl.locale),\n                                                })}\n                                                name={UtenlandsoppholdFormFields.årsak}\n                                                validate={getRequiredFieldValidator()}\n                                                radios={[\n                                                    {\n                                                        value: UtenlandsoppholdÅrsak.INNLAGT_DEKKET_NORGE,\n                                                        label: intlHelper(\n                                                            intl,\n                                                            `utenlandsopphold.form.årsak.${UtenlandsoppholdÅrsak.INNLAGT_DEKKET_NORGE}`\n                                                        ),\n                                                    },\n                                                    {\n                                                        value: UtenlandsoppholdÅrsak.INNLAGT_DEKKET_ANNET_LAND,\n                                                        label: intlHelper(\n                                                            intl,\n                                                            `utenlandsopphold.form.årsak.${UtenlandsoppholdÅrsak.INNLAGT_DEKKET_ANNET_LAND}`,\n                                                            { land: getCountryName(landkode, intl.locale) }\n                                                        ),\n                                                    },\n                                                    {\n                                                        value: UtenlandsoppholdÅrsak.ANNET,\n                                                        label: intlHelper(\n                                                            intl,\n                                                            `utenlandsopphold.form.årsak.${UtenlandsoppholdÅrsak.ANNET}`\n                                                        ),\n                                                    },\n                                                ]}\n                                            />\n                                        </FormBlock>\n                                    </>\n                                )}\n                            </>\n                        )}\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default UtenlandsoppholdForm;\n","import { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Utenlandsopphold, UtenlandsoppholdFormValues } from './types';\n\nconst isValidUtenlandsopphold = (utenlandsopphold: Partial<Utenlandsopphold>): utenlandsopphold is Utenlandsopphold => {\n    return (\n        utenlandsopphold.fom !== undefined &&\n        utenlandsopphold.tom !== undefined &&\n        utenlandsopphold.landkode !== undefined\n    );\n};\n\nconst mapFormValuesToUtenlandsopphold = (\n    formValues: UtenlandsoppholdFormValues,\n    id: string | undefined\n): Partial<Utenlandsopphold> => {\n    const { barnInnlagtPerioder } = formValues;\n    return {\n        ...formValues,\n        id: id || guid(),\n        fom: ISOStringToDate(formValues.fom),\n        tom: ISOStringToDate(formValues.tom),\n        barnInnlagtPerioder,\n    };\n};\n\nconst mapUtenlandsoppholdToFormValues = ({\n    fom,\n    tom,\n    erBarnetInnlagt,\n    barnInnlagtPerioder,\n    landkode,\n    årsak,\n}: Partial<Utenlandsopphold>): UtenlandsoppholdFormValues => ({\n    fom: dateToISOString(fom),\n    tom: dateToISOString(tom),\n    erBarnetInnlagt,\n    landkode,\n    årsak,\n    barnInnlagtPerioder,\n});\n\nconst utenlandsoppholdUtils = {\n    isValidUtenlandsopphold,\n    mapFormValuesToUtenlandsopphold,\n    mapUtenlandsoppholdToFormValues,\n};\nexport default utenlandsoppholdUtils;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport ExpandableInfo from '@navikt/sif-common-core/lib/components/expandable-content/ExpandableInfo';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { YesOrNo } from '@navikt/sif-common-core/lib/types/YesOrNo';\nimport { DateRange, dateToday } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport datepickerUtils from '@navikt/sif-common-formik/lib/components/formik-datepicker/datepickerUtils';\nimport { FormikDatepickerProps } from '@navikt/sif-common-formik/lib/components/formik-datepicker/FormikDatepicker';\nimport {\n    getDateValidator,\n    getRequiredFieldValidator,\n    getYesOrNoValidator,\n    ValidateDateError,\n    ValidateNumberError,\n    ValidateRequiredFieldError,\n    ValidateYesOrNoError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport dayjs from 'dayjs';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport FormattedHtmlMessage from '../components/formatted-html-message/FormattedHtmlMessage';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport FraværTimerSelect from './FraværTimerSelect';\nimport { isFraværDag, mapFormValuesToFraværDag, mapFraværDagToFormValues, toMaybeNumber } from './fraværUtilities';\nimport {\n    FraværFieldValidationErrors,\n    validateFraværDagCollision,\n    validateLessOrEqualTo,\n    validateNotHelgedag,\n} from './fraværValidationUtils';\nimport { getFraværÅrsakRadios } from './fraværÅrsakRadios';\nimport { FraværDag, FraværDagFormValues } from './types';\nimport ÅrsakInfo from './ÅrsakInfo';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\nexport interface FraværDagFormLabels {\n    tittel: string;\n    dato: string;\n    antallArbeidstimer: string;\n    timerFravær: string;\n    hjemmePgaKorona: string;\n    årsak: string;\n    ok: string;\n    avbryt: string;\n}\n\ninterface Props {\n    fraværDag?: Partial<FraværDag>;\n    dagDescription?: JSX.Element;\n    minDate: Date;\n    maxDate: Date;\n    dateRangesToDisable?: DateRange[];\n    helgedagerIkkeTillatt?: boolean;\n    headerContent?: JSX.Element;\n    maksArbeidstidPerDag?: number;\n    onSubmit: (values: FraværDag) => void;\n    onCancel: () => void;\n}\n\nexport enum FraværDagFormFields {\n    dato = 'dato',\n    timerArbeidsdag = 'timerArbeidsdag',\n    timerFravær = 'timerFravær',\n    hjemmePgaKorona = 'hjemmePgaKorona',\n    årsak = 'årsak',\n}\n\nexport const FraværDagFormErrors = {\n    [FraværDagFormFields.dato]: {\n        [ValidateDateError.dateHasNoValue]: 'fraværDagForm.dato.dateHasNoValue',\n        [ValidateDateError.dateHasInvalidFormat]: 'fraværDagForm.dato.dateHasInvalidFormat',\n        [ValidateDateError.dateIsAfterMax]: 'fraværDagForm.dato.dateIsAfterMax',\n        [ValidateDateError.dateIsBeforeMin]: 'fraværDagForm.dato.dateIsBeforeMin',\n        [FraværFieldValidationErrors.er_helg]: 'fraværDagForm.dato.er_helg',\n        [FraværFieldValidationErrors.dato_kolliderer_med_annet_fravær]:\n            'fraværDagForm.dato.dato_kolliderer_med_annet_fravær',\n    },\n    [FraværDagFormFields.timerArbeidsdag]: {\n        [ValidateNumberError.numberHasNoValue]: 'fraværDagForm.timerArbeidsdag.numberHasNoValue',\n    },\n    [FraværDagFormFields.timerFravær]: {\n        [ValidateNumberError.numberHasNoValue]: 'fraværDagForm.timerFravær.numbverHasNoValue',\n        [FraværFieldValidationErrors.fravær_timer_mer_enn_arbeidstimer]:\n            'fraværDagForm.timerFravær.fravær_timer_mer_enn_arbeidstimer',\n    },\n    [FraværDagFormFields.hjemmePgaKorona]: {\n        [ValidateYesOrNoError.yesOrNoIsUnanswered]: 'fraværDagForm.hjemmePgaKorona.yesOrNoIsUnanswered',\n    },\n    [FraværDagFormFields.årsak]: { [ValidateRequiredFieldError.noValue]: 'fraværDagForm.årsak.noValue' },\n};\n\nexport const FraværDagFormName = 'fraværDagForm';\n\nexport const FraværDagForm = getTypedFormComponents<FraværDagFormFields, FraværDagFormValues, ValidationError>();\n\nconst FraværDagFormView = ({\n    fraværDag = {\n        dato: undefined,\n        timerArbeidsdag: undefined,\n        timerFravær: undefined,\n        årsak: undefined,\n    },\n    dagDescription,\n    maxDate,\n    minDate,\n    dateRangesToDisable,\n    helgedagerIkkeTillatt,\n    maksArbeidstidPerDag,\n    headerContent,\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n    const onFormikSubmit = (formValues: FraværDagFormValues) => {\n        const fraværDagToSubmit = mapFormValuesToFraværDag(formValues, fraværDag.id);\n        if (isFraværDag(fraværDagToSubmit)) {\n            onSubmit(fraværDagToSubmit);\n        } else {\n            throw new Error('FraværDagFOrm: Formvalues is not a valid FraværDag on submit.');\n        }\n    };\n\n    const formLabels: FraværDagFormLabels = {\n        ok: intlHelper(intl, 'fravær.form.felles.ok'),\n        avbryt: intlHelper(intl, 'fravær.form.felles.avbryt'),\n        årsak: intlHelper(intl, 'fravær.form.felles.årsak'),\n        tittel: intlHelper(intl, 'fravær.form.dag.tittel'),\n        dato: intlHelper(intl, 'fravær.form.dag.dato'),\n        antallArbeidstimer: intlHelper(intl, 'fravær.form.dag.antallArbeidstimer'),\n        timerFravær: intlHelper(intl, 'fravær.form.dag.timerFravær'),\n        hjemmePgaKorona: intlHelper(intl, 'fravær.form.felles.hjemmePgaKorona'),\n    };\n    const fraværÅrsakRadios = getFraværÅrsakRadios(intl);\n    const disabledDateRanges = dateRangesToDisable\n        ? dateRangesToDisable.filter((range) => {\n              const { dato } = fraværDag;\n              return !(dato && dayjs(dato).isSame(range.from, 'day') && dayjs(dato).isSame(range.to, 'day'));\n          })\n        : undefined;\n\n    return (\n        <>\n            <FraværDagForm.FormikWrapper\n                initialValues={mapFraværDagToFormValues(fraværDag)}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => {\n                    const { values } = formik;\n                    const valgtDato = datepickerUtils.getDateFromDateString(values.dato);\n                    const datepickerProps: FormikDatepickerProps<FraværDagFormFields, ValidationError> = {\n                        label: formLabels.dato,\n                        name: FraværDagFormFields.dato,\n                        fullscreenOverlay: true,\n                        dayPickerProps: {\n                            initialMonth: dayjs(dateToday).isAfter(maxDate) ? maxDate : dateToday,\n                        },\n                        minDate,\n                        maxDate,\n                        disableWeekend: helgedagerIkkeTillatt || false,\n                        disabledDateRanges,\n                        validate: (value): ValidationError | undefined => {\n                            if (helgedagerIkkeTillatt && validateNotHelgedag(value)) {\n                                return {\n                                    key: FraværDagFormErrors.dato.er_helg,\n                                    keepKeyUnaltered: true,\n                                };\n                            }\n                            if (validateFraværDagCollision(valgtDato, disabledDateRanges)) {\n                                return {\n                                    key: FraværDagFormErrors.dato.dato_kolliderer_med_annet_fravær,\n                                    keepKeyUnaltered: true,\n                                };\n                            }\n                            return getDateValidator({ required: true, min: minDate, max: maxDate })(value);\n                        },\n                        onChange: () => {\n                            setTimeout(() => {\n                                formik.validateField(FraværDagFormFields.dato);\n                            });\n                        },\n                    };\n\n                    return (\n                        <FraværDagForm.Form\n                            onCancel={onCancel}\n                            formErrorHandler={getFormErrorHandler(intl, 'fraværDagForm')}>\n                            <Systemtittel tag=\"h1\">{formLabels.tittel}</Systemtittel>\n                            {headerContent && <Box>{headerContent}</Box>}\n                            <FormBlock>\n                                <FraværDagForm.DatePicker {...datepickerProps} description={dagDescription} />\n                            </FormBlock>\n                            <FormBlock>\n                                <FraværTimerSelect\n                                    name={FraværDagFormFields.timerArbeidsdag}\n                                    validate={getRequiredFieldValidator()}\n                                    label={formLabels.antallArbeidstimer}\n                                    maksTid={maksArbeidstidPerDag}\n                                />\n                            </FormBlock>\n                            <FormBlock>\n                                <FraværTimerSelect\n                                    name={FraværDagFormFields.timerFravær}\n                                    validate={(value) => {\n                                        if (validateLessOrEqualTo(toMaybeNumber(values.timerArbeidsdag))(value)) {\n                                            return {\n                                                key: FraværDagFormErrors.timerFravær.fravær_timer_mer_enn_arbeidstimer,\n                                                keepKeyUnaltered: true,\n                                            };\n                                        }\n                                        return getRequiredFieldValidator()(value);\n                                    }}\n                                    label={formLabels.timerFravær}\n                                    maksTid={maksArbeidstidPerDag}\n                                />\n                            </FormBlock>\n                            <FormBlock>\n                                <FraværDagForm.YesOrNoQuestion\n                                    legend={formLabels.hjemmePgaKorona}\n                                    name={FraværDagFormFields.hjemmePgaKorona}\n                                    validate={getYesOrNoValidator()}\n                                    description={\n                                        <ExpandableInfo title={intlHelper(intl, 'info.smittevern.tittel')}>\n                                            <FormattedHtmlMessage id=\"info.smittevern.info.html\" />\n                                        </ExpandableInfo>\n                                    }\n                                />\n                            </FormBlock>\n                            {values.hjemmePgaKorona === YesOrNo.YES && (\n                                <FormBlock>\n                                    <FraværDagForm.RadioPanelGroup\n                                        legend={formLabels.årsak}\n                                        name={FraværDagFormFields.årsak}\n                                        validate={getRequiredFieldValidator()}\n                                        radios={fraværÅrsakRadios}\n                                        description={<ÅrsakInfo />}\n                                    />\n                                </FormBlock>\n                            )}\n                        </FraværDagForm.Form>\n                    );\n                }}\n            />\n        </>\n    );\n};\n\nexport default FraværDagFormView;\n","import React from 'react';\nimport { TypedFormInputValidationProps } from '@navikt/sif-common-formik/lib';\nimport { FraværDagForm, FraværDagFormFields } from './FraværDagForm';\nimport { timeText } from './fraværUtilities';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\ninterface Props extends TypedFormInputValidationProps<any, ValidationError> {\n    name: FraværDagFormFields;\n    label?: string;\n    maksTid?: number;\n}\n\nconst getOptionsList: (maksTid: number) => JSX.Element[] = (maksTid: number) => {\n    const newOptionElement = (t: number): JSX.Element => {\n        return (\n            <option key={t} value={t}>\n                {t.toString(10).replace('.', ',')} {timeText(t.toString(10))}\n            </option>\n        );\n    };\n    const go = (jsxList: JSX.Element[], tid: number): JSX.Element[] => {\n        return tid >= maksTid\n            ? [...jsxList, newOptionElement(tid)]\n            : go([...jsxList, newOptionElement(tid)], tid + 0.5);\n    };\n    return go([], 0.5);\n};\n\nconst FraværTimerSelect = ({ name, validate, label, maksTid }: Props) => {\n    return (\n        <FraværDagForm.Select bredde=\"s\" label={label || 'Antall timer'} name={name} validate={validate}>\n            <option />\n            {getOptionsList(maksTid || 7.5)}\n        </FraværDagForm.Select>\n    );\n};\n\nexport default FraværTimerSelect;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList,\n    ModalFormAndListLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport TidsperiodeForm from './TidsperiodeForm';\nimport TidsperiodeList from './TidsperiodeList';\nimport { DateTidsperiode } from './types';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames, ValidationError> {\n    name: FieldNames;\n    formTitle?: string;\n    minDate?: Date;\n    maxDate?: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction TidsperiodeListAndDialog<FieldNames>({\n    name,\n    minDate,\n    maxDate,\n    validate,\n    labels,\n    formTitle,\n}: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, DateTidsperiode, ValidationError>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                sortFunc={sortItemsByFom}\n                formRenderer={({ onSubmit, onCancel, item, allItems }) => (\n                    <TidsperiodeForm\n                        tidsperiode={item}\n                        alleTidsperioder={allItems}\n                        formLabels={formTitle ? { title: formTitle } : undefined}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => {\n                    return <TidsperiodeList tidsperiode={items} onEdit={onEdit} onDelete={onDelete} />;\n                }}\n            />\n        </>\n    );\n}\n\nexport default TidsperiodeListAndDialog;\n","import { formatDateToApiFormat } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { YesOrNo, getCountryName } from '@navikt/sif-common-formik/lib';\nimport { Virksomhet, VirksomhetApiData } from './types';\nimport { erVirksomhetRegnetSomNyoppstartet, harFiskerNæringstype } from './virksomhetUtils';\n\nexport const mapVirksomhetToVirksomhetApiData = (\n    locale: string,\n    virksomhet: Virksomhet,\n    harFlereVirksomheter?: boolean,\n    harBesvartFiskerPåBladB?: boolean\n): VirksomhetApiData => {\n    const registrertINorge = virksomhet.registrertINorge === YesOrNo.YES;\n    const harRegnskapsfører = virksomhet.harRegnskapsfører === YesOrNo.YES;\n    const erNyoppstartet = erVirksomhetRegnetSomNyoppstartet(virksomhet.fom);\n\n    const data: VirksomhetApiData = {\n        næringstyper: [...virksomhet.næringstyper],\n        navnPåVirksomheten: virksomhet.navnPåVirksomheten,\n        registrertINorge,\n        ...(registrertINorge\n            ? {\n                  organisasjonsnummer: virksomhet.organisasjonsnummer,\n              }\n            : {\n                  registrertIUtlandet: virksomhet.registrertILand\n                      ? {\n                            landkode: virksomhet.registrertILand,\n                            landnavn: getCountryName(virksomhet.registrertILand, locale),\n                        }\n                      : undefined,\n              }),\n        fraOgMed: formatDateToApiFormat(virksomhet.fom),\n        tilOgMed: virksomhet.erPågående || virksomhet.tom === undefined ? null : formatDateToApiFormat(virksomhet.tom),\n        erNyoppstartet,\n        harFlereAktiveVirksomheter: harFlereVirksomheter === true ? true : false,\n    };\n\n    if (harFiskerNæringstype(virksomhet.næringstyper) && harBesvartFiskerPåBladB !== true) {\n        data.fiskerErPåBladB = virksomhet.fiskerErPåBladB === YesOrNo.YES;\n    }\n\n    /** Bedrift regnet som nyoppstartet  */\n    if (erNyoppstartet === true) {\n        data.næringsinntekt = virksomhet.næringsinntekt;\n        const harBlittAktiv = virksomhet.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene === YesOrNo.YES;\n        if (harBlittAktiv && virksomhet.blittYrkesaktivDato) {\n            data.yrkesaktivSisteTreFerdigliknedeÅrene = {\n                oppstartsdato: formatDateToApiFormat(virksomhet.blittYrkesaktivDato),\n            };\n        }\n    }\n\n    /** Bedrift ikke regnet som nyoppstartet  */\n    if (erNyoppstartet === false) {\n        const harHattVarigEndring = virksomhet.hattVarigEndringAvNæringsinntektSiste4Kalenderår === YesOrNo.YES;\n        const {\n            varigEndringINæringsinntekt_dato,\n            varigEndringINæringsinntekt_forklaring,\n            varigEndringINæringsinntekt_inntektEtterEndring,\n        } = virksomhet;\n        if (\n            harHattVarigEndring &&\n            varigEndringINæringsinntekt_dato &&\n            varigEndringINæringsinntekt_inntektEtterEndring !== undefined &&\n            varigEndringINæringsinntekt_forklaring\n        ) {\n            data.varigEndring = {\n                dato: formatDateToApiFormat(varigEndringINæringsinntekt_dato),\n                forklaring: varigEndringINæringsinntekt_forklaring,\n                inntektEtterEndring: varigEndringINæringsinntekt_inntektEtterEndring,\n            };\n        }\n    }\n\n    if (harRegnskapsfører && virksomhet.regnskapsfører_navn && virksomhet.regnskapsfører_telefon) {\n        data.regnskapsfører = {\n            navn: virksomhet.regnskapsfører_navn,\n            telefon: virksomhet.regnskapsfører_telefon,\n        };\n    }\n\n    return data;\n};\n"],"sourceRoot":""}