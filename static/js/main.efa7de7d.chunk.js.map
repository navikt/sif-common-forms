{"version":3,"sources":["dev/components/app-intl-provider/messages.ts","dev/components/app-intl-provider/AppIntlProvider.tsx","dev/components/svg/NAVLogo.tsx","forms/bosted-utland/BostedUtlandForm.tsx","dev/components/page-intro/PageIntro.tsx","forms/bosted-utland/types.ts","forms/bosted-utland/BostedUtlandList.tsx","forms/bosted-utland/BostedUtlandListAndDialog.tsx","dev/components/submit-preview/SubmitPreview.tsx","dev/examples/dialog-forms/BostedUtlandExample.tsx","forms/ferieuttak/FerieuttakForm.tsx","forms/ferieuttak/types.ts","forms/ferieuttak/FerieuttakList.tsx","forms/ferieuttak/FerieuttakListAndDialog.tsx","dev/examples/dialog-forms/FerieuttakExample.tsx","forms/fosterbarn/FosterbarnForm.tsx","forms/fosterbarn/types.ts","forms/fosterbarn/FosterbarnList.tsx","forms/fosterbarn/FosterbarnListAndDialog.tsx","dev/examples/dialog-forms/FosterbarnExample.tsx","forms/utenlandsopphold/types.ts","forms/utenlandsopphold/UtenlandsoppholdForm.tsx","forms/utenlandsopphold/UtenlandsoppholdList.tsx","forms/utenlandsopphold/UtenlandsoppholdListAndDialog.tsx","dev/examples/dialog-forms/UtenlandsoppholdExample.tsx","forms/frilans/types.ts","dev/examples/dialog-forms/DialogForms.tsx","forms/frilans/FrilansoppdragForm.tsx","forms/frilans/FrilansoppdragList.tsx","forms/frilans/FrilansoppdragListAndDialog.tsx","dev/examples/frilans-example/FrilansExample.tsx","forms/frilans/mapFrilansOppdragToApiData.ts","forms/virksomhet/types.ts","forms/virksomhet/virksomhetUtils.ts","forms/virksomhet/mapVirksomhetToApiData.ts","forms/virksomhet/i18n/virksomhetForm.texts.tsx","forms/virksomhet/parts/InfoTilFisker.tsx","forms/virksomhet/VirksomhetForm.tsx","forms/virksomhet/VirksomhetList.tsx","forms/virksomhet/VirksomhetListAndDialog.tsx","dev/examples/virksomhet-example/VirksomhetExample.tsx","dev/Intro.tsx","dev/config/routeConfig.tsx","dev/components/header-menu/HeaderMenu.tsx","dev/components/left-menu/LeftMenu.tsx","dev/DevContent.tsx","dev/DevPage.tsx","App.tsx","index.tsx"],"names":["commonNb","require","commonNn","validationNb","validationNn","ferieMessagesNb","ferieMessagesNn","utenlandsoppholdNb","utenlandsoppholdNn","bostedUtlandNb","bostedUtlandNn","appMessages","nb","nn","AppIntlProvider","locale","onError","children","messages","NAVLogo","BostedUtlandFormFields","props","className","width","viewBox","fill","fillRule","d","PageIntro","title","padBottom","margin","tag","Form","getTypedFormComponents","BostedUtlandForm","maxDate","minDate","bosted","onSubmit","onCancel","intl","useIntl","FormikWrapper","initialValues","formValues","fom","landkode","tom","undefined","isValidBostedUtland","Error","renderForm","formik","values","fomDateLimits","minDato","maksDato","tomDateLimits","fieldErrorRenderer","error","commonFieldErrorRenderer","id","DateIntervalPicker","legend","intlHelper","fromDatepickerProps","name","label","fullscreenOverlay","dateLimitations","validate","date","dateRangeValidation","validateFromDate","toDatepickerProps","validateToDate","CountrySelect","validateRequiredSelect","bem","bemUtils","BostedUtlandList","bosteder","onDelete","onEdit","getItemId","opphold","getItemTitle","getCountryName","labelRenderer","navn","element","onClick","prettifyDateExtended","items","BostedUtlandListAndDialog","labels","dialogWidth","sortFunc","sortItemsByFom","formRenderer","item","listRenderer","SubmitPreview","FormField","style","borderTop","paddingTop","padding","fontSize","JSON","stringify","FerieuttakFormFields","FormikExample","useState","singleFormValues","setSingleFormValues","listFormValues","setListFormValues","border","includeButtons","submitButtonLabel","date1YearAgo","date1YearFromNow","validateRequiredList","addLabel","listTitle","modalTitle","emptyListText","console","log","defaultLabels","fromDate","toDate","intervalTitle","okButton","cancelButton","FerieuttakForm","ferieuttak","formLabels","onChange","setTimeout","validateField","FerieuttakList","getDateTitleString","uttak","filter","FerieuttakListAndDialog","FosterbarnFormField","ferie","defaultText","form_etternavn_label","form_fornavn_label","form_fødselsnummer_label","FosterbarnForm","fosterbarn","fornavn","etternavn","fødselsnummer","text","includeName","txt","hasValue","isFosterbarn","Input","validateFødselsnummer","inputMode","maxLength","columns","validateRequiredField","FosterbarnList","getBarnTitleString","barn","paddingRight","formatName","liste_legg_til_knapp","liste_tittel","modal_tittel","FosterbarnListAndDialog","texts","info","liste_tom_liste_tekst","UtenlandsoppholdÅrsak","FosterbarnExample","UtenlandsoppholdFormFields","defaultFormValues","erBarnetInnlagt","YesOrNo","UNANSWERED","årsak","UtenlandsoppholdForm","utenlandsopphold","countryIsMemberOfEøsOrEfta","showInnlagtQuestion","fromDateLimitations","toDateLimitations","YesOrNoQuestion","land","validateYesOrNoIsAnswered","YES","RadioPanelGroup","radios","value","INNLAGT_DEKKET_NORGE","INNLAGT_DEKKET_ANNET_LAND","ANNET","UtenlandsoppholdList","UtenlandsoppholdListAndDialog","FrilansoppdragFormField","UtenlandsoppholdExample","tabRoutes","path","renderContent","BostedUtlandExample","FerieuttakExample","DialogForms","setPath","activeRoute","find","r","evt","idx","tabs","map","active","isFrilansoppdrag","oppdrag","arbeidsgiverNavn","erPågående","FrilansoppdragForm","setFieldValue","includeValidationSummary","showYearSelector","disabled","Checkbox","afterOnChange","checked","FrilansoppdragList","o","FrilansoppdragListAndDialog","mapFrilansOppdragToApiData","frilansoppdrag","arbeidsgivernavn","fra_og_med","formatDateToApiFormat","til_og_med","er_pagaende","Næringstype","VirksomhetFormField","FrilansExample","harFiskerNæringstype","næringstyper","n","FISKER","mapVirksomhetToVirksomhetApiData","virksomhet","harBesvartFikserPåBladB","registrertINorge","harRegnskapsfører","data","navnPåVirksomheten","organisasjonsnummer","registrertILand","kode","fraOgMed","tilOgMed","næringsinntekt","hattVarigEndringAvNæringsinntektSiste4Kalenderår","harHatt","varigEndringINæringsinntekt_dato","varigEndringINæringsinntekt_forklaring","varigEndringINæringsinntekt_inntektEtterEndring","varigEndring","dato","forklaring","inntektEtterEndring","fiskerErPåBladB","harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene","oppstartsdato","yrkesaktivSisteTreFerdigliknedeÅrene","regnskapsfører","regnskapsfører_navn","telefon","regnskapsfører_telefon","harRevisor","revisor","revisor_navn","revisor_telefon","kanInnhenteOpplysninger","kanInnhenteOpplsyningerFraRevisor","VirksomhetTextNB","næringstype_fisker","næringstype_jordbruker","næringstype_dagmamma","næringstype_annet","form_title","hvilken_type_virksomhet","hva_heter_virksomheten","fisker_blad_b","veielder_fisker","registert_i_norge","registert_i_hvilket_land","startdato","kalender_fom","kalender_tom","kalender_pågående","næringsinntekt_info","har_blitt_yrkesaktiv","har_blitt_yrkesaktiv_dato","varig_endring_spm","varig_endring_dato","varig_endring_inntekt","varig_endring_tekst","regnskapsfører_spm","revisor_spm","revisor_fullmakt","veileder_innhenter_info_html","InfoTilFisker","navnPåVirksomhet","ensureValidNæringsinntekt","moment","isAfter","date4YearsAgo","visNæringsinntekt","VirksomhetForm","hideFormFields","hideFiskerPåBladB","CheckboxPanelGroup","checkboxes","JORDBRUK","DAGMAMMA","ANNEN","NO","maxWidth","validateOrgNumber","dateToday","type","max","validateRequiredNumber","min","DatePicker","date3YearsAgo","Textarea","VirksomhetList","virksomheter","næring","VirksomhetListAndDialog","onAfterChange","Date","VirksomhetExample","hideFisker","setHideFisker","currentTarget","Intro","routes","isActiveRoute","pathname","indexOf","renderMenuItem","route","key","data-page","HeaderMenu","history","useHistory","location","onSelection","push","lenkeBem","LeftMenu","to","classNames","block","modifierConditional","DevContent","routeConfig","f","getRouteConfig","minWidth","DevPage","onChangeLocale","toggle","localeFromSessionStorage","getLocaleFromSessionStorage","App","React","setLocale","l","setLocaleInSessionStorage","Modal","setAppElement","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.efa7de7d.chunk.js","sourcesContent":["const commonNb = require('@navikt/sif-common-core/lib/i18n/common.nb.json');\nconst commonNn = require('@navikt/sif-common-core/lib/i18n/common.nn.json');\nconst validationNb = require('@navikt/sif-common-core/lib/i18n/validationErrors.nb.json');\nconst validationNn = require('@navikt/sif-common-core/lib/i18n/validationErrors.nn.json');\n\nconst ferieMessagesNb = require('../../../forms/ferieuttak/ferieuttak.nb.json');\nconst ferieMessagesNn = require('../../../forms/ferieuttak/ferieuttak.nn.json');\nconst utenlandsoppholdNb = require('../../../forms/utenlandsopphold/utenlandsopphold.nb.json');\nconst utenlandsoppholdNn = require('../../../forms/utenlandsopphold/utenlandsopphold.nn.json');\nconst bostedUtlandNb = require('../../../forms/bosted-utland/bostedUtland.nb.json');\nconst bostedUtlandNn = require('../../../forms/bosted-utland/bostedUtland.nn.json');\n\nconst bokmålstekster = {\n    ...ferieMessagesNb,\n    ...utenlandsoppholdNb,\n    ...bostedUtlandNb,\n    ...commonNb,\n    ...validationNb\n};\nconst nynorsktekster = {\n    ...ferieMessagesNn,\n    ...utenlandsoppholdNn,\n    ...bostedUtlandNn,\n    ...commonNn,\n    ...validationNn\n};\n\nexport const appMessages = {\n    nb: bokmålstekster,\n    nn: nynorsktekster\n};\n","import * as React from 'react';\nimport { IntlProvider } from 'react-intl';\nimport '@formatjs/intl-pluralrules/dist/locale-data/en';\nimport '@formatjs/intl-pluralrules/dist/locale-data/nb';\nimport '@formatjs/intl-pluralrules/dist/locale-data/nn';\nimport '@formatjs/intl-pluralrules/polyfill';\nimport { Locale } from '@navikt/sif-common-core/lib/types/Locale';\nimport { appMessages } from './messages';\n\nexport interface IntlProviderProps {\n    locale: Locale;\n}\nexport interface IntlProviderProps {\n    locale: Locale;\n    onError?: (error: any) => void;\n}\n\nconst AppIntlProvider: React.FunctionComponent<IntlProviderProps> = ({ locale, onError, children }) => {\n    const messages = locale === 'nb' ? appMessages.nb : appMessages.nn;\n    return (\n        <IntlProvider locale={locale} messages={messages} onError={onError}>\n            {children}\n        </IntlProvider>\n    );\n};\n\nexport default AppIntlProvider;\n","import React from 'react';\n\nfunction NAVLogo(props) {\n    return (\n        <svg className=\"prefix__navLogo\" width={90} viewBox=\"0 0 269 169\" {...props}>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <path\n                    fill=\"#C30000\"\n                    d=\"M125.31 168.942c-46.642 0-84.46-37.817-84.46-84.465C40.85 37.824 78.667 0 125.31 0c46.657 0 84.48 37.824 84.48 84.477 0 46.648-37.823 84.465-84.48 84.465zM0 121.359l17.265-42.73h16.589l-17.243 42.73zm213.044 0l17.044-42.73h9.044l-17.043 42.73zM246.564 121.359l17.04-42.73h4.803l-17.043 42.731z\"\n                />\n                <path\n                    fill=\"#FEFEFE\"\n                    d=\"M197.36 78.63h-15.016s-1.035 0-1.4.914l-8.31 25.439-8.304-25.44c-.366-.913-1.407-.913-1.407-.913h-28.872c-.625 0-1.149.522-1.149 1.143v8.639c0-6.853-7.292-9.782-11.562-9.782-9.562 0-15.963 6.298-17.956 15.873-.108-6.352-.636-8.628-2.347-10.96-.786-1.141-1.922-2.101-3.159-2.895-2.547-1.492-4.834-2.018-9.749-2.018h-5.77s-1.044 0-1.412.914l-5.25 13.013V79.773c0-.621-.52-1.143-1.145-1.143H61.198s-1.03 0-1.406.914l-5.459 13.53s-.545 1.354.701 1.354h5.133v25.784c0 .64.504 1.147 1.147 1.147h13.238c.624 0 1.144-.507 1.144-1.147V94.428h5.16c2.961 0 3.588.08 4.74.618.694.262 1.32.792 1.66 1.403.698 1.314.873 2.892.873 7.545v16.218c0 .64.514 1.147 1.15 1.147h12.687s1.434 0 2.001-1.416l2.812-6.95c3.74 5.237 9.893 8.366 17.541 8.366h1.671s1.443 0 2.014-1.416l4.897-12.128v12.397c0 .64.524 1.147 1.15 1.147h12.951s1.43 0 2.003-1.416c0 0 5.18-12.861 5.2-12.958h.008c.2-1.07-1.153-1.07-1.153-1.07h-4.623V83.847l14.545 36.096c.568 1.416 2 1.416 2 1.416h15.301s1.44 0 2.008-1.416l16.125-39.93c.558-1.383-1.057-1.383-1.057-1.383zm-64.458 27.285h-8.7c-3.463 0-6.28-2.804-6.28-6.271 0-3.461 2.817-6.283 6.28-6.283h2.433c3.454 0 6.267 2.822 6.267 6.283v6.27z\"\n                />\n            </g>\n        </svg>\n    );\n}\n\nexport default NAVLogo;\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport {\n    commonFieldErrorRenderer\n} from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport dateRangeValidation from '@navikt/sif-common-core/lib/validation/dateRangeValidation';\nimport { validateRequiredSelect } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { BostedUtland, isValidBostedUtland } from './types';\n\nexport interface BostedUtlandFormLabels {\n    tittel: string;\n}\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    bosted?: BostedUtland;\n    onSubmit: (values: BostedUtland) => void;\n    onCancel: () => void;\n}\n\nenum BostedUtlandFormFields {\n    fom = 'fom',\n    tom = 'tom',\n    landkode = 'landkode'\n}\n\ntype FormValues = Partial<BostedUtland>;\n\nconst Form = getTypedFormComponents<BostedUtlandFormFields, FormValues>();\n\nconst BostedUtlandForm: React.FunctionComponent<Props> = ({ maxDate, minDate, bosted, onSubmit, onCancel }) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: Partial<BostedUtland>) => {\n        if (isValidBostedUtland(formValues)) {\n            onSubmit(formValues);\n        } else {\n            throw new Error('BostedUtlandForm: Formvalues is not a valid BostedUtland on submit.');\n        }\n    };\n\n    return (\n        <Form.FormikWrapper\n            initialValues={bosted || {}}\n            onSubmit={onFormikSubmit}\n            renderForm={(formik) => {\n                const { values } = formik;\n\n                const fomDateLimits = {\n                    minDato: minDate,\n                    maksDato: values.tom || maxDate\n                };\n                const tomDateLimits = {\n                    minDato: values.fom || minDate,\n                    maksDato: maxDate\n                };\n                return (\n                    <Form.Form\n                        onCancel={onCancel}\n                        fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                        <Systemtittel tag=\"h1\">\n                            <FormattedMessage id=\"bostedUtland.form.tittel\" />\n                        </Systemtittel>\n\n                        <FormBlock>\n                            <Form.DateIntervalPicker\n                                legend={intlHelper(intl, 'bostedUtland.form.tidsperiode.spm')}\n                                fromDatepickerProps={{\n                                    name: BostedUtlandFormFields.fom,\n                                    label: intlHelper(intl, 'bostedUtland.form.tidsperiode.fraDato'),\n                                    fullscreenOverlay: true,\n                                    dateLimitations: fomDateLimits,\n                                    validate: (date: Date) =>\n                                        dateRangeValidation.validateFromDate(\n                                            date,\n                                            fomDateLimits.minDato,\n                                            fomDateLimits.maksDato,\n                                            values.tom\n                                        )\n                                }}\n                                toDatepickerProps={{\n                                    name: BostedUtlandFormFields.tom,\n                                    label: intlHelper(intl, 'bostedUtland.form.tidsperiode.tilDato'),\n                                    fullscreenOverlay: true,\n                                    dateLimitations: tomDateLimits,\n                                    validate: (date: Date) =>\n                                        dateRangeValidation.validateToDate(\n                                            date,\n                                            tomDateLimits.minDato,\n                                            tomDateLimits.maksDato,\n                                            values.fom\n                                        )\n                                }}\n                            />\n                        </FormBlock>\n                        <FormBlock>\n                            <Form.CountrySelect\n                                name={BostedUtlandFormFields.landkode}\n                                label={intlHelper(intl, 'bostedUtland.form.land.spm')}\n                                validate={validateRequiredSelect}\n                            />\n                        </FormBlock>\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default BostedUtlandForm;\n","import React from 'react';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { Ingress, Undertittel } from 'nav-frontend-typografi';\n\ninterface Props {\n    title: string;\n}\n\nconst PageIntro: React.FunctionComponent<Props> = ({ title, children }) => (\n    <>\n        <Box padBottom=\"xl\" margin=\"m\">\n            <Box padBottom={children ? 'm' : 'none'}>\n                <Undertittel>{title}</Undertittel>\n            </Box>\n            {children && <Ingress tag=\"div\">{children}</Ingress>}\n        </Box>\n    </>\n);\n\nexport default PageIntro;\n","export interface BostedUtland {\n    id?: string;\n    fom: Date;\n    tom: Date;\n    landkode: string;\n}\n\nexport const isValidBostedUtland = (bosted: Partial<BostedUtland>): bosted is BostedUtland => {\n    const { fom, landkode, tom } = bosted;\n    return fom !== undefined && landkode !== undefined && tom !== undefined;\n};\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { getCountryName } from '@navikt/sif-common-formik';\nimport { BostedUtland } from './types';\nimport './bostedUtlandList.less';\n\ninterface Props {\n    bosteder: BostedUtland[];\n    onEdit?: (opphold: BostedUtland) => void;\n    onDelete?: (opphold: BostedUtland) => void;\n}\n\nconst bem = bemUtils('bostedUtlandList');\n\nconst BostedUtlandList: React.FunctionComponent<Props> = ({ bosteder, onDelete, onEdit }) => {\n    const intl = useIntl();\n    const renderBostedUtlandLabel = (opphold: BostedUtland): React.ReactNode => {\n        const navn = getCountryName(opphold.landkode, intl.locale);\n        return (\n            <div className={bem.element('label')}>\n                <span className={bem.element('land')}>\n                    {onEdit && <ActionLink onClick={() => onEdit(opphold)}>{navn}</ActionLink>}\n                    {!onEdit && <span>{navn}</span>}\n                </span>\n                <span className={bem.element('dato')}>\n                    {prettifyDateExtended(opphold.fom)} - {prettifyDateExtended(opphold.tom)}\n                </span>\n            </div>\n        );\n    };\n\n    return (\n        <ItemList<BostedUtland>\n            getItemId={(opphold) => opphold.id}\n            getItemTitle={(opphold) => getCountryName(opphold.landkode, intl.locale)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderBostedUtlandLabel}\n            items={bosteder}\n        />\n    );\n};\n\nexport default BostedUtlandList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList, FormikValidateFunction, ModalFormAndListLabels\n} from '@navikt/sif-common-formik';\nimport BostedUtlandForm from './BostedUtlandForm';\nimport BostedUtlandListe from './BostedUtlandList';\nimport { BostedUtland } from './types';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    validate?: FormikValidateFunction;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction BostedUtlandListAndDialog<FieldNames>({ name, minDate, maxDate, validate, labels }: Props<FieldNames>) {\n    return (\n        <FormikModalFormAndList<FieldNames, BostedUtland>\n            name={name}\n            labels={labels}\n            validate={validate}\n            dialogWidth=\"narrow\"\n            sortFunc={sortItemsByFom}\n            formRenderer={({ onSubmit, onCancel, item }) => (\n                <BostedUtlandForm\n                    bosted={item}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    onSubmit={onSubmit}\n                    onCancel={onCancel}\n                />\n            )}\n            listRenderer={({ items, onEdit, onDelete }) => (\n                <BostedUtlandListe bosteder={items} onEdit={onEdit} onDelete={onDelete} />\n            )}\n        />\n    );\n}\n\nexport default BostedUtlandListAndDialog;\n","import React from 'react';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { Panel } from 'nav-frontend-paneler';\n\ninterface Props {\n    values?: {};\n}\n\nfunction SubmitPreview<FormValues>({ values }: Props) {\n    return (\n        <Box margin=\"xl\">\n            <div style={{ borderTop: '1px dashed #59514B', paddingTop: '1rem', margin: '0 -1rem' }}>\n                <Box margin=\"m\">\n                    {values && (\n                        <Panel style={{ padding: '1rem' }}>\n                            <pre style={{ margin: 0, fontSize: '.8rem' }}>{JSON.stringify(values, null, 2)}</pre>\n                        </Panel>\n                    )}\n                    {values === undefined && <Panel style={{ padding: '1rem' }}>Ingen data</Panel>}\n                </Box>\n            </div>\n        </Box>\n    );\n}\n\nexport default SubmitPreview;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport {\n    commonFieldErrorRenderer\n} from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { date1YearAgo, date1YearFromNow } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { validateRequiredList } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport { Panel } from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport BostedUtlandForm from '../../../forms/bosted-utland/BostedUtlandForm';\nimport BostedUtlandListAndDialog from '../../../forms/bosted-utland/BostedUtlandListAndDialog';\nimport { BostedUtland } from '../../../forms/bosted-utland/types';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\n\ninterface Props {}\n\nenum FormField {\n    'bosted' = 'bosted'\n}\n\ninterface FormValues {\n    [FormField.bosted]: BostedUtland[];\n}\nconst initialValues: FormValues = { bosted: [] };\n\nconst FormikExample: React.FunctionComponent<Props> = (props) => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<BostedUtland> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                                <BostedUtlandListAndDialog<FormField>\n                                    name={FormField.bosted}\n                                    minDate={date1YearAgo}\n                                    maxDate={date1YearFromNow}\n                                    validate={validateRequiredList}\n                                    labels={{\n                                        addLabel: 'Legg til bosted',\n                                        listTitle: 'Registrerte bosteder',\n                                        modalTitle: 'Bosted',\n                                        emptyListText: 'Ingen bosteder er lagt til'\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <BostedUtlandForm\n                        minDate={date1YearAgo}\n                        maxDate={date1YearFromNow}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                    />\n                </Panel>\n                <SubmitPreview values={singleFormValues} />\n            </DialogFormWrapper>\n        </>\n    );\n};\n\nexport default FormikExample;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport {\n    commonFieldErrorRenderer\n} from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport dateRangeValidation from '@navikt/sif-common-core/lib/validation/dateRangeValidation';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { Ferieuttak, isFerieuttak } from './types';\n\nexport interface FerieuttakFormLabels {\n    title: string;\n    fromDate: string;\n    toDate: string;\n    intervalTitle: string;\n    okButton: string;\n    cancelButton: string;\n}\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    ferieuttak?: Partial<Ferieuttak>;\n    labels?: Partial<FerieuttakFormLabels>;\n    onSubmit: (values: Ferieuttak) => void;\n    onCancel: () => void;\n}\n\nconst defaultLabels: FerieuttakFormLabels = {\n    title: 'Registrer uttak av ferie',\n    fromDate: 'Fra og med',\n    toDate: 'Til og med',\n    intervalTitle: 'Velg tidsrom',\n    okButton: 'Ok',\n    cancelButton: 'Avbryt'\n};\n\nenum FerieuttakFormFields {\n    tom = 'tom',\n    fom = 'fom'\n}\n\ntype FormValues = Partial<Ferieuttak>;\n\nconst Form = getTypedFormComponents<FerieuttakFormFields, FormValues>();\n\nconst FerieuttakForm: React.FunctionComponent<Props> = ({\n    maxDate,\n    minDate,\n    labels,\n    ferieuttak: initialValues = { fom: undefined, tom: undefined },\n    onSubmit,\n    onCancel\n}) => {\n    const intl = useIntl();\n    const onFormikSubmit = (formValues: FormValues) => {\n        if (isFerieuttak(formValues)) {\n            onSubmit(formValues);\n        } else {\n            throw new Error('FerieuttakForm: Formvalues is not a valid Ferieuttak on submit.');\n        }\n    };\n\n    const formLabels: FerieuttakFormLabels = { ...defaultLabels, ...labels };\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={initialValues}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => (\n                    <Form.Form\n                        onCancel={onCancel}\n                        fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                        <Systemtittel tag=\"h1\">{formLabels.title}</Systemtittel>\n                        <FormBlock>\n                            <Form.DateIntervalPicker\n                                legend={formLabels.intervalTitle}\n                                fromDatepickerProps={{\n                                    label: formLabels.fromDate,\n                                    name: FerieuttakFormFields.fom,\n                                    fullscreenOverlay: true,\n                                    dateLimitations: {\n                                        minDato: minDate,\n                                        maksDato: maxDate || formik.values.tom\n                                    },\n                                    validate: (date: Date) =>\n                                        dateRangeValidation.validateFromDate(date, minDate, maxDate, formik.values.tom),\n                                    onChange: () => {\n                                        setTimeout(() => {\n                                            formik.validateField(FerieuttakFormFields.tom);\n                                        });\n                                    }\n                                }}\n                                toDatepickerProps={{\n                                    label: formLabels.toDate,\n                                    name: FerieuttakFormFields.tom,\n                                    fullscreenOverlay: true,\n                                    dateLimitations: {\n                                        minDato: minDate || formik.values.fom,\n                                        maksDato: maxDate\n                                    },\n                                    validate: (date: Date) =>\n                                        dateRangeValidation.validateToDate(date, minDate, maxDate, formik.values.fom),\n                                    onChange: () => {\n                                        setTimeout(() => {\n                                            formik.validateField(FerieuttakFormFields.fom);\n                                        });\n                                    }\n                                }}\n                            />\n                        </FormBlock>\n                    </Form.Form>\n                )}\n            />\n        </>\n    );\n};\n\nexport default FerieuttakForm;\n","export interface Ferieuttak {\n    id?: string;\n    fom: Date;\n    tom: Date;\n}\n\nexport const isFerieuttak = (ferieuttak: Partial<Ferieuttak>): ferieuttak is Ferieuttak => {\n    return ferieuttak.fom !== undefined && ferieuttak.tom !== undefined;\n};\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { Ferieuttak } from './types';\n\ninterface Props {\n    ferieuttak: Ferieuttak[];\n    onEdit?: (opphold: Ferieuttak) => void;\n    onDelete?: (opphold: Ferieuttak) => void;\n}\n\nconst FerieuttakList: React.FunctionComponent<Props> = ({ ferieuttak = [], onDelete, onEdit }) => {\n    const getDateTitleString = (uttak: Ferieuttak) =>\n        `${prettifyDateExtended(uttak.fom)} - ${prettifyDateExtended(uttak.tom)}`;\n\n    const renderFerieuttakLabel = (uttak: Ferieuttak): React.ReactNode => {\n        const title = getDateTitleString(uttak);\n        return (\n            <>\n                {onEdit && <ActionLink onClick={() => onEdit(uttak)}>{title}</ActionLink>}\n                {!onEdit && <span>{title}</span>}\n            </>\n        );\n    };\n\n    return (\n        <ItemList<Ferieuttak>\n            getItemId={(uttak) => uttak.id}\n            getItemTitle={(uttak) => getDateTitleString(uttak)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderFerieuttakLabel}\n            items={ferieuttak.filter((uttak) => uttak.id !== undefined)}\n        />\n    );\n};\n\nexport default FerieuttakList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList, FormikValidateFunction, ModalFormAndListLabels\n} from '@navikt/sif-common-formik';\nimport FerieuttakForm from './FerieuttakForm';\nimport FerieuttakList from './FerieuttakList';\nimport { Ferieuttak } from './types';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    validate?: FormikValidateFunction;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction FerieuttakListAndDialog<FieldNames>({ name, minDate, maxDate, validate, labels }: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, Ferieuttak>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                sortFunc={sortItemsByFom}\n                formRenderer={({ onSubmit, onCancel, item }) => (\n                    <FerieuttakForm\n                        ferieuttak={item}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FerieuttakList ferieuttak={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FerieuttakListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport {\n    commonFieldErrorRenderer\n} from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { date1YearAgo, date1YearFromNow } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { validateRequiredList } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport { Panel } from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport FerieuttakForm from '../../../forms/ferieuttak/FerieuttakForm';\nimport FerieuttakListAndDialog from '../../../forms/ferieuttak/FerieuttakListAndDialog';\nimport { Ferieuttak } from '../../../forms/ferieuttak/types';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\n\ninterface Props {}\n\nenum FormField {\n    'ferie' = 'ferie'\n}\n\ninterface FormValues {\n    [FormField.ferie]: Ferieuttak[];\n}\nconst initialValues: FormValues = { ferie: [] };\n\nconst FormikExample: React.FunctionComponent<Props> = (props) => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<Ferieuttak> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={(formik) => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                                <FerieuttakListAndDialog<FormField>\n                                    name={FormField.ferie}\n                                    minDate={date1YearAgo}\n                                    maxDate={date1YearFromNow}\n                                    validate={validateRequiredList}\n                                    labels={{\n                                        addLabel: 'Legg til ferie',\n                                        listTitle: 'Registrerte ferier',\n                                        modalTitle: 'Ferie',\n                                        emptyListText: 'Ingen ferier er lagt til'\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <FerieuttakForm\n                        minDate={date1YearAgo}\n                        maxDate={date1YearFromNow}\n                        ferieuttak={{}}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                    />\n                </Panel>\n                <SubmitPreview values={singleFormValues} />\n            </DialogFormWrapper>\n        </>\n    );\n};\n\nexport default FormikExample;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport Tiles from '@navikt/sif-common-core/lib/components/tiles/Tiles';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { validateFødselsnummer, validateRequiredField } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { Fosterbarn, isFosterbarn } from './types';\n\ninterface Props {\n    fosterbarn?: Partial<Fosterbarn>;\n    onSubmit: (values: Fosterbarn) => void;\n    onCancel: () => void;\n    includeName?: boolean;\n    text?: FosterbarnFormText;\n}\n\nenum FosterbarnFormField {\n    fødselsnummer = 'fødselsnummer',\n    fornavn = 'fornavn',\n    etternavn = 'etternavn'\n}\n\ntype FormValues = Partial<Fosterbarn>;\n\nconst Form = getTypedFormComponents<FosterbarnFormField, FormValues>();\n\nconst FosterbarnForm: React.FunctionComponent<Props> = ({\n    fosterbarn: initialValues = { fornavn: '', etternavn: '', fødselsnummer: '' },\n    text,\n    includeName,\n    onSubmit,\n    onCancel\n}) => {\n    const intl = useIntl();\n    const onFormikSubmit = (formValues: FormValues) => {\n        if (isFosterbarn(formValues, includeName)) {\n            onSubmit(formValues);\n        } else {\n            throw new Error('Fosterbarn skjema: Formvalues is not a valid Fosterbarn on submit.');\n        }\n    };\n\n    const txt = { ...defaultText, ...text };\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={initialValues}\n                onSubmit={onFormikSubmit}\n                renderForm={() => (\n                    <Form.Form\n                        onCancel={onCancel}\n                        fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                        <Systemtittel tag=\"h1\">Fosterbarn</Systemtittel>\n                        <FormBlock>\n                            <Form.Input\n                                name={FosterbarnFormField.fødselsnummer}\n                                label={txt.form_fødselsnummer_label}\n                                validate={validateFødselsnummer}\n                                inputMode=\"numeric\"\n                                maxLength={11}\n                                style={{ width: '11rem' }}\n                            />\n                        </FormBlock>\n                        {includeName && (\n                            <Tiles columns={2}>\n                                <FormBlock>\n                                    <Form.Input\n                                        name={FosterbarnFormField.fornavn}\n                                        label={txt.form_fornavn_label}\n                                        validate={validateRequiredField}\n                                    />\n                                </FormBlock>\n                                <FormBlock>\n                                    <Form.Input\n                                        name={FosterbarnFormField.etternavn}\n                                        label={txt.form_etternavn_label}\n                                        validate={validateRequiredField}\n                                    />\n                                </FormBlock>\n                            </Tiles>\n                        )}\n                    </Form.Form>\n                )}\n            />\n        </>\n    );\n};\n\ninterface FosterbarnFormText {\n    form_fødselsnummer_label: string;\n    form_fornavn_label: string;\n    form_etternavn_label: string;\n}\n\nconst defaultText: FosterbarnFormText = {\n    form_etternavn_label: 'Etternavn',\n    form_fornavn_label: 'Fornavn',\n    form_fødselsnummer_label: 'Fødselsnummer'\n};\n\nexport default FosterbarnForm;\n","import { hasValue } from '@navikt/sif-common-core/lib/validation/hasValue';\n\nexport interface Fosterbarn {\n    id?: string;\n    fødselsnummer: string;\n    fornavn?: string;\n    etternavn?: string;\n}\n\nexport const isFosterbarn = (fosterbarn: Partial<Fosterbarn>, includeName?: boolean): fosterbarn is Fosterbarn => {\n    const { fornavn, etternavn, fødselsnummer } = fosterbarn;\n    if (includeName) {\n        return hasValue(fornavn) && hasValue(etternavn) && hasValue(fødselsnummer);\n    }\n    return hasValue(fødselsnummer);\n};\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { formatName } from '@navikt/sif-common-core/lib/utils/personUtils';\nimport { Fosterbarn } from './types';\n\ninterface Props {\n    fosterbarn: Fosterbarn[];\n    onEdit?: (opphold: Fosterbarn) => void;\n    onDelete?: (opphold: Fosterbarn) => void;\n}\n\nconst FosterbarnList: React.FunctionComponent<Props> = ({ fosterbarn = [], onDelete, onEdit }) => {\n    const getBarnTitleString = (barn: Fosterbarn) => {\n        return (\n            <>\n                <span style={{ paddingRight: '1rem' }}>{barn.fødselsnummer}</span>{' '}\n                {barn.fornavn && barn.etternavn && <span>{formatName(barn.fornavn, barn.etternavn)}</span>}\n            </>\n        );\n    };\n    const renderFosterbarnLabel = (barn: Fosterbarn): React.ReactNode => {\n        return (\n            <>\n                {onEdit && <ActionLink onClick={() => onEdit(barn)}>{getBarnTitleString(barn)}</ActionLink>}\n                {!onEdit && <span>{getBarnTitleString(barn)}</span>}\n            </>\n        );\n    };\n\n    return (\n        <ItemList<Fosterbarn>\n            getItemId={(barn) => barn.id}\n            getItemTitle={(barn) =>\n                barn.fornavn && barn.etternavn ? formatName(barn.fornavn, barn.etternavn) : barn.fødselsnummer\n            }\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderFosterbarnLabel}\n            items={fosterbarn.filter((barn) => barn.id !== undefined)}\n        />\n    );\n};\n\nexport default FosterbarnList;\n","import React from 'react';\nimport { FormikModalFormAndList, FormikValidateFunction } from '@navikt/sif-common-formik';\nimport FosterbarnForm from './FosterbarnForm';\nimport FosterbarnList from './FosterbarnList';\nimport { Fosterbarn } from './types';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    validate?: FormikValidateFunction;\n    texts?: FosterbarnListAndDialogText;\n    info?: string;\n    includeName?: boolean;\n}\n\nfunction FosterbarnListAndDialog<FieldNames>({ name, validate, texts, info, includeName }: Props<FieldNames>) {\n    const txt = { ...defaultText, ...texts };\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, Fosterbarn>\n                name={name}\n                labels={{\n                    addLabel: txt.liste_legg_til_knapp,\n                    modalTitle: txt.modal_tittel,\n                    emptyListText: txt.liste_tom_liste_tekst,\n                    listTitle: txt.liste_tittel,\n                    info\n                }}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                formRenderer={({ onSubmit, onCancel, item }) => (\n                    <FosterbarnForm\n                        fosterbarn={item}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                        includeName={includeName}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FosterbarnList fosterbarn={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport interface FosterbarnListAndDialogText {\n    liste_legg_til_knapp: string;\n    liste_tittel?: string;\n    liste_tom_liste_tekst?: string;\n    modal_tittel: string;\n}\n\nexport const defaultText: FosterbarnListAndDialogText = {\n    liste_legg_til_knapp: 'Legg til fosterbarn',\n    liste_tittel: 'Registrerte fosterbarn',\n    modal_tittel: 'Fosterbarn'\n};\n\nexport default FosterbarnListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport {\n    commonFieldErrorRenderer\n} from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { validateRequiredList } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport { Panel } from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { Fosterbarn } from '../../../forms/fosterbarn';\nimport FosterbarnForm from '../../../forms/fosterbarn/FosterbarnForm';\nimport FosterbarnListAndDialog from '../../../forms/fosterbarn/FosterbarnListAndDialog';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\n\ninterface Props {}\n\nenum FormField {\n    'fosterbarn' = 'fosterbarn'\n}\n\ninterface FormValues {\n    [FormField.fosterbarn]: Fosterbarn[];\n}\nconst initialValues: FormValues = { fosterbarn: [] };\n\nconst FosterbarnExample: React.FunctionComponent<Props> = (props) => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<Fosterbarn> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={(formik) => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                                <FosterbarnListAndDialog<FormField>\n                                    name={FormField.fosterbarn}\n                                    validate={validateRequiredList}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <FosterbarnForm\n                        fosterbarn={{}}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                    />\n                </Panel>\n                <SubmitPreview values={singleFormValues} />\n            </DialogFormWrapper>\n        </>\n    );\n};\n\nexport default FosterbarnExample;\n","import { YesOrNo } from '@navikt/sif-common-formik/lib';\n\nexport enum UtenlandsoppholdÅrsak {\n    'INNLAGT_DEKKET_NORGE' = 'BARNET_INNLAGT_I_HELSEINSTITUSJON_FOR_NORSK_OFFENTLIG_REGNING',\n    'INNLAGT_DEKKET_ANNET_LAND' = 'BARNET_INNLAGT_I_HELSEINSTITUSJON_DEKKET_ETTER_AVTALE_MED_ET_ANNET_LAND_OM_TRYGD',\n    'ANNET' = 'ANNET'\n}\n\nexport interface Utenlandsopphold {\n    id?: string;\n    fom: Date;\n    tom: Date;\n    landkode: string;\n    erBarnetInnlagt?: YesOrNo;\n    årsak?: UtenlandsoppholdÅrsak;\n}\n\nexport const isUtenlandsoppholdType = (\n    utenlandsopphold: Partial<Utenlandsopphold>\n): utenlandsopphold is Utenlandsopphold => {\n    return (\n        utenlandsopphold.fom !== undefined &&\n        utenlandsopphold.tom !== undefined &&\n        utenlandsopphold.landkode !== undefined\n    );\n};\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport {\n    commonFieldErrorRenderer\n} from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { countryIsMemberOfEøsOrEfta } from '@navikt/sif-common-core/lib/utils/countryUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport dateRangeValidation from '@navikt/sif-common-core/lib/validation/dateRangeValidation';\nimport {\n    validateRequiredField, validateRequiredSelect, validateYesOrNoIsAnswered\n} from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { hasValue } from '@navikt/sif-common-core/lib/validation/hasValue';\nimport { getCountryName, YesOrNo } from '@navikt/sif-common-formik';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { isUtenlandsoppholdType, Utenlandsopphold, UtenlandsoppholdÅrsak } from './types';\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    opphold?: Utenlandsopphold;\n    onSubmit: (values: Utenlandsopphold) => void;\n    onCancel: () => void;\n}\n\nenum UtenlandsoppholdFormFields {\n    fom = 'fom',\n    tom = 'tom',\n    landkode = 'landkode',\n    årsak = 'årsak',\n    erBarnetInnlagt = 'erBarnetInnlagt'\n}\n\nconst defaultFormValues: Partial<Utenlandsopphold> = {\n    fom: undefined,\n    tom: undefined,\n    landkode: undefined,\n    erBarnetInnlagt: YesOrNo.UNANSWERED,\n    årsak: undefined\n};\n\ntype FormValues = Partial<Utenlandsopphold>;\n\nconst Form = getTypedFormComponents<UtenlandsoppholdFormFields, FormValues>();\n\nconst UtenlandsoppholdForm: React.FunctionComponent<Props> = ({\n    maxDate,\n    minDate,\n    opphold: initialValues = defaultFormValues,\n    onSubmit,\n    onCancel\n}) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: Partial<Utenlandsopphold>) => {\n        if (isUtenlandsoppholdType(formValues)) {\n            onSubmit({\n                ...formValues,\n                årsak: countryIsMemberOfEøsOrEfta(formValues.landkode) ? undefined : formValues.årsak\n            });\n        } else {\n            throw new Error('UtenlandsoppholdForm: Formvalues is not a valid Utenlandsopphold on submit.');\n        }\n    };\n\n    return (\n        <Form.FormikWrapper\n            initialValues={initialValues}\n            onSubmit={onFormikSubmit}\n            renderForm={(formik) => {\n                const { values } = formik;\n                const showInnlagtQuestion: boolean =\n                    values.landkode !== undefined &&\n                    hasValue(values.landkode) &&\n                    !countryIsMemberOfEøsOrEfta(values.landkode);\n\n                const fromDateLimitations = {\n                    minDato: minDate,\n                    maksDato: values.tom || maxDate\n                };\n\n                const toDateLimitations = {\n                    minDato: values.fom || minDate,\n                    maksDato: maxDate\n                };\n\n                return (\n                    <Form.Form\n                        onCancel={onCancel}\n                        fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                        <Systemtittel tag=\"h1\">\n                            <FormattedMessage id=\"utenlandsopphold.form.tittel\" />\n                        </Systemtittel>\n                        <FormBlock>\n                            <Form.DateIntervalPicker\n                                legend={intlHelper(intl, 'utenlandsopphold.form.tidsperiode.spm')}\n                                fromDatepickerProps={{\n                                    name: UtenlandsoppholdFormFields.fom,\n                                    label: intlHelper(intl, 'utenlandsopphold.form.tidsperiode.fraDato'),\n                                    fullscreenOverlay: true,\n                                    dateLimitations: fromDateLimitations,\n                                    validate: (date: Date) =>\n                                        dateRangeValidation.validateFromDate(\n                                            date,\n                                            fromDateLimitations.minDato,\n                                            fromDateLimitations.maksDato,\n                                            values.tom\n                                        )\n                                }}\n                                toDatepickerProps={{\n                                    name: UtenlandsoppholdFormFields.tom,\n                                    label: intlHelper(intl, 'utenlandsopphold.form.tidsperiode.tilDato'),\n                                    fullscreenOverlay: true,\n                                    dateLimitations: toDateLimitations,\n                                    validate: (date: Date) =>\n                                        dateRangeValidation.validateToDate(\n                                            date,\n                                            toDateLimitations.minDato,\n                                            toDateLimitations.maksDato,\n                                            values.fom\n                                        )\n                                }}\n                            />\n                        </FormBlock>\n\n                        <FormBlock>\n                            <Form.CountrySelect\n                                name={UtenlandsoppholdFormFields.landkode}\n                                label={intlHelper(intl, 'utenlandsopphold.form.land.spm')}\n                                validate={validateRequiredSelect}\n                            />\n                        </FormBlock>\n\n                        {showInnlagtQuestion && values.landkode && (\n                            <>\n                                <FormBlock>\n                                    <Form.YesOrNoQuestion\n                                        name={UtenlandsoppholdFormFields.erBarnetInnlagt}\n                                        legend={intlHelper(intl, 'utenlandsopphold.form.erBarnetInnlagt.spm', {\n                                            land: getCountryName(values.landkode, intl.locale)\n                                        })}\n                                        validate={validateYesOrNoIsAnswered}\n                                    />\n                                </FormBlock>\n                                {values.erBarnetInnlagt === YesOrNo.YES && (\n                                    <>\n                                        <FormBlock>\n                                            <Form.RadioPanelGroup\n                                                legend={intlHelper(intl, 'utenlandsopphold.form.årsak.spm', {\n                                                    land: getCountryName(values.landkode, intl.locale)\n                                                })}\n                                                name={UtenlandsoppholdFormFields.årsak}\n                                                validate={validateRequiredField}\n                                                radios={[\n                                                    {\n                                                        value: UtenlandsoppholdÅrsak.INNLAGT_DEKKET_NORGE,\n                                                        label: intlHelper(\n                                                            intl,\n                                                            `utenlandsopphold.form.årsak.${UtenlandsoppholdÅrsak.INNLAGT_DEKKET_NORGE}`\n                                                        )\n                                                    },\n                                                    {\n                                                        value: UtenlandsoppholdÅrsak.INNLAGT_DEKKET_ANNET_LAND,\n                                                        label: intlHelper(\n                                                            intl,\n                                                            `utenlandsopphold.form.årsak.${UtenlandsoppholdÅrsak.INNLAGT_DEKKET_ANNET_LAND}`,\n                                                            { land: getCountryName(values.landkode, intl.locale) }\n                                                        )\n                                                    },\n                                                    {\n                                                        value: UtenlandsoppholdÅrsak.ANNET,\n                                                        label: intlHelper(\n                                                            intl,\n                                                            `utenlandsopphold.form.årsak.${UtenlandsoppholdÅrsak.ANNET}`\n                                                        )\n                                                    }\n                                                ]}\n                                            />\n                                        </FormBlock>\n                                    </>\n                                )}\n                            </>\n                        )}\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default UtenlandsoppholdForm;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { getCountryName } from '@navikt/sif-common-formik';\nimport { Utenlandsopphold } from './types';\nimport './utenlandsoppholdList.less';\n\ninterface Props {\n    utenlandsopphold: Utenlandsopphold[];\n    onEdit?: (opphold: Utenlandsopphold) => void;\n    onDelete?: (opphold: Utenlandsopphold) => void;\n}\n\nconst bem = bemUtils('utenlandsoppholdList');\n\nconst UtenlandsoppholdList: React.FunctionComponent<Props> = ({ utenlandsopphold, onDelete, onEdit }) => {\n    const intl = useIntl();\n    const renderUtenlandsoppholdLabel = (opphold: Utenlandsopphold): React.ReactNode => {\n        const navn = getCountryName(opphold.landkode, intl.locale);\n        return (\n            <div className={bem.element('label')}>\n                <span className={bem.element('land')}>\n                    {onEdit && <ActionLink onClick={() => onEdit(opphold)}>{navn}</ActionLink>}\n                    {!onEdit && <span>{navn}</span>}\n                </span>\n                <span className={bem.element('dato')}>\n                    {prettifyDateExtended(opphold.fom)} - {prettifyDateExtended(opphold.tom)}\n                </span>\n            </div>\n        );\n    };\n\n    return (\n        <ItemList<Utenlandsopphold>\n            getItemId={(opphold) => opphold.id}\n            getItemTitle={(opphold) => getCountryName(opphold.landkode, intl.locale)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderUtenlandsoppholdLabel}\n            items={utenlandsopphold}\n        />\n    );\n};\n\nexport default UtenlandsoppholdList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList, FormikValidateFunction, ModalFormAndListLabels\n} from '@navikt/sif-common-formik';\nimport { Utenlandsopphold } from './types';\nimport UtenlandsoppholdForm from './UtenlandsoppholdForm';\nimport UtenlandsoppholdListe from './UtenlandsoppholdList';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    validate?: FormikValidateFunction;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction UtenlandsoppholdListAndDialog<FieldNames>({ name, minDate, maxDate, validate, labels }: Props<FieldNames>) {\n    return (\n        <FormikModalFormAndList<FieldNames, Utenlandsopphold>\n            name={name}\n            labels={labels}\n            validate={validate}\n            dialogWidth=\"narrow\"\n            sortFunc={sortItemsByFom}\n            formRenderer={({ onSubmit, onCancel, item }) => (\n                <UtenlandsoppholdForm\n                    opphold={item}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    onSubmit={onSubmit}\n                    onCancel={onCancel}\n                />\n            )}\n            listRenderer={({ items, onEdit, onDelete }) => (\n                <UtenlandsoppholdListe utenlandsopphold={items} onEdit={onEdit} onDelete={onDelete} />\n            )}\n        />\n    );\n}\n\nexport default UtenlandsoppholdListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport {\n    commonFieldErrorRenderer\n} from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { date1YearAgo, date1YearFromNow } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { validateRequiredList } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport { Panel } from 'nav-frontend-paneler';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { Utenlandsopphold } from '../../../forms/utenlandsopphold/types';\nimport UtenlandsoppholdForm from '../../../forms/utenlandsopphold/UtenlandsoppholdForm';\nimport UtenlandsoppholdListAndDialog from '../../../forms/utenlandsopphold/UtenlandsoppholdListAndDialog';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\n\ninterface Props {}\nenum FormField {\n    'utenlandsopphold' = 'utenlandsopphold'\n}\n\ninterface FormValues {\n    [FormField.utenlandsopphold]: Utenlandsopphold[];\n}\nconst initialValues: FormValues = { utenlandsopphold: [] };\n\nconst UtenlandsoppholdExample: React.FunctionComponent<Props> = (props) => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<Utenlandsopphold> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={(formik) => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                                <UtenlandsoppholdListAndDialog\n                                    minDate={date1YearAgo}\n                                    maxDate={date1YearFromNow}\n                                    name={FormField.utenlandsopphold}\n                                    validate={validateRequiredList}\n                                    labels={{\n                                        addLabel: 'Legg til utenlandsopphold',\n                                        listTitle: 'Registrerte utenlandsopphold',\n                                        modalTitle: 'Utenlandsopphold',\n                                        emptyListText: 'Ingen utenlandsopphold er lagt til'\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <UtenlandsoppholdForm\n                        minDate={date1YearAgo}\n                        maxDate={date1YearFromNow}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                    />\n                    <SubmitPreview values={singleFormValues} />\n                </Panel>\n            </DialogFormWrapper>\n        </>\n    );\n};\n\nexport default UtenlandsoppholdExample;\n","import { ApiStringDate } from '@navikt/sif-common-core/lib/types/ApiStringDate';\n\nexport enum FrilansoppdragFormField {\n    'arbeidsgiverNavn' = 'arbeidsgiverNavn',\n    'fom' = 'fom',\n    'tom' = 'tom',\n    'erPågående' = 'erPågående'\n}\n\nexport interface Frilansoppdrag {\n    id?: string;\n    [FrilansoppdragFormField.arbeidsgiverNavn]: string;\n    [FrilansoppdragFormField.fom]: Date;\n    [FrilansoppdragFormField.tom]: Date | undefined;\n    [FrilansoppdragFormField.erPågående]: boolean | undefined;\n}\n\nexport interface FrilansoppdragApiData {\n    arbeidsgivernavn: string;\n    fra_og_med: ApiStringDate;\n    til_og_med: ApiStringDate | null;\n    er_pagaende?: boolean;\n}\n\nexport const isFrilansoppdrag = (oppdrag: Partial<Frilansoppdrag>): oppdrag is Frilansoppdrag => {\n    const { arbeidsgiverNavn, erPågående, fom, tom } = oppdrag;\n    if (arbeidsgiverNavn !== undefined && fom !== undefined && (erPågående !== undefined || tom !== undefined)) {\n        return true;\n    }\n    return false;\n};\n","import React, { useState } from 'react';\nimport Tabs from 'nav-frontend-tabs';\nimport 'nav-frontend-tabs-style';\nimport PageIntro from '../../components/page-intro/PageIntro';\nimport { RouteConfig } from '../../config/routeConfig';\nimport BostedUtlandExample from './BostedUtlandExample';\nimport FerieuttakExample from './FerieuttakExample';\nimport FosterbarnExample from './FosterbarnExample';\nimport UtenlandsoppholdIPeriodenExample from './UtenlandsoppholdExample';\n\ninterface Props {}\n\nconst tabRoutes: RouteConfig[] = [\n    {\n        path: 'bosted-utland',\n        renderContent: () => <BostedUtlandExample />,\n        title: 'Bosted utland'\n    },\n    {\n        path: 'ferieuttak',\n        renderContent: () => <FerieuttakExample />,\n        title: 'Ferieuttak i perioden'\n    },\n    {\n        path: 'utenlandsopphold',\n        renderContent: () => <UtenlandsoppholdIPeriodenExample />,\n        title: 'Utenlandsopphold i perioden'\n    },\n    {\n        path: 'fosterbarn',\n        renderContent: () => <FosterbarnExample />,\n        title: 'Fosterbarn'\n    }\n];\n\nconst DialogForms: React.FunctionComponent<Props> = (props) => {\n    const [path, setPath] = useState(tabRoutes[0].path);\n    const activeRoute = tabRoutes.find((r) => {\n        return r.path === path;\n    });\n    return (\n        <>\n            <PageIntro title=\"Dialogskjema\">\n                Skjema for ferieuttak i perioden, utenlandsopphold i perioden og bosted i utlandet.\n            </PageIntro>\n            <Tabs\n                onChange={(evt, idx) => setPath(tabRoutes[idx].path)}\n                tabs={tabRoutes.map((r) => ({\n                    label: r.title,\n                    active: r.path === path ? 'true' : 'false'\n                }))}\n            />\n            {activeRoute && activeRoute.renderContent()}\n        </>\n    );\n};\n\nexport default DialogForms;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport {\n    commonFieldErrorRenderer\n} from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport dateRangeValidation from '@navikt/sif-common-core/lib/validation/dateRangeValidation';\nimport { validateRequiredField } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport { FormikProps } from 'formik';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { Frilansoppdrag, FrilansoppdragFormField, isFrilansoppdrag } from './types';\n\ninterface Props {\n    oppdrag?: Frilansoppdrag;\n    minDate: Date;\n    maxDate: Date;\n    onSubmit: (oppdrag: Frilansoppdrag) => void;\n    onCancel: () => void;\n}\n\ntype FormValues = Partial<Frilansoppdrag>;\n\nconst initialValues: FormValues = {};\n\nconst Form = getTypedFormComponents<FrilansoppdragFormField, FormValues>();\n\nconst FrilansoppdragForm: React.FunctionComponent<Props> = ({\n    onCancel,\n    oppdrag = initialValues,\n    onSubmit,\n    minDate,\n    maxDate\n}) => {\n    const onFormikSubmit = (values: Partial<Frilansoppdrag>) => {\n        if (isFrilansoppdrag(values)) {\n            onSubmit(values);\n        } else {\n            throw new Error('FrilansoppdragForm: Formvalues is not a valid Frilansoppdrag on submit.');\n        }\n    };\n\n    const intl = useIntl();\n\n    return (\n        <Form.FormikWrapper\n            initialValues={oppdrag || {}}\n            onSubmit={onFormikSubmit}\n            renderForm={(formik: FormikProps<FormValues>) => {\n                const { values, setFieldValue } = formik;\n                return (\n                    <Form.Form\n                        includeValidationSummary={false}\n                        onCancel={onCancel}\n                        fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                        <Box padBottom=\"l\">\n                            <Systemtittel tag=\"h1\">Frilansoppdrag</Systemtittel>\n                        </Box>\n                        <Form.Input\n                            label=\"Navn på arbeidsgiver\"\n                            name={FrilansoppdragFormField.arbeidsgiverNavn}\n                            validate={validateRequiredField}\n                        />\n                        <Box margin=\"l\">\n                            <Form.DateIntervalPicker\n                                legend={'Periode'}\n                                fromDatepickerProps={{\n                                    label: 'Fra og med',\n                                    fullscreenOverlay: true,\n                                    name: FrilansoppdragFormField.fom,\n                                    showYearSelector: true,\n                                    dateLimitations: {\n                                        minDato: minDate,\n                                        maksDato: values.tom || maxDate\n                                    },\n                                    validate: (date) =>\n                                        dateRangeValidation.validateFromDate(date, minDate, maxDate, values.tom)\n                                }}\n                                toDatepickerProps={{\n                                    label: 'Til og med',\n                                    name: FrilansoppdragFormField.tom,\n                                    fullscreenOverlay: true,\n                                    disabled: values.erPågående === true,\n                                    showYearSelector: true,\n                                    dateLimitations: {\n                                        minDato: values.fom || minDate,\n                                        maksDato: maxDate\n                                    },\n                                    validate:\n                                        values.erPågående !== true\n                                            ? (date: Date) =>\n                                                  dateRangeValidation.validateToDate(date, minDate, maxDate, values.fom)\n                                            : undefined\n                                }}\n                            />\n                            <Form.Checkbox\n                                label=\"Pågående\"\n                                name={FrilansoppdragFormField.erPågående}\n                                afterOnChange={(checked) => {\n                                    if (checked) {\n                                        setFieldValue(FrilansoppdragFormField.tom, undefined);\n                                    }\n                                }}\n                            />\n                        </Box>\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default FrilansoppdragForm;\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { Frilansoppdrag } from './types';\nimport './frilansoppdragList.less';\n\ninterface Props {\n    oppdrag: Frilansoppdrag[];\n    onEdit?: (opphold: Frilansoppdrag) => void;\n    onDelete?: (opphold: Frilansoppdrag) => void;\n}\n\nconst bem = bemUtils('frilansoppdragList');\n\nconst FrilansoppdragList: React.FunctionComponent<Props> = ({ oppdrag, onDelete, onEdit }) => {\n    const renderOppdragLabel = (o: Frilansoppdrag): React.ReactNode => {\n        return (\n            <div className={bem.element('label')}>\n                <span className={bem.element('navn')}>\n                    {onEdit && <ActionLink onClick={() => onEdit(o)}>{o.arbeidsgiverNavn}</ActionLink>}\n                    {!onEdit && <span>{o.arbeidsgiverNavn}</span>}\n                </span>\n                <span className={bem.element('dato')}>\n                    {prettifyDateExtended(o.fom)}\n                    {`${o.tom ? `- ${prettifyDateExtended(o.tom)}` : ''}`}\n                </span>\n            </div>\n        );\n    };\n\n    return (\n        <ItemList<Frilansoppdrag>\n            getItemId={(o) => o.id}\n            getItemTitle={(o) => o.arbeidsgiverNavn}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderOppdragLabel}\n            items={oppdrag.filter((o) => o.id !== undefined)}\n        />\n    );\n};\n\nexport default FrilansoppdragList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList, FormikValidateFunction, ModalFormAndListLabels\n} from '@navikt/sif-common-formik';\nimport FrilansoppdragForm from './FrilansoppdragForm';\nimport FrilansoppdragList from './FrilansoppdragList';\nimport { Frilansoppdrag } from './types';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    validate?: FormikValidateFunction;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction FrilansoppdragListAndDialog<FieldNames>({ name, minDate, maxDate, validate, labels }: Props<FieldNames>) {\n    return (\n        <FormikModalFormAndList<FieldNames, Frilansoppdrag>\n            name={name}\n            labels={labels}\n            validate={validate}\n            dialogWidth=\"narrow\"\n            sortFunc={sortItemsByFom}\n            formRenderer={({ onSubmit, onCancel, item }) => (\n                <FrilansoppdragForm\n                    oppdrag={item}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    onSubmit={onSubmit}\n                    onCancel={onCancel}\n                />\n            )}\n            listRenderer={({ items, onEdit, onDelete }) => (\n                <FrilansoppdragList oppdrag={items} onEdit={onEdit} onDelete={onDelete} />\n            )}\n        />\n    );\n}\n\nexport default FrilansoppdragListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport {\n    commonFieldErrorRenderer\n} from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { date1YearAgo, date1YearFromNow } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { validateRequiredList } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport { Panel } from 'nav-frontend-paneler';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport FrilansoppdragForm from '../../../forms/frilans/FrilansoppdragForm';\nimport FrilansoppdragListAndDialog from '../../../forms/frilans/FrilansoppdragListAndDialog';\nimport { mapFrilansOppdragToApiData } from '../../../forms/frilans/mapFrilansOppdragToApiData';\nimport { Frilansoppdrag, isFrilansoppdrag } from '../../../forms/frilans/types';\nimport PageIntro from '../../components/page-intro/PageIntro';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\n\ninterface Props {}\n\nenum FormField {\n    'frilansoppdrag' = 'frilansoppdrag'\n}\n\ninterface FormValues {\n    [FormField.frilansoppdrag]: Frilansoppdrag[];\n}\nconst initialValues: FormValues = { frilansoppdrag: [] };\n\nconst FrilansExample: React.FunctionComponent<Props> = (props) => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<Frilansoppdrag> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n\n    return (\n        <>\n            <PageIntro title=\"Frilans\">Skjema som brukes for på registrere ett frilansoppdrag</PageIntro>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                                <FrilansoppdragListAndDialog<FormField>\n                                    name={FormField.frilansoppdrag}\n                                    validate={validateRequiredList}\n                                    minDate={date1YearAgo}\n                                    maxDate={date1YearFromNow}\n                                    labels={{\n                                        addLabel: 'Legg til',\n                                        listTitle: 'Frilansoppdrag',\n                                        modalTitle: 'Frilansoppdrag'\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n            <DialogFormWrapper width=\"wide\">\n                <Panel border={true}>\n                    <FrilansoppdragForm\n                        minDate={date1YearAgo}\n                        maxDate={date1YearFromNow}\n                        onCancel={() => console.log('cancel me')}\n                        onSubmit={(values) => setSingleFormValues(values)}\n                    />\n                    <Box margin=\"l\">\n                        <SubmitPreview values={singleFormValues} />\n                    </Box>\n                    <Box margin=\"xl\">\n                        <Undertittel>API-data</Undertittel>\n                        <SubmitPreview\n                            values={\n                                singleFormValues && isFrilansoppdrag(singleFormValues)\n                                    ? mapFrilansOppdragToApiData(singleFormValues)\n                                    : undefined\n                            }\n                        />\n                    </Box>\n                </Panel>\n            </DialogFormWrapper>\n        </>\n    );\n};\n\nexport default FrilansExample;\n","import { formatDateToApiFormat } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { Frilansoppdrag, FrilansoppdragApiData } from './types';\n\nexport const mapFrilansOppdragToApiData = (frilansoppdrag: Frilansoppdrag): FrilansoppdragApiData | undefined => {\n    const { arbeidsgiverNavn, erPågående, fom, tom } = frilansoppdrag;\n    return {\n        arbeidsgivernavn: arbeidsgiverNavn,\n        fra_og_med: formatDateToApiFormat(fom),\n        til_og_med: erPågående || tom === undefined ? null : formatDateToApiFormat(tom),\n        er_pagaende: erPågående\n    };\n};\n","import { ApiStringDate } from '@navikt/sif-common-core/lib/types/ApiStringDate';\nimport { YesOrNo } from '@navikt/sif-common-core/lib/types/YesOrNo';\n\nexport enum Næringstype {\n    'FISKER' = 'FISKE',\n    'JORDBRUK' = 'JORDBRUK_SKOGBRUK',\n    'DAGMAMMA' = 'DAGMAMMA',\n    'ANNEN' = 'ANNEN',\n}\n\nexport enum VirksomhetFormField {\n    'næringstyper' = 'næringstyper',\n    'fiskerErPåBladB' = 'fiskerErPåBladB',\n    'fom' = 'fom',\n    'tom' = 'tom',\n    'næringsinntekt' = 'næringsinntekt',\n    'erPågående' = 'erPågående',\n    'navnPåVirksomheten' = 'navnPåVirksomheten',\n    'organisasjonsnummer' = 'organisasjonsnummer',\n    'registrertINorge' = 'registrertINorge',\n    'registrertILand' = 'registrertILand',\n    'harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene' = 'harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene',\n    'oppstartsdato' = 'oppstartsdato',\n    'hattVarigEndringAvNæringsinntektSiste4Kalenderår' = 'hattVarigEndringAvNæringsinntektSiste4Kalenderår',\n    'varigEndringINæringsinntekt_dato' = 'varigEndringINæringsinntekt_dato',\n    'varigEndringINæringsinntekt_inntektEtterEndring' = 'varigEndringINæringsinntekt_inntektEtterEndring',\n    'varigEndringINæringsinntekt_forklaring' = 'varigEndringINæringsinntekt_forklaring',\n    'endretNæringsinntektInformasjon' = 'endretNæringsinntektInformasjon',\n    'harRegnskapsfører' = 'harRegnskapsfører',\n    'regnskapsfører' = 'regnskapsfører',\n    'regnskapsfører_navn' = 'regnskapsfører_navn',\n    'regnskapsfører_telefon' = 'regnskapsfører_telefon',\n    'harRevisor' = 'harRevisor',\n    'revisor_navn' = 'revisor_navn',\n    'revisor_telefon' = 'revisor_telefon',\n    'kanInnhenteOpplsyningerFraRevisor' = 'kanInnhenteOpplsyningerFraRevisor',\n}\n\nexport interface VirksomhetHideFields {\n    [VirksomhetFormField.fiskerErPåBladB]: boolean;\n}\n\nexport interface Virksomhet {\n    id?: string;\n    [VirksomhetFormField.næringstyper]: Næringstype[];\n    [VirksomhetFormField.fiskerErPåBladB]?: YesOrNo;\n    [VirksomhetFormField.fom]: Date;\n    [VirksomhetFormField.tom]?: Date;\n    [VirksomhetFormField.næringsinntekt]?: number;\n    [VirksomhetFormField.erPågående]?: boolean;\n    [VirksomhetFormField.navnPåVirksomheten]: string;\n    [VirksomhetFormField.organisasjonsnummer]?: string;\n    [VirksomhetFormField.registrertINorge]: YesOrNo;\n    [VirksomhetFormField.registrertILand]?: string;\n    [VirksomhetFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene]?: YesOrNo;\n    [VirksomhetFormField.oppstartsdato]?: Date;\n    [VirksomhetFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår]?: YesOrNo;\n    [VirksomhetFormField.varigEndringINæringsinntekt_dato]?: Date;\n    [VirksomhetFormField.varigEndringINæringsinntekt_inntektEtterEndring]?: number;\n    [VirksomhetFormField.varigEndringINæringsinntekt_forklaring]?: string;\n    [VirksomhetFormField.harRegnskapsfører]: YesOrNo;\n    [VirksomhetFormField.regnskapsfører_navn]?: string;\n    [VirksomhetFormField.regnskapsfører_telefon]?: string;\n    [VirksomhetFormField.harRevisor]?: YesOrNo;\n    [VirksomhetFormField.revisor_navn]?: string;\n    [VirksomhetFormField.revisor_telefon]?: string;\n    [VirksomhetFormField.kanInnhenteOpplsyningerFraRevisor]?: YesOrNo;\n}\n\nexport const isVirksomhet = (virksomhet: Partial<Virksomhet>): virksomhet is Virksomhet => {\n    return true;\n};\n\nexport interface VirksomhetApiData {\n    næringstyper: Næringstype[];\n    fiskerErPåBladB?: boolean;\n    fraOgMed: ApiStringDate;\n    tilOgMed?: ApiStringDate | null;\n    næringsinntekt?: number;\n    navnPåVirksomheten: string;\n    organisasjonsnummer?: string;\n    registrertINorge: boolean;\n    registrertILand?: {\n        kode: string;\n        navn: string;\n    };\n    yrkesaktivSisteTreFerdigliknedeÅrene?: {\n        oppstartsdato: ApiStringDate;\n    };\n    varigEndring?: {\n        dato: ApiStringDate;\n        inntektEtterEndring: number;\n        forklaring: string;\n    };\n    regnskapsfører?: {\n        navn: string;\n        telefon: string;\n    };\n    revisor?: {\n        navn: string;\n        telefon: string;\n        kanInnhenteOpplysninger?: boolean;\n    };\n}\n","import { Næringstype } from './types';\n\nexport const harFiskerNæringstype = (næringstyper: Næringstype[]): boolean =>\n    næringstyper.find((n) => n === Næringstype.FISKER) !== undefined;\n","import { formatDateToApiFormat } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { YesOrNo, getCountryName } from '@navikt/sif-common-formik/lib';\nimport { Virksomhet, VirksomhetApiData } from './types';\nimport { harFiskerNæringstype } from './virksomhetUtils';\n\nexport const mapVirksomhetToVirksomhetApiData = (\n    locale: string,\n    virksomhet: Virksomhet,\n    harBesvartFikserPåBladB?: boolean\n): VirksomhetApiData => {\n    const registrertINorge = virksomhet.registrertINorge === YesOrNo.YES;\n    const harRegnskapsfører = virksomhet.harRegnskapsfører === YesOrNo.YES;\n\n    const data: VirksomhetApiData = {\n        næringstyper: [...virksomhet.næringstyper],\n        navnPåVirksomheten: virksomhet.navnPåVirksomheten,\n        registrertINorge,\n        ...(registrertINorge\n            ? {\n                  organisasjonsnummer: virksomhet.organisasjonsnummer,\n              }\n            : {\n                  registrertILand: virksomhet.registrertILand\n                      ? {\n                            kode: virksomhet.registrertILand,\n                            navn: getCountryName(virksomhet.registrertILand, locale),\n                        }\n                      : undefined,\n              }),\n        fraOgMed: formatDateToApiFormat(virksomhet.fom),\n        tilOgMed: virksomhet.erPågående || virksomhet.tom === undefined ? null : formatDateToApiFormat(virksomhet.tom),\n        næringsinntekt: virksomhet.næringsinntekt,\n    };\n\n    if (virksomhet.hattVarigEndringAvNæringsinntektSiste4Kalenderår) {\n        const harHatt = virksomhet.hattVarigEndringAvNæringsinntektSiste4Kalenderår === YesOrNo.YES;\n        const {\n            varigEndringINæringsinntekt_dato,\n            varigEndringINæringsinntekt_forklaring,\n            varigEndringINæringsinntekt_inntektEtterEndring,\n        } = virksomhet;\n        if (\n            harHatt &&\n            varigEndringINæringsinntekt_dato &&\n            varigEndringINæringsinntekt_inntektEtterEndring !== undefined &&\n            varigEndringINæringsinntekt_forklaring\n        ) {\n            data.varigEndring = {\n                dato: formatDateToApiFormat(varigEndringINæringsinntekt_dato),\n                forklaring: varigEndringINæringsinntekt_forklaring,\n                inntektEtterEndring: varigEndringINæringsinntekt_inntektEtterEndring,\n            };\n        }\n    }\n\n    if (harFiskerNæringstype(virksomhet.næringstyper) && harBesvartFikserPåBladB !== true) {\n        data.fiskerErPåBladB = virksomhet.fiskerErPåBladB === YesOrNo.YES;\n    }\n\n    if (virksomhet.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene) {\n        const harBlittAktiv = virksomhet.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene === YesOrNo.YES;\n        if (harBlittAktiv && virksomhet.oppstartsdato) {\n            data.yrkesaktivSisteTreFerdigliknedeÅrene = {\n                oppstartsdato: formatDateToApiFormat(virksomhet.oppstartsdato),\n            };\n        }\n    }\n\n    if (harRegnskapsfører) {\n        data.regnskapsfører = {\n            navn: virksomhet.regnskapsfører_navn!,\n            telefon: virksomhet.regnskapsfører_telefon!,\n        };\n    }\n\n    if (!harRegnskapsfører) {\n        if (virksomhet.harRevisor === YesOrNo.YES) {\n            data.revisor = {\n                navn: virksomhet.revisor_navn!,\n                telefon: virksomhet.revisor_telefon!,\n                kanInnhenteOpplysninger: virksomhet.kanInnhenteOpplsyningerFraRevisor === YesOrNo.YES,\n            };\n        }\n    }\n\n    return data;\n};\n","import React from 'react';\nimport { VirksomhetFormText } from './textKeys';\n\nexport const VirksomhetTextNB: VirksomhetFormText = {\n    næringstype_fisker: 'Fisker',\n    næringstype_jordbruker: 'Jordbruker',\n    næringstype_dagmamma: 'Dagmamma eller familiebarnehage i eget hjem',\n    næringstype_annet: 'Annet',\n    form_title: 'Opplysninger om virksomheten din',\n    hvilken_type_virksomhet: 'Hvilken type virksomhet har du?',\n    hva_heter_virksomheten: 'Hva heter virksomheten?',\n    fisker_blad_b: 'Er du fisker på blad B?',\n    veielder_fisker: (virksomhet) =>\n        `Hvis du ikke har organisasjonsnummer, svarer du nei på spørsmålet \"Er ${virksomhet} registrert i Norge?\" I nedtrekkslisten velger du at virksomheten er registrert i Norge.`,\n    registert_i_norge: (virksomhet: string) => `Er ${virksomhet} registert i Norge?`,\n    registert_i_hvilket_land: (virksomhet: string) => `I hvilket land er ${virksomhet} din registrert i?`,\n    organisasjonsnummer: 'Hva er organisasjonsnummeret?',\n    startdato: (navnPåVirksomheten) => `Når startet du ${navnPåVirksomheten}?`,\n    kalender_fom: 'Startdato',\n    kalender_tom: 'Eventuell sluttdato',\n    kalender_pågående: 'Er pågående',\n    næringsinntekt:\n        'Hva har du hatt i næringsresultat før skatt de siste 12 månedene? Hvis virksomheten har vart i kortere tid, kan du bruke denne perioden og regne om til årsinntekt. Oppgi beløpet i hele kroner.',\n    næringsinntekt_info: 'Næringsresultatet er inntekter du har i næringen din, minus utgifter og avskrivninger.',\n    har_blitt_yrkesaktiv: 'Har du begynt å jobbe i løpet av de tre siste ferdigliknede årene?',\n    har_blitt_yrkesaktiv_dato: 'Oppgi dato for når du ble yrkesaktiv',\n    varig_endring_spm:\n        'Har du hatt en varig endring i arbeidsforholdet ditt, virksomheten eller arbeidssituasjonen din de siste fire årene?',\n    varig_endring_dato: 'Oppgi dato for endringen',\n    varig_endring_inntekt: 'Oppgi næringsinntekten din etter endringen. Oppgi årsinntekten i hele kroner.',\n    varig_endring_tekst:\n        'Her kan du skrive kort hva som har endret seg i arbeidsforholdet ditt, virksomheten eller arbeidssituasjonen din',\n    regnskapsfører_spm: 'Har du regnskapsfører?',\n    regnskapsfører_navn: 'Oppgi navnet til regnskapsfører',\n    regnskapsfører_telefon: 'Oppgi telefonnummeret til regnskapsfører',\n    revisor_spm: 'Har du revisor?',\n    revisor_navn: 'Oppgi navnet til revisor',\n    revisor_telefon: 'Oppgi telefonnummeret til revisor',\n    revisor_fullmakt: 'Gir du NAV fullmakt til å innhente opplysninger direkte fra revisor?',\n    veileder_innhenter_info_html: () => (\n        <div>\n            Vi henter inn opplysninger om virksomheten og inntekten din fra offentlige registre.\n            <br />\n            Vi tar kontakt med deg hvis vi trenger flere opplysninger.\n        </div>\n    )\n};\n","import React from 'react';\nimport CounsellorPanel from '@navikt/sif-common-core/lib/components/counsellor-panel/CounsellorPanel';\nimport { VirksomhetTextNB } from '../i18n/virksomhetForm.texts';\n\ninterface Props {\n    navnPåVirksomhet: string;\n}\n\nconst txt = VirksomhetTextNB;\n\nconst InfoTilFisker: React.FunctionComponent<Props> = ({ navnPåVirksomhet }) => (\n    <CounsellorPanel>{txt.veielder_fisker(navnPåVirksomhet)}</CounsellorPanel>\n);\n\nexport default InfoTilFisker;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport CounsellorPanel from '@navikt/sif-common-core/lib/components/counsellor-panel/CounsellorPanel';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport ResponsivePanel from '@navikt/sif-common-core/lib/components/responsive-panel/ResponsivePanel';\nimport {\n    commonFieldErrorRenderer\n} from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport {\n    date3YearsAgo, date4YearsAgo, dateToday\n} from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    validateOrgNumber, validateRequiredField, validateRequiredList, validateRequiredNumber,\n    validateYesOrNoIsAnswered\n} from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { hasValue } from '@navikt/sif-common-core/lib/validation/hasValue';\nimport {\n    FormikYesOrNoQuestion, getTypedFormComponents, YesOrNo\n} from '@navikt/sif-common-formik/lib';\nimport { FormikProps } from 'formik';\nimport moment from 'moment';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { VirksomhetTextNB } from './i18n/virksomhetForm.texts';\nimport InfoTilFisker from './parts/InfoTilFisker';\nimport {\n    isVirksomhet, Næringstype, Virksomhet, VirksomhetFormField, VirksomhetHideFields\n} from './types';\nimport { harFiskerNæringstype } from './virksomhetUtils';\n\ninterface Props {\n    virksomhet?: Virksomhet;\n    hideFormFields?: VirksomhetHideFields;\n    onSubmit: (oppdrag: Virksomhet) => void;\n    onCancel: () => void;\n}\n\nconst initialValues: FormValues = {\n    næringstyper: []\n};\n\nconst MAKS_INNTEKT = 999999999;\ntype FormValues = Partial<Virksomhet>;\n\nconst Form = getTypedFormComponents<VirksomhetFormField, FormValues>();\n\nconst visNæringsinntekt = (values: Virksomhet): boolean => {\n    return values.fom && moment(values.fom).isAfter(date4YearsAgo);\n};\n\nconst ensureValidNæringsinntekt = (values: Virksomhet): number | undefined => {\n    if (visNæringsinntekt(values)) {\n        return values.næringsinntekt;\n    }\n    return undefined;\n};\n\nconst VirksomhetForm: React.FunctionComponent<Props> = ({\n    onCancel,\n    virksomhet = initialValues,\n    onSubmit,\n    hideFormFields\n}) => {\n    const onFormikSubmit = (values: Partial<Virksomhet>) => {\n        if (isVirksomhet(values)) {\n            onSubmit({\n                ...values,\n                næringsinntekt: ensureValidNæringsinntekt(values)\n            });\n        } else {\n            throw new Error('VirksomhetForm: Formvalues is not a valid Virksomhet on submit.');\n        }\n    };\n\n    const intl = useIntl();\n    const txt = VirksomhetTextNB;\n    const hideFiskerPåBladB = hideFormFields?.[VirksomhetFormField.fiskerErPåBladB] === true;\n\n    return (\n        <Form.FormikWrapper\n            initialValues={virksomhet}\n            onSubmit={onFormikSubmit}\n            renderForm={(formik: FormikProps<FormValues>) => {\n                const { values, setFieldValue } = formik;\n                const { navnPåVirksomheten = 'virksomheten' } = values;\n                return (\n                    <Form.Form\n                        includeValidationSummary={true}\n                        onCancel={onCancel}\n                        fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                        <Box padBottom=\"l\">\n                            <Systemtittel tag=\"h1\">{txt.form_title}</Systemtittel>\n                        </Box>\n                        <Form.CheckboxPanelGroup\n                            name={VirksomhetFormField.næringstyper}\n                            legend={txt.hvilken_type_virksomhet}\n                            checkboxes={[\n                                {\n                                    value: Næringstype.FISKER,\n                                    label: txt.næringstype_fisker\n                                },\n                                {\n                                    value: Næringstype.JORDBRUK,\n                                    label: txt.næringstype_jordbruker\n                                },\n                                {\n                                    value: Næringstype.DAGMAMMA,\n                                    label: txt.næringstype_dagmamma\n                                },\n                                {\n                                    value: Næringstype.ANNEN,\n                                    label: txt.næringstype_annet\n                                }\n                            ]}\n                            validate={validateRequiredList}\n                        />\n\n                        {harFiskerNæringstype(values.næringstyper || []) && hideFiskerPåBladB !== true && (\n                            <Box margin=\"xl\">\n                                <FormikYesOrNoQuestion<VirksomhetFormField>\n                                    name={VirksomhetFormField.fiskerErPåBladB}\n                                    legend={txt.fisker_blad_b}\n                                    validate={validateYesOrNoIsAnswered}\n                                />\n                            </Box>\n                        )}\n\n                        <Box margin=\"xl\">\n                            <Form.Input\n                                name={VirksomhetFormField.navnPåVirksomheten}\n                                label={txt.hva_heter_virksomheten}\n                                validate={validateRequiredField}\n                                maxLength={50}\n                            />\n                        </Box>\n\n                        {harFiskerNæringstype(values.næringstyper || []) &&\n                            values.navnPåVirksomheten !== undefined &&\n                            hasValue(navnPåVirksomheten) && (\n                                <Box margin=\"xl\">\n                                    <InfoTilFisker navnPåVirksomhet={values.navnPåVirksomheten} />\n                                </Box>\n                            )}\n\n                        <Box margin=\"xl\">\n                            <Form.YesOrNoQuestion\n                                name={VirksomhetFormField.registrertINorge}\n                                legend={txt.registert_i_norge(navnPåVirksomheten)}\n                                validate={validateYesOrNoIsAnswered}\n                            />\n                        </Box>\n\n                        {values.registrertINorge === YesOrNo.NO && (\n                            <Box margin=\"xl\">\n                                <Form.CountrySelect\n                                    name={VirksomhetFormField.registrertILand}\n                                    label={txt.registert_i_hvilket_land(navnPåVirksomheten)}\n                                    validate={validateRequiredField}\n                                />\n                            </Box>\n                        )}\n\n                        {values.registrertINorge === YesOrNo.YES && (\n                            <Box margin=\"xl\">\n                                <Form.Input\n                                    name={VirksomhetFormField.organisasjonsnummer}\n                                    label={txt.organisasjonsnummer}\n                                    style={{ maxWidth: '10rem' }}\n                                    maxLength={9}\n                                    validate={(value) =>\n                                        validateOrgNumber(value, values.registrertINorge === YesOrNo.YES)\n                                    }\n                                />\n                            </Box>\n                        )}\n\n                        {(values.registrertINorge === YesOrNo.YES || values.registrertINorge === YesOrNo.NO) && (\n                            <Box margin=\"xl\">\n                                <Form.DateIntervalPicker\n                                    legend={txt.startdato(navnPåVirksomheten)}\n                                    fromDatepickerProps={{\n                                        label: txt.kalender_fom,\n                                        name: VirksomhetFormField.fom,\n                                        showYearSelector: true,\n                                        dateLimitations: {\n                                            maksDato: dateToday\n                                        },\n                                        validate: validateRequiredField\n                                    }}\n                                    toDatepickerProps={{\n                                        label: txt.kalender_tom,\n                                        name: VirksomhetFormField.tom,\n                                        disabled: values.erPågående === true,\n                                        showYearSelector: true,\n                                        dateLimitations: {\n                                            minDato: values.fom || undefined,\n                                            maksDato: dateToday\n                                        }\n                                    }}\n                                />\n                                <Form.Checkbox\n                                    label={txt.kalender_pågående}\n                                    name={VirksomhetFormField.erPågående}\n                                    afterOnChange={(checked) => {\n                                        if (checked) {\n                                            setFieldValue(VirksomhetFormField.tom, undefined);\n                                        }\n                                    }}\n                                />\n                            </Box>\n                        )}\n\n                        {values.fom && moment(values.fom).isAfter(date4YearsAgo) && (\n                            <>\n                                <Box margin=\"xl\">\n                                    <Form.Input\n                                        name={VirksomhetFormField.næringsinntekt}\n                                        label={txt.næringsinntekt}\n                                        info={txt.næringsinntekt_info}\n                                        type=\"number\"\n                                        maxLength={10}\n                                        max={MAKS_INNTEKT}\n                                        style={{ maxWidth: '10rem' }}\n                                        validate={validateRequiredNumber({ min: 0, max: MAKS_INNTEKT })}\n                                    />\n                                </Box>\n                                <Box margin=\"xl\">\n                                    <Form.YesOrNoQuestion\n                                        name={\n                                            VirksomhetFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene\n                                        }\n                                        legend={txt.har_blitt_yrkesaktiv}\n                                        validate={validateYesOrNoIsAnswered}\n                                    />\n                                </Box>\n                                {values.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene === YesOrNo.YES && (\n                                    <FormBlock margin=\"m\">\n                                        <ResponsivePanel>\n                                            <Form.DatePicker\n                                                name={VirksomhetFormField.oppstartsdato}\n                                                label={txt.har_blitt_yrkesaktiv_dato}\n                                                showYearSelector={true}\n                                                dateLimitations={{\n                                                    minDato: date3YearsAgo,\n                                                    maksDato: dateToday\n                                                }}\n                                                validate={validateRequiredField}\n                                            />\n                                        </ResponsivePanel>\n                                    </FormBlock>\n                                )}\n                            </>\n                        )}\n                        {values.fom && moment(values.fom).isAfter(date4YearsAgo) === false && (\n                            <>\n                                <Box margin=\"xl\">\n                                    <Form.YesOrNoQuestion\n                                        name={VirksomhetFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår}\n                                        legend={txt.varig_endring_spm}\n                                        validate={validateYesOrNoIsAnswered}\n                                    />\n                                </Box>\n                                {values.hattVarigEndringAvNæringsinntektSiste4Kalenderår === YesOrNo.YES && (\n                                    <>\n                                        <Box margin=\"xl\">\n                                            <Form.DatePicker\n                                                name={VirksomhetFormField.varigEndringINæringsinntekt_dato}\n                                                label={txt.varig_endring_dato}\n                                                validate={validateRequiredField}\n                                                dateLimitations={{\n                                                    minDato: date4YearsAgo,\n                                                    maksDato: dateToday\n                                                }}\n                                            />\n                                        </Box>\n                                        <Box margin=\"xl\">\n                                            <Form.Input\n                                                name={\n                                                    VirksomhetFormField.varigEndringINæringsinntekt_inntektEtterEndring\n                                                }\n                                                label={txt.varig_endring_inntekt}\n                                                type=\"number\"\n                                                maxLength={10}\n                                                max={MAKS_INNTEKT}\n                                                style={{ maxWidth: '10rem' }}\n                                                validate={validateRequiredNumber({ min: 0, max: MAKS_INNTEKT })}\n                                            />\n                                        </Box>\n                                        <Box margin=\"xl\">\n                                            <Form.Textarea\n                                                name={VirksomhetFormField.varigEndringINæringsinntekt_forklaring}\n                                                label={txt.varig_endring_tekst}\n                                                validate={validateRequiredField}\n                                                maxLength={1000}\n                                            />\n                                        </Box>\n                                    </>\n                                )}\n                            </>\n                        )}\n\n                        {(values.fom || values.registrertINorge === YesOrNo.YES) && (\n                            <>\n                                <Box margin=\"xl\">\n                                    <Form.YesOrNoQuestion\n                                        name={VirksomhetFormField.harRegnskapsfører}\n                                        legend={txt.regnskapsfører_spm}\n                                        validate={validateYesOrNoIsAnswered}\n                                    />\n                                </Box>\n\n                                {values.harRegnskapsfører === YesOrNo.YES && (\n                                    <FormBlock margin=\"m\">\n                                        <ResponsivePanel>\n                                            <Form.Input\n                                                name={VirksomhetFormField.regnskapsfører_navn}\n                                                label={txt.regnskapsfører_navn}\n                                                validate={validateRequiredField}\n                                                maxLength={50}\n                                            />\n                                            <Box margin=\"xl\">\n                                                <Form.Input\n                                                    name={VirksomhetFormField.regnskapsfører_telefon}\n                                                    label={txt.regnskapsfører_telefon}\n                                                    validate={validateRequiredField}\n                                                    maxLength={15}\n                                                />\n                                            </Box>\n                                        </ResponsivePanel>\n                                    </FormBlock>\n                                )}\n\n                                {values.harRegnskapsfører === YesOrNo.NO && (\n                                    <>\n                                        <Box margin=\"xl\">\n                                            <Form.YesOrNoQuestion\n                                                name={VirksomhetFormField.harRevisor}\n                                                legend={txt.revisor_spm}\n                                                validate={validateYesOrNoIsAnswered}\n                                            />\n                                        </Box>\n\n                                        {values.harRevisor === YesOrNo.YES && (\n                                            <FormBlock margin=\"m\">\n                                                <ResponsivePanel>\n                                                    <Form.Input\n                                                        name={VirksomhetFormField.revisor_navn}\n                                                        label={txt.revisor_navn}\n                                                        validate={validateRequiredField}\n                                                        maxLength={50}\n                                                    />\n                                                    <Box margin=\"xl\">\n                                                        <Form.Input\n                                                            name={VirksomhetFormField.revisor_telefon}\n                                                            label={txt.revisor_telefon}\n                                                            validate={validateRequiredField}\n                                                            maxLength={15}\n                                                        />\n                                                    </Box>\n                                                    <Box margin=\"xl\">\n                                                        <Form.YesOrNoQuestion\n                                                            name={VirksomhetFormField.kanInnhenteOpplsyningerFraRevisor}\n                                                            legend={txt.revisor_fullmakt}\n                                                            validate={validateYesOrNoIsAnswered}\n                                                        />\n                                                    </Box>\n                                                </ResponsivePanel>\n                                            </FormBlock>\n                                        )}\n                                    </>\n                                )}\n                            </>\n                        )}\n                        {(values.harRegnskapsfører === YesOrNo.YES ||\n                            (values.harRevisor && values.harRevisor !== YesOrNo.UNANSWERED)) && (\n                            <Box margin=\"xl\">\n                                <CounsellorPanel>\n                                    {txt.veileder_innhenter_info_html()}\n\n                                    {/* /** Nynorsk:\n                                     Vi hentar inn opplysningar om verksemda og inntekta di frå offentlege register. Vi tek kontakt med deg viss vi treng fleire opplysningar.\n                                      */}\n                                </CounsellorPanel>\n                            </Box>\n                        )}\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default VirksomhetForm;\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { Virksomhet } from './types';\nimport './virksomhetList.less';\n\ninterface Props {\n    virksomheter: Virksomhet[];\n    onEdit?: (virksomhet: Virksomhet) => void;\n    onDelete?: (virksomhet: Virksomhet) => void;\n}\n\nconst bem = bemUtils('virksomhetList');\n\nconst VirksomhetList: React.FunctionComponent<Props> = ({ virksomheter = [], onDelete, onEdit }) => {\n    const næringLabel = (næring: Virksomhet): React.ReactNode => {\n        return (\n            <div className={bem.element('label')}>\n                <span className={bem.element('navn')}>\n                    {onEdit && <ActionLink onClick={() => onEdit(næring)}>{næring.navnPåVirksomheten}</ActionLink>}\n                    {!onEdit && <span>{næring.navnPåVirksomheten}</span>}\n                </span>\n            </div>\n        );\n    };\n\n    return (\n        <ItemList<Virksomhet>\n            getItemId={(næring) => næring.organisasjonsnummer}\n            getItemTitle={(næring) => næring.navnPåVirksomheten}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={næringLabel}\n            items={virksomheter.filter((næring) => næring.id !== undefined)}\n        />\n    );\n};\n\nexport default VirksomhetList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList, FormikValidateFunction, ModalFormAndListLabels\n} from '@navikt/sif-common-formik';\nimport { Virksomhet, VirksomhetHideFields } from './types';\nimport VirksomhetForm from './VirksomhetForm';\nimport VirksomhetListe from './VirksomhetList';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    validate?: FormikValidateFunction;\n    labels: ModalFormAndListLabels;\n    hideFormFields?: VirksomhetHideFields;\n    onAfterChange?: (virksomheter: Virksomhet[]) => void;\n}\n\nfunction VirksomhetListAndDialog<FieldNames>({\n    name,\n    validate,\n    labels,\n    hideFormFields,\n    onAfterChange\n}: Props<FieldNames>) {\n    return (\n        <FormikModalFormAndList<FieldNames, Virksomhet>\n            name={name}\n            labels={labels}\n            validate={validate}\n            dialogWidth=\"narrow\"\n            sortFunc={sortItemsByFom}\n            formRenderer={({ onSubmit, onCancel, item }) => (\n                <VirksomhetForm\n                    virksomhet={item}\n                    onSubmit={onSubmit}\n                    onCancel={onCancel}\n                    hideFormFields={hideFormFields}\n                />\n            )}\n            listRenderer={({ items, onEdit, onDelete }) => (\n                <VirksomhetListe virksomheter={items} onEdit={onEdit} onDelete={onDelete} />\n            )}\n            onAfterChange={onAfterChange}\n        />\n    );\n}\n\nexport default VirksomhetListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport { validateRequiredList } from '@navikt/sif-common-core/lib/validation/fieldValidations';\nimport { TypedFormikForm, TypedFormikWrapper, YesOrNo } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport { Panel } from 'nav-frontend-paneler';\nimport { Checkbox } from 'nav-frontend-skjema';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { mapVirksomhetToVirksomhetApiData } from '../../../forms/virksomhet/mapVirksomhetToApiData';\nimport { isVirksomhet, Næringstype, Virksomhet } from '../../../forms/virksomhet/types';\nimport VirksomhetForm from '../../../forms/virksomhet/VirksomhetForm';\nimport VirksomhetListAndDialog from '../../../forms/virksomhet/VirksomhetListAndDialog';\nimport PageIntro from '../../components/page-intro/PageIntro';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\n\ninterface Props {}\n\nenum FormField {\n    'virksomheter' = 'virksomheter',\n}\n\nexport const mockVirksomhet: Virksomhet = {\n    id: '024782550-1402-01448-04932-71872390929312',\n    næringstyper: [Næringstype.ANNEN, Næringstype.DAGMAMMA],\n    navnPåVirksomheten: 'Gamle greier',\n    registrertINorge: YesOrNo.YES,\n    organisasjonsnummer: '123123123',\n    fom: new Date('2007-02-01T00:00:00.000Z'),\n    erPågående: true,\n    hattVarigEndringAvNæringsinntektSiste4Kalenderår: YesOrNo.YES,\n    varigEndringINæringsinntekt_dato: new Date('2019-12-09T00:00:00.000Z'),\n    varigEndringINæringsinntekt_inntektEtterEndring: 200000,\n    varigEndringINæringsinntekt_forklaring: 'Jeg fikk flere barn',\n    harRegnskapsfører: YesOrNo.YES,\n    harRevisor: YesOrNo.YES,\n    regnskapsfører_navn: 'Regnskapsefører Truls',\n    regnskapsfører_telefon: '98219409',\n};\n\ninterface FormValues {\n    [FormField.virksomheter]: Virksomhet[];\n}\nconst initialValues: FormValues = { virksomheter: [] };\n\nconst VirksomhetExample: React.FunctionComponent<Props> = (props) => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<Virksomhet> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const [hideFisker, setHideFisker] = useState<boolean>(false);\n    const intl = useIntl();\n    return (\n        <>\n            <PageIntro title=\"Næringsvirksomhet\">Skjema som brukes for på registrere en næringsvirksomhet.</PageIntro>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                                <VirksomhetListAndDialog<FormField>\n                                    name={FormField.virksomheter}\n                                    validate={validateRequiredList}\n                                    hideFormFields={{ fiskerErPåBladB: hideFisker }}\n                                    labels={{\n                                        addLabel: 'Legg til',\n                                        listTitle: 'Virksomhet',\n                                        modalTitle: 'Virksomhet',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n            <DialogFormWrapper width=\"wide\">\n                <Panel border={true}>\n                    <VirksomhetForm\n                        hideFormFields={{ fiskerErPåBladB: hideFisker }}\n                        onCancel={() => setSingleFormValues({})}\n                        onSubmit={(values) => setSingleFormValues(values)}\n                    />\n                    <Box margin=\"l\">\n                        <hr />\n                        <Panel style={{ padding: '1rem' }}>\n                            <Box padBottom=\"m\">Spørsmål som kan skjules:</Box>\n                            <Checkbox\n                                label=\"Fisker på Blad B\"\n                                checked={hideFisker}\n                                onChange={(evt) => setHideFisker(evt.currentTarget.checked)}\n                            />\n                        </Panel>\n                    </Box>\n                    <Box margin=\"l\">\n                        <SubmitPreview values={singleFormValues} />\n                    </Box>\n                    <Box margin=\"xl\">\n                        <Undertittel>API-data</Undertittel>\n                        <SubmitPreview\n                            values={\n                                singleFormValues && isVirksomhet(singleFormValues)\n                                    ? mapVirksomhetToVirksomhetApiData(intl.locale, singleFormValues)\n                                    : undefined\n                            }\n                        />\n                    </Box>\n                </Panel>\n            </DialogFormWrapper>\n        </>\n    );\n};\n\nexport default VirksomhetExample;\n","import React from 'react';\nimport PageIntro from './components/page-intro/PageIntro';\n\ninterface Props {}\n\nconst Intro: React.FunctionComponent<Props> = (props) => (\n    <>\n        <PageIntro title=\"SIF-common guide\">\n            Dette er starten på en enkel guide til komponenter og konsepter i SIF-common, og som kan brukes i\n            søknadsapplikasjonene til kapittel 9. Vi legger det vi trenger, etter hvert som vi ser at vi trenger det :)\n        </PageIntro>\n    </>\n);\n\nexport default Intro;\n","import React from 'react';\nimport DialogForms from '../examples/dialog-forms/DialogForms';\nimport FrilansExample from '../examples/frilans-example/FrilansExample';\nimport VirksomhetExample from '../examples/virksomhet-example/VirksomhetExample';\nimport Intro from '../Intro';\n\nexport interface RouteConfig {\n    path: string;\n    title: string;\n    renderContent: () => React.ReactNode;\n}\n\nexport const routes: RouteConfig[] = [\n    {\n        path: 'frontpage',\n        title: 'Forside',\n        renderContent: () => <Intro />\n    },\n    {\n        path: 'dialog-forms',\n        title: 'Dialogskjema',\n        renderContent: () => <DialogForms />\n    },\n    {\n        path: 'frilans',\n        title: 'Frilans',\n        renderContent: () => <FrilansExample />\n    },\n    {\n        path: 'næring',\n        title: 'Næringsvirksomhet',\n        renderContent: () => <VirksomhetExample />\n    }\n];\n\nexport const getRouteConfig = (pathname: string): RouteConfig | undefined => {\n    return routes.find((f) => isActiveRoute(f.path, pathname));\n};\n\nexport const isActiveRoute = (path: string, pathname: string): boolean => {\n    return pathname.indexOf(path) >= 0;\n};\n","import * as React from 'react';\nimport { Button, Menu, MenuItem, Wrapper } from 'react-aria-menubutton';\nimport { useHistory } from 'react-router-dom';\nimport { NedChevron } from 'nav-frontend-chevron';\nimport { isActiveRoute, RouteConfig, routes } from '../../config/routeConfig';\nimport './headerMenu.less';\n\nconst renderMenuItem = (route: RouteConfig) => {\n    return (\n        <li key={route.path}>\n            <MenuItem className=\"headerMenu__menu__item\">\n                <div data-page={route.path}>{route.title}</div>\n            </MenuItem>\n        </li>\n    );\n};\n\nconst HeaderMenu: React.StatelessComponent = () => {\n    const history = useHistory();\n    const {\n        location: { pathname }\n    } = history;\n\n    const toggle = (element: any) => {\n        const r = element.props ? element.props['data-page'] : undefined;\n        if (r) {\n            history.push(r);\n        }\n    };\n    const route = routes.find((r) => isActiveRoute(r.path, pathname)) || routes[0];\n    return (\n        <div className=\"headerMenu\">\n            <Wrapper className=\"headerMenu__wrapper\" onSelection={toggle}>\n                <Button className=\"headerMenu__button\">\n                    <div className=\"headerMenu__button__label\">{route ? route.title : 'Velg'}</div>\n                    <div className=\"headerMenu__button__chevron\">\n                        <NedChevron />\n                    </div>\n                </Button>\n                <Menu className=\"headerMenu__menu\">\n                    <ul>{routes.map(renderMenuItem)}</ul>\n                </Menu>\n            </Wrapper>\n        </div>\n    );\n};\nexport default HeaderMenu;\n","import React from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport 'nav-frontend-lenker-style';\nimport { isActiveRoute, routes } from '../../config/routeConfig';\n\nconst lenkeBem = bemUtils('lenke');\n\nconst LeftMenu: React.FunctionComponent = () => {\n    const {\n        location: { pathname }\n    } = useHistory();\n    return (\n        <div className=\"leftMenu\">\n            {routes.map((route) => (\n                <Link\n                    key={route.path}\n                    to={route.path}\n                    className={lenkeBem.classNames(\n                        lenkeBem.block,\n                        lenkeBem.modifierConditional('active', isActiveRoute(route.path, pathname))\n                    )}>\n                    {route.title}\n                </Link>\n            ))}\n        </div>\n    );\n};\n\nexport default LeftMenu;\n","import React from 'react';\nimport MediaQuery from 'react-responsive';\nimport { useHistory } from 'react-router-dom';\nimport HeaderMenu from './components/header-menu/HeaderMenu';\nimport LeftMenu from './components/left-menu/LeftMenu';\nimport { getRouteConfig } from './config/routeConfig';\nimport Intro from './Intro';\n\ninterface Props {}\n\nconst DevContent: React.FunctionComponent<Props> = (props) => {\n    const history = useHistory();\n    const {\n        location: { pathname }\n    } = history;\n    const routeConfig = getRouteConfig(pathname);\n    return (\n        <>\n            <MediaQuery minWidth={1072}>\n                <aside className=\"asideContent\">\n                    <LeftMenu />\n                </aside>\n                <article style={{ maxWidth: '1000px' }} className=\"mainContent\">\n                    {routeConfig ? routeConfig.renderContent() : <Intro />}\n                </article>\n            </MediaQuery>\n            <MediaQuery maxWidth={1071}>\n                <aside className=\"asideContentTop\">\n                    <HeaderMenu />\n                </aside>\n                <article style={{ maxWidth: '1000px' }} className=\"mainContent\">\n                    {routeConfig ? routeConfig.renderContent() : <Intro />}\n                </article>\n            </MediaQuery>\n        </>\n    );\n};\n\nexport default DevContent;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { HashRouter } from 'react-router-dom';\nimport LanguageToggle from '@navikt/sif-common-core/lib/components/language-toggle/LanguageToggle';\nimport { Locale } from '@navikt/sif-common-core/lib/types/Locale';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport NAVLogo from './components/svg/NAVLogo';\nimport DevContent from './DevContent';\nimport './styles/dev.less';\n\ninterface Props {\n    onChangeLocale: (locale: Locale) => void;\n}\n\nconst DevPage: React.FunctionComponent<Props> = ({ onChangeLocale }) => {\n    const intl = useIntl();\n    return (\n        <main className=\"devPage\">\n            <header className=\"header\">\n                <span className=\"navLogo\">\n                    <NAVLogo />\n                </span>\n                <span className=\"header__title\">\n                    <Systemtittel>Sykdom i familien - sif-common-forms</Systemtittel>\n                </span>\n                <span className=\"languageToggler\">\n                    <LanguageToggle toggle={onChangeLocale} locale={intl.locale as Locale} />\n                </span>\n            </header>\n            <div className=\"contentWrapper\">\n                <HashRouter>\n                    <DevContent />\n                </HashRouter>\n            </div>\n        </main>\n    );\n};\n\nexport default DevPage;\n","import * as React from 'react';\nimport '@formatjs/intl-pluralrules/dist/locale-data/nb';\nimport '@formatjs/intl-pluralrules/dist/locale-data/nn';\nimport '@formatjs/intl-pluralrules/polyfill';\nimport { Locale } from '@navikt/sif-common-core/lib/types/Locale';\nimport {\n    getLocaleFromSessionStorage, setLocaleInSessionStorage\n} from '@navikt/sif-common-core/lib/utils/localeUtils';\nimport 'nav-frontend-skjema-style';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport AppIntlProvider from './dev/components/app-intl-provider/AppIntlProvider';\nimport DevPage from './dev/DevPage';\nimport '@navikt/sif-common-core/lib/styles/globalStyles.less';\n\nconst localeFromSessionStorage = getLocaleFromSessionStorage();\n\nconst App: React.FC = () => {\n    const [locale, setLocale] = React.useState(localeFromSessionStorage || 'nb');\n    return (\n        <Normaltekst tag=\"div\">\n            <AppIntlProvider locale={locale as Locale}>\n                <DevPage\n                    onChangeLocale={(l: Locale) => {\n                        setLocaleInSessionStorage(l);\n                        setLocale(l);\n                    }}\n                />\n            </AppIntlProvider>\n        </Normaltekst>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Modal from 'react-modal';\nimport App from './App';\n\nModal.setAppElement('#root');\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}