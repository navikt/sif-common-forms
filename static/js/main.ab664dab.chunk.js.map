{"version":3,"sources":["forms/i18n/defaultMessages.ts","forms/bosted-utland/bostedUtlandMessages.ts","forms/ferieuttak/ferieuttakMessages.ts","forms/fravær/fraværMessages.ts","forms/utenlandsopphold/utenlandsoppholdMessages.ts","forms/fosterbarn/fosterbarnMessages.ts","forms/virksomhet/virksomhetMessages.ts","forms/tidsperiode/tidsperiodeMessages.ts","forms/annet-barn/annetBarnMessages.ts","dev/components/app-intl-provider/messages.ts","dev/components/app-intl-provider/AppIntlProvider.tsx","dev/components/svg/NAVLogo.tsx","forms/bosted-utland/BostedUtlandForm.tsx","dev/components/page-intro/PageIntro.tsx","forms/utils/index.ts","forms/bosted-utland/bostedUtlandUtils.ts","forms/bosted-utland/BostedUtlandList.tsx","forms/bosted-utland/BostedUtlandListAndDialog.tsx","dev/components/submit-preview/SubmitPreview.tsx","dev/examples/dialog-forms/BostedUtlandExample.tsx","dev/components/validation-error-messages/ValidationErrorMessages.tsx","forms/ferieuttak/FerieuttakForm.tsx","forms/ferieuttak/ferieuttakUtils.ts","forms/ferieuttak/FerieuttakList.tsx","forms/ferieuttak/FerieuttakListAndDialog.tsx","dev/examples/dialog-forms/FerieuttakExample.tsx","forms/fosterbarn/FosterbarnForm.tsx","forms/fosterbarn/types.ts","forms/fosterbarn/FosterbarnList.tsx","forms/fosterbarn/FosterbarnListAndDialog.tsx","dev/examples/dialog-forms/FosterbarnExample.tsx","forms/tidsperiode/TidsperiodeForm.tsx","forms/tidsperiode/tidsperiodeUtils.ts","forms/tidsperiode/TidsperiodeList.tsx","forms/tidsperiode/TidsperiodeListAndDialog.tsx","dev/examples/dialog-forms/TidsperiodeExample.tsx","forms/utenlandsopphold/types.ts","forms/utenlandsopphold/utenlandsoppholdUtils.ts","forms/utenlandsopphold/UtenlandsoppholdForm.tsx","forms/utenlandsopphold/UtenlandsoppholdList.tsx","forms/utenlandsopphold/UtenlandsoppholdListAndDialog.tsx","dev/examples/dialog-forms/UtenlandsoppholdExample.tsx","forms/fravær/types.ts","forms/fravær/FraværListItem.tsx","forms/fravær/fraværUtilities.ts","forms/fravær/fraværValidationUtils.ts","forms/fravær/FraværDagerList.tsx","forms/components/formatted-html-message/FormattedHtmlMessage.tsx","forms/fravær/FraværTimerSelect.tsx","forms/fravær/FraværDagForm.tsx","forms/fravær/fraværÅrsakRadios.ts","forms/fravær/ÅrsakInfo.tsx","forms/fravær/FraværDagerListAndDialog.tsx","forms/fravær/FraværPeriodeForm.tsx","forms/fravær/FraværPerioderList.tsx","forms/fravær/FraværPerioderListAndDialog.tsx","dev/examples/dialog-forms/FraværExample.tsx","forms/annet-barn/AnnetBarnForm.tsx","forms/annet-barn/annetBarnUtils.ts","forms/annet-barn/AnnetBarnList.tsx","forms/annet-barn/AnnetBarnListAndDialog.tsx","dev/examples/dialog-forms/AnnetBarnExample.tsx","forms/virksomhet/types.ts","dev/examples/dialog-forms/DialogForms.tsx","forms/virksomhet/virksomhetUtils.ts","forms/virksomhet/mapVirksomhetToApiData.ts","forms/virksomhet/VirksomhetForm.tsx","forms/components/summary/DatoSvar.tsx","forms/components/summary/IntlLabelValue.tsx","forms/components/summary/JaNeiSvar.tsx","forms/components/summary/Sitat.tsx","forms/components/summary/SummaryBlock.tsx","forms/components/summary/TallSvar.tsx","forms/virksomhet/VirksomhetSummary.tsx","forms/virksomhet/VirksomhetInfoAndDialog.tsx","dev/examples/virksomhet-example/VirksomhetExample.tsx","dev/Intro.tsx","dev/examples/texts/Texts.tsx","dev/config/routeConfig.tsx","dev/components/header-menu/HeaderMenu.tsx","dev/components/left-menu/LeftMenu.tsx","dev/DevContent.tsx","dev/DevPage.tsx","App.tsx","index.tsx"],"names":["defaultValidationMessages","nb","ValidateRequiredFieldError","noValue","ValidateYesOrNoError","yesOrNoIsUnanswered","ValidateFødselsnummerError","invalidFødselsnummer","fødselsnummerNot11Chars","disallowedFødselsnummer","ValidateDateError","invalidDateFormat","dateBeforeMin","dateAfterMax","ValidateDateInRangeError","fromDateIsAfterToDate","toDateIsBeforeFromDate","ValidateListError","listIsEmpty","listHasTooFewItems","bostedUtlandMessages","nn","ferieuttakMessages","fraværMessages","getFraværÅrsakTekstKort","årsak","intl","intlHelper","utenlandsoppholdMessages","fosterbarnMessages","virksomhetMessages","tidsperiodeMessages","annetBarnMessages","commonNb","require","commonNn","validationNb","validationNn","appMessages","AppIntlProvider","locale","onError","children","messages","dayjs","NAVLogo","BostedUtlandFormFields","props","className","width","viewBox","fill","fillRule","d","PageIntro","title","padBottom","margin","tag","mapFomTomToDateRange","from","fom","to","tom","getIntlFormErrorRenderer","error","isFunction","bostedUtlandUtils","isValidBostedUtland","bosted","landkode","undefined","mapBostedUtlandToFormValues","dateToISOString","mapFormValuesToBostedUtland","formValues","id","guid","ISOStringToDate","BostedUtlandFormErrors","Form","getTypedFormComponents","BostedUtlandForm","maxDate","minDate","alleBosteder","onSubmit","onCancel","useIntl","FormikWrapper","initialValues","bostedToSubmit","Error","renderForm","formik","values","fomDateLimits","tomDateLimits","andreBosteder","map","filter","b","fieldErrorRenderer","DateRangePicker","legend","fullscreenOverlay","allowRangesToStartAndStopOnSameDate","disabledDateRanges","fromInputProps","name","label","validate","getDateRangeValidator","validateFromDate","required","min","max","toDate","dato","prettifyDate","toInputProps","validateToDate","fromDate","CountrySelect","getRequiredFieldValidator","bem","bemUtils","BostedUtlandList","bosteder","onDelete","onEdit","getItemId","opphold","getItemTitle","getCountryName","labelRenderer","navn","element","onClick","prettifyDateExtended","items","BostedUtlandListAndDialog","labels","dialogWidth","sortFunc","sortItemsByFom","formRenderer","item","allItems","listRenderer","SubmitPreview","FormField","style","borderTop","paddingTop","padding","fontSize","JSON","stringify","FormValidationErrorMessages","validationErrors","formName","intlMessages","validationErrorIntlKeys","validationeMessages","fields","Object","keys","forEach","field","errorKey","intlKey","createFieldErrorIntlKey","key","showExplanation","showMissingTextSummary","FerieuttakFormFields","FormikExample","useState","singleFormValues","setSingleFormValues","listFormValues","setListFormValues","border","includeButtons","submitButtonLabel","getFieldErrorRenderer","summaryFieldErrorRenderer","getSummaryFieldErrorRenderer","date1YearAgo","date1YearFromNow","getListValidator","addLabel","listTitle","modalTitle","emptyListText","flat","console","log","ferieuttakUtils","isValidFerieuttak","ferieuttak","mapFerieuttakToFormValues","mapFormValuesToFerieuttak","FerieuttakFormErrors","FerieuttakForm","alleFerieuttak","defaultLabels","intervalTitle","okButton","cancelButton","formLabels","andreFerieuttak","f","ferieuttakToSubmit","onChange","setTimeout","validateField","FerieuttakList","getDateTitleString","uttak","FerieuttakListAndDialog","FosterbarnFormField","ferie","FosterbarnFormErrors","fornavn","etternavn","fødselsnummer","FosterbarnForm","fosterbarn","disallowedFødselsnumre","text","includeName","defaultText","form_etternavn_label","form_fornavn_label","form_fødselsnummer_label","txt","hasValue","isFosterbarn","Input","getFødselsnummerValidator","disallowedValues","inputMode","maxLength","columns","FosterbarnList","getBarnTitleString","barn","paddingRight","formatName","FosterbarnListAndDialog","texts","liste_legg_til_knapp","liste_tittel","modal_tittel","liste_tom_liste_tekst","TidsperiodeFormFields","FosterbarnExample","tidsperiodeUtils","isValidDateTidsperiode","tidsperiode","mapDateTidsperiodeToFormValues","mapFormValuesToDateTidsperiode","TidsperiodeFormErrors","TidsperiodeForm","alleTidsperioder","inlineLabels","dateTidsperiodeToSubmit","initialMonth","datepickerUtils","getDateFromDateString","t","dayPickerProps","TidsperiodeList","TidsperiodeListAndDialog","formTitle","UtenlandsoppholdÅrsak","TidsperiodeExample","UtenlandsoppholdFormFields","utenlandsoppholdUtils","isValidUtenlandsopphold","utenlandsopphold","mapFormValuesToUtenlandsopphold","barnInnlagtPerioder","mapUtenlandsoppholdToFormValues","erBarnetInnlagt","UtlandsoppholdFormErrors","defaultFormValues","YesOrNo","UNANSWERED","UtenlandsoppholdForm","alleOpphold","registrerteTidsperioder","o","utils","utenlandsoppholdToSubmit","countryIsMemberOfEøsOrEfta","hasDateStringValues","fomDate","tomDate","includeInnlagtPerioderQuestion","YES","includeInnlagtQuestion","showÅrsakQuestion","length","dateToday","YesOrNoQuestion","land","getYesOrNoValidator","RadioPanelGroup","radios","value","INNLAGT_DEKKET_NORGE","INNLAGT_DEKKET_ANNET_LAND","ANNET","UtenlandsoppholdList","UtenlandsoppholdListAndDialog","FraværÅrsak","UtenlandsoppholdExample","FraværListItem","ordinært","marginTop","extend","isSameOrAfter","isSameOrBefore","Weekday","fraværDagToFraværDateRange","fraværDag","fraværPeriodeToDateRange","fraOgMed","tilOgMed","FraværFieldValidationErrors","getWeekdayName","date","getDay","sunday","monday","tuesday","wednesday","thursday","friday","saturday","rangeCollideWithRanges","range","ranges","some","periode","fromDay","toDay","isBefore","isAfter","dateCollideWithRanges","timeText","timer","getHjemmePgaKoronaFormValueFromFraværÅrsak","smittevernhensyn","stengtSkoleBhg","NO","getÅrsakFromFraværFormValues","hjemmePgaKorona","mapFraværDagToFormValues","timerArbeidsdag","timerFravær","mapFraværPeriodeToFormValues","fraværPeriode","FraværDagerList","fraværDager","getFraværDagListItemTitle","basicHtmlTagRenderers","li","strong","p","em","FormattedHtmlMessage","getOptionsList","maksTid","newOptionElement","toString","replace","go","jsxList","tid","FraværTimerSelect","FraværDagForm","Select","bredde","FraværDagFormFields","validateErSammeÅr","maybeDateFrom","maybeDateTo","getFullYear","fra_og_til_er_ulike_år","validateNotHelgedag","maybeDate","dateErHelg","er_helg","validateNoCollisions","fraværPerioder","allFraværDagDateRanges","allFraværPeriodeDateRanges","hasDateCollision","dag","rangesWithoutCurrentDag","hasRangeCollision","rangesWithoutCurrentPeriode","dager_overlapper_med_andre_dager","getFraværÅrsakRadios","ÅrsakInfo","FraværDagFormErrors","dato_kolliderer_med_annet_fravær","fravær_timer_mer_enn_arbeidstimer","FraværDagFormView","dagDescription","dateRangesToDisable","helgedagerIkkeTillatt","maksArbeidstidPerDag","headerContent","ok","avbryt","tittel","antallArbeidstimer","fraværÅrsakRadios","isSame","fraværDagToSubmit","mapFormValuesToFraværDag","isFraværDag","valgtDato","datepickerProps","disableWeekend","validateFraværDagCollision","getDateValidator","DatePicker","description","maybeMaxValue","isString","parseFloat","toMaybeNumber","maybeValue","maybeValueFloat","FraværDagerListAndDialog","FraværPeriodeFormFields","formHeaderContent","fraværDagA","fraværDagB","FraværPeriodeFormErrors","fra_dato_kolliderer_med_annet_fravær","til_dato_kolliderer_med_annet_fravær","getToDateValidator","helgedagerIkkeTillat","begrensTilSammeÅr","validateTilOgMedForCollision","getFromDateValidator","validateFraOgMedForCollision","FraværPeriodeForm","periodeDescription","tidsrom","fraværPeriodeToSubmit","mapFormValuesToFraværPeriode","isFraværPeriode","DateIntervalPicker","validateFraværPeriodeCollision","fraOgMed_tilOgMed","fromDatepickerProps","toDatepickerProps","FraværPerioderList","useTrashcan","FraværPerioderListAndDialog","fraværPeriodeA","fraværPeriodeB","AnnetBarnFormFields","perioder","dager","FraværExample","fraværPeriodeSingleFormValues","setFraværPeriodeSingleFormValues","fraværDagSingleFormValues","setFraværDagSingleFormValues","validateAll","annetBarnUtils","mapAnnetBarnToFormValues","annetBarn","fnr","fødselsdato","mapFormValuesToPartialAnnetBarn","isAnnetBarn","AnnetBarnFormErrors","AnnetBarnForm","annetBarnToSubmit","placeholder","placeholderNavn","aldersGrenseText","showYearSelector","placeholderFnr","AnnetBarnList","AnnetBarnListAndDialog","Næringstype","VirksomhetFormField","AnnetBarnExample","date4YearsAgo","flatten","tabRoutes","path","renderContent","BostedUtlandExample","FerieuttakExample","DialogForms","setPath","activeRoute","find","r","evt","idx","tabs","active","isVirksomhet","virksomhet","harFiskerNæringstype","næringstyper","n","FISKE","erVirksomhetRegnetSomNyoppstartet","oppstartsdato","startOf","mapVirksomhetToFormValues","blittYrkesaktivDato","varigEndringINæringsinntekt_dato","mapVirksomhetToVirksomhetApiData","harBesvartFiskerPåBladB","registrertINorge","harRegnskapsfører","erNyoppstartet","data","navnPåVirksomheten","organisasjonsnummer","registrertIUtlandet","registrertILand","landnavn","formatDateToApiFormat","erPågående","fiskerErPåBladB","næringsinntekt","harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene","yrkesaktivSisteTreFerdigliknedeÅrene","harHattVarigEndring","hattVarigEndringAvNæringsinntektSiste4Kalenderår","varigEndringINæringsinntekt_forklaring","varigEndringINæringsinntekt_inntektEtterEndring","varigEndring","forklaring","inntektEtterEndring","regnskapsfører_navn","regnskapsfører_telefon","regnskapsfører","telefon","MAKS_INNTEKT","VirksomhetFormName","ensureValidNæringsinntekt","visNæringsinntekt","VirksomhetForm","harFlereVirksomheter","skipOrgNumValidation","getText","virksomhetToSubmit","setFieldValue","includeValidationSummary","CheckboxPanelGroup","checkboxes","JORDBRUK_SKOGBRUK","DAGMAMMA","ANNEN","useAlpha3Code","maxWidth","getOrgNumberValidator","disabled","Checkbox","afterOnChange","checked","NumberInput","getNumberValidator","date3YearsAgo","Textarea","getStringValidator","prettifyApiDate","apiDato","apiStringDateToDate","DatoSvar","IntlLabelValue","intlLabelKey","labelKey","block","JaNeiSvar","harSvartJa","tagName","Sitat","display","paddingLeft","borderLeft","fontStyle","SummaryBlock","header","TallSvar","verdi","renderVirksomhetSummary","næring","erPåBladB","næringstekst","bladBTekst","getFiskerNæringTekst","join","tidsinfo","orgnr","VirksomhetSummary","erRegnetSomNyoppstartet","VirksomhetInfoAndDialog","onAfterChange","renderEditButtons","infoRenderer","Date","VirksomhetExample","setFormValues","setHarFlereVirksomheter","apiVirksomhet","deleteLabel","editLabel","infoTitle","currentTarget","Intro","Texts","formMessages","push","paddingBottom","routes","isActiveRoute","pathname","indexOf","renderMenuItem","route","data-page","withRouter","history","location","onSelection","lenkeBem","classNames","modifierConditional","routeConfig","getRouteConfig","minWidth","DevPage","onChangeLocale","toggle","localeFromSessionStorage","getLocaleFromSessionStorage","App","React","setLocale","l","setLocaleInSessionStorage","Modal","setAppElement","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ab664dab.chunk.js","sourcesContent":["import {\n    ValidateDateError,\n    ValidateDateInRangeError,\n    ValidateFødselsnummerError,\n    ValidateListError,\n    ValidateRequiredFieldError,\n    ValidateYesOrNoError,\n} from '@navikt/sif-common-formik/lib/validation';\n\nconst defaultValidationMessages = {\n    nb: {\n        [ValidateRequiredFieldError.noValue]: 'Feltet er påkrevd',\n        [ValidateYesOrNoError.yesOrNoIsUnanswered]: 'Feltet er påkrevd',\n        [ValidateFødselsnummerError.invalidFødselsnummer]: 'Ugyldig fødselsnummer',\n        [ValidateFødselsnummerError.fødselsnummerNot11Chars]: 'Fødselsnummeret må bestå av 11 siffer',\n        [ValidateFødselsnummerError.disallowedFødselsnummer]:\n            'Fødselsnummeret du har fylt uter ditt eget fødselsnummer',\n        [ValidateDateError.invalidDateFormat]: 'Ugyldig datoformat. Formatet må være dd.mm.åååå',\n        [ValidateDateError.dateBeforeMin]: 'Dato ikke være tidligere enn {dato}',\n        [ValidateDateError.dateAfterMax]: `Dato kan ikke være etter {dato}`,\n        [ValidateDateInRangeError.fromDateIsAfterToDate]: 'Fra-dato må være lik eller før til-dato',\n        [ValidateDateInRangeError.toDateIsBeforeFromDate]: 'Til-dato må være lik eller etter fra-dato',\n        [ValidateListError.listIsEmpty]: 'Du har ikke lagt til noe i listen',\n        [ValidateListError.listHasTooFewItems]: 'Du har lagt til for få',\n        [ValidateListError.listHasTooFewItems]: 'Du har lagt til for mange',\n    },\n};\n\nexport default defaultValidationMessages;\n","import defaultValidationMessages from '../i18n/defaultMessages';\n\nconst bostedUtlandMessages = {\n    nb: {\n        'bostedUtland.list.add': 'Legg til opphold',\n        'bostedUtland.form.tittel': 'Utenlandsopphold',\n        'bostedUtland.form.tidsperiode.spm': 'Tidsperiode',\n        'bostedUtland.form.tidsperiode.fraDato': 'Fra og med',\n        'bostedUtland.form.tidsperiode.tilDato': 'Til og med',\n        'bostedUtland.form.land.spm': 'Velg land',\n        'bostedUtland.form.ok': 'Legg til',\n        'bostedUtland.form.avbryt': 'Avbryt',\n        'bostedUtlandForm.fom.noValue': defaultValidationMessages.nb.noValue,\n        'bostedUtlandForm.fom.dateAfterMax': defaultValidationMessages.nb.dateAfterMax,\n        'bostedUtlandForm.fom.dateBeforeMin': defaultValidationMessages.nb.dateBeforeMin,\n        'bostedUtlandForm.fom.invalidDateFormat': defaultValidationMessages.nb.invalidDateFormat,\n        'bostedUtlandForm.fom.fromDateIsAfterToDate': defaultValidationMessages.nb.fromDateIsAfterToDate,\n        'bostedUtlandForm.tom.noValue': defaultValidationMessages.nb.noValue,\n        'bostedUtlandForm.tom.dateAfterMax': defaultValidationMessages.nb.dateAfterMax,\n        'bostedUtlandForm.tom.dateBeforeMin': defaultValidationMessages.nb.dateBeforeMin,\n        'bostedUtlandForm.tom.invalidDateFormat': defaultValidationMessages.nb.invalidDateFormat,\n        'bostedUtlandForm.tom.toDateIsBeforeFromDate': defaultValidationMessages.nb.invalidDateFormat,\n        'bostedUtlandForm.landkode.noValue': defaultValidationMessages.nb.noValue,\n    },\n    nn: {\n        'bostedUtland.list.add': 'Legg til opphald',\n        'bostedUtland.form.tittel': 'Utenlandsopphald',\n        'bostedUtland.form.tidsperiode.spm': 'Tidsperiode',\n        'bostedUtland.form.tidsperiode.fraDato': 'Frå og med',\n        'bostedUtland.form.tidsperiode.tilDato': 'Til og med',\n        'bostedUtland.form.land.spm': 'Velg land',\n        'bostedUtland.form.ok': 'Legg til',\n        'bostedUtland.form.avbryt': 'Avbryt',\n    },\n};\n\nexport default bostedUtlandMessages;\n","import defaultValidationMessages from '../i18n/defaultMessages';\n\nconst ferieuttakMessages = {\n    nb: {\n        'ferieuttak.list.title': 'Registrer uttak av ferie',\n        'ferieuttak.list.fromDate': 'Fra og med',\n        'ferieuttak.list.toDate': 'Til og med',\n        'ferieuttak.list.intervalTitle': 'Velg tidsrom',\n        'ferieuttak.list.okButton': 'Ok',\n        'ferieuttak.list.cancelButton': 'Avbryt',\n        'ferieuttak.form.validation.required': 'Feltet er påkrevd',\n        'ferieuttak.form.validation.dateOutsideRange': 'Første gyldige dato er {fom}, og siste gyldige dato er {tom}',\n        'ferieuttak.form.validation.fromDateAfterToDate': 'Fra-dato må være lik eller før til-dato',\n        'ferieuttak.form.validation.toDateBeforeFromDate': 'Til-dato må være lik eller etter fra-dato',\n        'ferieuttakForm.fom.noValue': defaultValidationMessages.nb.noValue,\n        'ferieuttakForm.fom.dateAfterMax': defaultValidationMessages.nb.dateAfterMax,\n        'ferieuttakForm.fom.dateBeforeMin': defaultValidationMessages.nb.dateBeforeMin,\n        'ferieuttakForm.fom.invalidDateFormat': defaultValidationMessages.nb.invalidDateFormat,\n        'ferieuttakForm.fom.fromDateIsAfterToDate': defaultValidationMessages.nb.fromDateIsAfterToDate,\n        'ferieuttakForm.tom.noValue': defaultValidationMessages.nb.noValue,\n        'ferieuttakForm.tom.dateAfterMax': defaultValidationMessages.nb.dateAfterMax,\n        'ferieuttakForm.tom.dateBeforeMin': defaultValidationMessages.nb.dateBeforeMin,\n        'ferieuttakForm.tom.invalidDateFormat': defaultValidationMessages.nb.invalidDateFormat,\n        'ferieuttakForm.tom.toDateIsBeforeFromDate': defaultValidationMessages.nb.invalidDateFormat,\n    },\n    nn: {\n        'ferieuttak.list.title': 'Registrer uttak av ferie',\n        'ferieuttak.list.fromDate': 'Frå og med',\n        'ferieuttak.list.toDate': 'Til og med',\n        'ferieuttak.list.intervalTitle': 'Velg tidsrom',\n        'ferieuttak.list.okButton': 'Ok',\n        'ferieuttak.list.cancelButton': 'Avbryt',\n        'ferieuttak.form.validation.required': 'Feltet er påkrevd',\n        'ferieuttak.form.validation.dateOutsideRange': 'Første gyldige dato er {fom}, og siste gyldige dato er {tom}',\n        'ferieuttak.form.validation.fromDateAfterToDate': 'Frå-dato må vere lik eller før til-dato',\n        'ferieuttak.form.validation.toDateBeforeFromDate': 'Til-dato må vere lik eller etter frå-dato',\n    },\n};\n\nexport default ferieuttakMessages;\n","import intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { IntlShape } from 'react-intl';\nimport defaultValidationMessages from '../i18n/defaultMessages';\nimport { FraværÅrsak } from './types';\n\nconst fraværMessages = {\n    nb: {\n        'fravær.årsak.STENGT_SKOLE_ELLER_BARNEHAGE': 'Skolen/barnehagen var stengt på grunn av koronasituasjonen.',\n        'fravær.årsak.SMITTEVERNHENSYN':\n            'Skolen/barnehagen var åpen, men barnet måtte være hjemme på grunn av særlige smittevernhensyn.',\n        'fravær.årsak.STENGT_SKOLE_ELLER_BARNEHAGE.kort': 'stengt skole/barnehage',\n        'fravær.årsak.SMITTEVERNHENSYN.kort': 'særlige smittevernhensyn',\n\n        'fravær.list.årsak': 'På grunn av {årsak}',\n        'fravær.form.validation.required': 'Feltet er påkrevd',\n        'fravær.form.validation.dateOutsideRange': 'Første gyldige dato er {fom}, og siste gyldige dato er {tom}',\n        'fravær.form.validation.fromDateAfterToDate': 'Fra-dato må være lik eller før til-dato',\n        'fravær.form.validation.toDateBeforeFromDate': 'Til-dato må være lik eller etter fra-dato',\n        'fravær.form.validation.fra_og_til_er_ulike_år': 'Fra og til dato må være i samme år',\n        'fravær.form.validation.timer_mer_enn_arbeidstimer':\n            'Antall timer med fravær kan ikke være mer enn antall timer du skulle ha jobbet denne dagen',\n        'fravær.form.validation.er_helg': 'Lørdag og søndag er ikke gyldig.',\n        'fieldvalidation.dager_overlapper_med_andre_dager':\n            'Én eller flere dager med fravær overlapper med andre dager med fravær.',\n        'fieldvalidation.fra_dato_kolliderer_med_annet_fravær':\n            'Fra og med datoen overlapper med allerede registrert fraværsdag',\n        'fieldvalidation.til_dato_kolliderer_med_annet_fravær':\n            'Til og med datoen overlapper med allerede registrert fraværsdag',\n        'fieldvalidation.dato_kolliderer_med_annet_fravær': 'Datoen overlapper med allerede registrert fraværsdag',\n        'info.smittevern.tittel': 'Hva menes med særlige smittevernhensyn?',\n        'info.smittevern.info.html':\n            'Når barnehagen eller skolen er åpen, men du må være hjemme med barnet ditt på grunn <strong>av særlige smittevernhensyn</strong>, kan du bruke omsorgsdager. Det er en lege som avgjør om det foreligger særlige smittevernhensyn. Det kan være smittevernhensyn til barnet eller andre familiemedlemmer som bor med barnet.',\n        'info.årsak.tittel': 'Hva om begge årsakene gjelder i perioden jeg har lagt inn?',\n        'info.årsak.info.1': `Hvis du har vært hjemme med barn både fordi barnehage/skole var stengt, og på grunn av særlige smittevernshensyn, må du legge inn flere perioder. Når du har lagt inn én periode og trykker OK, får du mulighet til å legge til flere perioder.`,\n        'info.årsak.info.2': `Eksempel:`,\n        'info.årsak.info.3': `1.-2. mars var du hjemme med barn fordi barnehage/skole var stengt. Da legger du inn 1.-2. mars som en periode. I tillegg var du hjemme 3.-5. mars på grunn av særlige smittevernshensyn. Da legger du inn 3.-5. mars som en egen periode.`,\n\n        'fravær.form.felles.hjemmePgaKorona':\n            'Var du hjemme med barn fordi barnehage/skole var stengt på grunn av koronaviruset, eller på grunn av særlige smittevernshensyn?',\n        'fravær.form.felles.årsak': 'Velg årsaken til at du var hjemme med barn i perioden du har lagt inn',\n        'fravær.form.felles.ok': 'Ok',\n        'fravær.form.felles.avbryt': 'Avbryt',\n        'fravær.form.periode.tittel': 'Periode med fravær fra jobb',\n        'fravær.form.periode.tidsrom': 'Velg tidsrom',\n        'fravær.form.periode.fom': 'Fra og med',\n        'fravær.form.periode.tom': 'Til og med',\n        'fravær.form.dag.tittel': 'Dag med delvis fravær fra jobb',\n        'fravær.form.dag.dato': 'Dato',\n        'fravær.form.dag.antallArbeidstimer': 'Antall timer du skulle ha jobbet denne dagen',\n        'fravær.form.dag.timerFravær': 'Antall timer du var borte fra jobb denne dagen',\n\n        'fraværDagForm.dato.noValue': defaultValidationMessages.nb.noValue,\n        'fraværDagForm.dato.invalidDateFormat': defaultValidationMessages.nb.invalidDateFormat,\n        'fraværDagForm.dato.dateAfterMax': defaultValidationMessages.nb.dateAfterMax,\n        'fraværDagForm.dato.dateBeforeMin': defaultValidationMessages.nb.dateBeforeMin,\n        'fraværDagForm.dato.er_helg': 'Lørdag og søndag er ikke gyldig',\n        'fraværDagForm.dato.dato_kolliderer_med_annet_fravær': 'Datoen overlapper med allerede registrert fraværsdag',\n        'fraværDagForm.timerArbeidsdag.noValue': defaultValidationMessages.nb.noValue,\n        'fraværDagForm.timerFravær.noValue': defaultValidationMessages.nb.noValue,\n        'fraværDagForm.timerFravær.fravær_timer_mer_enn_arbeidstimer': 'Fravær kan ikke være høyere enn arbeidstimer',\n        'fraværDagForm.hjemmePgaKorona.yesOrNoIsUnanswered': defaultValidationMessages.nb.noValue,\n        'fraværDagForm.årsak.noValue': defaultValidationMessages.nb.noValue,\n\n        'fraværPeriodeForm.fraOgMed.noValue': defaultValidationMessages.nb.noValue,\n        'fraværPeriodeForm.fraOgMed.dateAfterMax': defaultValidationMessages.nb.dateAfterMax,\n        'fraværPeriodeForm.fraOgMed.dateBeforeMin': defaultValidationMessages.nb.dateBeforeMin,\n        'fraværPeriodeForm.fraOgMed.invalidDateFormat': defaultValidationMessages.nb.invalidDateFormat,\n        'fraværPeriodeForm.fraOgMed.fromDateIsAfterToDate': defaultValidationMessages.nb.fromDateIsAfterToDate,\n        'fraværPeriodeForm.fraOgMed.er_helg': 'Lørdag og søndag er ikke gyldig',\n        'fraværPeriodeForm.fraOgMed.fra_og_til_er_ulike_år': 'Fra og til dato må være i samme år',\n        'fraværPeriodeForm.fraOgMed.fra_dato_kolliderer_med_annet_fravær':\n            'Fra og med datoen overlapper med allerede registrert fraværsdag',\n        'fraværPeriodeForm.tilOgMed.noValue': defaultValidationMessages.nb.noValue,\n        'fraværPeriodeForm.tilOgMed.dateAfterMax': defaultValidationMessages.nb.dateAfterMax,\n        'fraværPeriodeForm.tilOgMed.dateBeforeMin': defaultValidationMessages.nb.dateBeforeMin,\n        'fraværPeriodeForm.tilOgMed.invalidDateFormat': defaultValidationMessages.nb.invalidDateFormat,\n        'fraværPeriodeForm.tilOgMed.toDateIsBeforeFromDate': defaultValidationMessages.nb.toDateIsBeforeFromDate,\n        'fraværPeriodeForm.tilOgMed.er_helg': 'Lørdag og søndag er ikke gyldig',\n        'fraværPeriodeForm.tilOgMed.fra_og_til_er_ulike_år': 'Fra og til dato må være i samme år',\n        'fraværPeriodeForm.tilOgMed.til_dato_kolliderer_med_annet_fravær':\n            'Til og med datoen overlapper med allerede registrert fraværsdag',\n        'fraværPeriodeForm.årsak.noValue': defaultValidationMessages.nb.noValue,\n        'fraværPeriodeForm.årsak.yesOrNoIsUnanswered': defaultValidationMessages.nb.noValue,\n        'fraværPeriodeForm.periode.dager_overlapper_med_andre_dager':\n            'Én eller flere dager med fravær overlapper med andre dager med fravær.',\n    },\n    nn: {\n        'fravær.list.årsak': 'På grunn av {årsak}',\n        'fravær.form.validation.required': 'Feltet er påkrevd',\n        'fravær.form.validation.dateOutsideRange': 'Første gyldige dato er {fom}, og siste gyldige dato er {tom}',\n        'fravær.form.validation.fromDateAfterToDate': 'Frå-datoen må vere lik eller før til-datoen',\n        'fravær.form.validation.toDateBeforeFromDate': 'Til-datoen må vere lik eller etter frå-datoen',\n        'fravær.form.validation.fra_og_til_er_ulike_år': 'Fra og til dato må vera i same år',\n        'fieldvalidation.dager_overlapper_med_andre_dager':\n            'Ein eller fleire dagar med fråvær overlappar andre dagar med fråvær.',\n        'fieldvalidation.fra_dato_kolliderer_med_annet_fravær':\n            'Frå og med datoen overlappar med allereie registrert fråværsdag',\n        'fieldvalidation.til_dato_kolliderer_med_annet_fravær':\n            'Til og med datoen overlappar med allereie registrert fråværsdag',\n        'fieldvalidation.dato_kolliderer_med_annet_fravær': 'Datoen overlappar med allereie registrert fråværsdag',\n        'fravær.form.validation.timer_mer_enn_arbeidstimer':\n            'Talet på timar med fråvær kan ikkje vere meir enn talet på timar du skulle ha jobba denne dagen',\n        'fravær.form.validation.er_helg': 'Laurdag og søndag er ikkje gyldig.',\n\n        'fravær.årsak.STENGT_SKOLE_ELLER_BARNEHAGE': 'Skolen/barnehagen var stengt på grunn av koronasituasjonen',\n        'fravær.årsak.SMITTEVERNHENSYN':\n            'Skolen/barnehagen var åpen, men barnet måtte være hjemme på grunn av særlige smittevernhensyn.',\n        'fravær.årsak.ORDINÆRT_FRAVÆR': 'Ordinært fravær',\n        'fravær.årsak.STENGT_SKOLE_ELLER_BARNEHAGE.kort': 'stengt skole/barnehage',\n        'fravær.årsak.SMITTEVERNHENSYN.kort': 'særlige smittevernhensyn',\n        'fravær.årsak.ORDINÆRT_FRAVÆR.kort': 'ordinært fravær',\n        'info.smittevern.tittel': 'Hva menes med særlige smittevernhensyn?',\n        'info.smittevern.info.html':\n            'Når barnehagen eller skolen er åpen, men du må være hjemme med barnet ditt på grunn <strong>av særlige smittevernhensyn</strong>, kan du bruke omsorgsdager. Det er en lege som avgjør om det foreligger særlige smittevernhensyn. Det kan være smittevernhensyn til barnet eller andre familiemedlemmer som bor med barnet.',\n        'info.årsak.tittel': 'Hva om begge årsakene gjelder i perioden jeg har lagt inn?',\n        'info.årsak.info.1': `Hvis du har vært hjemme med barn både fordi barnehage/skole var stengt, og på grunn av særlige smittevernshensyn, må du legge inn flere perioder. Når du har lagt inn én periode og trykker OK, får du mulighet til å legge til flere perioder.`,\n        'info.årsak.info.2': `Eksempel:`,\n        'info.årsak.info.3': `1.-2. mars var du hjemme med barn fordi barnehage/skole var stengt. Da legger du inn 1.-2. mars som en periode. I tillegg var du hjemme 3.-5. mars på grunn av særlige smittevernshensyn. Da legger du inn 3.-5. mars som en egen periode.`,\n    },\n};\n\nexport const getFraværÅrsakTekst = (årsak: FraværÅrsak, intl: IntlShape): string => {\n    return intlHelper(intl, `fravær.årsak.${årsak}`);\n};\n\nexport const getFraværÅrsakTekstKort = (årsak: FraværÅrsak, intl: IntlShape): string => {\n    return intlHelper(intl, `fravær.årsak.${årsak}.kort`);\n};\n\nexport default fraværMessages;\n","import defaultValidationMessages from '../i18n/defaultMessages';\n\nconst utenlandsoppholdMessages = {\n    nb: {\n        'utenlandsopphold.list.add': '+ Legg til opphold',\n        'utenlandsopphold.form.tittel': 'Utenlandsopphold',\n        'utenlandsopphold.form.tidsperiode.spm': 'Velg tidsperiode for oppholdet',\n        'utenlandsopphold.form.tidsperiode.fraDato': 'Fra og med',\n        'utenlandsopphold.form.tidsperiode.tilDato': 'Til og med',\n        'utenlandsopphold.form.land.spm': 'Velg land',\n        'utenlandsopphold.form.erBarnetInnlagt.spm': 'Er, eller skal, barnet være innlagt i helseinstitusjon i {land}?',\n        'utenlandsopphold.form.perioderBarnetErInnlag.formTitle': 'Periode barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.addLabel': 'Legg til periode barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.modalTitle': 'Periode(r) barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.listTitle': 'Periode(r) barnet er innlagt',\n        'utenlandsopphold.form.årsak.spm': 'Hvordan dekkes utgiftene til innleggelsen?',\n        'utenlandsopphold.form.årsak.BARNET_INNLAGT_I_HELSEINSTITUSJON_FOR_NORSK_OFFENTLIG_REGNING':\n            'For norsk offentlig regning',\n        'utenlandsopphold.form.årsak.BARNET_INNLAGT_I_HELSEINSTITUSJON_DEKKET_ETTER_AVTALE_MED_ET_ANNET_LAND_OM_TRYGD':\n            'Etter trygdeavtale med et annet land',\n        'utenlandsopphold.form.årsak.ANNET': 'Jeg dekker utgiftene selv',\n        'utenlandsopphold.oppsummering.årsak.ANNET': 'Jeg dekker utgiftene selv',\n        'utenlandsopphold.form.ok': 'Legg til',\n        'utenlandsopphold.form.avbryt': 'Avbryt',\n        'utenlandsoppholdForm.fom.noValue': defaultValidationMessages.nb.noValue,\n        'utenlandsoppholdForm.fom.dateAfterMax': defaultValidationMessages.nb.dateAfterMax,\n        'utenlandsoppholdForm.fom.dateBeforeMin': defaultValidationMessages.nb.dateBeforeMin,\n        'utenlandsoppholdForm.fom.invalidDateFormat': defaultValidationMessages.nb.invalidDateFormat,\n        'utenlandsoppholdForm.fom.fromDateIsAfterToDate': defaultValidationMessages.nb.fromDateIsAfterToDate,\n        'utenlandsoppholdForm.tom.noValue': defaultValidationMessages.nb.noValue,\n        'utenlandsoppholdForm.tom.dateAfterMax': defaultValidationMessages.nb.dateAfterMax,\n        'utenlandsoppholdForm.tom.dateBeforeMin': defaultValidationMessages.nb.dateBeforeMin,\n        'utenlandsoppholdForm.tom.invalidDateFormat': defaultValidationMessages.nb.invalidDateFormat,\n        'utenlandsoppholdForm.tom.toDateIsBeforeFromDate': defaultValidationMessages.nb.invalidDateFormat,\n        'utenlandsoppholdForm.landkode.noValue': defaultValidationMessages.nb.noValue,\n        'utenlandsoppholdForm.årsak.noValue': defaultValidationMessages.nb.noValue,\n        'utenlandsoppholdForm.erBarnetInnlagt.yesOrNoIsUnanswered': defaultValidationMessages.nb.yesOrNoIsUnanswered,\n        'utenlandsoppholdForm.barnInnlagtPerioder.listIsEmpty': defaultValidationMessages.nb.listIsEmpty,\n    },\n    nn: {\n        'utenlandsopphold.list.add': 'Legg til opphald',\n        'utenlandsopphold.form.tittel': 'Utanlandsopphald',\n        'utenlandsopphold.form.tidsperiode.spm': 'Tidsperiode',\n        'utenlandsopphold.form.tidsperiode.fraDato': 'Frå og med',\n        'utenlandsopphold.form.tidsperiode.tilDato': 'Til og med',\n        'utenlandsopphold.form.land.spm': 'Vel land',\n        'utenlandsopphold.form.erBarnetInnlagt.spm': 'Er, eller skal, barnet bli lagt inn i helseinstitusjon i {land}?',\n        'utenlandsopphold.form.perioderBarnetErInnlag.formTitle': 'Perioden barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.addLabel': 'Legg til perioden barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.modalTitle': 'Perioden/periodane barnet er innlagt',\n        'utenlandsopphold.form.perioderBarnetErInnlag.listTitle': 'Perioden/periodane barnet er innlagt',\n        'utenlandsopphold.form.årsak.spm': 'Korleis blir utgiftene til innlegginga dekte?',\n        'utenlandsopphold.form.årsak.BARNET_INNLAGT_I_HELSEINSTITUSJON_FOR_NORSK_OFFENTLIG_REGNING':\n            'For norsk offentleg rekning',\n        'utenlandsopphold.form.årsak.BARNET_INNLAGT_I_HELSEINSTITUSJON_DEKKET_ETTER_AVTALE_MED_ET_ANNET_LAND_OM_TRYGD':\n            'Etter trygdeavtale med eit anna land',\n        'utenlandsopphold.form.årsak.ANNET': 'Eg dekkjer utgiftene sjølv',\n        'utenlandsopphold.oppsummering.årsak.ANNET': 'Eg dekkjer utgiftene sjølv',\n        'utenlandsopphold.form.ok': 'Legg til',\n        'utenlandsopphold.form.avbryt': 'Avbryt',\n    },\n};\n\nexport default utenlandsoppholdMessages;\n","import defaultValidationMessages from '../i18n/defaultMessages';\n\nconst fosterbarnMessages = {\n    nb: {\n        'fosterbarn.form.etternavn_label': 'Etternavn',\n        'fosterbarn.form.fornavn_label': 'Fornavn',\n        'fosterbarn.form.fødselsnummer_label': 'Fødselsnummer',\n        'fosterbarn.list.legg_til_knapp': 'Legg til fosterbarn',\n        'fosterbarn.list.tittel': 'Registrerte fosterbarn',\n        'fosterbarn.modal.tittel': 'Fosterbarn',\n        'fosterbarnForm.fødselsnummer.noValue': defaultValidationMessages.nb.noValue,\n        'fosterbarnForm.fnr.invalidFødselsnummer': defaultValidationMessages.nb.invalidFødselsnummer,\n        'fosterbarnForm.fnr.fødselsnummerNot11Chars': defaultValidationMessages.nb.fødselsnummerNot11Chars,\n        'fosterbarnForm.fnr.disallowedFødselsnummer': defaultValidationMessages.nb.disallowedFødselsnummer,\n    },\n    nn: {\n        'fosterbarn.form.etternavn_label': 'Etternavn',\n        'fosterbarn.form.fornavn_label': 'Fornavn',\n        'fosterbarn.form.fødselsnummer_label': 'Fødselsnummer',\n        'fosterbarn.list.legg_til_knapp': 'Legg til fosterbarn',\n        'fosterbarn.list.tittel': 'Registrerte fosterbarn',\n        'fosterbarn.modal.tittel': 'Fosterbarn',\n    },\n};\n\nexport default fosterbarnMessages;\n","const virksomhetMessages = {\n    nb: {\n        'sifForms.virksomhet.næringstype_FISKE': 'Fisker',\n        'sifForms.virksomhet.næringstype_JORDBRUK_SKOGBRUK': 'Jordbruker',\n        'sifForms.virksomhet.næringstype_DAGMAMMA': 'Dagmamma eller familiebarnehage i eget hjem',\n        'sifForms.virksomhet.næringstype_ANNEN': 'Annet',\n        'sifForms.virksomhet.form_title': 'Opplysninger om virksomheten din',\n        'sifForms.virksomhet.form_title.flere': 'Opplysninger om den eldste virksomheten din',\n        'sifForms.virksomhet.hvilken_type_virksomhet': 'Hvilken type virksomhet har du?',\n        'sifForms.virksomhet.hvilken_type_virksomhet.flere': 'Hvilken type virksomhet er den eldste virksomheten din?',\n        'sifForms.virksomhet.hva_heter_virksomheten': 'Hva heter virksomheten?',\n        'sifForms.virksomhet.fisker_blad_b': 'Er du fisker på blad B?',\n        'sifForms.virksomhet.veileder_fisker.tittel': `Hvis du ikke har organiasjonsnummer`,\n        'sifForms.virksomhet.veileder_fisker': `Hvis du ikke har organisasjonsnummer, svarer du nei på spørsmålet \"Er {navnPåVirksomheten} registrert i Norge?\" I nedtrekkslisten velger du at virksomheten er registrert i Norge.`,\n        'sifForms.virksomhet.registert_i_norge': `Er {navnPåVirksomheten} registert i Norge?`,\n        'sifForms.virksomhet.registert_i_hvilket_land': `I hvilket land er {navnPåVirksomheten} din registrert i?`,\n        'sifForms.virksomhet.organisasjonsnummer': 'Hva er organisasjonsnummeret?',\n        'sifForms.virksomhet.startdato': `Når startet du {navnPåVirksomheten}?`,\n        'sifForms.virksomhet.kalender_fom': 'Startdato',\n        'sifForms.virksomhet.kalender_tom': 'Eventuell sluttdato',\n        'sifForms.virksomhet.kalender_pågående': 'Er pågående',\n        'sifForms.virksomhet.nyoppstartet.næringsinntektFlere.header': 'Næringsresultat for alle virksomhetene dine',\n        'sifForms.virksomhet.nyoppstartet.næringsinntektFlere.info':\n            'Du har opplyst at du har flere næringsvirksomheter. Her skal du legge inn næringsresultatet totalt for alle virksomhetene du har.',\n        'sifForms.virksomhet.næringsinntektFlere.header': 'Næringsvirksomhetene dine',\n        'sifForms.virksomhet.næringsinntektFlere.info':\n            'Du har opplyst at du har flere næringsvirksomheter som selvstendig næringsdrivende. Nå skal du svare på spørsmål som gjelder alle virksomhetene dine.',\n        'sifForms.virksomhet.næringsinntekt':\n            'Hva har du hatt totalt i næringsresultat før skatt de siste 12 månedene?',\n        'sifForms.virksomhet.næringsinntekt.info':\n            'Hvis virksomhetene har vart i kortere tid enn 12 måneder, kan du bruke denne perioden og regne om til årsinntekt. Oppgi beløpet i hele kroner.',\n        'sifForms.virksomhet.næringsinntekt_info':\n            'Næringsresultatet er inntekter du har i næringen din, minus utgifter og avskrivninger.',\n        'sifForms.virksomhet.næringsinntekt_info_title': 'Hva er næringsresultatet?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv':\n            'Har du begynt i arbeidslivet i løpet av de 3 siste ferdigliknede årene?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_info_title': 'Hva betyr dette?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_info':\n            'Du skal svare ja på spørsmålet hvis du før oppstart av næringsvirksomheten din hadde lav eller ingen inntekt.',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_dato': 'Oppgi dato for når du begynte i arbeidslivet',\n        'sifForms.virksomhet.varig_endring_spm':\n            'Har du hatt en varig endring i noen av arbeidsforholdene, virksomhetene eller arbeidssituasjonen din de siste fire årene?',\n        'sifForms.virksomhet.varig_endring_dato': 'Oppgi dato for endringen',\n        'sifForms.virksomhet.varig_endring_inntekt':\n            'Oppgi næringsinntekten din etter endringen. Oppgi årsinntekten i hele kroner.',\n        'sifForms.virksomhet.varig_endring_tekst':\n            'Her kan du skrive kort hva som har endret seg i arbeidsforholdene, virksomhetene eller arbeidssituasjonen din',\n        'sifForms.virksomhet.regnskapsfører_spm': 'Har du regnskapsfører?',\n        'sifForms.virksomhet.regnskapsfører_navn': 'Oppgi navnet til regnskapsfører',\n        'sifForms.virksomhet.regnskapsfører_telefon': 'Oppgi telefonnummeret til regnskapsfører',\n        'sifForms.virksomhet.veileder_innhenter_info.1':\n            'Vi henter inn opplysninger om virksomheten og inntekten din fra offentlige registre.',\n        'sifForms.virksomhet.veileder_innhenter_info.2': 'Vi tar kontakt med deg hvis vi trenger flere opplysninger.',\n\n        'sifForms.virksomhet.summary.tittel': 'Næringsvirksomhet som du har lagt inn:',\n        'sifForms.virksomhet.summary.navn': 'Navn',\n        'sifForms.virksomhet.summary.næringstype': 'Næringstype',\n        'sifForms.virksomhet.summary.varigEndring.dato': 'Dato for varig endring',\n        'sifForms.virksomhet.summary.varigEndring.næringsinntekt': 'Næringsinntekt etter endring',\n        'sifForms.virksomhet.summary.varigEndring.beskrivelse': 'Beskrivelse av endring',\n        'sifForms.virksomhet.summary.ikkeRegnskapsfører': 'Har ikke regnskapsfører.',\n        'sifForms.virksomhet.summary.tidsinfo.avsluttet': 'Startet {fraOgMed}, avsluttet {tilOgMed}.',\n        'sifForms.virksomhet.summary.tidsinfo.pågående': 'Startet {fraOgMed} (pågående).',\n        'sifForms.virksomhet.summary.fisker.påBladB': 'på Blad B',\n        'sifForms.virksomhet.summary.fisker.ikkePåBladB': 'ikke på Blad B',\n        'sifForms.virksomhet.summary.registrertILand': 'Registrert i {land}',\n        'sifForms.virksomhet.summary.registrertILand.orgnr': ' (organisasjonsnummer {orgnr})',\n        'sifForms.virksomhet.summary.yrkesaktiv.jaStartetDato': 'Ja, ble yrkesaktiv {dato}',\n        'sifForms.virksomhet.summary.næringsinntekst': 'Næringsinntekt:',\n        'sifForms.virksomhet.summary.regnskapsfører.header': 'Regnskapsfører',\n        'sifForms.virksomhet.summary.regnskapsfører.info': 'Ja, {navn}, telefon {telefon}',\n    },\n    nn: {\n        'sifForms.virksomhet.næringstype_FISKE': 'Fisker',\n        'sifForms.virksomhet.næringstype_JORDBRUK_SKOGBRUK': 'Jordbrukar',\n        'sifForms.virksomhet.næringstype_DAGMAMMA': 'Dagmamma eller familiebarnehage i eigen heim',\n        'sifForms.virksomhet.næringstype_ANNEN': 'Anna',\n        'sifForms.virksomhet.form_title': 'Opplysningar om verksemda di',\n        'sifForms.virksomhet.form_title.flere': 'Opplysningar om den eldste verksemda di',\n        'sifForms.virksomhet.hvilken_type_virksomhet': 'Kva type verksemd har du?',\n        'sifForms.virksomhet.hvilken_type_virksomhet.flere': 'Kva type er den eldste verksemda di?',\n        'sifForms.virksomhet.hva_heter_virksomheten': 'Kva heiter verksemda?',\n        'sifForms.virksomhet.fisker_blad_b': 'Er du fiskar på blad B?',\n        'sifForms.virksomhet.veileder_fisker.tittel': `Dersom du ikkje har organiasjonsnummer`,\n        'sifForms.virksomhet.veileder_fisker': `Dersom du ikkje har organisasjonsnummer, svarer du nei på spørsmålet \"Er {navnPåVirksomheten} registrert i Noreg?\". I nedtrekkslista vel du at verksemda er registrert i Noreg.`,\n        'sifForms.virksomhet.registert_i_norge': `Er {navnPåVirksomheten} registert i Noreg?`,\n        'sifForms.virksomhet.registert_i_hvilket_land': `I kva land er {navnPåVirksomheten} registrert?`,\n        'sifForms.virksomhet.organisasjonsnummer': 'Kva er organisasjonsnummeret?',\n        'sifForms.virksomhet.startdato': `Når starta du {navnPåVirksomheten}?`,\n        'sifForms.virksomhet.kalender_fom': 'Startdato',\n        'sifForms.virksomhet.kalender_tom': 'Eventuell sluttdato',\n        'sifForms.virksomhet.kalender_pågående': 'Er i gang',\n        'sifForms.virksomhet.nyoppstartet.næringsinntektFlere.header': 'Næringsresultat for alle verksemdene dine',\n        'sifForms.virksomhet.nyoppstartet.næringsinntektFlere.info':\n            'Du har opplyst at du har fleire næringsverksemder. Her skal du leggje inn næringsresultatet totalt for alle verksemdene du har.',\n        'sifForms.virksomhet.næringsinntektFlere.header': 'Næringsverksemdene dine',\n        'sifForms.virksomhet.næringsinntektFlere.info':\n            'Du har opplyst at du har fleire næringsverksemder som sjølvstendig næringsdrivande. Nå skal du svare på spørsmål som gjeld alle verksemdene dine.',\n        'sifForms.virksomhet.næringsinntekt':\n            'Kva har du hatt i næringsresultat før skatt dei siste 12 månadene? Dersom verksemda har vart i kortare tid, kan du bruke denne perioden og rekne om til årsinntekt. Gi opp beløpet i heile kroner.',\n        'sifForms.virksomhet.næringsinntekt.info':\n            'Dresom verksemdene har vart i kortare tid enn 12 månader, kan du bruke denne perioden og rekne om til årsinntekt. Gi opp beløpet i heile kroner.',\n        'sifForms.virksomhet.næringsinntekt_info':\n            'Næringsresultatet er inntekter du har i næringa di, minus utgifter og avskrivingar.',\n        'sifForms.virksomhet.næringsinntekt_info_title': 'Kva er næringsresultatet?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv':\n            'Har du begynt i arbeidslivet i løpet av dei 3 siste ferdiglikna åra?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_info_title': 'Kva betyr dette?',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_info':\n            'Du skal svare ja på spørsmålet dersom du før oppstart av næringsverksemda di hadde låg eller inga inntekt.',\n        'sifForms.virksomhet.har_blitt_yrkesaktiv_dato': 'Gi opp datoen for når du begynte i arbeidslivet',\n        'sifForms.virksomhet.varig_endring_spm':\n            'Har du hatt ei varig endring i nokre av arbeidsforholda, verksemdene eller arbeidssituasjonen din dei siste fire åra?',\n        'sifForms.virksomhet.varig_endring_dato': 'Gi opp datoen for endringa',\n        'sifForms.virksomhet.varig_endring_inntekt':\n            'Gi opp næringsinntekta di etter endringa. Gi opp årsinntekta i heile kroner.',\n        'sifForms.virksomhet.varig_endring_tekst':\n            'Her kan du skrive kort kva som har endra seg i arbeidsforholda, verksemdene eller arbeidssituasjonen din',\n        'sifForms.virksomhet.regnskapsfører_spm': 'Har du rekneskapsførar?',\n        'sifForms.virksomhet.regnskapsfører_navn': 'Gi opp namnet til rekneskapsføraren',\n        'sifForms.virksomhet.regnskapsfører_telefon': 'Gi opp telefonnummeret til rekneskapsføraren',\n        'sifForms.virksomhet.veileder_innhenter_info.1':\n            'Vi hentar inn opplysningar om verksemda og inntekta di frå offentlege register.',\n        'sifForms.virksomhet.veileder_innhenter_info.2': 'Vi tek kontakt med deg dersom vi treng fleire opplysningar',\n\n        'sifForms.virksomhet.summary.tittel': 'Næringsvirksomhet som du har lagt inn:',\n        'sifForms.virksomhet.summary.navn': 'Namn',\n        'sifForms.virksomhet.summary.næringstype': 'Næringstype',\n        'sifForms.virksomhet.summary.varigEndring.dato': 'Dato for varig endring',\n        'sifForms.virksomhet.summary.varigEndring.næringsinntekt': 'Næringsinntekt etter endring',\n        'sifForms.virksomhet.summary.varigEndring.beskrivelse': 'Skildring av endring',\n        'sifForms.virksomhet.summary.ikkeRegnskapsfører': 'Har ikkje regnskapsførar.',\n        'sifForms.virksomhet.summary.tidsinfo.avsluttet': 'Startet {fraOgMed}, avsluttet {tilOgMed}.',\n        'sifForms.virksomhet.summary.tidsinfo.pågående': 'Startet {fraOgMed} (pågåande).',\n        'sifForms.virksomhet.summary.fisker.påBladB': 'på Blad B',\n        'sifForms.virksomhet.summary.fisker.ikkePåBladB': 'ikkje på Blad B',\n        'sifForms.virksomhet.summary.registrertILand': 'Registrert i {land}',\n        'sifForms.virksomhet.summary.registrertILand.orgnr': ' (organisasjonsnummer {orgnr})',\n        'sifForms.virksomhet.summary.næringsinntekst': 'Næringsinntekt:',\n        'sifForms.virksomhet.summary.yrkesaktiv.jaStartetDato': 'Ja, vart yrkesaktiv {dato}',\n        'sifForms.virksomhet.summary.regnskapsfører.header': 'Regnskapsførar',\n        'sifForms.virksomhet.summary.regnskapsfører.info': 'Ja, {navn}, telefon {telefon}',\n    },\n};\nexport default virksomhetMessages;\n","import defaultValidationMessages from '../i18n/defaultMessages';\n\nconst tidsperiodeMessages = {\n    nb: {\n        'tidsperiode.form.title': 'Tidsperiode',\n        'tidsperiode.form.fromDate': 'Fra og med',\n        'tidsperiode.form.toDate': 'Til og med',\n        'tidsperiode.form.okButton': 'Ok',\n        'tidsperiode.form.cancelButton': 'Avbryt',\n        'tidsperiode.form.validation.required': 'Feltet er påkrevd',\n        'tidsperiode.form.validation.dateOutsideRange': 'Første gyldige dato er {fom}, og siste gyldige dato er {tom}',\n        'tidsperiode.form.validation.fromDateAfterToDate': 'Fra-dato må være lik eller før til-dato',\n        'tidsperiode.form.validation.toDateBeforeFromDate': 'Til-dato må være lik eller etter fra-dato',\n        'tidsperiodeForm.fom.noValue': defaultValidationMessages.nb.noValue,\n        'tidsperiodeForm.fom.dateAfterMax': defaultValidationMessages.nb.dateAfterMax,\n        'tidsperiodeForm.fom.dateBeforeMin': defaultValidationMessages.nb.dateBeforeMin,\n        'tidsperiodeForm.fom.invalidDateFormat': defaultValidationMessages.nb.invalidDateFormat,\n        'tidsperiodeForm.fom.fromDateIsAfterToDate': defaultValidationMessages.nb.fromDateIsAfterToDate,\n        'tidsperiodeForm.tom.noValue': defaultValidationMessages.nb.noValue,\n        'tidsperiodeForm.tom.dateAfterMax': defaultValidationMessages.nb.dateAfterMax,\n        'tidsperiodeForm.tom.dateBeforeMin': defaultValidationMessages.nb.dateBeforeMin,\n        'tidsperiodeForm.tom.invalidDateFormat': defaultValidationMessages.nb.invalidDateFormat,\n        'tidsperiodeForm.tom.toDateIsBeforeFromDate': defaultValidationMessages.nb.invalidDateFormat,\n    },\n    nn: {\n        'tidsperiode.form.title': 'Tidsperiode',\n        'tidsperiode.form.fromDate': 'Frå og med',\n        'tidsperiode.form.toDate': 'Til og med',\n        'tidsperiode.form.okButton': 'Ok',\n        'tidsperiode.form.cancelButton': 'Avbryt',\n        'tidsperiode.form.validation.required': 'Feltet er påkrevd',\n        'tidsperiode.form.validation.dateOutsideRange': 'Første gyldige dato er {fom}, og siste gyldige dato er {tom}',\n        'tidsperiode.form.validation.fromDateAfterToDate': 'Frå-datoen må vere lik eller før til-datoen',\n        'tidsperiode.form.validation.toDateBeforeFromDate': 'Til-datoen må vere lik eller etter frå-dato',\n    },\n};\n\nexport default tidsperiodeMessages;\n","const annetBarnMessages = {\n    nb: {\n        'annetBarn.form.title': 'Legg til barn',\n        'annetBarn.form.fnr': 'Barnets fødselsnummer/D-nummer',\n        'annetBarn.form.fødselsdato': 'Barnets fødselsdato',\n        'annetBarn.form.navn': 'Barnets navn',\n        'annetBarn.form.okButton': 'Ok',\n        'annetBarn.form.cancelButton': 'Avbryt',\n        'annetBarn.form.validation.required': 'Feltet er påkrevd',\n        'annetBarn.list.født': 'Født',\n        'annetBarnForm.navn.noValue': 'Feltet er påkrevd',\n        'annetBarnForm.fødselsdato.noValue': 'Feltet er påkrevd',\n        'annetBarnForm.fødselsdato.dateBeforeMin': 'Fødselsdato kan ikke være tidligere enn {dato}',\n        'annetBarnForm.fødselsdato.dateAfterMax': 'Fødselsdato kan ikke være etter dagens dato',\n        'annetBarnForm.fødselsdato.invalidFormat': 'Ugyldig datoformat. Formatet må være dd.mm.åååå',\n        'annetBarnForm.fnr.noValue': 'Feltet er påkrevd',\n        'annetBarnForm.fnr.invalidFødselsnummer': 'Ugyldig fødselsnummer',\n        'annetBarnForm.fnr.fødselsnummerNot11Chars': 'Fødselsnummeret må bestå av 11 siffer',\n        'annetBarnForm.fnr.disallowedFødselsnummer': 'Fødselsnummeret du har fylt uter ditt eget fødselsnummer',\n    },\n    nn: {\n        'annetBarn.form.title': 'Legg til barn',\n        'annetBarn.form.fnr': 'Fødselsnummeret/D-nummeret til barnet',\n        'annetBarn.form.fødselsdato': 'Fødselsdatoen til barnet',\n        'annetBarn.form.navn': 'Namnet til barnet',\n        'annetBarn.form.okButton': 'Ok',\n        'annetBarn.form.cancelButton': 'Avbryt',\n        'annetBarn.form.validation.required': 'Feltet er påkravd',\n        'annetBarn.list.født': 'Født',\n    },\n};\n\nexport default annetBarnMessages;\n","import bostedUtlandMessages from '../../../forms/bosted-utland/bostedUtlandMessages';\nimport ferieuttakMessages from '../../../forms/ferieuttak/ferieuttakMessages';\nimport fraværMessages from '../../../forms/fravær/fraværMessages';\nimport utenlandsoppholdMessages from '../../../forms/utenlandsopphold/utenlandsoppholdMessages';\nimport fosterbarnMessages from '../../../forms/fosterbarn/fosterbarnMessages';\nimport virksomhetMessages from '../../../forms/virksomhet/virksomhetMessages';\nimport tidsperiodeMessages from '../../../forms/tidsperiode/tidsperiodeMessages';\nimport annetBarnMessages from '../../../forms/annet-barn/annetBarnMessages';\n\nconst commonNb = require('@navikt/sif-common-core/lib/i18n/common.nb.json');\nconst commonNn = require('@navikt/sif-common-core/lib/i18n/common.nn.json');\nconst validationNb = require('@navikt/sif-common-core/lib/i18n/validationErrors.nb.json');\nconst validationNn = require('@navikt/sif-common-core/lib/i18n/validationErrors.nn.json');\n\nconst bokmålstekster = {\n    ...commonNb,\n    ...validationNb,\n    ...bostedUtlandMessages.nb,\n    ...fraværMessages.nb,\n    ...ferieuttakMessages.nb,\n    ...fosterbarnMessages.nb,\n    ...utenlandsoppholdMessages.nb,\n    ...tidsperiodeMessages.nb,\n    ...virksomhetMessages.nb,\n    ...annetBarnMessages.nb,\n    'common.fieldvalidation.ugyldigTall': 'Ugyldig tall',\n};\n\nconst nynorsktekster = {\n    ...commonNn,\n    ...validationNn,\n    ...bostedUtlandMessages.nn,\n    ...fraværMessages.nn,\n    ...ferieuttakMessages.nn,\n    ...fosterbarnMessages.nn,\n    ...utenlandsoppholdMessages.nn,\n    ...tidsperiodeMessages.nn,\n    ...virksomhetMessages.nn,\n    ...annetBarnMessages.nn,\n    'common.fieldvalidation.ugyldigTall': 'Ugyldig tall',\n};\n\nexport const appMessages = {\n    nb: bokmålstekster,\n    nn: nynorsktekster,\n};\n","import * as React from 'react';\nimport { IntlProvider } from 'react-intl';\nimport '@formatjs/intl-pluralrules//locale-data/en';\nimport '@formatjs/intl-pluralrules//locale-data/nb';\nimport '@formatjs/intl-pluralrules//locale-data/nn';\nimport '@formatjs/intl-pluralrules/polyfill';\nimport { Locale } from '@navikt/sif-common-core/lib/types/Locale';\nimport { appMessages } from './messages';\nimport dayjs from 'dayjs';\nrequire('dayjs/locale/nb');\nrequire('dayjs/locale/nn');\n\nexport interface IntlProviderProps {\n    locale: Locale;\n    children: React.ReactNode;\n    onError?: (error: any) => void;\n}\n\nconst AppIntlProvider = ({ locale, onError, children }: IntlProviderProps) => {\n    const messages = locale === 'nb' ? appMessages.nb : appMessages.nn;\n    dayjs.locale(locale === 'nb' ? 'nb' : 'nn');\n    return (\n        <IntlProvider locale={locale} messages={messages} onError={onError}>\n            {children}\n        </IntlProvider>\n    );\n};\n\nexport default AppIntlProvider;\n","import React from 'react';\n\nfunction NAVLogo(props) {\n    return (\n        <svg className=\"prefix__navLogo\" width={90} viewBox=\"0 0 269 169\" {...props}>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <path\n                    fill=\"#C30000\"\n                    d=\"M125.31 168.942c-46.642 0-84.46-37.817-84.46-84.465C40.85 37.824 78.667 0 125.31 0c46.657 0 84.48 37.824 84.48 84.477 0 46.648-37.823 84.465-84.48 84.465zM0 121.359l17.265-42.73h16.589l-17.243 42.73zm213.044 0l17.044-42.73h9.044l-17.043 42.73zM246.564 121.359l17.04-42.73h4.803l-17.043 42.731z\"\n                />\n                <path\n                    fill=\"#FEFEFE\"\n                    d=\"M197.36 78.63h-15.016s-1.035 0-1.4.914l-8.31 25.439-8.304-25.44c-.366-.913-1.407-.913-1.407-.913h-28.872c-.625 0-1.149.522-1.149 1.143v8.639c0-6.853-7.292-9.782-11.562-9.782-9.562 0-15.963 6.298-17.956 15.873-.108-6.352-.636-8.628-2.347-10.96-.786-1.141-1.922-2.101-3.159-2.895-2.547-1.492-4.834-2.018-9.749-2.018h-5.77s-1.044 0-1.412.914l-5.25 13.013V79.773c0-.621-.52-1.143-1.145-1.143H61.198s-1.03 0-1.406.914l-5.459 13.53s-.545 1.354.701 1.354h5.133v25.784c0 .64.504 1.147 1.147 1.147h13.238c.624 0 1.144-.507 1.144-1.147V94.428h5.16c2.961 0 3.588.08 4.74.618.694.262 1.32.792 1.66 1.403.698 1.314.873 2.892.873 7.545v16.218c0 .64.514 1.147 1.15 1.147h12.687s1.434 0 2.001-1.416l2.812-6.95c3.74 5.237 9.893 8.366 17.541 8.366h1.671s1.443 0 2.014-1.416l4.897-12.128v12.397c0 .64.524 1.147 1.15 1.147h12.951s1.43 0 2.003-1.416c0 0 5.18-12.861 5.2-12.958h.008c.2-1.07-1.153-1.07-1.153-1.07h-4.623V83.847l14.545 36.096c.568 1.416 2 1.416 2 1.416h15.301s1.44 0 2.008-1.416l16.125-39.93c.558-1.383-1.057-1.383-1.057-1.383zm-64.458 27.285h-8.7c-3.463 0-6.28-2.804-6.28-6.271 0-3.461 2.817-6.283 6.28-6.283h2.433c3.454 0 6.267 2.822 6.267 6.283v6.27z\"\n                />\n            </g>\n        </svg>\n    );\n}\n\nexport default NAVLogo;\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { getTypedFormComponents, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport {\n    getDateRangeValidator,\n    getRequiredFieldValidator,\n    ValidateDateError,\n    ValidateDateInRangeError,\n    ValidateRequiredFieldError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { getIntlFormErrorRenderer, mapFomTomToDateRange } from '../utils';\nimport bostedUtlandUtils from './bostedUtlandUtils';\nimport { BostedUtland, BostedUtlandFormValues } from './types';\nimport { prettifyDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\n\nexport interface BostedUtlandFormLabels {\n    tittel: string;\n}\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    bosted?: BostedUtland;\n    alleBosteder?: BostedUtland[];\n    onSubmit: (values: BostedUtland) => void;\n    onCancel: () => void;\n}\n\nenum BostedUtlandFormFields {\n    fom = 'fom',\n    tom = 'tom',\n    landkode = 'landkode',\n}\n\ninterface DateLimits {\n    minDate: Date;\n    maxDate: Date;\n}\n\nexport const BostedUtlandFormErrors = {\n    [BostedUtlandFormFields.fom]: {\n        [ValidateRequiredFieldError.noValue]: 'bostedUtlandForm.fom.noValue',\n        [ValidateDateError.dateAfterMax]: 'bostedUtlandForm.fom.dateAfterMax',\n        [ValidateDateError.dateBeforeMin]: 'bostedUtlandForm.fom.dateBeforeMin',\n        [ValidateDateError.invalidDateFormat]: 'bostedUtlandForm.fom.invalidDateFormat',\n        [ValidateDateInRangeError.fromDateIsAfterToDate]: 'bostedUtlandForm.fom.fromDateIsAfterToDate',\n    },\n    [BostedUtlandFormFields.tom]: {\n        [ValidateRequiredFieldError.noValue]: 'bostedUtlandForm.tom.noValue',\n        [ValidateDateError.dateAfterMax]: 'bostedUtlandForm.tom.dateAfterMax',\n        [ValidateDateError.dateBeforeMin]: 'bostedUtlandForm.tom.dateBeforeMin',\n        [ValidateDateError.invalidDateFormat]: 'bostedUtlandForm.tom.invalidDateFormat',\n        [ValidateDateInRangeError.toDateIsBeforeFromDate]: 'bostedUtlandForm.tom.toDateIsBeforeFromDate',\n    },\n    [BostedUtlandFormFields.landkode]: {\n        [ValidateRequiredFieldError.noValue]: 'bostedUtlandForm.landkode.noValue',\n    },\n};\n\nconst Form = getTypedFormComponents<BostedUtlandFormFields, BostedUtlandFormValues>();\n\nconst BostedUtlandForm = ({ maxDate, minDate, bosted, alleBosteder = [], onSubmit, onCancel }: Props) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: BostedUtlandFormValues) => {\n        const bostedToSubmit = bostedUtlandUtils.mapFormValuesToBostedUtland(formValues, bosted?.id);\n        if (bostedUtlandUtils.isValidBostedUtland(bostedToSubmit)) {\n            onSubmit(bostedToSubmit);\n        } else {\n            throw new Error('BostedUtlandForm: Formvalues is not a valid BostedUtland on submit.');\n        }\n    };\n\n    return (\n        <Form.FormikWrapper\n            initialValues={bostedUtlandUtils.mapBostedUtlandToFormValues(bosted || {})}\n            onSubmit={onFormikSubmit}\n            renderForm={(formik) => {\n                const { values } = formik;\n                const fomDateLimits: DateLimits = {\n                    minDate,\n                    maxDate: ISOStringToDate(values.tom) || maxDate,\n                };\n                const tomDateLimits: DateLimits = {\n                    minDate: ISOStringToDate(values.fom) || minDate,\n                    maxDate: maxDate,\n                };\n\n                const andreBosteder =\n                    bosted === undefined\n                        ? alleBosteder.map(mapFomTomToDateRange)\n                        : alleBosteder.filter((b) => b.id !== bosted.id).map(mapFomTomToDateRange);\n\n                return (\n                    <Form.Form onCancel={onCancel} fieldErrorRenderer={getIntlFormErrorRenderer(intl)}>\n                        <Systemtittel tag=\"h1\">\n                            <FormattedMessage id=\"bostedUtland.form.tittel\" />\n                        </Systemtittel>\n\n                        <FormBlock>\n                            <Form.DateRangePicker\n                                legend={intlHelper(intl, 'bostedUtland.form.tidsperiode.spm')}\n                                fullscreenOverlay={true}\n                                minDate={minDate}\n                                maxDate={maxDate}\n                                allowRangesToStartAndStopOnSameDate={false}\n                                disabledDateRanges={andreBosteder}\n                                fromInputProps={{\n                                    name: BostedUtlandFormFields.fom,\n                                    label: intlHelper(intl, 'bostedUtland.form.tidsperiode.fraDato'),\n                                    validate: getDateRangeValidator.validateFromDate(\n                                        {\n                                            required: true,\n                                            min: fomDateLimits.minDate,\n                                            max: fomDateLimits.maxDate,\n                                            toDate: ISOStringToDate(values.tom),\n                                        },\n                                        {\n                                            noValue: BostedUtlandFormErrors.fom.noValue,\n                                            invalidDateFormat: BostedUtlandFormErrors.fom.invalidDateFormat,\n                                            dateBeforeMin: () =>\n                                                intlHelper(intl, BostedUtlandFormErrors.fom.dateBeforeMin, {\n                                                    dato: prettifyDate(fomDateLimits.minDate),\n                                                }),\n                                            dateAfterMax: () =>\n                                                intlHelper(intl, BostedUtlandFormErrors.fom.dateAfterMax, {\n                                                    dato: prettifyDate(fomDateLimits.maxDate),\n                                                }),\n                                            fromDateIsAfterToDate: BostedUtlandFormErrors.fom.fromDateIsAfterToDate,\n                                        }\n                                    ),\n                                }}\n                                toInputProps={{\n                                    name: BostedUtlandFormFields.tom,\n                                    label: intlHelper(intl, 'bostedUtland.form.tidsperiode.tilDato'),\n                                    validate: getDateRangeValidator.validateToDate(\n                                        {\n                                            required: true,\n                                            min: tomDateLimits.minDate,\n                                            max: tomDateLimits.maxDate,\n                                            fromDate: ISOStringToDate(values.fom),\n                                        },\n                                        {\n                                            noValue: BostedUtlandFormErrors.tom.noValue,\n                                            invalidDateFormat: BostedUtlandFormErrors.tom.invalidDateFormat,\n                                            dateBeforeMin: () =>\n                                                intlHelper(intl, BostedUtlandFormErrors.tom.dateBeforeMin, {\n                                                    dato: prettifyDate(fomDateLimits.minDate),\n                                                }),\n                                            dateAfterMax: () =>\n                                                intlHelper(intl, BostedUtlandFormErrors.tom.dateAfterMax, {\n                                                    dato: prettifyDate(fomDateLimits.maxDate),\n                                                }),\n                                            toDateIsBeforeFromDate: BostedUtlandFormErrors.tom.toDateIsBeforeFromDate,\n                                        }\n                                    ),\n                                }}\n                            />\n                        </FormBlock>\n                        <FormBlock>\n                            <Form.CountrySelect\n                                name={BostedUtlandFormFields.landkode}\n                                label={intlHelper(intl, 'bostedUtland.form.land.spm')}\n                                validate={getRequiredFieldValidator({\n                                    noValue: BostedUtlandFormErrors.landkode.noValue,\n                                })}\n                            />\n                        </FormBlock>\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default BostedUtlandForm;\n","import React from 'react';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { Ingress, Undertittel } from 'nav-frontend-typografi';\n\ninterface Props {\n    title: string;\n    children: React.ReactNode;\n}\n\nconst PageIntro = ({ title, children }: Props) => (\n    <>\n        <Box padBottom=\"xl\" margin=\"m\">\n            <Box padBottom={children ? 'm' : 'none'}>\n                <Undertittel>{title}</Undertittel>\n            </Box>\n            {children && <Ingress tag=\"div\">{children}</Ingress>}\n        </Box>\n    </>\n);\n\nexport default PageIntro;\n","import { IntlShape } from 'react-intl';\nimport { DateRange } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { isFunction } from 'formik';\nimport { DateTidsperiode } from '../tidsperiode';\nimport { FormikFieldErrorRender } from '@navikt/sif-common-formik/lib/components/typed-formik-form/TypedFormikForm';\n\nexport const mapFomTomToDateRange = ({ fom, tom }: DateTidsperiode): DateRange => ({\n    from: fom,\n    to: tom,\n});\n\nexport const getIntlFormErrorRenderer = (intl: IntlShape): FormikFieldErrorRender => (error) => {\n    if (isFunction(error)) {\n        return error();\n    }\n    return intlHelper(intl, error);\n};\n","import { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { guid } from 'nav-frontend-js-utils';\nimport { BostedUtland, BostedUtlandFormValues } from './types';\n\nconst isValidBostedUtland = (bosted: Partial<BostedUtland>): bosted is BostedUtland => {\n    const { fom, landkode, tom } = bosted;\n    return fom !== undefined && landkode !== undefined && tom !== undefined;\n};\n\nconst mapFormValuesToBostedUtland = (\n    formValues: BostedUtlandFormValues,\n    id: string | undefined\n): Partial<BostedUtland> => {\n    return {\n        id: id || guid(),\n        fom: ISOStringToDate(formValues.fom),\n        tom: ISOStringToDate(formValues.tom),\n        landkode: formValues.landkode,\n    };\n};\n\nconst mapBostedUtlandToFormValues = ({ fom, tom, landkode }: Partial<BostedUtland>): BostedUtlandFormValues => {\n    return {\n        fom: dateToISOString(fom),\n        tom: dateToISOString(tom),\n        landkode,\n    };\n};\n\nconst bostedUtlandUtils = {\n    isValidBostedUtland,\n    mapBostedUtlandToFormValues,\n    mapFormValuesToBostedUtland,\n};\n\nexport default bostedUtlandUtils;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { getCountryName } from '@navikt/sif-common-formik';\nimport { BostedUtland } from './types';\nimport './bostedUtlandList.less';\n\ninterface Props {\n    bosteder: BostedUtland[];\n    onEdit?: (opphold: BostedUtland) => void;\n    onDelete?: (opphold: BostedUtland) => void;\n}\n\nconst bem = bemUtils('bostedUtlandList');\n\nconst BostedUtlandList = ({ bosteder, onDelete, onEdit }: Props) => {\n    const intl = useIntl();\n    const renderBostedUtlandLabel = (opphold: BostedUtland): React.ReactNode => {\n        const navn = getCountryName(opphold.landkode, intl.locale);\n        return (\n            <div className={bem.element('label')}>\n                <span className={bem.element('land')}>\n                    {onEdit && <ActionLink onClick={() => onEdit(opphold)}>{navn}</ActionLink>}\n                    {!onEdit && <span>{navn}</span>}\n                </span>\n                <span className={bem.element('dato')}>\n                    {prettifyDateExtended(opphold.fom)} - {prettifyDateExtended(opphold.tom)}\n                </span>\n            </div>\n        );\n    };\n\n    return (\n        <ItemList<BostedUtland>\n            getItemId={(opphold) => opphold.id}\n            getItemTitle={(opphold) => getCountryName(opphold.landkode, intl.locale)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderBostedUtlandLabel}\n            items={bosteder}\n        />\n    );\n};\n\nexport default BostedUtlandList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList,\n    ModalFormAndListLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport BostedUtlandForm from './BostedUtlandForm';\nimport BostedUtlandListe from './BostedUtlandList';\nimport { BostedUtland } from './types';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames> {\n    name: FieldNames;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction BostedUtlandListAndDialog<FieldNames>({ name, minDate, maxDate, validate, labels }: Props<FieldNames>) {\n    return (\n        <FormikModalFormAndList<FieldNames, BostedUtland>\n            name={name}\n            labels={labels}\n            validate={validate}\n            dialogWidth=\"narrow\"\n            sortFunc={sortItemsByFom}\n            formRenderer={({ onSubmit, onCancel, item, allItems }) => (\n                <BostedUtlandForm\n                    bosted={item}\n                    alleBosteder={allItems}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    onSubmit={onSubmit}\n                    onCancel={onCancel}\n                />\n            )}\n            listRenderer={({ items, onEdit, onDelete }) => (\n                <BostedUtlandListe bosteder={items} onEdit={onEdit} onDelete={onDelete} />\n            )}\n        />\n    );\n}\n\nexport default BostedUtlandListAndDialog;\n","import React from 'react';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport Panel from 'nav-frontend-paneler';\n\ninterface Props {\n    values?: any;\n}\n\nfunction SubmitPreview({ values }: Props) {\n    return (\n        <Box margin=\"xl\">\n            <div style={{ borderTop: '1px dashed #59514B', paddingTop: '1rem', margin: '0 -1rem' }}>\n                <Box margin=\"m\">\n                    {values && (\n                        <Panel style={{ padding: '1rem' }}>\n                            <pre style={{ margin: 0, fontSize: '.8rem' }}>{JSON.stringify(values, null, 2)}</pre>\n                        </Panel>\n                    )}\n                    {values === undefined && <Panel style={{ padding: '1rem' }}>Ingen data</Panel>}\n                </Box>\n            </div>\n        </Box>\n    );\n}\n\nexport default SubmitPreview;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { date1YearAgo, date1YearFromNow } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport {\n    getFieldErrorRenderer,\n    getSummaryFieldErrorRenderer,\n} from '@navikt/sif-common-formik/lib/utils/formikErrorRenderUtils';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport BostedUtlandForm, { BostedUtlandFormErrors } from '../../../forms/bosted-utland/BostedUtlandForm';\nimport BostedUtlandListAndDialog from '../../../forms/bosted-utland/BostedUtlandListAndDialog';\nimport bostedUtlandMessages from '../../../forms/bosted-utland/bostedUtlandMessages';\nimport { BostedUtland } from '../../../forms/bosted-utland/types';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\nimport flat from 'flat';\n\nenum FormField {\n    'bosted' = 'bosted',\n}\n\ninterface FormValues {\n    [FormField.bosted]: BostedUtland[];\n}\nconst initialValues: FormValues = { bosted: [] };\n\nconst FormikExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<BostedUtland> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={getFieldErrorRenderer(intl, 'bostedUtlandForm')}\n                                summaryFieldErrorRenderer={getSummaryFieldErrorRenderer(intl, 'bostedUtlandForm')}>\n                                <BostedUtlandListAndDialog<FormField>\n                                    name={FormField.bosted}\n                                    minDate={date1YearAgo}\n                                    maxDate={date1YearFromNow}\n                                    validate={getListValidator({ required: true }, { listIsEmpty: 'Tom liste' })}\n                                    labels={{\n                                        addLabel: 'Legg til bosted',\n                                        listTitle: 'Registrerte bosteder',\n                                        modalTitle: 'Bosted',\n                                        emptyListText: 'Ingen bosteder er lagt til',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrorIntlKeys={flat(BostedUtlandFormErrors)}\n                    intlMessages={bostedUtlandMessages}\n                />\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <DialogFormWrapper>\n                    <Panel border={true}>\n                        <BostedUtlandForm\n                            minDate={date1YearAgo}\n                            maxDate={date1YearFromNow}\n                            onSubmit={setSingleFormValues}\n                            onCancel={() => console.log('cancel me')}\n                        />\n                    </Panel>\n                    <SubmitPreview values={singleFormValues} />\n                </DialogFormWrapper>\n            </Box>\n\n            <MessagesPreview title=\"Alle tekster\" messages={bostedUtlandMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default FormikExample;\n","import React from 'react';\nimport { MessageFileFormat } from '@navikt/sif-common-core/lib/dev-utils/intl/devIntlUtils';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { createFieldErrorIntlKey } from '@navikt/sif-common-formik/lib/utils/formikErrorRenderUtils';\n\nexport type ValidationErrorMessagesDocType = {\n    fields: { [key: string]: string[] };\n};\n\ninterface Props {\n    formName?: string;\n    validationErrors?: ValidationErrorMessagesDocType;\n    validationErrorIntlKeys?: { [key: string]: string };\n    intlMessages: MessageFileFormat;\n}\n\nconst FormValidationErrorMessages: React.FunctionComponent<Props> = ({\n    validationErrors,\n    formName,\n    intlMessages,\n    validationErrorIntlKeys,\n}) => {\n    const validationeMessages: MessageFileFormat = {\n        nb: {},\n        nn: {},\n    };\n\n    if (validationErrors) {\n        const fields = validationErrors.fields;\n\n        Object.keys(fields).forEach((field) =>\n            Object.keys(fields[field]).forEach((errorKey) => {\n                const error = fields[field][errorKey];\n                const intlKey = createFieldErrorIntlKey(error, field, formName);\n                validationeMessages['nb'][intlKey] = intlMessages['nb'][intlKey];\n                validationeMessages['nn'][intlKey] = intlMessages['nn'][intlKey];\n            })\n        );\n    }\n\n    if (validationErrorIntlKeys) {\n        Object.keys(validationErrorIntlKeys).forEach((key) => {\n            const intlKey = validationErrorIntlKeys[key];\n            validationeMessages['nb'][intlKey] = intlMessages['nb'][intlKey];\n            validationeMessages['nn'][intlKey] = intlMessages['nn'][intlKey];\n        });\n    }\n    return (\n        <MessagesPreview\n            title=\"Feilmeldinger\"\n            messages={validationeMessages}\n            showExplanation={false}\n            showMissingTextSummary={false}\n        />\n    );\n};\n\nexport default FormValidationErrorMessages;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { DateRange, prettifyDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { getTypedFormComponents, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport {\n    getDateRangeValidator,\n    ValidateDateError,\n    ValidateDateInRangeError,\n    ValidateRequiredFieldError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { getIntlFormErrorRenderer, mapFomTomToDateRange } from '../utils';\nimport ferieuttakUtils from './ferieuttakUtils';\nimport { Ferieuttak, FerieuttakFormValues } from './types';\n\nexport interface FerieuttakFormLabels {\n    title: string;\n    fromDate: string;\n    toDate: string;\n    intervalTitle: string;\n    okButton: string;\n    cancelButton: string;\n}\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    ferieuttak?: Partial<Ferieuttak>;\n    alleFerieuttak?: Ferieuttak[];\n    labels?: Partial<FerieuttakFormLabels>;\n    onSubmit: (values: Ferieuttak) => void;\n    onCancel: () => void;\n}\n\nenum FerieuttakFormFields {\n    tom = 'tom',\n    fom = 'fom',\n}\n\nexport const FerieuttakFormErrors = {\n    [FerieuttakFormFields.fom]: {\n        [ValidateRequiredFieldError.noValue]: 'ferieuttakForm.fom.noValue',\n        [ValidateDateInRangeError.fromDateIsAfterToDate]: 'ferieuttakForm.fom.fromDateIsAfterToDate',\n        [ValidateDateError.invalidDateFormat]: 'ferieuttakForm.fom.invalidDateFormat',\n        [ValidateDateError.dateBeforeMin]: 'ferieuttakForm.fom.dateBeforeMin',\n        [ValidateDateError.dateAfterMax]: 'ferieuttakForm.fom.dateAfterMax',\n    },\n    [FerieuttakFormFields.tom]: {\n        [ValidateRequiredFieldError.noValue]: 'ferieuttakForm.tom.noValue',\n        [ValidateDateInRangeError.toDateIsBeforeFromDate]: 'ferieuttakForm.tom.toDateIsBeforeFromDate',\n        [ValidateDateError.invalidDateFormat]: 'ferieuttakForm.tom.invalidDateFormat',\n        [ValidateDateError.dateBeforeMin]: 'ferieuttakForm.tom.dateBeforeMin',\n        [ValidateDateError.dateAfterMax]: 'ferieuttakForm.tom.dateAfterMax',\n    },\n};\n\nconst Form = getTypedFormComponents<FerieuttakFormFields, FerieuttakFormValues>();\n\nconst FerieuttakForm = ({ maxDate, minDate, labels, ferieuttak, alleFerieuttak = [], onSubmit, onCancel }: Props) => {\n    const intl = useIntl();\n    const onFormikSubmit = (formValues: FerieuttakFormValues) => {\n        const ferieuttakToSubmit = ferieuttakUtils.mapFormValuesToFerieuttak(formValues, ferieuttak?.id);\n        if (ferieuttakUtils.isValidFerieuttak(ferieuttakToSubmit)) {\n            onSubmit({ ...ferieuttak, ...ferieuttakToSubmit });\n        } else {\n            throw new Error('FerieuttakForm: Formvalues is not a valid Ferieuttak on submit.');\n        }\n    };\n\n    const defaultLabels: FerieuttakFormLabels = {\n        title: intlHelper(intl, 'ferieuttak.list.title'),\n        fromDate: intlHelper(intl, 'ferieuttak.list.fromDate'),\n        toDate: intlHelper(intl, 'ferieuttak.list.toDate'),\n        intervalTitle: intlHelper(intl, 'ferieuttak.list.intervalTitle'),\n        okButton: intlHelper(intl, 'ferieuttak.list.okButton'),\n        cancelButton: intlHelper(intl, 'ferieuttak.list.cancelButton'),\n    };\n\n    const formLabels: FerieuttakFormLabels = { ...defaultLabels, ...labels };\n\n    const andreFerieuttak: DateRange[] | undefined =\n        ferieuttak === undefined\n            ? alleFerieuttak.map(mapFomTomToDateRange)\n            : alleFerieuttak.filter((f) => f.id !== ferieuttak.id).map(mapFomTomToDateRange);\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={ferieuttakUtils.mapFerieuttakToFormValues(ferieuttak || {})}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => (\n                    <Form.Form onCancel={onCancel} fieldErrorRenderer={getIntlFormErrorRenderer(intl)}>\n                        <Systemtittel tag=\"h1\">{formLabels.title}</Systemtittel>\n                        <FormBlock>\n                            <Form.DateRangePicker\n                                legend={formLabels.intervalTitle}\n                                fullscreenOverlay={true}\n                                minDate={minDate}\n                                maxDate={maxDate}\n                                allowRangesToStartAndStopOnSameDate={true}\n                                disabledDateRanges={andreFerieuttak}\n                                fromInputProps={{\n                                    label: formLabels.fromDate,\n                                    name: FerieuttakFormFields.fom,\n                                    validate: getDateRangeValidator.validateFromDate(\n                                        {\n                                            required: true,\n                                            min: minDate,\n                                            max: maxDate,\n                                            toDate: ISOStringToDate(formik.values.tom),\n                                        },\n                                        {\n                                            noValue: FerieuttakFormErrors.fom.noValue,\n                                            dateBeforeMin: () =>\n                                                intlHelper(intl, FerieuttakFormErrors.fom.dateBeforeMin, {\n                                                    dato: prettifyDate(minDate),\n                                                }),\n                                            dateAfterMax: () =>\n                                                intlHelper(intl, FerieuttakFormErrors.fom.dateAfterMax, {\n                                                    dato: prettifyDate(maxDate),\n                                                }),\n                                            fromDateIsAfterToDate: FerieuttakFormErrors.fom.fromDateIsAfterToDate,\n                                            invalidDateFormat: FerieuttakFormErrors.fom.invalidDateFormat,\n                                        }\n                                    ),\n                                    onChange: () => {\n                                        setTimeout(() => {\n                                            formik.validateField(FerieuttakFormFields.tom);\n                                        });\n                                    },\n                                }}\n                                toInputProps={{\n                                    label: formLabels.toDate,\n                                    name: FerieuttakFormFields.tom,\n\n                                    validate: getDateRangeValidator.validateToDate(\n                                        {\n                                            required: true,\n                                            min: minDate,\n                                            max: maxDate,\n                                            fromDate: ISOStringToDate(formik.values.fom),\n                                        },\n                                        {\n                                            noValue: FerieuttakFormErrors.tom.noValue,\n                                            dateBeforeMin: () =>\n                                                intlHelper(intl, FerieuttakFormErrors.tom.dateBeforeMin, {\n                                                    dato: prettifyDate(minDate),\n                                                }),\n                                            dateAfterMax: () =>\n                                                intlHelper(intl, FerieuttakFormErrors.tom.dateAfterMax, {\n                                                    dato: prettifyDate(maxDate),\n                                                }),\n                                            toDateIsBeforeFromDate: FerieuttakFormErrors.tom.toDateIsBeforeFromDate,\n                                            invalidDateFormat: FerieuttakFormErrors.tom.invalidDateFormat,\n                                        }\n                                    ),\n                                    onChange: () => {\n                                        setTimeout(() => {\n                                            formik.validateField(FerieuttakFormFields.fom);\n                                        });\n                                    },\n                                }}\n                            />\n                        </FormBlock>\n                    </Form.Form>\n                )}\n            />\n        </>\n    );\n};\n\nexport default FerieuttakForm;\n","import { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Ferieuttak, FerieuttakFormValues } from './types';\n\nexport const isValidFerieuttak = (ferieuttak: Partial<Ferieuttak>): ferieuttak is Ferieuttak => {\n    return ferieuttak.fom !== undefined && ferieuttak.tom !== undefined;\n};\n\nconst mapFormValuesToFerieuttak = (formValues: FerieuttakFormValues, id: string | undefined): Partial<Ferieuttak> => {\n    return {\n        id: id || guid(),\n        fom: ISOStringToDate(formValues.fom),\n        tom: ISOStringToDate(formValues.tom),\n    };\n};\n\nconst mapFerieuttakToFormValues = ({ fom, tom }: Partial<Ferieuttak>): FerieuttakFormValues => {\n    return {\n        fom: dateToISOString(fom),\n        tom: dateToISOString(tom),\n    };\n};\n\nconst ferieuttakUtils = {\n    isValidFerieuttak,\n    mapFerieuttakToFormValues,\n    mapFormValuesToFerieuttak,\n};\n\nexport default ferieuttakUtils;\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { Ferieuttak } from './types';\n\ninterface Props {\n    ferieuttak: Ferieuttak[];\n    onEdit?: (opphold: Ferieuttak) => void;\n    onDelete?: (opphold: Ferieuttak) => void;\n}\n\nconst FerieuttakList = ({ ferieuttak = [], onDelete, onEdit }: Props) => {\n    const getDateTitleString = (uttak: Ferieuttak) =>\n        `${prettifyDateExtended(uttak.fom)} - ${prettifyDateExtended(uttak.tom)}`;\n\n    const renderFerieuttakLabel = (uttak: Ferieuttak): React.ReactNode => {\n        const title = getDateTitleString(uttak);\n        return (\n            <>\n                {onEdit && <ActionLink onClick={() => onEdit(uttak)}>{title}</ActionLink>}\n                {!onEdit && <span>{title}</span>}\n            </>\n        );\n    };\n\n    return (\n        <ItemList<Ferieuttak>\n            getItemId={(uttak) => uttak.id}\n            getItemTitle={(uttak) => getDateTitleString(uttak)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderFerieuttakLabel}\n            items={ferieuttak.filter((uttak) => uttak.id !== undefined)}\n        />\n    );\n};\n\nexport default FerieuttakList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList,\n    ModalFormAndListLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport FerieuttakForm from './FerieuttakForm';\nimport FerieuttakList from './FerieuttakList';\nimport { Ferieuttak } from './types';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames> {\n    name: FieldNames;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction FerieuttakListAndDialog<FieldNames>({ name, minDate, maxDate, validate, labels }: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, Ferieuttak>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                sortFunc={sortItemsByFom}\n                formRenderer={({ onSubmit, onCancel, item, allItems }) => (\n                    <FerieuttakForm\n                        ferieuttak={item}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                        alleFerieuttak={allItems}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FerieuttakList ferieuttak={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FerieuttakListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { date1YearAgo, date1YearFromNow } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport {\n    getFieldErrorRenderer,\n    getSummaryFieldErrorRenderer,\n} from '@navikt/sif-common-formik/lib/utils/formikErrorRenderUtils';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport flat from 'flat';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport FerieuttakForm, { FerieuttakFormErrors } from '../../../forms/ferieuttak/FerieuttakForm';\nimport FerieuttakListAndDialog from '../../../forms/ferieuttak/FerieuttakListAndDialog';\nimport ferieuttakMessages from '../../../forms/ferieuttak/ferieuttakMessages';\nimport { Ferieuttak } from '../../../forms/ferieuttak/types';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\n\nenum FormField {\n    'ferie' = 'ferie',\n}\n\ninterface FormValues {\n    [FormField.ferie]: Ferieuttak[];\n}\nconst initialValues: FormValues = { ferie: [] };\n\nconst FormikExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<Ferieuttak> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={getFieldErrorRenderer(intl, 'ferieuttakExample')}\n                                summaryFieldErrorRenderer={getSummaryFieldErrorRenderer(intl, 'ferieuttakExample')}>\n                                <FerieuttakListAndDialog<FormField>\n                                    name={FormField.ferie}\n                                    minDate={date1YearAgo}\n                                    maxDate={date1YearFromNow}\n                                    validate={getListValidator({ required: true })}\n                                    labels={{\n                                        addLabel: 'Legg til ferie',\n                                        listTitle: 'Registrerte ferier',\n                                        modalTitle: 'Ferie',\n                                        emptyListText: 'Ingen ferier er lagt til',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrorIntlKeys={flat(FerieuttakFormErrors)}\n                    intlMessages={ferieuttakMessages}\n                />\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <FerieuttakForm\n                        minDate={date1YearAgo}\n                        maxDate={date1YearFromNow}\n                        ferieuttak={{}}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                    />\n                </Panel>\n                <SubmitPreview values={singleFormValues} />\n            </DialogFormWrapper>\n\n            <MessagesPreview messages={ferieuttakMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default FormikExample;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport Tiles from '@navikt/sif-common-core/lib/components/tiles/Tiles';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport {\n    getFødselsnummerValidator,\n    getRequiredFieldValidator,\n    ValidateFødselsnummerError,\n    ValidateRequiredFieldError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { Fosterbarn, isFosterbarn } from './types';\nimport { getIntlFormErrorRenderer } from '../utils';\n\ninterface FosterbarnFormText {\n    form_fødselsnummer_label: string;\n    form_fornavn_label: string;\n    form_etternavn_label: string;\n}\n\ninterface Props {\n    fosterbarn?: Partial<Fosterbarn>;\n    onSubmit: (values: Fosterbarn) => void;\n    onCancel: () => void;\n    disallowedFødselsnumre?: string[];\n    includeName?: boolean;\n    text?: FosterbarnFormText;\n}\n\nenum FosterbarnFormField {\n    fødselsnummer = 'fødselsnummer',\n    fornavn = 'fornavn',\n    etternavn = 'etternavn',\n}\n\ntype FormValues = Partial<Fosterbarn>;\n\nexport const FosterbarnFormErrors = {\n    [FosterbarnFormField.fornavn]: { [ValidateRequiredFieldError.noValue]: 'fosterbarnForm.fornavn.noValue' },\n    [FosterbarnFormField.etternavn]: { [ValidateRequiredFieldError.noValue]: 'fosterbarnForm.etternavn.noValue' },\n    [FosterbarnFormField.fødselsnummer]: {\n        [ValidateRequiredFieldError.noValue]: 'fosterbarnForm.fødselsnummer.noValue',\n        [ValidateFødselsnummerError.disallowedFødselsnummer]: 'fosterbarnForm.fødselsnummer.disallowedFødselsnummer',\n        [ValidateFødselsnummerError.fødselsnummerNot11Chars]: 'fosterbarnForm.fødselsnummer.fødselsnummerNot11Chars',\n        [ValidateFødselsnummerError.invalidFødselsnummer]: 'fosterbarnForm.fødselsnummer.invalidFødselsnummer',\n    },\n};\n\nconst Form = getTypedFormComponents<FosterbarnFormField, FormValues>();\n\nconst FosterbarnForm = ({\n    fosterbarn: initialValues = { fornavn: '', etternavn: '', fødselsnummer: '' },\n    disallowedFødselsnumre,\n    text,\n    includeName,\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n    const onFormikSubmit = (formValues: FormValues) => {\n        if (isFosterbarn(formValues, includeName)) {\n            onSubmit({ ...formValues, id: initialValues.id || guid() });\n        } else {\n            throw new Error('Fosterbarn skjema: Formvalues is not a valid Fosterbarn on submit.');\n        }\n    };\n\n    const defaultText: FosterbarnFormText = {\n        form_etternavn_label: intlHelper(intl, 'fosterbarn.form.etternavn_label'),\n        form_fornavn_label: intlHelper(intl, 'fosterbarn.form.fornavn_label'),\n        form_fødselsnummer_label: intlHelper(intl, 'fosterbarn.form.fødselsnummer_label'),\n    };\n\n    const txt = { ...defaultText, ...text };\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={initialValues}\n                onSubmit={onFormikSubmit}\n                renderForm={() => (\n                    <Form.Form onCancel={onCancel} fieldErrorRenderer={getIntlFormErrorRenderer(intl)}>\n                        <Systemtittel tag=\"h1\">Fosterbarn</Systemtittel>\n                        <FormBlock>\n                            <Form.Input\n                                name={FosterbarnFormField.fødselsnummer}\n                                label={txt.form_fødselsnummer_label}\n                                validate={getFødselsnummerValidator(\n                                    {\n                                        required: true,\n                                        disallowedValues: disallowedFødselsnumre,\n                                    },\n                                    {\n                                        noValue: FosterbarnFormErrors.fødselsnummer.noValue,\n                                        disallowedFødselsnummer:\n                                            FosterbarnFormErrors.fødselsnummer.disallowedFødselsnummer,\n                                        invalidFødselsnummer: FosterbarnFormErrors.fødselsnummer.invalidFødselsnummer,\n                                        fødselsnummerNot11Chars:\n                                            FosterbarnFormErrors.fødselsnummer.fødselsnummerNot11Chars,\n                                    }\n                                )}\n                                inputMode=\"numeric\"\n                                maxLength={11}\n                                style={{ width: '11rem' }}\n                            />\n                        </FormBlock>\n                        {includeName && (\n                            <Tiles columns={2}>\n                                <FormBlock>\n                                    <Form.Input\n                                        name={FosterbarnFormField.fornavn}\n                                        label={txt.form_fornavn_label}\n                                        validate={getRequiredFieldValidator({\n                                            noValue: FosterbarnFormErrors.fornavn.noValue,\n                                        })}\n                                    />\n                                </FormBlock>\n                                <FormBlock>\n                                    <Form.Input\n                                        name={FosterbarnFormField.etternavn}\n                                        label={txt.form_etternavn_label}\n                                        validate={getRequiredFieldValidator({\n                                            noValue: FosterbarnFormErrors.etternavn.noValue,\n                                        })}\n                                    />\n                                </FormBlock>\n                            </Tiles>\n                        )}\n                    </Form.Form>\n                )}\n            />\n        </>\n    );\n};\n\nexport default FosterbarnForm;\n","import { hasValue } from '@navikt/sif-common-formik/lib/validation/validationUtils';\n\nexport interface Fosterbarn {\n    id?: string;\n    fødselsnummer: string;\n    fornavn?: string;\n    etternavn?: string;\n}\n\nexport const isFosterbarn = (fosterbarn: Partial<Fosterbarn>, includeName?: boolean): fosterbarn is Fosterbarn => {\n    const { fornavn, etternavn, fødselsnummer } = fosterbarn;\n    if (includeName) {\n        return hasValue(fornavn) && hasValue(etternavn) && hasValue(fødselsnummer);\n    }\n    return hasValue(fødselsnummer);\n};\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { formatName } from '@navikt/sif-common-core/lib/utils/personUtils';\nimport { Fosterbarn } from './types';\n\ninterface Props {\n    fosterbarn: Fosterbarn[];\n    onEdit?: (opphold: Fosterbarn) => void;\n    onDelete?: (opphold: Fosterbarn) => void;\n}\n\nconst FosterbarnList = ({ fosterbarn = [], onDelete, onEdit }: Props) => {\n    const getBarnTitleString = (barn: Fosterbarn) => {\n        return (\n            <>\n                <span style={{ paddingRight: '1rem' }}>{barn.fødselsnummer}</span>{' '}\n                {barn.fornavn && barn.etternavn && <span>{formatName(barn.fornavn, barn.etternavn)}</span>}\n            </>\n        );\n    };\n    const renderFosterbarnLabel = (barn: Fosterbarn): React.ReactNode => {\n        return (\n            <>\n                {onEdit && <ActionLink onClick={() => onEdit(barn)}>{getBarnTitleString(barn)}</ActionLink>}\n                {!onEdit && <span>{getBarnTitleString(barn)}</span>}\n            </>\n        );\n    };\n\n    return (\n        <ItemList<Fosterbarn>\n            getItemId={(barn) => barn.id}\n            getItemTitle={(barn) =>\n                barn.fornavn && barn.etternavn ? formatName(barn.fornavn, barn.etternavn) : barn.fødselsnummer\n            }\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderFosterbarnLabel}\n            items={fosterbarn.filter((barn) => barn.id !== undefined)}\n        />\n    );\n};\n\nexport default FosterbarnList;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { FormikModalFormAndList, TypedFormInputValidationProps } from '@navikt/sif-common-formik';\nimport FosterbarnForm from './FosterbarnForm';\nimport FosterbarnList from './FosterbarnList';\nimport { Fosterbarn } from './types';\n\nexport interface FosterbarnListAndDialogText {\n    liste_legg_til_knapp: string;\n    liste_tittel?: string;\n    liste_tom_liste_tekst?: string;\n    modal_tittel: string;\n}\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames> {\n    name: FieldNames;\n    texts?: FosterbarnListAndDialogText;\n    includeName?: boolean;\n    disallowedFødselsnumre?: string[];\n}\n\nfunction FosterbarnListAndDialog<FieldNames>({\n    name,\n    validate,\n    texts,\n    includeName,\n    disallowedFødselsnumre,\n}: Props<FieldNames>) {\n    const intl = useIntl();\n\n    const defaultText: FosterbarnListAndDialogText = {\n        liste_legg_til_knapp: intlHelper(intl, 'fosterbarn.list.legg_til_knapp'),\n        liste_tittel: intlHelper(intl, 'fosterbarn.list.tittel'),\n        modal_tittel: intlHelper(intl, 'fosterbarn.modal.tittel'),\n    };\n\n    const txt = { ...defaultText, ...texts };\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, Fosterbarn>\n                name={name}\n                labels={{\n                    addLabel: txt.liste_legg_til_knapp,\n                    modalTitle: txt.modal_tittel,\n                    emptyListText: txt.liste_tom_liste_tekst,\n                    listTitle: txt.liste_tittel,\n                }}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                formRenderer={({ onSubmit, onCancel, item }) => (\n                    <FosterbarnForm\n                        fosterbarn={item}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                        includeName={includeName}\n                        disallowedFødselsnumre={disallowedFødselsnumre}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FosterbarnList fosterbarn={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FosterbarnListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport flat from 'flat';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { Fosterbarn } from '../../../forms/fosterbarn';\nimport FosterbarnForm, { FosterbarnFormErrors } from '../../../forms/fosterbarn/FosterbarnForm';\nimport FosterbarnListAndDialog from '../../../forms/fosterbarn/FosterbarnListAndDialog';\nimport fosterbarnMessages from '../../../forms/fosterbarn/fosterbarnMessages';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\nimport { getIntlFormErrorRenderer } from '../../../forms/utils';\n\nenum FormField {\n    'fosterbarn' = 'fosterbarn',\n}\n\ninterface FormValues {\n    [FormField.fosterbarn]: Fosterbarn[];\n}\nconst initialValues: FormValues = { fosterbarn: [] };\n\nconst FosterbarnExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<Fosterbarn> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={getIntlFormErrorRenderer(intl)}>\n                                <FosterbarnListAndDialog<FormField>\n                                    name={FormField.fosterbarn}\n                                    validate={getListValidator({ required: true })}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrorIntlKeys={flat(FosterbarnFormErrors)}\n                    intlMessages={fosterbarnMessages}\n                />\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <FosterbarnForm\n                        fosterbarn={{}}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                    />\n                </Panel>\n                <SubmitPreview values={singleFormValues} />\n            </DialogFormWrapper>\n\n            <MessagesPreview messages={fosterbarnMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default FosterbarnExample;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { getTypedFormComponents, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport datepickerUtils from '@navikt/sif-common-formik/lib/components/formik-datepicker/datepickerUtils';\nimport {\n    getDateRangeValidator,\n    ValidateDateError,\n    ValidateDateInRangeError,\n    ValidateRequiredFieldError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { getIntlFormErrorRenderer, mapFomTomToDateRange } from '../utils';\nimport tidsperiodeUtils from './tidsperiodeUtils';\nimport { DateTidsperiode, DateTidsperiodeFormValues } from './types';\nimport { prettifyDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\n\nexport interface TidsperiodeFormLabels {\n    title?: string;\n    fromDate: string;\n    toDate: string;\n    intervalTitle?: string;\n    okButton: string;\n    cancelButton: string;\n}\n\ninterface Props {\n    minDate?: Date;\n    maxDate?: Date;\n    tidsperiode?: Partial<DateTidsperiode>;\n    alleTidsperioder?: DateTidsperiode[];\n    formLabels?: Partial<TidsperiodeFormLabels>;\n    onSubmit: (values: DateTidsperiode) => void;\n    onCancel: () => void;\n}\n\nenum TidsperiodeFormFields {\n    tom = 'tom',\n    fom = 'fom',\n}\n\nexport const TidsperiodeFormErrors = {\n    [TidsperiodeFormFields.fom]: {\n        [ValidateRequiredFieldError.noValue]: 'tidsperiodeForm.fom.noValue',\n        [ValidateDateInRangeError.fromDateIsAfterToDate]: 'tidsperiodeForm.fom.fromDateIsAfterToDate',\n        [ValidateDateError.invalidDateFormat]: 'tidsperiodeForm.fom.invalidDateFormat',\n        [ValidateDateError.dateBeforeMin]: 'tidsperiodeForm.fom.dateBeforeMin',\n        [ValidateDateError.dateAfterMax]: 'tidsperiodeForm.fom.dateAfterMax',\n    },\n    [TidsperiodeFormFields.tom]: {\n        [ValidateRequiredFieldError.noValue]: 'tidsperiodeForm.tom.noValue',\n        [ValidateDateInRangeError.toDateIsBeforeFromDate]: 'tidsperiodeForm.tom.toDateIsBeforeFromDate',\n        [ValidateDateError.invalidDateFormat]: 'tidsperiodeForm.tom.invalidDateFormat',\n        [ValidateDateError.dateBeforeMin]: 'tidsperiodeForm.tom.dateBeforeMin',\n        [ValidateDateError.dateAfterMax]: 'tidsperiodeForm.tom.dateAfterMax',\n    },\n};\n\nconst Form = getTypedFormComponents<TidsperiodeFormFields, DateTidsperiodeFormValues>();\n\nconst TidsperiodeForm = ({\n    maxDate,\n    minDate,\n    formLabels,\n    tidsperiode,\n    alleTidsperioder = [],\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: DateTidsperiodeFormValues) => {\n        const dateTidsperiodeToSubmit = tidsperiodeUtils.mapFormValuesToDateTidsperiode(formValues, tidsperiode?.id);\n        if (tidsperiodeUtils.isValidDateTidsperiode(dateTidsperiodeToSubmit)) {\n            onSubmit(dateTidsperiodeToSubmit);\n        } else {\n            throw new Error('TidsperiodeForm: Formvalues is not a valid Tidsperiode on submit.');\n        }\n    };\n\n    const defaultLabels: TidsperiodeFormLabels = {\n        title: intlHelper(intl, 'tidsperiode.form.title'),\n        fromDate: intlHelper(intl, 'tidsperiode.form.fromDate'),\n        toDate: intlHelper(intl, 'tidsperiode.form.toDate'),\n        okButton: intlHelper(intl, 'tidsperiode.form.okButton'),\n        cancelButton: intlHelper(intl, 'tidsperiode.form.cancelButton'),\n    };\n\n    const inlineLabels: TidsperiodeFormLabels = { ...defaultLabels, ...formLabels };\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={tidsperiodeUtils.mapDateTidsperiodeToFormValues(tidsperiode || {})}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => {\n                    const {\n                        values: { fom },\n                    } = formik;\n                    const initialMonth = datepickerUtils.getDateFromDateString(fom) || minDate;\n                    const disabledDateRanges =\n                        tidsperiode === undefined\n                            ? alleTidsperioder.map(mapFomTomToDateRange)\n                            : alleTidsperioder.filter((t) => t.id !== tidsperiode.id).map(mapFomTomToDateRange);\n\n                    return (\n                        <Form.Form onCancel={onCancel} fieldErrorRenderer={getIntlFormErrorRenderer(intl)}>\n                            <Systemtittel tag=\"h1\">{inlineLabels.title}</Systemtittel>\n                            <FormBlock>\n                                <Form.DateRangePicker\n                                    legend={inlineLabels.intervalTitle}\n                                    fullscreenOverlay={true}\n                                    minDate={minDate}\n                                    maxDate={maxDate}\n                                    disabledDateRanges={disabledDateRanges}\n                                    fromInputProps={{\n                                        label: inlineLabels.fromDate,\n                                        name: TidsperiodeFormFields.fom,\n                                        dayPickerProps: { initialMonth },\n                                        validate: getDateRangeValidator.validateFromDate(\n                                            {\n                                                required: true,\n                                                min: minDate,\n                                                max: maxDate,\n                                                toDate: ISOStringToDate(formik.values.tom),\n                                            },\n                                            {\n                                                noValue: TidsperiodeFormErrors.fom.noValue,\n                                                dateBeforeMin: minDate\n                                                    ? () =>\n                                                          intlHelper(intl, TidsperiodeFormErrors.fom.dateBeforeMin, {\n                                                              dato: prettifyDate(minDate),\n                                                          })\n                                                    : undefined,\n                                                dateAfterMax: maxDate\n                                                    ? () =>\n                                                          intlHelper(intl, TidsperiodeFormErrors.fom.dateAfterMax, {\n                                                              dato: prettifyDate(maxDate),\n                                                          })\n                                                    : undefined,\n                                                invalidDateFormat: TidsperiodeFormErrors.fom.invalidDateFormat,\n                                                fromDateIsAfterToDate: TidsperiodeFormErrors.fom.fromDateIsAfterToDate,\n                                            }\n                                        ),\n                                        onChange: () => {\n                                            setTimeout(() => {\n                                                formik.validateField(TidsperiodeFormFields.tom);\n                                            });\n                                        },\n                                    }}\n                                    toInputProps={{\n                                        label: inlineLabels.toDate,\n                                        name: TidsperiodeFormFields.tom,\n                                        validate: getDateRangeValidator.validateToDate(\n                                            {\n                                                required: true,\n                                                min: minDate,\n                                                max: maxDate,\n                                                fromDate: ISOStringToDate(formik.values.fom),\n                                            },\n                                            {\n                                                noValue: TidsperiodeFormErrors.tom.noValue,\n                                                dateBeforeMin: minDate\n                                                    ? () =>\n                                                          intlHelper(intl, TidsperiodeFormErrors.tom.dateBeforeMin, {\n                                                              dato: prettifyDate(minDate),\n                                                          })\n                                                    : undefined,\n                                                dateAfterMax: maxDate\n                                                    ? () =>\n                                                          intlHelper(intl, TidsperiodeFormErrors.tom.dateAfterMax, {\n                                                              dato: prettifyDate(maxDate),\n                                                          })\n                                                    : undefined,\n                                                invalidDateFormat: TidsperiodeFormErrors.tom.invalidDateFormat,\n                                                toDateIsBeforeFromDate:\n                                                    TidsperiodeFormErrors.tom.toDateIsBeforeFromDate,\n                                            }\n                                        ),\n                                        onChange: () => {\n                                            setTimeout(() => {\n                                                formik.validateField(TidsperiodeFormFields.fom);\n                                            });\n                                        },\n                                    }}\n                                />\n                            </FormBlock>\n                        </Form.Form>\n                    );\n                }}\n            />\n        </>\n    );\n};\n\nexport default TidsperiodeForm;\n","import { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { guid } from 'nav-frontend-js-utils';\nimport { DateTidsperiode, DateTidsperiodeFormValues } from './types';\n\nconst isValidDateTidsperiode = (tidsperiode: Partial<DateTidsperiode>): tidsperiode is DateTidsperiode => {\n    return tidsperiode.fom !== undefined && tidsperiode.tom !== undefined;\n};\n\nconst mapFormValuesToDateTidsperiode = (\n    formValues: DateTidsperiodeFormValues,\n    id: string | undefined\n): Partial<DateTidsperiode> => {\n    return {\n        id: id || guid(),\n        fom: ISOStringToDate(formValues.fom),\n        tom: ISOStringToDate(formValues.tom),\n    };\n};\n\nconst mapDateTidsperiodeToFormValues = ({ fom, tom }: Partial<DateTidsperiode>): DateTidsperiodeFormValues => {\n    return {\n        fom: dateToISOString(fom),\n        tom: dateToISOString(tom),\n    };\n};\n\nconst tidsperiodeUtils = {\n    isValidDateTidsperiode,\n    mapDateTidsperiodeToFormValues,\n    mapFormValuesToDateTidsperiode,\n};\n\nexport default tidsperiodeUtils;\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { DateTidsperiode } from './types';\n\ninterface Props {\n    tidsperiode: DateTidsperiode[];\n    onEdit?: (opphold: DateTidsperiode) => void;\n    onDelete?: (opphold: DateTidsperiode) => void;\n}\n\nconst TidsperiodeList = ({ tidsperiode = [], onDelete, onEdit }: Props) => {\n    const getDateTitleString = (uttak: DateTidsperiode) =>\n        `${prettifyDateExtended(uttak.fom)} - ${prettifyDateExtended(uttak.tom)}`;\n\n    const renderTidsperiodeLabel = (uttak: DateTidsperiode): React.ReactNode => {\n        const title = getDateTitleString(uttak);\n        return (\n            <>\n                {onEdit && <ActionLink onClick={() => onEdit(uttak)}>{title}</ActionLink>}\n                {!onEdit && <span>{title}</span>}\n            </>\n        );\n    };\n\n    return (\n        <ItemList<DateTidsperiode>\n            getItemId={(uttak) => uttak.id}\n            getItemTitle={(uttak) => getDateTitleString(uttak)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderTidsperiodeLabel}\n            items={tidsperiode.filter((uttak) => uttak.id !== undefined)}\n        />\n    );\n};\n\nexport default TidsperiodeList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList,\n    ModalFormAndListLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport TidsperiodeForm from './TidsperiodeForm';\nimport TidsperiodeList from './TidsperiodeList';\nimport { DateTidsperiode } from './types';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames> {\n    name: FieldNames;\n    formTitle?: string;\n    minDate?: Date;\n    maxDate?: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction TidsperiodeListAndDialog<FieldNames>({\n    name,\n    minDate,\n    maxDate,\n    validate,\n    labels,\n    formTitle,\n}: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, DateTidsperiode>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                sortFunc={sortItemsByFom}\n                formRenderer={({ onSubmit, onCancel, item, allItems }) => (\n                    <TidsperiodeForm\n                        tidsperiode={item}\n                        alleTidsperioder={allItems}\n                        formLabels={formTitle ? { title: formTitle } : undefined}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => {\n                    return <TidsperiodeList tidsperiode={items} onEdit={onEdit} onDelete={onDelete} />;\n                }}\n            />\n        </>\n    );\n}\n\nexport default TidsperiodeListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { date1YearAgo, date1YearFromNow } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport {\n    getFieldErrorRenderer,\n    getSummaryFieldErrorRenderer,\n} from '@navikt/sif-common-formik/lib/utils/formikErrorRenderUtils';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport flat from 'flat';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { DateTidsperiode } from '../../../forms/tidsperiode';\nimport TidsperiodeForm, { TidsperiodeFormErrors } from '../../../forms/tidsperiode/TidsperiodeForm';\nimport TidsperiodeListAndDialog from '../../../forms/tidsperiode/TidsperiodeListAndDialog';\nimport tidsperiodeMessages from '../../../forms/tidsperiode/tidsperiodeMessages';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\n\nenum FormField {\n    'tidsperiode' = 'tidsperiode',\n}\n\ninterface FormValues {\n    [FormField.tidsperiode]: DateTidsperiode[];\n}\nconst initialValues: FormValues = { tidsperiode: [] };\n\nconst TidsperiodeExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<DateTidsperiode> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={getFieldErrorRenderer(intl, 'tidsperiodeExample')}\n                                summaryFieldErrorRenderer={getSummaryFieldErrorRenderer(intl, 'tidsperiodeExample')}>\n                                <TidsperiodeListAndDialog<FormField>\n                                    name={FormField.tidsperiode}\n                                    minDate={date1YearAgo}\n                                    maxDate={date1YearFromNow}\n                                    validate={getListValidator({ required: true })}\n                                    labels={{\n                                        addLabel: 'Legg til periode',\n                                        listTitle: 'Registrerte periode',\n                                        modalTitle: 'Periode',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrorIntlKeys={flat(TidsperiodeFormErrors)}\n                    intlMessages={tidsperiodeMessages}\n                />\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <TidsperiodeForm\n                        minDate={date1YearAgo}\n                        maxDate={date1YearFromNow}\n                        tidsperiode={{}}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                    />\n                </Panel>\n                <SubmitPreview values={singleFormValues} />\n            </DialogFormWrapper>\n\n            <MessagesPreview messages={tidsperiodeMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default TidsperiodeExample;\n","import { YesOrNo } from '@navikt/sif-common-formik/lib';\n\nexport enum UtenlandsoppholdÅrsak {\n    'INNLAGT_DEKKET_NORGE' = 'BARNET_INNLAGT_I_HELSEINSTITUSJON_FOR_NORSK_OFFENTLIG_REGNING',\n    'INNLAGT_DEKKET_ANNET_LAND' = 'BARNET_INNLAGT_I_HELSEINSTITUSJON_DEKKET_ETTER_AVTALE_MED_ET_ANNET_LAND_OM_TRYGD',\n    'ANNET' = 'ANNET',\n}\n\nexport interface UtenlandsoppholdInnlagtPeriode {\n    fom: Date;\n    tom: Date;\n}\n\nexport interface Utenlandsopphold {\n    id?: string;\n    fom: Date;\n    tom: Date;\n    landkode: string;\n    erBarnetInnlagt?: YesOrNo;\n    barnInnlagtPerioder?: UtenlandsoppholdInnlagtPeriode[];\n    årsak?: UtenlandsoppholdÅrsak;\n}\n\nexport type UtenlandsoppholdFormValues = Partial<\n    Omit<Utenlandsopphold, 'id' | 'fom' | 'tom' | 'barnInnlagtPerioder'> & {\n        fom?: string;\n        tom?: string;\n        barnInnlagtPerioder?: UtenlandsoppholdInnlagtPeriode[];\n    }\n>;\n","import { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Utenlandsopphold, UtenlandsoppholdFormValues } from './types';\n\nconst isValidUtenlandsopphold = (utenlandsopphold: Partial<Utenlandsopphold>): utenlandsopphold is Utenlandsopphold => {\n    return (\n        utenlandsopphold.fom !== undefined &&\n        utenlandsopphold.tom !== undefined &&\n        utenlandsopphold.landkode !== undefined\n    );\n};\n\nconst mapFormValuesToUtenlandsopphold = (\n    formValues: UtenlandsoppholdFormValues,\n    id: string | undefined\n): Partial<Utenlandsopphold> => {\n    const { barnInnlagtPerioder } = formValues;\n    return {\n        ...formValues,\n        id: id || guid(),\n        fom: ISOStringToDate(formValues.fom),\n        tom: ISOStringToDate(formValues.tom),\n        barnInnlagtPerioder,\n    };\n};\n\nconst mapUtenlandsoppholdToFormValues = ({\n    fom,\n    tom,\n    erBarnetInnlagt,\n    barnInnlagtPerioder,\n    landkode,\n    årsak,\n}: Partial<Utenlandsopphold>): UtenlandsoppholdFormValues => ({\n    fom: dateToISOString(fom),\n    tom: dateToISOString(tom),\n    erBarnetInnlagt,\n    landkode,\n    årsak,\n    barnInnlagtPerioder,\n});\n\nconst utenlandsoppholdUtils = {\n    isValidUtenlandsopphold,\n    mapFormValuesToUtenlandsopphold,\n    mapUtenlandsoppholdToFormValues,\n};\nexport default utenlandsoppholdUtils;\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { countryIsMemberOfEøsOrEfta } from '@navikt/sif-common-core/lib/utils/countryUtils';\nimport { dateToday, prettifyDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { DateRange, getCountryName, ISOStringToDate, YesOrNo } from '@navikt/sif-common-formik';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport {\n    getDateRangeValidator,\n    getListValidator,\n    getRequiredFieldValidator,\n    getYesOrNoValidator,\n    ValidateDateError,\n    ValidateDateInRangeError,\n    ValidateListError,\n    ValidateRequiredFieldError,\n    ValidateYesOrNoError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport { hasValue } from '@navikt/sif-common-formik/lib/validation/validationUtils';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport TidsperiodeListAndDialog from '../tidsperiode/TidsperiodeListAndDialog';\nimport { getIntlFormErrorRenderer, mapFomTomToDateRange } from '../utils';\nimport { Utenlandsopphold, UtenlandsoppholdFormValues, UtenlandsoppholdÅrsak } from './types';\nimport utils from './utenlandsoppholdUtils';\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    opphold?: Utenlandsopphold;\n    alleOpphold?: Utenlandsopphold[];\n    onSubmit: (values: Utenlandsopphold) => void;\n    onCancel: () => void;\n}\n\nenum UtenlandsoppholdFormFields {\n    fom = 'fom',\n    tom = 'tom',\n    landkode = 'landkode',\n    årsak = 'årsak',\n    erBarnetInnlagt = 'erBarnetInnlagt',\n    barnInnlagtPerioder = 'barnInnlagtPerioder',\n}\n\nexport const UtlandsoppholdFormErrors = {\n    [UtenlandsoppholdFormFields.fom]: {\n        [ValidateRequiredFieldError.noValue]: 'utenlandsoppholdForm.fom.noValue',\n        [ValidateDateInRangeError.fromDateIsAfterToDate]: 'utenlandsoppholdForm.fom.fromDateIsAfterToDate',\n        [ValidateDateError.invalidDateFormat]: 'utenlandsoppholdForm.fom.invalidDateFormat',\n        [ValidateDateError.dateBeforeMin]: 'utenlandsoppholdForm.fom.dateBeforeMin',\n        [ValidateDateError.dateAfterMax]: 'utenlandsoppholdForm.fom.dateAfterMax',\n    },\n    [UtenlandsoppholdFormFields.tom]: {\n        [ValidateRequiredFieldError.noValue]: 'utenlandsoppholdForm.tom.noValue',\n        [ValidateDateInRangeError.toDateIsBeforeFromDate]: 'utenlandsoppholdForm.tom.toDateIsBeforeFromDate',\n        [ValidateDateError.invalidDateFormat]: 'utenlandsoppholdForm.tom.invalidDateFormat',\n        [ValidateDateError.dateBeforeMin]: 'utenlandsoppholdForm.tom.dateBeforeMin',\n        [ValidateDateError.dateAfterMax]: 'utenlandsoppholdForm.tom.dateAfterMax',\n    },\n    [UtenlandsoppholdFormFields.landkode]: {\n        [ValidateRequiredFieldError.noValue]: 'utenlandsoppholdForm.landkode.noValue',\n    },\n    [UtenlandsoppholdFormFields.årsak]: { [ValidateRequiredFieldError.noValue]: 'utenlandsoppholdForm.årsak.noValue' },\n    [UtenlandsoppholdFormFields.erBarnetInnlagt]: {\n        [ValidateYesOrNoError.yesOrNoIsUnanswered]: 'utenlandsoppholdForm.erBarnetInnlagt.yesOrNoIsUnanswered',\n    },\n    [UtenlandsoppholdFormFields.barnInnlagtPerioder]: {\n        [ValidateListError.listIsEmpty]: 'utenlandsoppholdForm.barnInnlagtPerioder.listIsEmpty',\n    },\n};\n\nconst defaultFormValues: UtenlandsoppholdFormValues = {\n    fom: undefined,\n    tom: undefined,\n    landkode: undefined,\n    erBarnetInnlagt: YesOrNo.UNANSWERED,\n    barnInnlagtPerioder: [],\n    årsak: undefined,\n};\n\nconst Form = getTypedFormComponents<UtenlandsoppholdFormFields, UtenlandsoppholdFormValues>();\n\nconst UtenlandsoppholdForm = ({ maxDate, minDate, opphold, alleOpphold = [], onSubmit, onCancel }: Props) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: Partial<UtenlandsoppholdFormValues>) => {\n        const utenlandsoppholdToSubmit = utils.mapFormValuesToUtenlandsopphold(formValues, opphold?.id);\n        if (utils.isValidUtenlandsopphold(utenlandsoppholdToSubmit)) {\n            onSubmit({\n                ...utenlandsoppholdToSubmit,\n                årsak: countryIsMemberOfEøsOrEfta(utenlandsoppholdToSubmit.landkode) ? undefined : formValues.årsak,\n            });\n        } else {\n            throw new Error('UtenlandsoppholdForm: Formvalues is not a valid Utenlandsopphold on submit.');\n        }\n    };\n\n    const registrerteTidsperioder: DateRange[] | undefined =\n        opphold === undefined\n            ? alleOpphold.map(mapFomTomToDateRange)\n            : alleOpphold.filter((o) => o.id !== opphold.id).map(mapFomTomToDateRange);\n\n    const initialValues = opphold ? utils.mapUtenlandsoppholdToFormValues(opphold) : defaultFormValues;\n    return (\n        <Form.FormikWrapper\n            initialValues={initialValues}\n            onSubmit={onFormikSubmit}\n            renderForm={(formik) => {\n                const {\n                    values: { fom, tom, landkode, erBarnetInnlagt, barnInnlagtPerioder = [] },\n                } = formik;\n\n                const hasDateStringValues = hasValue(fom) && hasValue(tom);\n                const fomDate = ISOStringToDate(fom);\n                const tomDate = ISOStringToDate(tom);\n\n                const includeInnlagtPerioderQuestion =\n                    hasDateStringValues && landkode !== undefined && erBarnetInnlagt === YesOrNo.YES;\n\n                const includeInnlagtQuestion: boolean =\n                    landkode !== undefined && hasValue(landkode) && !countryIsMemberOfEøsOrEfta(landkode);\n\n                const showÅrsakQuestion = barnInnlagtPerioder.length > 0;\n\n                return (\n                    <Form.Form\n                        includeButtons={true}\n                        onCancel={onCancel}\n                        fieldErrorRenderer={getIntlFormErrorRenderer(intl)}>\n                        <Systemtittel tag=\"h1\">\n                            <FormattedMessage id=\"utenlandsopphold.form.tittel\" />\n                        </Systemtittel>\n                        <FormBlock>\n                            <Form.DateRangePicker\n                                legend={intlHelper(intl, 'utenlandsopphold.form.tidsperiode.spm')}\n                                fullscreenOverlay={true}\n                                disabledDateRanges={registrerteTidsperioder}\n                                minDate={minDate}\n                                maxDate={maxDate}\n                                fromInputProps={{\n                                    name: UtenlandsoppholdFormFields.fom,\n                                    label: intlHelper(intl, 'utenlandsopphold.form.tidsperiode.fraDato'),\n                                    dayPickerProps: {\n                                        initialMonth: fomDate || minDate || dateToday,\n                                    },\n                                    validate: getDateRangeValidator.validateFromDate(\n                                        {\n                                            required: true,\n                                            min: minDate,\n                                            max: maxDate,\n                                            toDate: ISOStringToDate(tom),\n                                        },\n                                        {\n                                            noValue: UtlandsoppholdFormErrors.fom.noValue,\n                                            dateBeforeMin: () =>\n                                                intlHelper(intl, UtlandsoppholdFormErrors.fom.dateBeforeMin, {\n                                                    dato: prettifyDate(minDate),\n                                                }),\n                                            dateAfterMax: () =>\n                                                intlHelper(intl, UtlandsoppholdFormErrors.fom.dateAfterMax, {\n                                                    dato: prettifyDate(maxDate),\n                                                }),\n                                            invalidDateFormat: UtlandsoppholdFormErrors.fom.invalidDateFormat,\n                                            fromDateIsAfterToDate: UtlandsoppholdFormErrors.fom.fromDateIsAfterToDate,\n                                        }\n                                    ),\n                                }}\n                                toInputProps={{\n                                    name: UtenlandsoppholdFormFields.tom,\n                                    label: intlHelper(intl, 'utenlandsopphold.form.tidsperiode.tilDato'),\n                                    dayPickerProps: {\n                                        initialMonth: tomDate || fomDate || dateToday,\n                                    },\n                                    validate: getDateRangeValidator.validateToDate(\n                                        {\n                                            required: true,\n                                            min: minDate,\n                                            max: maxDate,\n                                            fromDate: ISOStringToDate(fom),\n                                        },\n                                        {\n                                            noValue: UtlandsoppholdFormErrors.tom.noValue,\n                                            dateBeforeMin: () =>\n                                                intlHelper(intl, UtlandsoppholdFormErrors.tom.dateBeforeMin, {\n                                                    dato: prettifyDate(minDate),\n                                                }),\n                                            dateAfterMax: () =>\n                                                intlHelper(intl, UtlandsoppholdFormErrors.tom.dateAfterMax, {\n                                                    dato: prettifyDate(maxDate),\n                                                }),\n                                            invalidDateFormat: UtlandsoppholdFormErrors.tom.invalidDateFormat,\n                                            toDateIsBeforeFromDate: UtlandsoppholdFormErrors.tom.toDateIsBeforeFromDate,\n                                        }\n                                    ),\n                                }}\n                            />\n                        </FormBlock>\n                        {hasDateStringValues && (\n                            <FormBlock>\n                                <Form.CountrySelect\n                                    name={UtenlandsoppholdFormFields.landkode}\n                                    label={intlHelper(intl, 'utenlandsopphold.form.land.spm')}\n                                    validate={getRequiredFieldValidator({\n                                        noValue: UtlandsoppholdFormErrors.landkode.noValue,\n                                    })}\n                                />\n                            </FormBlock>\n                        )}\n\n                        {includeInnlagtQuestion && landkode && hasDateStringValues && (\n                            <>\n                                <FormBlock>\n                                    <Form.YesOrNoQuestion\n                                        name={UtenlandsoppholdFormFields.erBarnetInnlagt}\n                                        legend={intlHelper(intl, 'utenlandsopphold.form.erBarnetInnlagt.spm', {\n                                            land: getCountryName(landkode, intl.locale),\n                                        })}\n                                        validate={getYesOrNoValidator({\n                                            yesOrNoIsUnanswered:\n                                                UtlandsoppholdFormErrors.erBarnetInnlagt.yesOrNoIsUnanswered,\n                                        })}\n                                    />\n                                </FormBlock>\n                                {includeInnlagtPerioderQuestion && (\n                                    <FormBlock margin=\"l\">\n                                        <TidsperiodeListAndDialog\n                                            name={UtenlandsoppholdFormFields.barnInnlagtPerioder}\n                                            minDate={ISOStringToDate(fom)}\n                                            maxDate={ISOStringToDate(tom)}\n                                            validate={getListValidator(\n                                                { required: true },\n                                                {\n                                                    listIsEmpty:\n                                                        UtlandsoppholdFormErrors.barnInnlagtPerioder.listIsEmpty,\n                                                }\n                                            )}\n                                            formTitle={intlHelper(\n                                                intl,\n                                                'utenlandsopphold.form.perioderBarnetErInnlag.formTitle'\n                                            )}\n                                            labels={{\n                                                addLabel: intlHelper(\n                                                    intl,\n                                                    'utenlandsopphold.form.perioderBarnetErInnlag.addLabel'\n                                                ),\n                                                modalTitle: intlHelper(\n                                                    intl,\n                                                    'utenlandsopphold.form.perioderBarnetErInnlag.modalTitle'\n                                                ),\n                                                listTitle: intlHelper(\n                                                    intl,\n                                                    'utenlandsopphold.form.perioderBarnetErInnlag.listTitle'\n                                                ),\n                                            }}\n                                        />\n                                    </FormBlock>\n                                )}\n                                {showÅrsakQuestion && (\n                                    <>\n                                        <FormBlock>\n                                            <Form.RadioPanelGroup\n                                                legend={intlHelper(intl, 'utenlandsopphold.form.årsak.spm', {\n                                                    land: getCountryName(landkode, intl.locale),\n                                                })}\n                                                name={UtenlandsoppholdFormFields.årsak}\n                                                validate={getRequiredFieldValidator({\n                                                    noValue: UtlandsoppholdFormErrors.årsak.noValue,\n                                                })}\n                                                radios={[\n                                                    {\n                                                        value: UtenlandsoppholdÅrsak.INNLAGT_DEKKET_NORGE,\n                                                        label: intlHelper(\n                                                            intl,\n                                                            `utenlandsopphold.form.årsak.${UtenlandsoppholdÅrsak.INNLAGT_DEKKET_NORGE}`\n                                                        ),\n                                                    },\n                                                    {\n                                                        value: UtenlandsoppholdÅrsak.INNLAGT_DEKKET_ANNET_LAND,\n                                                        label: intlHelper(\n                                                            intl,\n                                                            `utenlandsopphold.form.årsak.${UtenlandsoppholdÅrsak.INNLAGT_DEKKET_ANNET_LAND}`,\n                                                            { land: getCountryName(landkode, intl.locale) }\n                                                        ),\n                                                    },\n                                                    {\n                                                        value: UtenlandsoppholdÅrsak.ANNET,\n                                                        label: intlHelper(\n                                                            intl,\n                                                            `utenlandsopphold.form.årsak.${UtenlandsoppholdÅrsak.ANNET}`\n                                                        ),\n                                                    },\n                                                ]}\n                                            />\n                                        </FormBlock>\n                                    </>\n                                )}\n                            </>\n                        )}\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default UtenlandsoppholdForm;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { getCountryName } from '@navikt/sif-common-formik';\nimport { Utenlandsopphold } from './types';\nimport './utenlandsoppholdList.less';\n\ninterface Props {\n    utenlandsopphold: Utenlandsopphold[];\n    onEdit?: (opphold: Utenlandsopphold) => void;\n    onDelete?: (opphold: Utenlandsopphold) => void;\n}\n\nconst bem = bemUtils('utenlandsoppholdList');\n\nconst UtenlandsoppholdList = ({ utenlandsopphold, onDelete, onEdit }: Props) => {\n    const intl = useIntl();\n    const renderUtenlandsoppholdLabel = (opphold: Utenlandsopphold): React.ReactNode => {\n        const navn = getCountryName(opphold.landkode, intl.locale);\n        return (\n            <div className={bem.element('label')}>\n                <span className={bem.element('land')}>\n                    {onEdit && <ActionLink onClick={() => onEdit(opphold)}>{navn}</ActionLink>}\n                    {!onEdit && <span>{navn}</span>}\n                </span>\n                <span className={bem.element('dato')}>\n                    {prettifyDateExtended(opphold.fom)} - {prettifyDateExtended(opphold.tom)}\n                </span>\n            </div>\n        );\n    };\n\n    return (\n        <ItemList<Utenlandsopphold>\n            getItemId={(opphold) => opphold.id}\n            getItemTitle={(opphold) => getCountryName(opphold.landkode, intl.locale)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderUtenlandsoppholdLabel}\n            items={utenlandsopphold}\n        />\n    );\n};\n\nexport default UtenlandsoppholdList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList,\n    ModalFormAndListLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport { Utenlandsopphold } from './types';\nimport UtenlandsoppholdForm from './UtenlandsoppholdForm';\nimport UtenlandsoppholdListe from './UtenlandsoppholdList';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames> {\n    name: FieldNames;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction UtenlandsoppholdListAndDialog<FieldNames>({ name, minDate, maxDate, validate, labels }: Props<FieldNames>) {\n    return (\n        <FormikModalFormAndList<FieldNames, Utenlandsopphold>\n            name={name}\n            labels={labels}\n            validate={validate}\n            dialogWidth=\"narrow\"\n            sortFunc={sortItemsByFom}\n            formRenderer={({ onSubmit, onCancel, item, allItems }) => (\n                <UtenlandsoppholdForm\n                    opphold={item}\n                    alleOpphold={allItems}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    onSubmit={onSubmit}\n                    onCancel={onCancel}\n                />\n            )}\n            listRenderer={({ items, onEdit, onDelete }) => (\n                <UtenlandsoppholdListe utenlandsopphold={items} onEdit={onEdit} onDelete={onDelete} />\n            )}\n        />\n    );\n}\n\nexport default UtenlandsoppholdListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { date1YearAgo, date1YearFromNow } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport {\n    getFieldErrorRenderer,\n    getSummaryFieldErrorRenderer,\n} from '@navikt/sif-common-formik/lib/utils/formikErrorRenderUtils';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport flat from 'flat';\nimport Panel from 'nav-frontend-paneler';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { Utenlandsopphold } from '../../../forms/utenlandsopphold/types';\nimport UtenlandsoppholdForm, { UtlandsoppholdFormErrors } from '../../../forms/utenlandsopphold/UtenlandsoppholdForm';\nimport UtenlandsoppholdListAndDialog from '../../../forms/utenlandsopphold/UtenlandsoppholdListAndDialog';\nimport utenlandsoppholdMessages from '../../../forms/utenlandsopphold/utenlandsoppholdMessages';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\n\nenum FormField {\n    'utenlandsopphold' = 'utenlandsopphold',\n}\n\ninterface FormValues {\n    [FormField.utenlandsopphold]: Utenlandsopphold[];\n}\nconst initialValues: FormValues = {\n    utenlandsopphold: [],\n};\n\nconst UtenlandsoppholdExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<Utenlandsopphold> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={getFieldErrorRenderer(intl, 'utenlandsoppholdExample')}\n                                summaryFieldErrorRenderer={getSummaryFieldErrorRenderer(\n                                    intl,\n                                    'utenlandsoppholdExample'\n                                )}>\n                                <UtenlandsoppholdListAndDialog\n                                    minDate={date1YearAgo}\n                                    maxDate={date1YearFromNow}\n                                    name={FormField.utenlandsopphold}\n                                    validate={getListValidator({ required: true })}\n                                    labels={{\n                                        addLabel: 'Legg til utenlandsopphold',\n                                        listTitle: 'Registrerte utenlandsopphold',\n                                        modalTitle: 'Utenlandsopphold',\n                                        emptyListText: 'Ingen utenlandsopphold er lagt til',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrorIntlKeys={flat(UtlandsoppholdFormErrors)}\n                    intlMessages={utenlandsoppholdMessages}\n                />\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <UtenlandsoppholdForm\n                        opphold={initialValues.utenlandsopphold[0]}\n                        minDate={date1YearAgo}\n                        maxDate={date1YearFromNow}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                    />\n                    <SubmitPreview values={singleFormValues} />\n                </Panel>\n            </DialogFormWrapper>\n\n            <MessagesPreview messages={utenlandsoppholdMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default UtenlandsoppholdExample;\n","import { YesOrNo } from '@navikt/sif-common-core/lib/types/YesOrNo';\n\nexport enum FraværÅrsak {\n    'stengtSkoleBhg' = 'STENGT_SKOLE_ELLER_BARNEHAGE',\n    'smittevernhensyn' = 'SMITTEVERNHENSYN',\n    'ordinært' = 'ORDINÆRT_FRAVÆR',\n}\n\nexport interface FraværPeriode {\n    id?: string;\n    fraOgMed: Date;\n    tilOgMed: Date;\n    årsak: FraværÅrsak;\n}\n\nexport type FraværPeriodeFormValues = Partial<{\n    id: string;\n    fraOgMed: string;\n    tilOgMed: string;\n    hjemmePgaKorona: YesOrNo;\n    årsak: FraværÅrsak;\n}>;\n\nexport interface FraværDag {\n    id?: string;\n    dato: Date;\n    timerArbeidsdag: string;\n    timerFravær: string;\n    årsak: FraværÅrsak;\n}\n\nexport type FraværDagFormValues = Partial<\n    Omit<FraværDag, 'dato'> & {\n        dato: string;\n        hjemmePgaKorona: YesOrNo;\n        årsak?: FraværÅrsak;\n    }\n>;\n","import ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { getFraværÅrsakTekstKort } from './fraværMessages';\nimport { FraværÅrsak } from './types';\n\ninterface Props {\n    title: string;\n    årsak?: FraværÅrsak;\n    onEdit?: () => void;\n}\n\nconst FraværListItem: React.FunctionComponent<Props> = ({ title, årsak, onEdit }: Props) => {\n    const intl = useIntl();\n    return (\n        <div style={{ padding: '.5rem 0' }}>\n            <div>{onEdit ? <ActionLink onClick={() => onEdit()}>{title}</ActionLink> : { title }}</div>\n            {årsak && årsak !== FraværÅrsak.ordinært && (\n                <div style={{ marginTop: '.25rem' }}>\n                    <FormattedMessage\n                        id={`fravær.list.årsak`}\n                        values={{ årsak: getFraværÅrsakTekstKort(årsak, intl) }}\n                    />\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default FraværListItem;\n","import { YesOrNo } from '@navikt/sif-common-core/lib/types/YesOrNo';\nimport { DateRange } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport dayjs from 'dayjs';\nimport isSameOrAfter from 'dayjs/plugin/isSameOrAfter';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\nimport { isString } from 'formik';\nimport { guid } from 'nav-frontend-js-utils';\nimport { FraværDag, FraværDagFormValues, FraværPeriode, FraværPeriodeFormValues, FraværÅrsak } from './types';\n\ndayjs.extend(isSameOrAfter);\ndayjs.extend(isSameOrBefore);\n\nexport const isFraværDag = (fraværDag: Partial<FraværDag>): fraværDag is FraværDag => {\n    return (\n        fraværDag.dato !== undefined &&\n        fraværDag.timerArbeidsdag !== undefined &&\n        fraværDag.timerFravær !== undefined &&\n        fraværDag.årsak !== undefined\n    );\n};\n\nexport const isFraværPeriode = (fraværPeriode: Partial<FraværPeriode>): fraværPeriode is FraværPeriode => {\n    return (\n        fraværPeriode.fraOgMed !== undefined &&\n        fraværPeriode.tilOgMed !== undefined &&\n        fraværPeriode.årsak !== undefined\n    );\n};\n\nexport const fraværDagToFraværDateRange = (fraværDag: FraværDag): DateRange => ({\n    from: fraværDag.dato,\n    to: fraværDag.dato,\n});\n\nexport const fraværPeriodeToDateRange = (fraværDag: FraværPeriode): DateRange => ({\n    from: fraværDag.fraOgMed,\n    to: fraværDag.tilOgMed,\n});\n\nexport enum Weekday {\n    monday = 'monday',\n    tuesday = 'tuesday',\n    wednesday = 'wednesday',\n    thursday = 'thursday',\n    friday = 'friday',\n    saturday = 'saturday',\n    sunday = 'sunday',\n}\n\nexport const getWeekdayName = (date: Date): Weekday | undefined => {\n    switch (date.getDay()) {\n        case 0:\n            return Weekday.sunday;\n        case 1:\n            return Weekday.monday;\n        case 2:\n            return Weekday.tuesday;\n        case 3:\n            return Weekday.wednesday;\n        case 4:\n            return Weekday.thursday;\n        case 5:\n            return Weekday.friday;\n        case 6:\n            return Weekday.saturday;\n        default:\n            return undefined;\n    }\n};\n\nexport const dateErHelg = (date: Date) =>\n    getWeekdayName(date) === Weekday.saturday || getWeekdayName(date) === Weekday.sunday;\n\nexport const rangeCollideWithRanges = (range: DateRange, ranges: DateRange[] = []): boolean => {\n    if (!range || !range.from || !range.to || ranges.length === 0) {\n        return false;\n    }\n    return ranges.some((periode) => {\n        const fromDay = dayjs(range.from);\n        const toDay = dayjs(range.to);\n        const { from, to } = periode;\n        if (fromDay.isBefore(from) && toDay.isAfter(to)) return true;\n        if (fromDay.isSameOrAfter(from, 'day') && fromDay.isSameOrBefore(to, 'day')) return true;\n        if (toDay.isSameOrAfter(from, 'day') && toDay.isSameOrBefore(to, 'day')) return true;\n    });\n};\n\nexport const dateCollideWithRanges = (date: Date | undefined, ranges: DateRange[] = []): boolean => {\n    if (!date || ranges.length === 0) {\n        return false;\n    }\n    return ranges.some((range) => {\n        return dayjs(date).isSameOrAfter(range.from, 'day') && dayjs(date).isSameOrBefore(range.to, 'day');\n    });\n};\n\nexport const timeText = (timer: string): string =>\n    timer === '0' || timer === '0.5' || timer === '1' ? 'time' : 'timer';\n\nexport const dateRangeToFomTom = (dateRange: DateRange): { fom: Date; tom: Date } => ({\n    fom: dateRange.from,\n    tom: dateRange.to,\n});\nexport const toMaybeNumber = (timerArbeidsdag: string | undefined): number | undefined => {\n    if (timerArbeidsdag && isString(timerArbeidsdag)) {\n        return parseFloat(timerArbeidsdag);\n    }\n    return undefined;\n};\n\nexport const getHjemmePgaKoronaFormValueFromFraværÅrsak = (årsak?: FraværÅrsak): YesOrNo => {\n    if (årsak === undefined) {\n        return YesOrNo.UNANSWERED;\n    }\n    return årsak === FraværÅrsak.smittevernhensyn || årsak === FraværÅrsak.stengtSkoleBhg ? YesOrNo.YES : YesOrNo.NO;\n};\n\nexport const getÅrsakFromFraværFormValues = (formValues: FraværDagFormValues | FraværPeriodeFormValues): FraværÅrsak =>\n    formValues.hjemmePgaKorona === YesOrNo.YES && formValues.årsak ? formValues.årsak : FraværÅrsak.ordinært;\n\nexport const mapFormValuesToFraværDag = (\n    formValues: FraværDagFormValues,\n    id: string | undefined\n): Partial<FraværDag> => {\n    return {\n        id: id || guid(),\n        timerArbeidsdag: formValues.timerArbeidsdag,\n        timerFravær: formValues.timerFravær,\n        dato: ISOStringToDate(formValues.dato),\n        årsak: getÅrsakFromFraværFormValues(formValues),\n    };\n};\n\nexport const mapFraværDagToFormValues = (fraværDag: Partial<FraværDag>): FraværDagFormValues => {\n    return {\n        timerArbeidsdag: fraværDag.timerArbeidsdag,\n        timerFravær: fraværDag.timerFravær,\n        dato: fraværDag.dato ? dateToISOString(fraværDag.dato) : '',\n        hjemmePgaKorona: getHjemmePgaKoronaFormValueFromFraværÅrsak(fraværDag.årsak),\n        årsak: fraværDag.årsak,\n    };\n};\n\nexport const mapFormValuesToFraværPeriode = (\n    formValues: FraværPeriodeFormValues,\n    id: string | undefined\n): Partial<FraværPeriode> => {\n    return {\n        id: id || guid(),\n        fraOgMed: ISOStringToDate(formValues.fraOgMed),\n        tilOgMed: ISOStringToDate(formValues.tilOgMed),\n        årsak: getÅrsakFromFraværFormValues(formValues),\n    };\n};\n\nexport const mapFraværPeriodeToFormValues = (fraværPeriode: Partial<FraværPeriode>): FraværPeriodeFormValues => {\n    return {\n        fraOgMed: fraværPeriode.fraOgMed ? dateToISOString(fraværPeriode.fraOgMed) : '',\n        tilOgMed: fraværPeriode.tilOgMed ? dateToISOString(fraværPeriode.tilOgMed) : '',\n        hjemmePgaKorona: getHjemmePgaKoronaFormValueFromFraværÅrsak(fraværPeriode.årsak),\n        årsak: fraværPeriode.årsak,\n    };\n};\n","import { DateRange } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { ValidationFunction } from '@navikt/sif-common-formik/lib/validation/types';\nimport {\n    dateCollideWithRanges,\n    dateErHelg,\n    fraværDagToFraværDateRange,\n    fraværPeriodeToDateRange,\n    rangeCollideWithRanges,\n} from './fraværUtilities';\nimport { FraværDag, FraværPeriode } from './types';\n\nexport enum FraværFieldValidationErrors {\n    fravær_timer_mer_enn_arbeidstimer = 'fravær_timer_mer_enn_arbeidstimer',\n    fra_og_til_er_ulike_år = 'fra_og_til_er_ulike_år',\n    er_helg = 'er_helg',\n    fra_dato_kolliderer_med_annet_fravær = 'fra_dato_kolliderer_med_annet_fravær',\n    til_dato_kolliderer_med_annet_fravær = 'til_dato_kolliderer_med_annet_fravær',\n    dato_kolliderer_med_annet_fravær = 'dato_kolliderer_med_annet_fravær',\n    dager_overlapper_med_andre_dager = 'dager_overlapper_med_andre_dager',\n}\n\nexport const validateLessOrEqualTo = (maybeMaxValue: number | undefined): ValidationFunction<any> => (\n    maybeValue: string | undefined\n) => {\n    const maybeValueFloat: number | undefined = maybeValue ? parseFloat(maybeValue) : undefined;\n    if (maybeMaxValue && maybeValueFloat) {\n        return maybeValueFloat <= maybeMaxValue\n            ? undefined\n            : FraværFieldValidationErrors.fravær_timer_mer_enn_arbeidstimer;\n    }\n    return undefined;\n};\n\nexport const validateErSammeÅr = (maybeDateFrom: string | undefined, maybeDateTo: string | undefined) => {\n    const fromDate = ISOStringToDate(maybeDateFrom);\n    const toDate = ISOStringToDate(maybeDateTo);\n    if (fromDate && toDate && fromDate.getFullYear() !== toDate.getFullYear()) {\n        return FraværFieldValidationErrors.fra_og_til_er_ulike_år;\n    }\n    return undefined;\n};\n\nexport const validateNotHelgedag = (maybeDate: string | undefined): FraværFieldValidationErrors | undefined => {\n    const date = ISOStringToDate(maybeDate);\n    return date && dateErHelg(date) ? FraværFieldValidationErrors.er_helg : undefined;\n};\n\nexport const validateFraværPeriodeCollision = (\n    from: Date | undefined,\n    to: Date | undefined,\n    ranges: DateRange[] | undefined\n): FraværFieldValidationErrors | undefined => {\n    if (!from || !to || (ranges || []).length === 0) {\n        return undefined;\n    }\n    return rangeCollideWithRanges({ from, to }, ranges)\n        ? FraværFieldValidationErrors.dager_overlapper_med_andre_dager\n        : undefined;\n};\n\nexport const validateFraOgMedForCollision = (\n    date: Date | undefined,\n    ranges: DateRange[] | undefined\n): FraværFieldValidationErrors | undefined => {\n    if (!date || (ranges || []).length === 0) {\n        return undefined;\n    }\n    return dateCollideWithRanges(date, ranges)\n        ? FraværFieldValidationErrors.fra_dato_kolliderer_med_annet_fravær\n        : undefined;\n};\n\nexport const validateTilOgMedForCollision = (\n    date: Date | undefined,\n    ranges: DateRange[] | undefined\n): FraværFieldValidationErrors | undefined => {\n    if (!date || (ranges || []).length === 0) {\n        return undefined;\n    }\n    return dateCollideWithRanges(date, ranges)\n        ? FraværFieldValidationErrors.til_dato_kolliderer_med_annet_fravær\n        : undefined;\n};\n\nexport const validateFraværDagCollision = (\n    date: Date | undefined,\n    ranges: DateRange[] | undefined\n): FraværFieldValidationErrors | undefined => {\n    if (!date || (ranges || []).length === 0) {\n        return undefined;\n    }\n    return dateCollideWithRanges(date, ranges)\n        ? FraværFieldValidationErrors.dato_kolliderer_med_annet_fravær\n        : undefined;\n};\n\nexport const validateNoCollisions = (fraværDager: FraværDag[], fraværPerioder: FraværPeriode[]) => ():\n    | FraværFieldValidationErrors\n    | undefined => {\n    if (fraværPerioder.length === 0 && fraværDager.length === 0) {\n        return undefined;\n    }\n\n    const allFraværDagDateRanges = fraværDager.map(fraværDagToFraværDateRange);\n    const allFraværPeriodeDateRanges = fraværPerioder.map(fraværPeriodeToDateRange);\n\n    const hasDateCollision = fraværDager.some((dag) => {\n        const rangesWithoutCurrentDag = [\n            ...fraværDager.filter((d) => d !== dag).map(fraværDagToFraværDateRange),\n            ...allFraværPeriodeDateRanges,\n        ];\n        return dateCollideWithRanges(dag.dato, rangesWithoutCurrentDag);\n    });\n\n    const hasRangeCollision = fraværPerioder.some((periode) => {\n        const rangesWithoutCurrentPeriode = [\n            ...allFraværDagDateRanges,\n            ...fraværPerioder.filter((p) => p !== periode).map(fraværPeriodeToDateRange),\n        ];\n        return rangeCollideWithRanges(fraværPeriodeToDateRange(periode), rangesWithoutCurrentPeriode);\n    });\n    return hasDateCollision || hasRangeCollision\n        ? FraværFieldValidationErrors.dager_overlapper_med_andre_dager\n        : undefined;\n};\n","import React from 'react';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport FraværListItem from './FraværListItem';\nimport { timeText } from './fraværUtilities';\nimport { FraværDag } from './types';\n\ninterface Props {\n    fraværDager: FraværDag[];\n    onEdit?: (fraværDag: FraværDag) => void;\n    onDelete?: (fraværDag: FraværDag) => void;\n}\n\nconst FraværDagerList = ({ fraværDager = [], onDelete, onEdit }: Props) => {\n    const getFraværDagListItemTitle = (fraværDag: FraværDag) =>\n        `${prettifyDateExtended(fraværDag.dato)}:\n        Skulle jobbet ${fraværDag.timerArbeidsdag} ${timeText(fraværDag.timerArbeidsdag)}.\n        Borte fra jobb ${fraværDag.timerFravær}  ${timeText(fraværDag.timerFravær)}.`;\n\n    const renderFraværDagLabel = (fraværDag: FraværDag): React.ReactNode => {\n        const title = getFraværDagListItemTitle(fraværDag);\n        return (\n            <FraværListItem\n                title={title}\n                årsak={fraværDag.årsak}\n                onEdit={onEdit ? () => onEdit(fraværDag) : undefined}\n            />\n        );\n    };\n\n    return (\n        <ItemList<FraværDag>\n            getItemId={(fraværDag) => fraværDag.id}\n            getItemTitle={(fraværDag) => getFraværDagListItemTitle(fraværDag)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderFraværDagLabel}\n            items={fraværDager.filter((fraværDag) => fraværDag.id !== undefined)}\n        />\n    );\n};\n\nexport default FraværDagerList;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\ninterface Props {\n    id: string;\n    value?: Record<string, string | number | boolean | null | undefined | Date>;\n}\n\nconst basicHtmlTagRenderers = {\n    li: (value: string) => <li>{value}</li>,\n    strong: (value: string) => <strong>{value}</strong>,\n    p: (value: string) => <p>{value}</p>,\n    em: (value: string) => <em>{value}</em>,\n};\n\nconst FormattedHtmlMessage = ({ id, value }: Props) => (\n    <FormattedMessage id={id} values={{ ...value, ...basicHtmlTagRenderers }} />\n);\n\nexport default FormattedHtmlMessage;\n","import React from 'react';\nimport { TypedFormInputValidationProps } from '@navikt/sif-common-formik/lib';\nimport { FraværDagForm, FraværDagFormFields } from './FraværDagForm';\nimport { timeText } from './fraværUtilities';\n\ninterface Props extends TypedFormInputValidationProps<any> {\n    name: FraværDagFormFields;\n    label?: string;\n    maksTid?: number;\n}\n\nconst getOptionsList: (maksTid: number) => JSX.Element[] = (maksTid: number) => {\n    const newOptionElement = (t: number): JSX.Element => {\n        return (\n            <option key={t} value={t}>\n                {t.toString(10).replace('.', ',')} {timeText(t.toString(10))}\n            </option>\n        );\n    };\n    const go = (jsxList: JSX.Element[], tid: number): JSX.Element[] => {\n        return tid >= maksTid\n            ? [...jsxList, newOptionElement(tid)]\n            : go([...jsxList, newOptionElement(tid)], tid + 0.5);\n    };\n    return go([], 0.5);\n};\n\nconst FraværTimerSelect = ({ name, validate, label, maksTid }: Props) => {\n    return (\n        <FraværDagForm.Select bredde=\"s\" label={label || 'Antall timer'} name={name} validate={validate}>\n            <option />\n            {getOptionsList(maksTid || 7.5)}\n        </FraværDagForm.Select>\n    );\n};\n\nexport default FraværTimerSelect;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport ExpandableInfo from '@navikt/sif-common-core/lib/components/expandable-content/ExpandableInfo';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { YesOrNo } from '@navikt/sif-common-core/lib/types/YesOrNo';\nimport { DateRange, dateToday } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport datepickerUtils from '@navikt/sif-common-formik/lib/components/formik-datepicker/datepickerUtils';\nimport { FormikDatepickerProps } from '@navikt/sif-common-formik/lib/components/formik-datepicker/FormikDatepicker';\nimport {\n    getDateValidator,\n    getRequiredFieldValidator,\n    getYesOrNoValidator,\n    ValidateDateError,\n    ValidateRequiredFieldError,\n    ValidateYesOrNoError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport dayjs from 'dayjs';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport FormattedHtmlMessage from '../components/formatted-html-message/FormattedHtmlMessage';\nimport { getIntlFormErrorRenderer } from '../utils';\nimport FraværTimerSelect from './FraværTimerSelect';\nimport { isFraværDag, mapFormValuesToFraværDag, mapFraværDagToFormValues, toMaybeNumber } from './fraværUtilities';\nimport {\n    FraværFieldValidationErrors,\n    validateFraværDagCollision,\n    validateLessOrEqualTo,\n    validateNotHelgedag,\n} from './fraværValidationUtils';\nimport { getFraværÅrsakRadios } from './fraværÅrsakRadios';\nimport { FraværDag, FraværDagFormValues } from './types';\nimport ÅrsakInfo from './ÅrsakInfo';\n\nexport interface FraværDagFormLabels {\n    tittel: string;\n    dato: string;\n    antallArbeidstimer: string;\n    timerFravær: string;\n    hjemmePgaKorona: string;\n    årsak: string;\n    ok: string;\n    avbryt: string;\n}\n\ninterface Props {\n    fraværDag?: Partial<FraværDag>;\n    dagDescription?: JSX.Element;\n    minDate: Date;\n    maxDate: Date;\n    dateRangesToDisable?: DateRange[];\n    helgedagerIkkeTillatt?: boolean;\n    headerContent?: JSX.Element;\n    maksArbeidstidPerDag?: number;\n    onSubmit: (values: FraværDag) => void;\n    onCancel: () => void;\n}\n\nexport enum FraværDagFormFields {\n    dato = 'dato',\n    timerArbeidsdag = 'timerArbeidsdag',\n    timerFravær = 'timerFravær',\n    hjemmePgaKorona = 'hjemmePgaKorona',\n    årsak = 'årsak',\n}\n\nexport const FraværDagFormErrors = {\n    [FraværDagFormFields.dato]: {\n        [ValidateRequiredFieldError.noValue]: 'fraværDagForm.dato.noValue',\n        [ValidateDateError.invalidDateFormat]: 'fraværDagForm.dato.invalidDateFormat',\n        [ValidateDateError.dateAfterMax]: 'fraværDagForm.dato.dateAfterMax',\n        [ValidateDateError.dateBeforeMin]: 'fraværDagForm.dato.dateBeforeMin',\n        [FraværFieldValidationErrors.er_helg]: 'fraværDagForm.dato.er_helg',\n        [FraværFieldValidationErrors.dato_kolliderer_med_annet_fravær]:\n            'fraværDagForm.dato.dato_kolliderer_med_annet_fravær',\n    },\n    [FraværDagFormFields.timerArbeidsdag]: {\n        [ValidateRequiredFieldError.noValue]: 'fraværDagForm.timerArbeidsdag.noValue',\n    },\n    [FraværDagFormFields.timerFravær]: {\n        [ValidateRequiredFieldError.noValue]: 'fraværDagForm.timerFravær.noValue',\n        [FraværFieldValidationErrors.fravær_timer_mer_enn_arbeidstimer]:\n            'fraværDagForm.timerFravær.fravær_timer_mer_enn_arbeidstimer',\n    },\n    [FraværDagFormFields.hjemmePgaKorona]: {\n        [ValidateYesOrNoError.yesOrNoIsUnanswered]: 'fraværDagForm.hjemmePgaKorona.yesOrNoIsUnanswered',\n    },\n    [FraværDagFormFields.årsak]: { [ValidateRequiredFieldError.noValue]: 'fraværDagForm.årsak.noValue' },\n};\n\nexport const FraværDagFormName = 'fraværDagForm';\n\nexport const FraværDagForm = getTypedFormComponents<FraværDagFormFields, FraværDagFormValues>();\n\nconst FraværDagFormView = ({\n    fraværDag = {\n        dato: undefined,\n        timerArbeidsdag: undefined,\n        timerFravær: undefined,\n        årsak: undefined,\n    },\n    dagDescription,\n    maxDate,\n    minDate,\n    dateRangesToDisable,\n    helgedagerIkkeTillatt,\n    maksArbeidstidPerDag,\n    headerContent,\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n    const onFormikSubmit = (formValues: FraværDagFormValues) => {\n        const fraværDagToSubmit = mapFormValuesToFraværDag(formValues, fraværDag.id);\n        if (isFraværDag(fraværDagToSubmit)) {\n            onSubmit(fraværDagToSubmit);\n        } else {\n            throw new Error('FraværDagFOrm: Formvalues is not a valid FraværDag on submit.');\n        }\n    };\n\n    const formLabels: FraværDagFormLabels = {\n        ok: intlHelper(intl, 'fravær.form.felles.ok'),\n        avbryt: intlHelper(intl, 'fravær.form.felles.avbryt'),\n        årsak: intlHelper(intl, 'fravær.form.felles.årsak'),\n        tittel: intlHelper(intl, 'fravær.form.dag.tittel'),\n        dato: intlHelper(intl, 'fravær.form.dag.dato'),\n        antallArbeidstimer: intlHelper(intl, 'fravær.form.dag.antallArbeidstimer'),\n        timerFravær: intlHelper(intl, 'fravær.form.dag.timerFravær'),\n        hjemmePgaKorona: intlHelper(intl, 'fravær.form.felles.hjemmePgaKorona'),\n    };\n    const fraværÅrsakRadios = getFraværÅrsakRadios(intl);\n    const disabledDateRanges = dateRangesToDisable\n        ? dateRangesToDisable.filter((range) => {\n              const { dato } = fraværDag;\n              return !(dato && dayjs(dato).isSame(range.from, 'day') && dayjs(dato).isSame(range.to, 'day'));\n          })\n        : undefined;\n\n    return (\n        <>\n            <FraværDagForm.FormikWrapper\n                initialValues={mapFraværDagToFormValues(fraværDag)}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => {\n                    const { values } = formik;\n                    const valgtDato = datepickerUtils.getDateFromDateString(values.dato);\n                    const datepickerProps: FormikDatepickerProps<FraværDagFormFields> = {\n                        label: formLabels.dato,\n                        name: FraværDagFormFields.dato,\n                        fullscreenOverlay: true,\n                        dayPickerProps: {\n                            initialMonth: dayjs(dateToday).isAfter(maxDate) ? maxDate : dateToday,\n                        },\n                        minDate,\n                        maxDate,\n                        disableWeekend: helgedagerIkkeTillatt || false,\n                        disabledDateRanges,\n                        validate: (value) => {\n                            if (helgedagerIkkeTillatt && validateNotHelgedag(value)) {\n                                return FraværDagFormErrors.dato.er_helg;\n                            }\n                            if (validateFraværDagCollision(valgtDato, disabledDateRanges)) {\n                                return FraværDagFormErrors.dato.dato_kolliderer_med_annet_fravær;\n                            }\n                            return getDateValidator(\n                                { required: true, min: minDate, max: maxDate },\n                                {\n                                    dateAfterMax: FraværDagFormErrors.dato.dateAfterMax,\n                                    dateBeforeMin: FraværDagFormErrors.dato.dateBeforeMin,\n                                    invalidDateFormat: FraværDagFormErrors.dato.invalidDateFormat,\n                                    noValue: FraværDagFormErrors.dato.noValue,\n                                }\n                            )(value);\n                        },\n                        onChange: () => {\n                            setTimeout(() => {\n                                formik.validateField(FraværDagFormFields.dato);\n                            });\n                        },\n                    };\n\n                    return (\n                        <FraværDagForm.Form onCancel={onCancel} fieldErrorRenderer={getIntlFormErrorRenderer(intl)}>\n                            <Systemtittel tag=\"h1\">{formLabels.tittel}</Systemtittel>\n                            {headerContent && <Box>{headerContent}</Box>}\n                            <FormBlock>\n                                <FraværDagForm.DatePicker {...datepickerProps} description={dagDescription} />\n                            </FormBlock>\n                            <FormBlock>\n                                <FraværTimerSelect\n                                    name={FraværDagFormFields.timerArbeidsdag}\n                                    validate={getRequiredFieldValidator({\n                                        noValue: FraværDagFormErrors.timerArbeidsdag.noValue,\n                                    })}\n                                    label={formLabels.antallArbeidstimer}\n                                    maksTid={maksArbeidstidPerDag}\n                                />\n                            </FormBlock>\n                            <FormBlock>\n                                <FraværTimerSelect\n                                    name={FraværDagFormFields.timerFravær}\n                                    validate={(value) => {\n                                        if (validateLessOrEqualTo(toMaybeNumber(values.timerArbeidsdag))(value)) {\n                                            return FraværDagFormErrors.timerFravær.fravær_timer_mer_enn_arbeidstimer;\n                                        }\n                                        return getRequiredFieldValidator({\n                                            noValue: FraværDagFormErrors.timerFravær.noValue,\n                                        })(value);\n                                    }}\n                                    label={formLabels.timerFravær}\n                                    maksTid={maksArbeidstidPerDag}\n                                />\n                            </FormBlock>\n                            <FormBlock>\n                                <FraværDagForm.YesOrNoQuestion\n                                    legend={formLabels.hjemmePgaKorona}\n                                    name={FraværDagFormFields.hjemmePgaKorona}\n                                    validate={getYesOrNoValidator({\n                                        yesOrNoIsUnanswered: FraværDagFormErrors.hjemmePgaKorona.yesOrNoIsUnanswered,\n                                    })}\n                                    description={\n                                        <ExpandableInfo title={intlHelper(intl, 'info.smittevern.tittel')}>\n                                            <FormattedHtmlMessage id=\"info.smittevern.info.html\" />\n                                        </ExpandableInfo>\n                                    }\n                                />\n                            </FormBlock>\n                            {values.hjemmePgaKorona === YesOrNo.YES && (\n                                <FormBlock>\n                                    <FraværDagForm.RadioPanelGroup\n                                        legend={formLabels.årsak}\n                                        name={FraværDagFormFields.årsak}\n                                        validate={getRequiredFieldValidator({\n                                            noValue: FraværDagFormErrors.årsak.noValue,\n                                        })}\n                                        radios={fraværÅrsakRadios}\n                                        description={<ÅrsakInfo />}\n                                    />\n                                </FormBlock>\n                            )}\n                        </FraværDagForm.Form>\n                    );\n                }}\n            />\n        </>\n    );\n};\n\nexport default FraværDagFormView;\n","import intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { RadioPanelProps } from 'nav-frontend-skjema';\nimport { IntlShape } from 'react-intl';\nimport { FraværÅrsak } from './types';\n\nexport const getFraværÅrsakRadios = (intl: IntlShape): RadioPanelProps[] => [\n    {\n        label: intlHelper(intl, `fravær.årsak.${FraværÅrsak.stengtSkoleBhg}`),\n        value: FraværÅrsak.stengtSkoleBhg,\n    },\n    {\n        label: intlHelper(intl, `fravær.årsak.${FraværÅrsak.smittevernhensyn}`),\n        value: FraværÅrsak.smittevernhensyn,\n    },\n];\n","import ExpandableInfo from '@navikt/sif-common-core/lib/components/expandable-content/ExpandableInfo';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { Element } from 'nav-frontend-typografi';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormattedHtmlMessage from '../components/formatted-html-message/FormattedHtmlMessage';\n\nconst ÅrsakInfo: React.FunctionComponent = () => {\n    const intl = useIntl();\n    return (\n        <ExpandableInfo title={intlHelper(intl, 'info.årsak.tittel')}>\n            <p style={{ marginTop: '0' }}>\n                <FormattedHtmlMessage id=\"info.årsak.info.1\" />\n            </p>\n            <Element tag=\"h3\">\n                <FormattedHtmlMessage id=\"info.årsak.info.2\" />\n            </Element>\n            <FormattedHtmlMessage id=\"info.årsak.info.3\" />\n        </ExpandableInfo>\n    );\n};\n\nexport default ÅrsakInfo;\n","import React from 'react';\nimport { DateRange, sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList,\n    ModalFormAndListLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport FraværDagerList from './FraværDagerList';\nimport FraværDagFormView from './FraværDagForm';\nimport { FraværDag } from './types';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames> {\n    name: FieldNames;\n    minDate: Date;\n    maxDate: Date;\n    dagDescription?: JSX.Element;\n    labels: ModalFormAndListLabels;\n    formHeaderContent?: JSX.Element;\n    dateRangesToDisable?: DateRange[];\n    helgedagerIkkeTillatt?: boolean;\n    maksArbeidstidPerDag?: number;\n}\n\nfunction FraværDagerListAndDialog<FieldNames>({\n    name,\n    minDate,\n    maxDate,\n    validate,\n    dagDescription,\n    labels,\n    formHeaderContent,\n    dateRangesToDisable,\n    helgedagerIkkeTillatt,\n    maksArbeidstidPerDag,\n}: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, FraværDag>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                sortFunc={(fraværDagA: FraværDag, fraværDagB: FraværDag) =>\n                    sortItemsByFom({ fom: fraværDagA.dato }, { fom: fraværDagB.dato })\n                }\n                formRenderer={({ onSubmit, onCancel, item }) => (\n                    <FraværDagFormView\n                        fraværDag={item}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        headerContent={formHeaderContent}\n                        dagDescription={dagDescription}\n                        dateRangesToDisable={dateRangesToDisable}\n                        helgedagerIkkeTillatt={helgedagerIkkeTillatt}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                        maksArbeidstidPerDag={maksArbeidstidPerDag}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FraværDagerList fraværDager={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FraværDagerListAndDialog;\n","import React from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport ExpandableInfo from '@navikt/sif-common-core/lib/components/expandable-content/ExpandableInfo';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { YesOrNo } from '@navikt/sif-common-core/lib/types/YesOrNo';\nimport { DateRange, dateToday, prettifyDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { getTypedFormComponents, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport {\n    getDateRangeValidator,\n    getRequiredFieldValidator,\n    getYesOrNoValidator,\n    ValidateDateError,\n    ValidateDateInRangeError,\n    ValidateRequiredFieldError,\n    ValidateYesOrNoError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport dayjs from 'dayjs';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport FormattedHtmlMessage from '../components/formatted-html-message/FormattedHtmlMessage';\nimport { getIntlFormErrorRenderer } from '../utils';\nimport { isFraværPeriode, mapFormValuesToFraværPeriode, mapFraværPeriodeToFormValues } from './fraværUtilities';\nimport {\n    FraværFieldValidationErrors,\n    validateErSammeÅr,\n    validateFraOgMedForCollision,\n    validateFraværPeriodeCollision,\n    validateNotHelgedag,\n    validateTilOgMedForCollision,\n} from './fraværValidationUtils';\nimport { getFraværÅrsakRadios } from './fraværÅrsakRadios';\nimport { FraværPeriode, FraværPeriodeFormValues } from './types';\nimport ÅrsakInfo from './ÅrsakInfo';\n\nexport interface FraværPeriodeFormLabels {\n    tittel: string;\n    tidsrom: string;\n    fom: string;\n    tom: string;\n    hjemmePgaKorona: string;\n    årsak: string;\n    ok: string;\n    avbryt: string;\n}\n\ninterface Props {\n    fraværPeriode?: Partial<FraværPeriode>;\n    periodeDescription?: JSX.Element;\n    minDate: Date;\n    maxDate: Date;\n    dateRangesToDisable?: DateRange[];\n    helgedagerIkkeTillat?: boolean;\n    begrensTilSammeÅr?: boolean;\n    headerContent?: JSX.Element;\n    onSubmit: (values: FraværPeriode) => void;\n    onCancel: () => void;\n}\n\nenum FraværPeriodeFormFields {\n    fraOgMed = 'fraOgMed',\n    tilOgMed = 'tilOgMed',\n    årsak = 'årsak',\n    hjemmePgaKorona = 'hjemmePgaKorona',\n}\n\nexport const FraværPeriodeFormErrors = {\n    [FraværPeriodeFormFields.fraOgMed]: {\n        [ValidateRequiredFieldError.noValue]: 'fraværPeriodeForm.fraOgMed.noValue',\n        [ValidateDateError.dateAfterMax]: 'fraværPeriodeForm.fraOgMed.dateAfterMax',\n        [ValidateDateError.dateBeforeMin]: 'fraværPeriodeForm.fraOgMed.dateBeforeMin',\n        [ValidateDateError.invalidDateFormat]: 'fraværPeriodeForm.fraOgMed.invalidDateFormat',\n        [ValidateDateInRangeError.fromDateIsAfterToDate]: 'fraværPeriodeForm.fraOgMed.fromDateIsAfterToDate',\n        [FraværFieldValidationErrors.er_helg]: 'fraværPeriodeForm.fraOgMed.er_helg',\n        [FraværFieldValidationErrors.fra_og_til_er_ulike_år]: 'fraværPeriodeForm.fraOgMed.fra_og_til_er_ulike_år',\n        [FraværFieldValidationErrors.fra_dato_kolliderer_med_annet_fravær]:\n            'fraværPeriodeForm.fraOgMed.fra_dato_kolliderer_med_annet_fravær',\n    },\n    [FraværPeriodeFormFields.tilOgMed]: {\n        [ValidateRequiredFieldError.noValue]: 'fraværPeriodeForm.tilOgMed.noValue',\n        [ValidateDateError.dateAfterMax]: 'fraværPeriodeForm.tilOgMed.dateAfterMax',\n        [ValidateDateError.dateBeforeMin]: 'fraværPeriodeForm.tilOgMed.dateBeforeMin',\n        [ValidateDateError.invalidDateFormat]: 'fraværPeriodeForm.tilOgMed.invalidDateFormat',\n        [ValidateDateInRangeError.toDateIsBeforeFromDate]: 'fraværPeriodeForm.tilOgMed.toDateIsBeforeFromDate',\n        [FraværFieldValidationErrors.er_helg]: 'fraværPeriodeForm.tilOgMed.er_helg',\n        [FraværFieldValidationErrors.fra_og_til_er_ulike_år]: 'fraværPeriodeForm.tilOgMed.fra_og_til_er_ulike_år',\n        [FraværFieldValidationErrors.til_dato_kolliderer_med_annet_fravær]:\n            'fraværPeriodeForm.tilOgMed.til_dato_kolliderer_med_annet_fravær',\n    },\n    [FraværPeriodeFormFields.årsak]: {\n        [ValidateRequiredFieldError.noValue]: 'fraværPeriodeForm.årsak.noValue',\n    },\n    [FraværPeriodeFormFields.hjemmePgaKorona]: {\n        [ValidateYesOrNoError.yesOrNoIsUnanswered]: 'fraværPeriodeForm.årsak.yesOrNoIsUnanswered',\n    },\n    ['fraOgMed_tilOgMed']: {\n        [FraværFieldValidationErrors.dager_overlapper_med_andre_dager]:\n            'fraværPeriodeForm.periode.dager_overlapper_med_andre_dager',\n    },\n};\n\nexport const FraværPeriodeFormName = 'fraværPeriodeForm';\n\nconst Form = getTypedFormComponents<FraværPeriodeFormFields, FraværPeriodeFormValues>();\n\nconst FraværPeriodeForm = ({\n    fraværPeriode = {},\n    periodeDescription,\n    maxDate,\n    minDate,\n    dateRangesToDisable,\n    helgedagerIkkeTillat,\n    headerContent,\n    begrensTilSammeÅr,\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: FraværPeriodeFormValues) => {\n        const fraværPeriodeToSubmit = mapFormValuesToFraværPeriode(formValues, fraværPeriode.id);\n        if (isFraværPeriode(fraværPeriodeToSubmit)) {\n            onSubmit(fraværPeriodeToSubmit);\n        } else {\n            throw new Error('FraværPeriodeForm: Formvalues is not a valid FraværPeriode on submit.');\n        }\n    };\n\n    const formLabels: FraværPeriodeFormLabels = {\n        ok: intlHelper(intl, 'fravær.form.felles.ok'),\n        avbryt: intlHelper(intl, 'fravær.form.felles.avbryt'),\n        årsak: intlHelper(intl, 'fravær.form.felles.årsak'),\n        tittel: intlHelper(intl, 'fravær.form.periode.tittel'),\n        tidsrom: intlHelper(intl, 'fravær.form.periode.tidsrom'),\n        hjemmePgaKorona: intlHelper(intl, 'fravær.form.felles.hjemmePgaKorona'),\n        fom: intlHelper(intl, 'fravær.form.periode.fom'),\n        tom: intlHelper(intl, 'fravær.form.periode.tom'),\n    };\n    const fraværÅrsakRadios = getFraværÅrsakRadios(intl);\n\n    const disabledDateRanges = dateRangesToDisable\n        ? dateRangesToDisable.filter((range) => {\n              const { fraOgMed, tilOgMed } = fraværPeriode;\n              return !(\n                  fraOgMed &&\n                  tilOgMed &&\n                  dayjs(fraOgMed).isSame(range.from, 'day') &&\n                  dayjs(tilOgMed).isSame(range.to, 'day')\n              );\n          })\n        : undefined;\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={mapFraværPeriodeToFormValues(fraværPeriode)}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => {\n                    const { fraOgMed, tilOgMed } = formik.values;\n                    const fromDate: Date | undefined = ISOStringToDate(fraOgMed);\n                    const toDate: Date | undefined = ISOStringToDate(tilOgMed);\n                    return (\n                        <Form.Form onCancel={onCancel} fieldErrorRenderer={getIntlFormErrorRenderer(intl)}>\n                            <Systemtittel tag=\"h1\">{formLabels.tittel}</Systemtittel>\n                            {headerContent && <Box margin=\"l\">{headerContent}</Box>}\n                            <FormBlock>\n                                <Form.DateIntervalPicker\n                                    legend={formLabels.tidsrom}\n                                    description={periodeDescription}\n                                    validate={() => {\n                                        const err = validateFraværPeriodeCollision(\n                                            fromDate,\n                                            toDate,\n                                            disabledDateRanges\n                                        );\n                                        if (err) {\n                                            return FraværPeriodeFormErrors.fraOgMed_tilOgMed\n                                                .dager_overlapper_med_andre_dager;\n                                        }\n                                    }}\n                                    fromDatepickerProps={{\n                                        label: formLabels.fom,\n                                        name: FraværPeriodeFormFields.fraOgMed,\n                                        fullscreenOverlay: true,\n                                        minDate: minDate,\n                                        maxDate: toDate || maxDate,\n                                        disableWeekend: helgedagerIkkeTillat || false,\n                                        disabledDateRanges,\n                                        dayPickerProps: {\n                                            initialMonth:\n                                                fromDate || toDate || dayjs(dateToday).isAfter(maxDate)\n                                                    ? maxDate\n                                                    : dateToday,\n                                        },\n                                        validate: getFromDateValidator(\n                                            {\n                                                begrensTilSammeÅr,\n                                                minDate,\n                                                maxDate,\n                                                helgedagerIkkeTillat,\n                                                disabledDateRanges,\n                                                toDate,\n                                                tilOgMed,\n                                            },\n                                            intl\n                                        ),\n                                        onChange: () => {\n                                            setTimeout(() => {\n                                                formik.validateField(FraværPeriodeFormFields.fraOgMed);\n                                                formik.validateField(FraværPeriodeFormFields.tilOgMed);\n                                            });\n                                        },\n                                    }}\n                                    toDatepickerProps={{\n                                        label: formLabels.tom,\n                                        name: FraværPeriodeFormFields.tilOgMed,\n                                        fullscreenOverlay: true,\n                                        minDate: fromDate || minDate,\n                                        maxDate,\n                                        disableWeekend: helgedagerIkkeTillat || false,\n                                        disabledDateRanges,\n                                        dayPickerProps: {\n                                            initialMonth:\n                                                toDate || fromDate || dayjs(dateToday).isAfter(maxDate)\n                                                    ? maxDate\n                                                    : dateToday,\n                                        },\n                                        validate: getToDateValidator(\n                                            {\n                                                begrensTilSammeÅr,\n                                                disabledDateRanges,\n                                                fraOgMed,\n                                                fromDate,\n                                                helgedagerIkkeTillat,\n                                                maxDate,\n                                                minDate,\n                                            },\n                                            intl\n                                        ),\n                                        onChange: () => {\n                                            setTimeout(() => {\n                                                formik.validateField(FraværPeriodeFormFields.fraOgMed);\n                                                formik.validateField(FraværPeriodeFormFields.tilOgMed);\n                                            });\n                                        },\n                                    }}\n                                />\n                            </FormBlock>\n                            <FormBlock>\n                                <Form.YesOrNoQuestion\n                                    legend={formLabels.hjemmePgaKorona}\n                                    name={FraværPeriodeFormFields.hjemmePgaKorona}\n                                    validate={getYesOrNoValidator({\n                                        yesOrNoIsUnanswered:\n                                            FraværPeriodeFormErrors.hjemmePgaKorona.yesOrNoIsUnanswered,\n                                    })}\n                                    description={\n                                        <ExpandableInfo title={intlHelper(intl, 'info.smittevern.tittel')}>\n                                            <FormattedHtmlMessage id=\"info.smittevern.info.html\" />\n                                        </ExpandableInfo>\n                                    }\n                                />\n                            </FormBlock>\n\n                            {formik.values.hjemmePgaKorona === YesOrNo.YES && (\n                                <FormBlock>\n                                    <Form.RadioPanelGroup\n                                        legend={formLabels.årsak}\n                                        name={FraværPeriodeFormFields.årsak}\n                                        validate={getRequiredFieldValidator({\n                                            noValue: FraværPeriodeFormErrors.årsak.noValue,\n                                        })}\n                                        radios={fraværÅrsakRadios}\n                                        description={<ÅrsakInfo />}\n                                    />\n                                </FormBlock>\n                            )}\n                        </Form.Form>\n                    );\n                }}\n            />\n        </>\n    );\n};\n\nconst getToDateValidator = (\n    {\n        helgedagerIkkeTillat,\n        begrensTilSammeÅr,\n        fraOgMed,\n        fromDate,\n        disabledDateRanges,\n        minDate,\n        maxDate,\n    }: {\n        helgedagerIkkeTillat?: boolean;\n        begrensTilSammeÅr?: boolean;\n        fraOgMed?: string;\n        fromDate?: Date;\n        disabledDateRanges?: DateRange[];\n        minDate?: Date;\n        maxDate?: Date;\n    },\n    intl: IntlShape\n) => (value) => {\n    if (helgedagerIkkeTillat && validateNotHelgedag(value)) {\n        return FraværPeriodeFormErrors.tilOgMed.er_helg;\n    }\n    if (begrensTilSammeÅr && validateErSammeÅr(fraOgMed, value)) {\n        return FraværPeriodeFormErrors.tilOgMed.fra_og_til_er_ulike_år;\n    }\n    if (validateTilOgMedForCollision(fromDate, disabledDateRanges)) {\n        return FraværPeriodeFormErrors.tilOgMed.til_dato_kolliderer_med_annet_fravær;\n    }\n    return getDateRangeValidator.validateToDate(\n        {\n            required: true,\n            min: minDate,\n            max: maxDate,\n            fromDate,\n        },\n        {\n            noValue: FraværPeriodeFormErrors.tilOgMed.noValue,\n            invalidDateFormat: FraværPeriodeFormErrors.tilOgMed.invalidDateFormat,\n            dateBeforeMin: minDate\n                ? () =>\n                      intlHelper(intl, FraværPeriodeFormErrors.tilOgMed.dateBeforeMin, {\n                          dato: prettifyDate(minDate),\n                      })\n                : undefined,\n            dateAfterMax: maxDate\n                ? () =>\n                      intlHelper(intl, FraværPeriodeFormErrors.tilOgMed.dateAfterMax, {\n                          dato: prettifyDate(maxDate),\n                      })\n                : undefined,\n            toDateIsBeforeFromDate: FraværPeriodeFormErrors.tilOgMed.toDateIsBeforeFromDate,\n        }\n    )(value);\n};\n\nconst getFromDateValidator = (\n    {\n        helgedagerIkkeTillat,\n        begrensTilSammeÅr,\n        tilOgMed,\n        toDate,\n        disabledDateRanges,\n        minDate,\n        maxDate,\n    }: {\n        helgedagerIkkeTillat?: boolean;\n        begrensTilSammeÅr?: boolean;\n        tilOgMed?: string;\n        toDate?: Date;\n        disabledDateRanges?: DateRange[];\n        minDate?: Date;\n        maxDate?: Date;\n    },\n    intl: IntlShape\n) => (value) => {\n    if (helgedagerIkkeTillat && validateNotHelgedag(value)) {\n        return FraværPeriodeFormErrors.fraOgMed.er_helg;\n    }\n    if (begrensTilSammeÅr && validateErSammeÅr(value, tilOgMed)) {\n        return FraværPeriodeFormErrors.fraOgMed.fra_og_til_er_ulike_år;\n    }\n    if (validateFraOgMedForCollision(toDate, disabledDateRanges)) {\n        return FraværPeriodeFormErrors.fraOgMed.fra_dato_kolliderer_med_annet_fravær;\n    }\n\n    return getDateRangeValidator.validateFromDate(\n        {\n            required: true,\n            min: minDate,\n            max: maxDate,\n            toDate,\n        },\n        {\n            noValue: FraværPeriodeFormErrors.fraOgMed.noValue,\n            invalidDateFormat: FraværPeriodeFormErrors.fraOgMed.invalidDateFormat,\n            dateBeforeMin: minDate\n                ? () =>\n                      intlHelper(intl, FraværPeriodeFormErrors.fraOgMed.dateBeforeMin, {\n                          dato: prettifyDate(minDate),\n                      })\n                : undefined,\n            dateAfterMax: maxDate\n                ? () =>\n                      intlHelper(intl, FraværPeriodeFormErrors.fraOgMed.dateAfterMax, {\n                          dato: prettifyDate(maxDate),\n                      })\n                : undefined,\n            fromDateIsAfterToDate: FraværPeriodeFormErrors.fraOgMed.fromDateIsAfterToDate,\n        }\n    )(value);\n};\n\nexport default FraværPeriodeForm;\n","import React from 'react';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { FraværPeriode } from './types';\nimport FraværListItem from './FraværListItem';\n\ninterface Props {\n    fraværPerioder: FraværPeriode[];\n    onEdit?: (fraværPeriode: FraværPeriode) => void;\n    onDelete?: (fraværPeriode: FraværPeriode) => void;\n    useTrashcan?: boolean;\n}\n\nconst FraværPerioderList = ({ fraværPerioder = [], onDelete, onEdit, useTrashcan }: Props) => {\n    const getDateTitleString = (fraværPeriode: FraværPeriode) =>\n        `${prettifyDateExtended(fraværPeriode.fraOgMed)} - ${prettifyDateExtended(fraværPeriode.tilOgMed)}`;\n\n    const renderFraværPeriodeLabel = (fraværPeriode: FraværPeriode): React.ReactNode => {\n        const title = getDateTitleString(fraværPeriode);\n        return (\n            <FraværListItem\n                title={title}\n                årsak={fraværPeriode.årsak}\n                onEdit={onEdit ? () => onEdit(fraværPeriode) : undefined}\n            />\n        );\n    };\n\n    return (\n        <ItemList<FraværPeriode>\n            getItemId={(fraværPeriode) => fraværPeriode.id}\n            getItemTitle={(fraværPeriode) => getDateTitleString(fraværPeriode)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderFraværPeriodeLabel}\n            items={fraværPerioder.filter((fraværPeriode) => fraværPeriode.id !== undefined)}\n            useTrashcan={useTrashcan || false}\n        />\n    );\n};\n\nexport default FraværPerioderList;\n","import React from 'react';\nimport { DateRange, sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList,\n    ModalFormAndListLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport FraværPeriodeForm from './FraværPeriodeForm';\nimport FraværPerioderList from './FraværPerioderList';\nimport { FraværPeriode } from './types';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames> {\n    name: FieldNames;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n    periodeDescription?: JSX.Element;\n    formHeaderContent?: JSX.Element;\n    dateRangesToDisable?: DateRange[];\n    begrensTilSammeÅr?: boolean;\n    helgedagerIkkeTillat?: boolean;\n}\n\nfunction FraværPerioderListAndDialog<FieldNames>({\n    name,\n    minDate,\n    maxDate,\n    dateRangesToDisable,\n    periodeDescription,\n    formHeaderContent,\n    begrensTilSammeÅr = true,\n    validate,\n    labels,\n    helgedagerIkkeTillat,\n}: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, FraværPeriode>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                sortFunc={(fraværPeriodeA: FraværPeriode, fraværPeriodeB: FraværPeriode) =>\n                    sortItemsByFom({ fom: fraværPeriodeA.fraOgMed }, { fom: fraværPeriodeB.tilOgMed })\n                }\n                formRenderer={({ onSubmit, onCancel, item }) => (\n                    <FraværPeriodeForm\n                        fraværPeriode={item}\n                        periodeDescription={periodeDescription}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        headerContent={formHeaderContent}\n                        dateRangesToDisable={dateRangesToDisable}\n                        helgedagerIkkeTillat={helgedagerIkkeTillat}\n                        begrensTilSammeÅr={begrensTilSammeÅr}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FraværPerioderList fraværPerioder={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FraværPerioderListAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { date1YearAgo, date1YearFromNow, dateToday } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport { validateAll } from '@navikt/sif-common-formik/lib/validation/validationUtils';\nimport flat from 'flat';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { FraværDag, FraværPeriode } from '../../../forms/fravær';\nimport FraværDagerListAndDialog from '../../../forms/fravær/FraværDagerListAndDialog';\nimport FraværDagFormView, { FraværDagFormErrors } from '../../../forms/fravær/FraværDagForm';\nimport fraværMessages from '../../../forms/fravær/fraværMessages';\nimport FraværPeriodeForm, { FraværPeriodeFormErrors } from '../../../forms/fravær/FraværPeriodeForm';\nimport FraværPerioderListAndDialog from '../../../forms/fravær/FraværPerioderListAndDialog';\nimport { fraværDagToFraværDateRange, fraværPeriodeToDateRange } from '../../../forms/fravær/fraværUtilities';\nimport { validateNoCollisions } from '../../../forms/fravær/fraværValidationUtils';\nimport { getIntlFormErrorRenderer } from '../../../forms/utils';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\n\nenum FormField {\n    perioder = 'perioder',\n    dager = 'dager',\n}\n\ninterface FormValues {\n    [FormField.perioder]: FraværPeriode[];\n    [FormField.dager]: FraværDag[];\n}\n\nconst initialValues: FormValues = { [FormField.perioder]: [], [FormField.dager]: [] };\n\nconst FraværExample: React.FunctionComponent = () => {\n    const [fraværPeriodeSingleFormValues, setFraværPeriodeSingleFormValues] = useState<\n        Partial<FraværPeriode> | undefined\n    >(undefined);\n    const [fraværDagSingleFormValues, setFraværDagSingleFormValues] = useState<Partial<FraværDag> | undefined>(\n        undefined\n    );\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={(formik) => {\n                        const { values } = formik;\n                        const dateRangesToDisable = [\n                            ...values.perioder.map(fraværPeriodeToDateRange),\n                            ...values.dager.map(fraværDagToFraværDateRange),\n                        ];\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={getIntlFormErrorRenderer(intl)}>\n                                <FormBlock>\n                                    <FraværPerioderListAndDialog<FormField>\n                                        name={FormField.perioder}\n                                        minDate={date1YearAgo}\n                                        maxDate={dateToday}\n                                        periodeDescription={\n                                            <p style={{ marginTop: '.5rem' }}>\n                                                Du kan kun søke for ett og samme år i en søknad. Får å søke for flere\n                                                år, må du sende en søknad for hvert år.\n                                            </p>\n                                        }\n                                        validate={(value) =>\n                                            validateAll([\n                                                () => getListValidator({ required: true })(value),\n                                                () => validateNoCollisions(values.dager, values.perioder),\n                                            ])\n                                        }\n                                        labels={{\n                                            addLabel: 'Legg til periode',\n                                            modalTitle: 'Fravær hele dager',\n                                        }}\n                                        dateRangesToDisable={dateRangesToDisable}\n                                        helgedagerIkkeTillat={true}\n                                    />\n                                </FormBlock>\n                                <FormBlock>\n                                    <FraværDagerListAndDialog<FormField>\n                                        name={FormField.dager}\n                                        minDate={date1YearAgo}\n                                        maxDate={dateToday}\n                                        validate={(value) =>\n                                            validateAll([\n                                                () => getListValidator({ required: true })(value),\n                                                () => validateNoCollisions(values.dager, values.perioder),\n                                            ])\n                                        }\n                                        labels={{\n                                            addLabel: 'Legg til dag med delvis fravær',\n                                            listTitle: 'Dager med delvis fravær',\n                                            modalTitle: 'Fravær deler av dag',\n                                            emptyListText: 'Ingen dager er lagt til',\n                                        }}\n                                        dateRangesToDisable={dateRangesToDisable}\n                                        helgedagerIkkeTillatt={true}\n                                        maksArbeidstidPerDag={24}\n                                    />\n                                </FormBlock>\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrorIntlKeys={flat(FraværPeriodeFormErrors)}\n                    intlMessages={fraværMessages}\n                />\n                <FormValidationErrorMessages\n                    validationErrorIntlKeys={flat(FraværDagFormErrors)}\n                    intlMessages={fraværMessages}\n                />\n            </Box>\n\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialoger</Undertittel>\n            </Box>\n\n            <FormBlock>\n                <DialogFormWrapper>\n                    <Panel border={true}>\n                        <FraværPeriodeForm\n                            minDate={date1YearAgo}\n                            maxDate={date1YearFromNow}\n                            fraværPeriode={{}}\n                            onSubmit={setFraværPeriodeSingleFormValues}\n                            onCancel={() => {\n                                // tslint:disable-next-line:no-console\n                                return console.log('cancel me');\n                            }}\n                        />\n                    </Panel>\n                    <SubmitPreview values={fraværPeriodeSingleFormValues} />\n                </DialogFormWrapper>\n            </FormBlock>\n\n            <FormBlock>\n                <DialogFormWrapper>\n                    <Panel border={true}>\n                        <FraværDagFormView\n                            minDate={date1YearAgo}\n                            maxDate={date1YearFromNow}\n                            fraværDag={{}}\n                            onSubmit={setFraværDagSingleFormValues}\n                            onCancel={() => {\n                                // tslint:disable-next-line:no-console\n                                return console.log('cancel me');\n                            }}\n                        />\n                    </Panel>\n                    <SubmitPreview values={fraværDagSingleFormValues} />\n                </DialogFormWrapper>\n            </FormBlock>\n\n            <MessagesPreview messages={fraværMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default FraværExample;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport {\n    getDateValidator,\n    getFødselsnummerValidator,\n    getRequiredFieldValidator,\n    ValidateDateError,\n    ValidateFødselsnummerError,\n    ValidateRequiredFieldError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport { validateAll } from '@navikt/sif-common-formik/lib/validation/validationUtils';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { getIntlFormErrorRenderer } from '../utils';\nimport annetBarnUtils from './annetBarnUtils';\nimport { AnnetBarn, AnnetBarnFormValues } from './types';\nimport { prettifyDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\n\nexport interface AnnetBarnFormLabels {\n    title: string;\n    fnr: string;\n    placeholderFnr?: string;\n    fødselsdato: string;\n    navn: string;\n    placeholderNavn?: string;\n    okButton: string;\n    cancelButton: string;\n    aldersGrenseText?: string;\n}\n\nenum AnnetBarnFormFields {\n    fnr = 'fnr',\n    fødselsdato = 'fødselsdato',\n    navn = 'navn',\n}\n\nexport const AnnetBarnFormErrors = {\n    [AnnetBarnFormFields.navn]: { [ValidateRequiredFieldError.noValue]: 'annetBarnForm.navn.noValue' },\n    [AnnetBarnFormFields.fødselsdato]: {\n        [ValidateRequiredFieldError.noValue]: 'annetBarnForm.fødselsdato.noValue',\n        [ValidateDateError.dateBeforeMin]: 'annetBarnForm.fødselsdato.dateBeforeMin',\n        [ValidateDateError.dateAfterMax]: 'annetBarnForm.fødselsdato.dateAfterMax',\n        [ValidateDateError.invalidDateFormat]: 'annetBarnForm.fødselsdato.invalidFormat',\n    },\n    [AnnetBarnFormFields.fnr]: {\n        [ValidateRequiredFieldError.noValue]: 'annetBarnForm.fnr.noValue',\n        [ValidateFødselsnummerError.invalidFødselsnummer]: 'annetBarnForm.fnr.invalidFødselsnummer',\n        [ValidateFødselsnummerError.fødselsnummerNot11Chars]: 'annetBarnForm.fnr.fødselsnummerNot11Chars',\n        [ValidateFødselsnummerError.disallowedFødselsnummer]: 'annetBarnForm.fnr.disallowedFødselsnummer',\n    },\n};\n\ninterface Props {\n    annetBarn?: Partial<AnnetBarn>;\n    labels?: Partial<AnnetBarnFormLabels>;\n    minDate: Date;\n    maxDate: Date;\n    disallowedFødselsnumre?: string[];\n    onSubmit: (values: AnnetBarn) => void;\n    onCancel: () => void;\n}\n\nconst Form = getTypedFormComponents<AnnetBarnFormFields, AnnetBarnFormValues>();\n\nconst AnnetBarnForm = ({\n    annetBarn = { fnr: '', navn: '', fødselsdato: undefined, id: undefined },\n    labels,\n    minDate,\n    maxDate,\n    disallowedFødselsnumre,\n    onSubmit,\n    onCancel,\n}: Props) => {\n    const intl = useIntl();\n\n    const onFormikSubmit = (formValues: AnnetBarnFormValues) => {\n        const annetBarnToSubmit = annetBarnUtils.mapFormValuesToPartialAnnetBarn(formValues, annetBarn.id);\n        if (annetBarnUtils.isAnnetBarn(annetBarnToSubmit)) {\n            onSubmit(annetBarnToSubmit);\n        } else {\n            throw new Error('AnnetBarnForm: Formvalues is not a valid AnnetBarn on submit.');\n        }\n    };\n\n    const defaultLabels: AnnetBarnFormLabels = {\n        title: intlHelper(intl, 'annetBarn.form.title'),\n        fnr: intlHelper(intl, 'annetBarn.form.fnr'),\n        fødselsdato: intlHelper(intl, 'annetBarn.form.fødselsdato'),\n        navn: intlHelper(intl, 'annetBarn.form.navn'),\n        okButton: intlHelper(intl, 'annetBarn.form.okButton'),\n        cancelButton: intlHelper(intl, 'annetBarn.form.cancelButton'),\n    };\n\n    const formLabels: AnnetBarnFormLabels = { ...defaultLabels, ...labels };\n\n    return (\n        <Form.FormikWrapper\n            initialValues={annetBarnUtils.mapAnnetBarnToFormValues(annetBarn)}\n            onSubmit={onFormikSubmit}\n            renderForm={() => (\n                <Form.Form onCancel={onCancel} fieldErrorRenderer={getIntlFormErrorRenderer(intl)}>\n                    <Systemtittel tag=\"h1\">{formLabels.title}</Systemtittel>\n                    <FormBlock>\n                        <Form.Input\n                            name={AnnetBarnFormFields.navn}\n                            label={formLabels.navn}\n                            validate={getRequiredFieldValidator({\n                                noValue: AnnetBarnFormErrors.fnr.noValue,\n                            })}\n                            placeholder={formLabels.placeholderNavn}\n                        />\n                    </FormBlock>\n                    <FormBlock>\n                        <Form.DatePicker\n                            name={AnnetBarnFormFields.fødselsdato}\n                            label={\n                                formLabels.aldersGrenseText\n                                    ? `${formLabels.fødselsdato} ${formLabels.aldersGrenseText}`\n                                    : `${formLabels.fødselsdato}`\n                            }\n                            validate={(value) =>\n                                validateAll([\n                                    () =>\n                                        getRequiredFieldValidator({\n                                            noValue: AnnetBarnFormErrors.fødselsdato.noValue,\n                                        })(value),\n                                    () =>\n                                        getDateValidator(\n                                            { min: minDate, max: maxDate },\n                                            {\n                                                dateAfterMax: AnnetBarnFormErrors.fødselsdato.dateAfterMax,\n                                                dateBeforeMin: () =>\n                                                    intlHelper(intl, AnnetBarnFormErrors.fødselsdato.dateBeforeMin, {\n                                                        dato: prettifyDate(minDate),\n                                                    }),\n                                                invalidDateFormat: AnnetBarnFormErrors.fødselsdato.invalidDateFormat,\n                                                noValue: AnnetBarnFormErrors.fødselsdato.noValue,\n                                            }\n                                        )(value),\n                                ])\n                            }\n                            maxDate={maxDate}\n                            minDate={minDate}\n                            showYearSelector={true}\n                        />\n                    </FormBlock>\n\n                    <FormBlock>\n                        <Form.Input\n                            name={AnnetBarnFormFields.fnr}\n                            label={formLabels.fnr}\n                            validate={(value) =>\n                                validateAll([\n                                    () =>\n                                        getRequiredFieldValidator({\n                                            noValue: AnnetBarnFormErrors.fnr.noValue,\n                                        })(value),\n                                    () =>\n                                        getFødselsnummerValidator(\n                                            {\n                                                required: true,\n                                                disallowedValues: disallowedFødselsnumre,\n                                            },\n                                            {\n                                                noValue: AnnetBarnFormErrors.fnr.noValue,\n                                                invalidFødselsnummer: AnnetBarnFormErrors.fnr.invalidFødselsnummer,\n                                                disallowedFødselsnummer:\n                                                    AnnetBarnFormErrors.fnr.disallowedFødselsnummer,\n                                                fødselsnummerNot11Chars:\n                                                    AnnetBarnFormErrors.fnr.fødselsnummerNot11Chars,\n                                            }\n                                        )(value),\n                                ])\n                            }\n                            inputMode=\"numeric\"\n                            maxLength={11}\n                            placeholder={formLabels.placeholderFnr}\n                        />\n                    </FormBlock>\n                </Form.Form>\n            )}\n        />\n    );\n};\n\nexport default AnnetBarnForm;\n","import { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport { hasValue } from '@navikt/sif-common-formik/lib/validation/validationUtils';\nimport { guid } from 'nav-frontend-js-utils';\nimport { AnnetBarn, AnnetBarnFormValues } from './types';\n\nconst isAnnetBarn = (annetBarn: Partial<AnnetBarn>): annetBarn is AnnetBarn => {\n    const { fnr, navn, fødselsdato } = annetBarn;\n    return hasValue(fnr) && hasValue(navn) && hasValue(fødselsdato);\n};\n\nconst mapFormValuesToPartialAnnetBarn = (\n    formValues: AnnetBarnFormValues,\n    id: string | undefined\n): Partial<AnnetBarn> => {\n    return {\n        ...formValues,\n        id: id || guid(),\n        fødselsdato: ISOStringToDate(formValues.fødselsdato),\n    };\n};\n\nconst mapAnnetBarnToFormValues = (annetBarn: Partial<AnnetBarn>): AnnetBarnFormValues => {\n    return {\n        fnr: annetBarn.fnr,\n        navn: annetBarn.navn,\n        fødselsdato: dateToISOString(annetBarn.fødselsdato),\n    };\n};\n\nconst annetBarnUtils = {\n    mapAnnetBarnToFormValues,\n    mapFormValuesToPartialAnnetBarn,\n    isAnnetBarn,\n};\n\nexport default annetBarnUtils;\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { AnnetBarn } from './types';\nimport './annetBarnList.less';\n\ninterface Props {\n    annetBarn: AnnetBarn[];\n    onEdit?: (annetBarn: AnnetBarn) => void;\n    onDelete?: (annetBarn: AnnetBarn) => void;\n}\n\nconst bem = bemUtils('annetBarnList');\n\nconst AnnetBarnList = ({ annetBarn = [], onDelete, onEdit }: Props) => {\n    const renderAnnetBarnLabel = (annetBarn: AnnetBarn): React.ReactNode => {\n        return (\n            <div className={bem.element('label')}>\n                <span className={bem.element('dato')}>{prettifyDate(annetBarn.fødselsdato)}</span>\n                <span className={bem.element('land')}>\n                    {onEdit && <ActionLink onClick={() => onEdit(annetBarn)}>{annetBarn.navn}</ActionLink>}\n                    {!onEdit && <span>{annetBarn.navn}</span>}\n                </span>\n            </div>\n        );\n    };\n\n    return (\n        <ItemList<AnnetBarn>\n            getItemId={(annetBarn) => annetBarn.id}\n            getItemTitle={(annetBarn) => annetBarn.navn}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderAnnetBarnLabel}\n            items={annetBarn.filter((annetBarn) => annetBarn.id !== undefined)}\n        />\n    );\n};\n\nexport default AnnetBarnList;\n","import React from 'react';\nimport {\n    FormikModalFormAndList,\n    ModalFormAndListLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport AnnetBarnForm from './AnnetBarnForm';\nimport AnnetBarnList from './AnnetBarnList';\nimport { AnnetBarn } from './types';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames> {\n    name: FieldNames;\n    labels: ModalFormAndListLabels;\n    minDate: Date;\n    maxDate: Date;\n    disallowedFødselsnumre?: string[];\n    aldersGrenseText?: string;\n    placeholderFnr?: string;\n    placeholderNavn?: string;\n}\n\nfunction AnnetBarnListAndDialog<FieldNames>({\n    name,\n    validate,\n    labels,\n    minDate,\n    maxDate,\n    disallowedFødselsnumre,\n    aldersGrenseText,\n    placeholderFnr,\n    placeholderNavn,\n}: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, AnnetBarn>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                formRenderer={({ onSubmit, onCancel, item }) => (\n                    <AnnetBarnForm\n                        annetBarn={item}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        disallowedFødselsnumre={disallowedFødselsnumre}\n                        labels={{\n                            aldersGrenseText: aldersGrenseText,\n                            placeholderFnr: placeholderFnr,\n                            placeholderNavn: placeholderNavn,\n                        }}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <AnnetBarnList annetBarn={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default AnnetBarnListAndDialog;\n","import React, { useState } from 'react';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport { date4YearsAgo, dateToday } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { TypedFormikForm, TypedFormikWrapper } from '@navikt/sif-common-formik/lib';\nimport DialogFormWrapper from '@navikt/sif-common-formik/lib/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\nimport flatten from 'flat';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport AnnetBarnForm, { AnnetBarnFormErrors } from '../../../forms/annet-barn/AnnetBarnForm';\nimport AnnetBarnListAndDialog from '../../../forms/annet-barn/AnnetBarnListAndDialog';\nimport annetBarnMessages from '../../../forms/annet-barn/annetBarnMessages';\nimport { AnnetBarn } from '../../../forms/annet-barn/types';\nimport SubmitPreview from '../../components/submit-preview/SubmitPreview';\nimport FormValidationErrorMessages from '../../components/validation-error-messages/ValidationErrorMessages';\n\nenum FormField {\n    'annetBarn' = 'annetBarn',\n}\n\ninterface FormValues {\n    [FormField.annetBarn]: AnnetBarn[];\n}\nconst initialValues: FormValues = { annetBarn: [] };\n\nconst AnnetBarnExample = () => {\n    const [singleFormValues, setSingleFormValues] = useState<Partial<AnnetBarn> | undefined>(undefined);\n    const [listFormValues, setListFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    // const intl = useIntl();\n    return (\n        <>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setListFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues> includeButtons={true} submitButtonLabel=\"Valider skjema\">\n                                <AnnetBarnListAndDialog<FormField>\n                                    name={FormField.annetBarn}\n                                    validate={getListValidator({ required: true })}\n                                    labels={{\n                                        addLabel: 'Legg til barn',\n                                        listTitle: 'Registrerte barn',\n                                        modalTitle: 'Legg til barn',\n                                        emptyListText: 'Ingen barn er lagt til',\n                                    }}\n                                    minDate={date4YearsAgo}\n                                    maxDate={dateToday}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <SubmitPreview values={listFormValues} />\n            </Panel>\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <FormValidationErrorMessages\n                    validationErrorIntlKeys={flatten(AnnetBarnFormErrors)}\n                    formName={'annetBarn'}\n                    intlMessages={annetBarnMessages}\n                />\n            </Box>\n            <Box margin=\"xxl\" padBottom=\"l\">\n                <Undertittel>Kun dialog</Undertittel>\n            </Box>\n\n            <DialogFormWrapper>\n                <Panel border={true}>\n                    <AnnetBarnForm\n                        annetBarn={{}}\n                        onSubmit={setSingleFormValues}\n                        onCancel={() => console.log('cancel me')}\n                        minDate={date4YearsAgo}\n                        maxDate={dateToday}\n                    />\n                </Panel>\n                <SubmitPreview values={singleFormValues} />\n            </DialogFormWrapper>\n\n            <MessagesPreview messages={annetBarnMessages} showExplanation={false} />\n        </>\n    );\n};\n\nexport default AnnetBarnExample;\n","import { ApiStringDate } from '@navikt/sif-common-core/lib/types/ApiStringDate';\nimport { YesOrNo } from '@navikt/sif-common-core/lib/types/YesOrNo';\n\nexport enum Næringstype {\n    'FISKE' = 'FISKE',\n    'JORDBRUK_SKOGBRUK' = 'JORDBRUK_SKOGBRUK',\n    'DAGMAMMA' = 'DAGMAMMA',\n    'ANNEN' = 'ANNEN',\n}\n\nexport enum VirksomhetFormField {\n    'næringstyper' = 'næringstyper',\n    'fiskerErPåBladB' = 'fiskerErPåBladB',\n    'fom' = 'fom',\n    'tom' = 'tom',\n    'næringsinntekt' = 'næringsinntekt',\n    'erPågående' = 'erPågående',\n    'navnPåVirksomheten' = 'navnPåVirksomheten',\n    'organisasjonsnummer' = 'organisasjonsnummer',\n    'registrertINorge' = 'registrertINorge',\n    'registrertILand' = 'registrertILand',\n    'harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene' = 'harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene',\n    'blittYrkesaktivDato' = 'blittYrkesaktivDato',\n    'hattVarigEndringAvNæringsinntektSiste4Kalenderår' = 'hattVarigEndringAvNæringsinntektSiste4Kalenderår',\n    'varigEndringINæringsinntekt_dato' = 'varigEndringINæringsinntekt_dato',\n    'varigEndringINæringsinntekt_inntektEtterEndring' = 'varigEndringINæringsinntekt_inntektEtterEndring',\n    'varigEndringINæringsinntekt_forklaring' = 'varigEndringINæringsinntekt_forklaring',\n    'endretNæringsinntektInformasjon' = 'endretNæringsinntektInformasjon',\n    'harRegnskapsfører' = 'harRegnskapsfører',\n    'regnskapsfører' = 'regnskapsfører',\n    'regnskapsfører_navn' = 'regnskapsfører_navn',\n    'regnskapsfører_telefon' = 'regnskapsfører_telefon',\n}\n\nexport interface Virksomhet {\n    id?: string;\n    [VirksomhetFormField.næringstyper]: Næringstype[];\n    [VirksomhetFormField.fiskerErPåBladB]?: YesOrNo;\n    [VirksomhetFormField.fom]: Date;\n    [VirksomhetFormField.tom]?: Date;\n    [VirksomhetFormField.næringsinntekt]?: number;\n    [VirksomhetFormField.erPågående]?: boolean;\n    [VirksomhetFormField.navnPåVirksomheten]: string;\n    [VirksomhetFormField.organisasjonsnummer]?: string;\n    [VirksomhetFormField.registrertINorge]: YesOrNo;\n    [VirksomhetFormField.registrertILand]?: string;\n    [VirksomhetFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene]?: YesOrNo;\n    [VirksomhetFormField.blittYrkesaktivDato]?: Date;\n    [VirksomhetFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår]?: YesOrNo;\n    [VirksomhetFormField.varigEndringINæringsinntekt_dato]?: Date;\n    [VirksomhetFormField.varigEndringINæringsinntekt_inntektEtterEndring]?: number;\n    [VirksomhetFormField.varigEndringINæringsinntekt_forklaring]?: string;\n    [VirksomhetFormField.harRegnskapsfører]: YesOrNo;\n    [VirksomhetFormField.regnskapsfører_navn]?: string;\n    [VirksomhetFormField.regnskapsfører_telefon]?: string;\n}\nexport type VirksomhetFormValues = Partial<\n    Omit<Virksomhet, 'fom' | 'tom' | 'blittYrkesaktivDato' | 'varigEndringINæringsinntekt_dato'> & {\n        [VirksomhetFormField.fom]: string;\n        [VirksomhetFormField.tom]?: string;\n        [VirksomhetFormField.blittYrkesaktivDato]?: string;\n        [VirksomhetFormField.varigEndringINæringsinntekt_dato]?: string;\n    }\n>;\n\nexport const isVirksomhet = (virksomhet: Partial<Virksomhet>): virksomhet is Virksomhet => {\n    return virksomhet !== undefined;\n};\n\nexport interface VirksomhetApiData {\n    næringstyper: Næringstype[];\n    fiskerErPåBladB?: boolean;\n    fraOgMed: ApiStringDate;\n    tilOgMed?: ApiStringDate | null;\n    erNyoppstartet: boolean;\n    næringsinntekt?: number;\n    navnPåVirksomheten: string;\n    organisasjonsnummer?: string;\n    registrertINorge: boolean;\n    registrertIUtlandet?: {\n        landkode: string;\n        landnavn: string;\n    };\n    yrkesaktivSisteTreFerdigliknedeÅrene?: {\n        oppstartsdato: ApiStringDate;\n    };\n    varigEndring?: {\n        dato: ApiStringDate;\n        inntektEtterEndring: number;\n        forklaring: string;\n    };\n    regnskapsfører?: {\n        navn: string;\n        telefon: string;\n    };\n}\n","/* eslint-disable react/display-name */\nimport React, { useState } from 'react';\nimport Tabs from 'nav-frontend-tabs';\nimport 'nav-frontend-tabs-style';\nimport PageIntro from '../../components/page-intro/PageIntro';\nimport { RouteConfig } from '../../config/routeConfig';\nimport BostedUtlandExample from './BostedUtlandExample';\nimport FerieuttakExample from './FerieuttakExample';\nimport FosterbarnExample from './FosterbarnExample';\nimport TidsperiodeExample from './TidsperiodeExample';\nimport UtenlandsoppholdIPeriodenExample from './UtenlandsoppholdExample';\nimport FraværExample from './FraværExample';\nimport AnnetBarnExample from './AnnetBarnExample';\n\nconst tabRoutes: RouteConfig[] = [\n    {\n        path: 'fravær',\n        renderContent: () => <FraværExample />,\n        title: 'Fravær',\n    },\n    {\n        path: 'tidsrom',\n        renderContent: () => <TidsperiodeExample />,\n        title: 'Tidsperiode',\n    },\n    {\n        path: 'utenlandsopphold',\n        renderContent: () => <UtenlandsoppholdIPeriodenExample />,\n        title: 'Utenlandsopphold i perioden',\n    },\n    {\n        path: 'bosted-utland',\n        renderContent: () => <BostedUtlandExample />,\n        title: 'Bosted utland',\n    },\n    {\n        path: 'ferieuttak',\n        renderContent: () => <FerieuttakExample />,\n        title: 'Ferieuttak i perioden',\n    },\n    {\n        path: 'fosterbarn',\n        renderContent: () => <FosterbarnExample />,\n        title: 'Fosterbarn',\n    },\n    {\n        path: 'annetbarn',\n        renderContent: () => <AnnetBarnExample />,\n        title: 'Annet Barn',\n    },\n];\n\nconst DialogForms = () => {\n    const [path, setPath] = useState(tabRoutes[0].path);\n    const activeRoute = tabRoutes.find((r) => {\n        return r.path === path;\n    });\n    return (\n        <>\n            <PageIntro title=\"Dialogskjema\">\n                Skjema for ferieuttak i perioden, utenlandsopphold i perioden og bosted i utlandet.\n            </PageIntro>\n            <Tabs\n                onChange={(evt, idx) => setPath(tabRoutes[idx].path)}\n                tabs={tabRoutes.map((r) => ({\n                    label: r.title,\n                    active: r.path === path ? 'true' : 'false',\n                }))}\n            />\n            {activeRoute && activeRoute.renderContent()}\n        </>\n    );\n};\n\nexport default DialogForms;\n","import { date4YearsAgo } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { dateToISOString, ISOStringToDate } from '@navikt/sif-common-formik/lib';\nimport dayjs from 'dayjs';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Næringstype, Virksomhet, VirksomhetFormValues } from './types';\n\nexport const harFiskerNæringstype = (næringstyper: Næringstype[]): boolean =>\n    næringstyper.find((n) => n === Næringstype.FISKE) !== undefined;\n\nexport const erVirksomhetRegnetSomNyoppstartet = (oppstartsdato: Date) => {\n    return dayjs(oppstartsdato).startOf('day').isAfter(date4YearsAgo);\n};\n\nexport const mapFormValuesToVirksomhet = (\n    formValues: VirksomhetFormValues,\n    id: string | undefined\n): Partial<Virksomhet> => {\n    return {\n        ...formValues,\n        id: id || guid(),\n        fom: ISOStringToDate(formValues.fom),\n        tom: ISOStringToDate(formValues.tom),\n        blittYrkesaktivDato: ISOStringToDate(formValues.blittYrkesaktivDato),\n        varigEndringINæringsinntekt_dato: ISOStringToDate(formValues.varigEndringINæringsinntekt_dato),\n    };\n};\n\nexport const mapVirksomhetToFormValues = (virksomhet: Virksomhet): VirksomhetFormValues => {\n    return {\n        ...virksomhet,\n        fom: dateToISOString(virksomhet.fom),\n        tom: dateToISOString(virksomhet.tom),\n        blittYrkesaktivDato: dateToISOString(virksomhet.blittYrkesaktivDato),\n        varigEndringINæringsinntekt_dato: dateToISOString(virksomhet.varigEndringINæringsinntekt_dato),\n    };\n};\n","import { formatDateToApiFormat } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { YesOrNo, getCountryName } from '@navikt/sif-common-formik/lib';\nimport { Virksomhet, VirksomhetApiData } from './types';\nimport { erVirksomhetRegnetSomNyoppstartet, harFiskerNæringstype } from './virksomhetUtils';\n\nexport const mapVirksomhetToVirksomhetApiData = (\n    locale: string,\n    virksomhet: Virksomhet,\n    harBesvartFiskerPåBladB?: boolean\n): VirksomhetApiData => {\n    const registrertINorge = virksomhet.registrertINorge === YesOrNo.YES;\n    const harRegnskapsfører = virksomhet.harRegnskapsfører === YesOrNo.YES;\n    const erNyoppstartet = erVirksomhetRegnetSomNyoppstartet(virksomhet.fom);\n\n    const data: VirksomhetApiData = {\n        næringstyper: [...virksomhet.næringstyper],\n        navnPåVirksomheten: virksomhet.navnPåVirksomheten,\n        registrertINorge,\n        ...(registrertINorge\n            ? {\n                  organisasjonsnummer: virksomhet.organisasjonsnummer,\n              }\n            : {\n                  registrertIUtlandet: virksomhet.registrertILand\n                      ? {\n                            landkode: virksomhet.registrertILand,\n                            landnavn: getCountryName(virksomhet.registrertILand, locale),\n                        }\n                      : undefined,\n              }),\n        fraOgMed: formatDateToApiFormat(virksomhet.fom),\n        tilOgMed: virksomhet.erPågående || virksomhet.tom === undefined ? null : formatDateToApiFormat(virksomhet.tom),\n        erNyoppstartet,\n    };\n\n    if (harFiskerNæringstype(virksomhet.næringstyper) && harBesvartFiskerPåBladB !== true) {\n        data.fiskerErPåBladB = virksomhet.fiskerErPåBladB === YesOrNo.YES;\n    }\n\n    /** Bedrift regnet som nyoppstartet  */\n    if (erNyoppstartet === true) {\n        data.næringsinntekt = virksomhet.næringsinntekt;\n        const harBlittAktiv = virksomhet.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene === YesOrNo.YES;\n        if (harBlittAktiv && virksomhet.blittYrkesaktivDato) {\n            data.yrkesaktivSisteTreFerdigliknedeÅrene = {\n                oppstartsdato: formatDateToApiFormat(virksomhet.blittYrkesaktivDato),\n            };\n        }\n    }\n\n    /** Bedrift ikke regnet som nyoppstartet  */\n    if (erNyoppstartet === false) {\n        const harHattVarigEndring = virksomhet.hattVarigEndringAvNæringsinntektSiste4Kalenderår === YesOrNo.YES;\n        const {\n            varigEndringINæringsinntekt_dato,\n            varigEndringINæringsinntekt_forklaring,\n            varigEndringINæringsinntekt_inntektEtterEndring,\n        } = virksomhet;\n        if (\n            harHattVarigEndring &&\n            varigEndringINæringsinntekt_dato &&\n            varigEndringINæringsinntekt_inntektEtterEndring !== undefined &&\n            varigEndringINæringsinntekt_forklaring\n        ) {\n            data.varigEndring = {\n                dato: formatDateToApiFormat(varigEndringINæringsinntekt_dato),\n                forklaring: varigEndringINæringsinntekt_forklaring,\n                inntektEtterEndring: varigEndringINæringsinntekt_inntektEtterEndring,\n            };\n        }\n    }\n\n    if (harRegnskapsfører && virksomhet.regnskapsfører_navn && virksomhet.regnskapsfører_telefon) {\n        data.regnskapsfører = {\n            navn: virksomhet.regnskapsfører_navn,\n            telefon: virksomhet.regnskapsfører_telefon,\n        };\n    }\n\n    return data;\n};\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport CounsellorPanel from '@navikt/sif-common-core/lib/components/counsellor-panel/CounsellorPanel';\nimport ExpandableInfo from '@navikt/sif-common-core/lib/components/expandable-content/ExpandableInfo';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport ResponsivePanel from '@navikt/sif-common-core/lib/components/responsive-panel/ResponsivePanel';\nimport { date3YearsAgo, date4YearsAgo, dateToday } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport {\n    getFieldErrorRenderer,\n    getSummaryFieldErrorRenderer,\n} from '@navikt/sif-common-formik/lib/utils/formikErrorRenderUtils';\nimport { FormikYesOrNoQuestion, getTypedFormComponents, ISOStringToDate, YesOrNo } from '@navikt/sif-common-formik/lib';\nimport {\n    getListValidator,\n    getNumberValidator,\n    getOrgNumberValidator,\n    getRequiredFieldValidator,\n    getStringValidator,\n    getYesOrNoValidator,\n} from '@navikt/sif-common-formik/lib/validation';\nimport { FormikProps } from 'formik';\nimport { Systemtittel, Undertittel } from 'nav-frontend-typografi';\nimport { isVirksomhet, Næringstype, Virksomhet, VirksomhetFormField, VirksomhetFormValues } from './types';\nimport {\n    erVirksomhetRegnetSomNyoppstartet,\n    harFiskerNæringstype,\n    mapFormValuesToVirksomhet,\n    mapVirksomhetToFormValues,\n} from './virksomhetUtils';\n\ninterface Props {\n    virksomhet?: Virksomhet;\n    skipOrgNumValidation?: boolean;\n    harFlereVirksomheter?: boolean;\n    onSubmit: (oppdrag: Virksomhet) => void;\n    onCancel: () => void;\n}\n\nconst MAKS_INNTEKT = 999999999;\n\nexport const VirksomhetFormName = 'virksomhetForm';\n\nconst Form = getTypedFormComponents<VirksomhetFormField, VirksomhetFormValues>();\n\nconst visNæringsinntekt = (values: VirksomhetFormValues): boolean => {\n    const fomDate = ISOStringToDate(values.fom);\n    return fomDate !== undefined && erVirksomhetRegnetSomNyoppstartet(fomDate);\n};\n\nconst ensureValidNæringsinntekt = (values: VirksomhetFormValues): number | undefined => {\n    if (visNæringsinntekt(values)) {\n        return values.næringsinntekt;\n    }\n    return undefined;\n};\n\nconst VirksomhetForm = ({ virksomhet, harFlereVirksomheter, onSubmit, onCancel, skipOrgNumValidation }: Props) => {\n    const intl = useIntl();\n    const getText = (key: string, value?: any): string => intlHelper(intl, `sifForms.virksomhet.${key}`, value);\n\n    const onFormikSubmit = (values: VirksomhetFormValues) => {\n        const virksomhetToSubmit = mapFormValuesToVirksomhet(values, virksomhet?.id);\n        if (isVirksomhet(virksomhetToSubmit)) {\n            onSubmit({\n                ...virksomhetToSubmit,\n                næringsinntekt: ensureValidNæringsinntekt(values),\n            });\n        } else {\n            throw new Error('VirksomhetForm: Formvalues is not a valid Virksomhet on submit.');\n        }\n    };\n\n    return (\n        <Form.FormikWrapper\n            initialValues={virksomhet ? mapVirksomhetToFormValues(virksomhet) : { næringstyper: [] }}\n            onSubmit={onFormikSubmit}\n            renderForm={(formik: FormikProps<VirksomhetFormValues>) => {\n                const { values, setFieldValue } = formik;\n                const { navnPåVirksomheten = 'virksomheten', næringstyper = [] } = values;\n                const fomDate = ISOStringToDate(values.fom);\n                return (\n                    <Form.Form\n                        includeValidationSummary={true}\n                        onCancel={onCancel}\n                        fieldErrorRenderer={getFieldErrorRenderer(intl, VirksomhetFormName)}\n                        summaryFieldErrorRenderer={getSummaryFieldErrorRenderer(intl, VirksomhetFormName)}>\n                        <Box padBottom=\"l\">\n                            <Systemtittel tag=\"h1\">\n                                {harFlereVirksomheter ? getText('form_title.flere') : getText('form_title')}\n                            </Systemtittel>\n                        </Box>\n\n                        <Form.CheckboxPanelGroup\n                            name={VirksomhetFormField.næringstyper}\n                            legend={getText('hvilken_type_virksomhet')}\n                            checkboxes={[\n                                {\n                                    value: Næringstype.FISKE,\n                                    label: getText(`næringstype_${Næringstype.FISKE}`),\n                                },\n                                {\n                                    value: Næringstype.JORDBRUK_SKOGBRUK,\n                                    label: getText(`næringstype_${Næringstype.JORDBRUK_SKOGBRUK}`),\n                                },\n                                {\n                                    value: Næringstype.DAGMAMMA,\n                                    label: getText(`næringstype_${Næringstype.DAGMAMMA}`),\n                                },\n                                {\n                                    value: Næringstype.ANNEN,\n                                    label: getText(`næringstype_${Næringstype.ANNEN}`),\n                                },\n                            ]}\n                            validate={getListValidator({ required: true })}\n                        />\n\n                        {harFiskerNæringstype(næringstyper) && (\n                            <Box margin=\"xl\">\n                                <FormikYesOrNoQuestion<VirksomhetFormField>\n                                    name={VirksomhetFormField.fiskerErPåBladB}\n                                    legend={getText('fisker_blad_b')}\n                                    validate={getYesOrNoValidator()}\n                                />\n                            </Box>\n                        )}\n\n                        <Box margin=\"xl\">\n                            <Form.Input\n                                name={VirksomhetFormField.navnPåVirksomheten}\n                                label={getText('hva_heter_virksomheten')}\n                                validate={getRequiredFieldValidator()}\n                                maxLength={50}\n                            />\n                        </Box>\n\n                        <Box margin=\"xl\">\n                            <Form.YesOrNoQuestion\n                                name={VirksomhetFormField.registrertINorge}\n                                legend={getText('registert_i_norge', { navnPåVirksomheten })}\n                                validate={getYesOrNoValidator()}\n                                description={\n                                    harFiskerNæringstype(næringstyper) ? (\n                                        <ExpandableInfo\n                                            title={intlHelper(intl, 'sifForms.virksomhet.veileder_fisker.tittel')}>\n                                            <FormattedMessage\n                                                id=\"sifForms.virksomhet.veileder_fisker\"\n                                                values={{ navnPåVirksomheten }}\n                                            />\n                                        </ExpandableInfo>\n                                    ) : undefined\n                                }\n                            />\n                        </Box>\n\n                        {values.registrertINorge === YesOrNo.NO && (\n                            <Box margin=\"xl\">\n                                <Form.CountrySelect\n                                    name={VirksomhetFormField.registrertILand}\n                                    label={getText('registert_i_hvilket_land', { navnPåVirksomheten })}\n                                    validate={getRequiredFieldValidator()}\n                                    useAlpha3Code={true}\n                                />\n                            </Box>\n                        )}\n\n                        {values.registrertINorge === YesOrNo.YES && (\n                            <Box margin=\"xl\">\n                                <Form.Input\n                                    name={VirksomhetFormField.organisasjonsnummer}\n                                    label={getText('organisasjonsnummer')}\n                                    style={{ maxWidth: '10rem' }}\n                                    maxLength={9}\n                                    validate={\n                                        skipOrgNumValidation ? undefined : getOrgNumberValidator({ required: true })\n                                    }\n                                />\n                            </Box>\n                        )}\n\n                        {(values.registrertINorge === YesOrNo.YES || values.registrertINorge === YesOrNo.NO) && (\n                            <Box margin=\"xl\">\n                                <Form.DateRangePicker\n                                    legend={getText('startdato', { navnPåVirksomheten })}\n                                    showYearSelector={true}\n                                    maxDate={dateToday}\n                                    fromInputProps={{\n                                        label: getText('kalender_fom'),\n                                        name: VirksomhetFormField.fom,\n                                        validate: getRequiredFieldValidator(),\n                                    }}\n                                    toInputProps={{\n                                        label: getText('kalender_tom'),\n                                        name: VirksomhetFormField.tom,\n                                        disabled: values.erPågående === true,\n                                        validate: values.erPågående === true ? undefined : getRequiredFieldValidator(),\n                                    }}\n                                />\n                                <Form.Checkbox\n                                    label={getText('kalender_pågående')}\n                                    name={VirksomhetFormField.erPågående}\n                                    afterOnChange={(checked) => {\n                                        if (checked) {\n                                            setFieldValue(VirksomhetFormField.tom, undefined);\n                                        }\n                                    }}\n                                />\n                            </Box>\n                        )}\n\n                        {fomDate && (\n                            <>\n                                {harFlereVirksomheter && (\n                                    <Box margin=\"xxl\">\n                                        {erVirksomhetRegnetSomNyoppstartet(fomDate) ? (\n                                            <>\n                                                <Undertittel>\n                                                    {getText('nyoppstartet.næringsinntektFlere.header')}\n                                                </Undertittel>\n                                                <p>{getText('nyoppstartet.næringsinntektFlere.info')}</p>\n                                            </>\n                                        ) : (\n                                            <>\n                                                <Undertittel>{getText('næringsinntektFlere.header')}</Undertittel>\n                                                <p>{getText('næringsinntektFlere.info')}</p>\n                                            </>\n                                        )}\n                                    </Box>\n                                )}\n\n                                {/* Nyoppstartet  */}\n                                {erVirksomhetRegnetSomNyoppstartet(fomDate) && (\n                                    <>\n                                        <Box margin=\"xl\">\n                                            <Form.NumberInput\n                                                name={VirksomhetFormField.næringsinntekt}\n                                                label={getText('næringsinntekt')}\n                                                maxLength={10}\n                                                style={{ maxWidth: '10rem' }}\n                                                validate={getNumberValidator({ min: 0, max: MAKS_INNTEKT })}\n                                                description={\n                                                    <>\n                                                        {getText('næringsinntekt.info')}\n                                                        <ExpandableInfo title={getText('næringsinntekt_info_title')}>\n                                                            {getText('næringsinntekt_info')}\n                                                        </ExpandableInfo>\n                                                    </>\n                                                }\n                                            />\n                                        </Box>\n                                        <Box margin=\"xl\">\n                                            <Form.YesOrNoQuestion\n                                                name={\n                                                    VirksomhetFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene\n                                                }\n                                                legend={getText('har_blitt_yrkesaktiv')}\n                                                validate={getYesOrNoValidator()}\n                                                description={\n                                                    <ExpandableInfo title={getText('har_blitt_yrkesaktiv_info_title')}>\n                                                        {getText('har_blitt_yrkesaktiv_info')}\n                                                    </ExpandableInfo>\n                                                }\n                                            />\n                                        </Box>\n                                        {values.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene ===\n                                            YesOrNo.YES && (\n                                            <FormBlock margin=\"m\">\n                                                <ResponsivePanel>\n                                                    <Form.DatePicker\n                                                        name={VirksomhetFormField.blittYrkesaktivDato}\n                                                        label={getText('har_blitt_yrkesaktiv_dato')}\n                                                        showYearSelector={true}\n                                                        minDate={date3YearsAgo}\n                                                        maxDate={dateToday}\n                                                        validate={getRequiredFieldValidator()}\n                                                    />\n                                                </ResponsivePanel>\n                                            </FormBlock>\n                                        )}\n                                    </>\n                                )}\n\n                                {/* Ikke nyoppstartet */}\n                                {erVirksomhetRegnetSomNyoppstartet(fomDate) === false && (\n                                    <>\n                                        <Box margin=\"xl\">\n                                            <Form.YesOrNoQuestion\n                                                name={\n                                                    VirksomhetFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår\n                                                }\n                                                legend={getText('varig_endring_spm')}\n                                                validate={getYesOrNoValidator()}\n                                            />\n                                        </Box>\n                                        {values.hattVarigEndringAvNæringsinntektSiste4Kalenderår === YesOrNo.YES && (\n                                            <>\n                                                <Box margin=\"xl\">\n                                                    <Form.DatePicker\n                                                        name={VirksomhetFormField.varigEndringINæringsinntekt_dato}\n                                                        label={getText('varig_endring_dato')}\n                                                        validate={getRequiredFieldValidator()}\n                                                        minDate={date4YearsAgo}\n                                                        maxDate={dateToday}\n                                                    />\n                                                </Box>\n                                                <Box margin=\"xl\">\n                                                    <Form.NumberInput\n                                                        name={\n                                                            VirksomhetFormField.varigEndringINæringsinntekt_inntektEtterEndring\n                                                        }\n                                                        label={getText('varig_endring_inntekt')}\n                                                        maxLength={10}\n                                                        style={{ maxWidth: '10rem' }}\n                                                        validate={getNumberValidator({ min: 0, max: MAKS_INNTEKT })}\n                                                    />\n                                                </Box>\n                                                <Box margin=\"xl\">\n                                                    <Form.Textarea\n                                                        name={\n                                                            VirksomhetFormField.varigEndringINæringsinntekt_forklaring\n                                                        }\n                                                        label={getText('varig_endring_tekst')}\n                                                        validate={getRequiredFieldValidator()}\n                                                        maxLength={1000}\n                                                    />\n                                                </Box>\n                                            </>\n                                        )}\n                                    </>\n                                )}\n\n                                {values.registrertINorge === YesOrNo.YES && (\n                                    <>\n                                        <Box margin=\"xl\">\n                                            <Form.YesOrNoQuestion\n                                                name={VirksomhetFormField.harRegnskapsfører}\n                                                legend={getText('regnskapsfører_spm')}\n                                                validate={getYesOrNoValidator()}\n                                            />\n                                        </Box>\n                                        {values.harRegnskapsfører === YesOrNo.YES && (\n                                            <FormBlock margin=\"m\">\n                                                <ResponsivePanel>\n                                                    <Form.Input\n                                                        name={VirksomhetFormField.regnskapsfører_navn}\n                                                        label={getText('regnskapsfører_navn')}\n                                                        validate={getRequiredFieldValidator()}\n                                                        maxLength={50}\n                                                    />\n                                                    <Box margin=\"xl\">\n                                                        <Form.Input\n                                                            name={VirksomhetFormField.regnskapsfører_telefon}\n                                                            label={getText('regnskapsfører_telefon')}\n                                                            validate={getStringValidator({ maxLength: 15 })}\n                                                            maxLength={15}\n                                                        />\n                                                    </Box>\n                                                </ResponsivePanel>\n                                            </FormBlock>\n                                        )}\n                                    </>\n                                )}\n                                {values.harRegnskapsfører === YesOrNo.YES && (\n                                    <Box margin=\"xl\">\n                                        <CounsellorPanel>\n                                            {getText('veileder_innhenter_info.1')}\n                                            <br />\n                                            {getText('veileder_innhenter_info.2')}\n                                        </CounsellorPanel>\n                                    </Box>\n                                )}\n                            </>\n                        )}\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default VirksomhetForm;\n","import React from 'react';\nimport { ApiStringDate } from '@navikt/sif-common-core/lib/types/ApiStringDate';\nimport { apiStringDateToDate, prettifyDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\n\ninterface Props {\n    apiDato: ApiStringDate;\n}\nexport const prettifyApiDate = (apiDato: ApiStringDate): string => prettifyDate(apiStringDateToDate(apiDato));\n\nconst DatoSvar: React.FunctionComponent<Props> = ({ apiDato }) => <>{prettifyApiDate(apiDato)}</>;\n\nexport default DatoSvar;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\n\ninterface Props {\n    labelKey: string;\n}\n\nconst bem = bemUtils('summaryLabelValue');\n\nconst IntlLabelValue: React.FunctionComponent<Props> = ({ labelKey: intlLabelKey, children }) => {\n    const intl = useIntl();\n    return (\n        <div className={bem.block}>\n            <span className={bem.element('label')}>{intlHelper(intl, intlLabelKey)}:</span>{' '}\n            <span className={bem.element('value')}>{children}</span>\n        </div>\n    );\n};\n\nexport default IntlLabelValue;\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\ninterface Props {\n    harSvartJa?: boolean;\n}\n\nconst JaNeiSvar: React.FunctionComponent<Props> = ({ harSvartJa }) => {\n    return <FormattedMessage id={harSvartJa === true ? 'Ja' : 'Nei'} tagName=\"span\" />;\n};\n\nexport default JaNeiSvar;\n","import React from 'react';\n\nconst Sitat: React.FunctionComponent = ({ children }) => (\n    <span\n        style={{\n            display: 'block',\n            paddingLeft: '.5rem',\n            margin: '0.5rem 0',\n            borderLeft: '2px solid #C6C2BF',\n            fontStyle: 'italic',\n        }}>\n        {children}\n    </span>\n);\n\nexport default Sitat;\n","import React from 'react';\nimport ContentWithHeader from '@navikt/sif-common-core/lib/components/content-with-header/ContentWithHeader';\nimport Box, { BoxMargin } from '@navikt/sif-common-core/lib/components/box/Box';\n\ninterface Props {\n    header: string;\n    margin?: BoxMargin;\n}\n\nconst SummaryBlock: React.FunctionComponent<Props> = ({ header, margin = 'l', children }) => (\n    <Box margin={margin}>\n        <ContentWithHeader header={header}>{children}</ContentWithHeader>\n    </Box>\n);\n\nexport default SummaryBlock;\n","import React from 'react';\nimport { FormattedNumber } from 'react-intl';\n\ninterface Props {\n    verdi?: number;\n}\n\nconst TallSvar: React.FunctionComponent<Props> = ({ verdi }) =>\n    verdi !== undefined ? <FormattedNumber value={verdi} /> : null;\n\nexport default TallSvar;\n","import React from 'react';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport TextareaSummary from '@navikt/sif-common-core/lib/components/textarea-summary/TextareaSummary';\nimport { apiStringDateToDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport DatoSvar, { prettifyApiDate } from '../components/summary/DatoSvar';\nimport IntlLabelValue from '../components/summary/IntlLabelValue';\nimport JaNeiSvar from '../components/summary/JaNeiSvar';\nimport Sitat from '../components/summary/Sitat';\nimport SummaryBlock from '../components/summary/SummaryBlock';\nimport TallSvar from '../components/summary/TallSvar';\nimport { Næringstype, VirksomhetApiData } from './types';\nimport { erVirksomhetRegnetSomNyoppstartet } from './virksomhetUtils';\n\ninterface Props {\n    virksomhet: VirksomhetApiData;\n}\n\nconst getFiskerNæringTekst = (intl: IntlShape, erPåBladB: boolean) => {\n    const næringstekst = intlHelper(intl, `sifForms.virksomhet.næringstype_${Næringstype.FISKE}`);\n    const bladBTekst = erPåBladB\n        ? intlHelper(intl, 'sifForms.virksomhet.summary.fisker.påBladB')\n        : intlHelper(intl, 'sifForms.virksomhet.summary.fisker.ikkePåBladB');\n    return `${næringstekst} (${bladBTekst})`;\n};\n\nexport const renderVirksomhetSummary = (virksomhet: VirksomhetApiData, intl: IntlShape) => {\n    const land = virksomhet.registrertIUtlandet ? virksomhet.registrertIUtlandet.landnavn : 'Norge';\n\n    const næringstyper = virksomhet.næringstyper\n        .map((næring) =>\n            næring === Næringstype.FISKE && virksomhet.fiskerErPåBladB !== undefined\n                ? getFiskerNæringTekst(intl, virksomhet.fiskerErPåBladB)\n                : intlHelper(intl, `sifForms.virksomhet.næringstype_${næring}`)\n        )\n        .join(', ');\n\n    const tidsinfo = virksomhet.tilOgMed\n        ? intlHelper(intl, 'sifForms.virksomhet.summary.tidsinfo.avsluttet', {\n              fraOgMed: prettifyApiDate(virksomhet.fraOgMed),\n              tilOgMed: prettifyApiDate(virksomhet.tilOgMed),\n          })\n        : intlHelper(intl, 'sifForms.virksomhet.summary.tidsinfo.pågående', {\n              fraOgMed: prettifyApiDate(virksomhet.fraOgMed),\n          });\n\n    return (\n        <>\n            <IntlLabelValue labelKey=\"sifForms.virksomhet.summary.navn\">\n                {virksomhet.navnPåVirksomheten}.\n            </IntlLabelValue>\n            <IntlLabelValue labelKey=\"sifForms.virksomhet.summary.næringstype\">{næringstyper}. </IntlLabelValue>\n            <div>\n                <FormattedMessage id=\"sifForms.virksomhet.summary.registrertILand\" values={{ land }} />\n                {virksomhet.registrertINorge && (\n                    <FormattedMessage\n                        id=\"sifForms.virksomhet.summary.registrertILand.orgnr\"\n                        values={{ orgnr: virksomhet.organisasjonsnummer }}\n                    />\n                )}\n                . <br />\n                {tidsinfo}\n            </div>\n        </>\n    );\n};\n\nconst VirksomhetSummary: React.FunctionComponent<Props> = ({ virksomhet }) => {\n    const intl = useIntl();\n    const erRegnetSomNyoppstartet = erVirksomhetRegnetSomNyoppstartet(apiStringDateToDate(virksomhet.fraOgMed));\n\n    return (\n        <>\n            {renderVirksomhetSummary(virksomhet, intl)}\n\n            {virksomhet.næringsinntekt !== undefined && (\n                <SummaryBlock header={intlHelper(intl, 'sifForms.virksomhet.næringsinntekt')}>\n                    <FormattedMessage id=\"sifForms.virksomhet.summary.næringsinntekst\" />\n                    {` `}\n                    <TallSvar verdi={virksomhet.næringsinntekt} />\n                </SummaryBlock>\n            )}\n\n            {erRegnetSomNyoppstartet === true && (\n                <>\n                    <SummaryBlock header={intlHelper(intl, 'sifForms.virksomhet.har_blitt_yrkesaktiv')}>\n                        {virksomhet.yrkesaktivSisteTreFerdigliknedeÅrene === undefined && (\n                            <JaNeiSvar harSvartJa={virksomhet.yrkesaktivSisteTreFerdigliknedeÅrene !== undefined} />\n                        )}\n                        {virksomhet.yrkesaktivSisteTreFerdigliknedeÅrene !== undefined && (\n                            <FormattedMessage\n                                id=\"sifForms.virksomhet.summary.yrkesaktiv.jaStartetDato\"\n                                values={{\n                                    dato: prettifyApiDate(\n                                        virksomhet.yrkesaktivSisteTreFerdigliknedeÅrene.oppstartsdato\n                                    ),\n                                }}\n                            />\n                        )}\n                    </SummaryBlock>\n                </>\n            )}\n\n            {erRegnetSomNyoppstartet === false && (\n                <>\n                    <SummaryBlock header={intlHelper(intl, 'sifForms.virksomhet.varig_endring_spm')}>\n                        <JaNeiSvar harSvartJa={virksomhet.varigEndring !== undefined} />\n                    </SummaryBlock>\n                    {virksomhet.varigEndring && (\n                        <>\n                            <SummaryBlock header={intlHelper(intl, 'sifForms.virksomhet.summary.varigEndring.dato')}>\n                                <DatoSvar apiDato={virksomhet.varigEndring.dato} />\n                            </SummaryBlock>\n                            <SummaryBlock\n                                header={intlHelper(intl, 'sifForms.virksomhet.summary.varigEndring.næringsinntekt')}>\n                                <TallSvar verdi={virksomhet.varigEndring.inntektEtterEndring} />\n                            </SummaryBlock>\n                            <SummaryBlock\n                                header={intlHelper(intl, 'sifForms.virksomhet.summary.varigEndring.beskrivelse')}>\n                                <Sitat>\n                                    <TextareaSummary text={virksomhet.varigEndring.forklaring} />\n                                </Sitat>\n                            </SummaryBlock>\n                        </>\n                    )}\n                </>\n            )}\n\n            {/* Regnskapsfører */}\n            {virksomhet.registrertINorge && (\n                <SummaryBlock header={intlHelper(intl, 'sifForms.virksomhet.regnskapsfører_spm')}>\n                    {virksomhet.regnskapsfører === undefined && <JaNeiSvar harSvartJa={false} />}\n                    {virksomhet.regnskapsfører !== undefined && (\n                        <FormattedMessage\n                            id=\"sifForms.virksomhet.summary.regnskapsfører.info\"\n                            values={{\n                                navn: virksomhet.regnskapsfører.navn,\n                                telefon: virksomhet.regnskapsfører.telefon,\n                            }}\n                        />\n                    )}\n                </SummaryBlock>\n            )}\n        </>\n    );\n};\n\nexport default VirksomhetSummary;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport {\n    FormikModalFormAndInfo,\n    ModalFormAndInfoLabels,\n    TypedFormInputValidationProps,\n} from '@navikt/sif-common-formik';\nimport { mapVirksomhetToVirksomhetApiData } from './mapVirksomhetToApiData';\nimport { Virksomhet } from './types';\nimport VirksomhetForm from './VirksomhetForm';\nimport VirksomhetSummary from './VirksomhetSummary';\n\ninterface Props<FieldNames> extends TypedFormInputValidationProps<FieldNames> {\n    name: FieldNames;\n    labels: ModalFormAndInfoLabels;\n    skipOrgNumValidation?: boolean;\n    harFlereVirksomheter?: boolean;\n    onAfterChange?: (virksomhet: Virksomhet) => void;\n}\n\nfunction VirksomhetInfoAndDialog<FieldNames>({\n    name,\n    labels,\n    skipOrgNumValidation,\n    harFlereVirksomheter,\n    validate,\n    onAfterChange,\n}: Props<FieldNames>) {\n    const intl = useIntl();\n    return (\n        <FormikModalFormAndInfo<FieldNames, Virksomhet>\n            name={name}\n            validate={validate}\n            labels={labels}\n            dialogWidth=\"narrow\"\n            renderEditButtons={true}\n            formRenderer={({ onSubmit, onCancel, data }) => (\n                <VirksomhetForm\n                    virksomhet={data}\n                    harFlereVirksomheter={harFlereVirksomheter}\n                    onSubmit={onSubmit}\n                    onCancel={onCancel}\n                    skipOrgNumValidation={skipOrgNumValidation}\n                />\n            )}\n            infoRenderer={({ data }) => (\n                <VirksomhetSummary virksomhet={mapVirksomhetToVirksomhetApiData(intl.locale, data)} />\n            )}\n            onAfterChange={onAfterChange}\n        />\n    );\n}\n\nexport default VirksomhetInfoAndDialog;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport {\n    getFieldErrorRenderer,\n    getSummaryFieldErrorRenderer,\n} from '@navikt/sif-common-formik/lib/utils/formikErrorRenderUtils';\nimport { TypedFormikForm, TypedFormikWrapper, YesOrNo } from '@navikt/sif-common-formik/lib';\nimport Panel from 'nav-frontend-paneler';\nimport { Checkbox } from 'nav-frontend-skjema';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { mapVirksomhetToVirksomhetApiData } from '../../../forms/virksomhet/mapVirksomhetToApiData';\nimport { isVirksomhet, Næringstype, Virksomhet } from '../../../forms/virksomhet/types';\nimport VirksomhetInfoAndDialog from '../../../forms/virksomhet/VirksomhetInfoAndDialog';\nimport VirksomhetSummary from '../../../forms/virksomhet/VirksomhetSummary';\nimport PageIntro from '../../components/page-intro/PageIntro';\nimport { getListValidator } from '@navikt/sif-common-formik/lib/validation';\n\nenum FormField {\n    'virksomhet' = 'virksomhet',\n}\n\nexport const mockVirksomhet: Virksomhet = {\n    id: '024782550-1402-01448-04932-71872390929312',\n    næringstyper: [Næringstype.ANNEN, Næringstype.DAGMAMMA, Næringstype.FISKE, Næringstype.JORDBRUK_SKOGBRUK],\n    fiskerErPåBladB: YesOrNo.YES,\n    navnPåVirksomheten: 'Virksomhet AS',\n    registrertINorge: YesOrNo.YES,\n    organisasjonsnummer: '123123123',\n    fom: new Date('2007-02-01T00:00:00.000Z'),\n    erPågående: true,\n    næringsinntekt: 20000,\n    harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene: YesOrNo.YES,\n    blittYrkesaktivDato: new Date(),\n    hattVarigEndringAvNæringsinntektSiste4Kalenderår: YesOrNo.YES,\n    varigEndringINæringsinntekt_dato: new Date('2019-12-09T00:00:00.000Z'),\n    varigEndringINæringsinntekt_inntektEtterEndring: 200000,\n    varigEndringINæringsinntekt_forklaring: 'Jeg fikk flere barn',\n    harRegnskapsfører: YesOrNo.YES,\n    regnskapsfører_navn: 'Regnskapsefører Truls',\n    regnskapsfører_telefon: '98219409',\n};\n\ninterface FormValues {\n    [FormField.virksomhet]?: Virksomhet;\n}\n\nconst initialValues: FormValues = {};\n\nconst VirksomhetExample = () => {\n    const [formValues, setFormValues] = useState<Partial<FormValues> | undefined>(undefined);\n    const [harFlereVirksomheter, setHarFlereVirksomheter] = useState<boolean>(false);\n    const intl = useIntl();\n\n    const { virksomhet } = formValues || {};\n\n    const apiVirksomhet =\n        virksomhet && isVirksomhet(virksomhet) ? mapVirksomhetToVirksomhetApiData(intl.locale, virksomhet) : undefined;\n    return (\n        <>\n            <PageIntro title=\"Næringsvirksomhet\">Skjema som brukes for på registrere en næringsvirksomhet.</PageIntro>\n            <Box padBottom=\"l\">\n                <Undertittel>Liste og dialog</Undertittel>\n            </Box>\n            <Panel border={true}>\n                <TypedFormikWrapper<FormValues>\n                    initialValues={initialValues}\n                    onSubmit={setFormValues}\n                    renderForm={() => {\n                        return (\n                            <TypedFormikForm<FormValues>\n                                includeButtons={true}\n                                submitButtonLabel=\"Valider skjema\"\n                                fieldErrorRenderer={getFieldErrorRenderer(intl, 'virksomhetExample')}\n                                summaryFieldErrorRenderer={getSummaryFieldErrorRenderer(intl, 'virksomhetExample')}>\n                                <VirksomhetInfoAndDialog<FormField>\n                                    name={FormField.virksomhet}\n                                    harFlereVirksomheter={harFlereVirksomheter}\n                                    validate={getListValidator({ required: true })}\n                                    labels={{\n                                        addLabel: harFlereVirksomheter ? 'Registrer virksomhet' : 'Legg til',\n                                        deleteLabel: 'Fjern',\n                                        editLabel: 'Endre',\n                                        infoTitle: 'Virksomhet',\n                                        modalTitle: 'Virksomhet',\n                                    }}\n                                />\n                            </TypedFormikForm>\n                        );\n                    }}\n                />\n                <Box margin=\"l\">\n                    <hr />\n                    <Panel style={{ padding: '1rem' }}>\n                        <Box padBottom=\"m\">Varianter:</Box>\n                        <Box margin=\"m\">\n                            <Checkbox\n                                label=\"Bruker har flere virksomheter\"\n                                checked={harFlereVirksomheter}\n                                onChange={(evt) => setHarFlereVirksomheter(evt.currentTarget.checked)}\n                            />\n                        </Box>\n                    </Panel>\n                </Box>\n            </Panel>\n\n            {apiVirksomhet && (\n                <>\n                    <Box margin=\"xxl\" padBottom=\"l\">\n                        <Undertittel>Oppsummering av api data</Undertittel>\n                    </Box>\n                    <Panel border={true}>\n                        <VirksomhetSummary virksomhet={apiVirksomhet} />\n                    </Panel>\n                </>\n            )}\n        </>\n    );\n};\n\nexport default VirksomhetExample;\n","import React from 'react';\nimport PageIntro from './components/page-intro/PageIntro';\n\nconst Intro = () => (\n    <>\n        <PageIntro title=\"SIF-common guide\">\n            Dette er starten på en enkel guide til komponenter og konsepter i SIF-common, og som kan brukes i\n            søknadsapplikasjonene til kapittel 9. Vi legger det vi trenger, etter hvert som vi ser at vi trenger det :)\n        </PageIntro>\n    </>\n);\n\nexport default Intro;\n","import React from 'react';\nimport { MessageFileFormat } from '@navikt/sif-common-core/lib/dev-utils/intl/devIntlUtils';\nimport bostedUtlandMessages from '../../../forms/bosted-utland/bostedUtlandMessages';\nimport MessagesPreview from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagesPreview';\nimport MessagePreviewExplanation from '@navikt/sif-common-core/lib/dev-utils/intl/messages-preview/MessagePreviewExplanation';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport ferieuttakMessages from '../../../forms/ferieuttak/ferieuttakMessages';\nimport fosterbarnMessages from '../../../forms/fosterbarn/fosterbarnMessages';\nimport fraværMessages from '../../../forms/fravær/fraværMessages';\nimport tidsperiodeMessages from '../../../forms/tidsperiode/tidsperiodeMessages';\nimport utenlandsoppholdMessages from '../../../forms/utenlandsopphold/utenlandsoppholdMessages';\nimport virksomhetMessages from '../../../forms/virksomhet/virksomhetMessages';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport annetBarnMessages from '../../../forms/annet-barn/annetBarnMessages';\n\nconst Texts = () => {\n    const formMessages: { title: string; messages: MessageFileFormat }[] = [];\n    formMessages.push({ title: 'Bosted utland', messages: bostedUtlandMessages });\n    formMessages.push({ title: 'Ferieuttak', messages: ferieuttakMessages });\n    formMessages.push({ title: 'Fosterbarn', messages: fosterbarnMessages });\n    formMessages.push({ title: 'Fravær', messages: fraværMessages });\n    formMessages.push({ title: 'Tidsperiode', messages: tidsperiodeMessages });\n    formMessages.push({ title: 'Utenlandsopphold', messages: utenlandsoppholdMessages });\n    formMessages.push({ title: 'Næringsvirksomhet (selvstendig næringsdrivende)', messages: virksomhetMessages });\n    formMessages.push({ title: 'Annet barn', messages: annetBarnMessages });\n    return (\n        <div>\n            <Box>\n                <MessagePreviewExplanation />\n            </Box>\n            {formMessages.map(({ title, messages }) => {\n                return (\n                    <div key={title}>\n                        <FormBlock margin=\"none\" paddingBottom=\"xl\">\n                            <MessagesPreview\n                                messages={messages}\n                                title={title}\n                                showExplanation={false}\n                                showMissingTextSummary={true}\n                            />\n                        </FormBlock>\n                    </div>\n                );\n            })}\n        </div>\n    );\n};\n\nexport default Texts;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport DialogForms from '../examples/dialog-forms/DialogForms';\nimport VirksomhetExample from '../examples/virksomhet-example/VirksomhetExample';\nimport Intro from '../Intro';\nimport Texts from '../examples/texts/Texts';\n\nexport interface RouteConfig {\n    path: string;\n    title: string;\n    renderContent: () => React.ReactNode;\n}\n\nexport const routes: RouteConfig[] = [\n    {\n        path: 'frontpage',\n        title: 'Forside',\n        renderContent: () => <Intro />,\n    },\n    {\n        path: 'dialog-forms',\n        title: 'Dialogskjema',\n        renderContent: () => <DialogForms />,\n    },\n    {\n        path: 'næring',\n        title: 'Næringsvirksomhet',\n        renderContent: () => <VirksomhetExample />,\n    },\n    {\n        path: 'texts',\n        title: 'Tekster',\n        renderContent: () => <Texts />,\n    },\n];\n\nexport const isActiveRoute = (path: string, pathname: string): boolean => {\n    return pathname.indexOf(path) >= 0;\n};\n\nexport const getRouteConfig = (pathname: string): RouteConfig | undefined => {\n    return routes.find((f) => isActiveRoute(f.path, pathname));\n};\n","import * as React from 'react';\nimport { Button, Menu, MenuItem, Wrapper } from 'react-aria-menubutton';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { NedChevron } from 'nav-frontend-chevron';\nimport { isActiveRoute, RouteConfig, routes } from '../../config/routeConfig';\nimport './headerMenu.less';\n\nconst renderMenuItem = (route: RouteConfig) => {\n    return (\n        <li key={route.path}>\n            <MenuItem className=\"headerMenu__menu__item\">\n                <div data-page={route.path}>{route.title}</div>\n            </MenuItem>\n        </li>\n    );\n};\n\ntype Props = RouteComponentProps;\n\nconst HeaderMenu = ({ history }: Props) => {\n    const {\n        location: { pathname },\n    } = history;\n\n    const toggle = (element: any) => {\n        const r = element.props ? element.props['data-page'] : undefined;\n        if (r) {\n            history.push(r);\n        }\n    };\n    const route = routes.find((r) => isActiveRoute(r.path, pathname)) || routes[0];\n    return (\n        <div className=\"headerMenu\">\n            <Wrapper className=\"headerMenu__wrapper\" onSelection={toggle}>\n                <Button className=\"headerMenu__button\">\n                    <div className=\"headerMenu__button__label\">{route ? route.title : 'Velg'}</div>\n                    <div className=\"headerMenu__button__chevron\">\n                        <NedChevron />\n                    </div>\n                </Button>\n                <Menu className=\"headerMenu__menu\">\n                    <ul>{routes.map(renderMenuItem)}</ul>\n                </Menu>\n            </Wrapper>\n        </div>\n    );\n};\nexport default withRouter(HeaderMenu);\n","import React from 'react';\nimport { Link, withRouter, RouteComponentProps } from 'react-router-dom';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport 'nav-frontend-lenker-style';\nimport { isActiveRoute, routes } from '../../config/routeConfig';\n\nconst lenkeBem = bemUtils('lenke');\n\nconst LeftMenu = ({\n    history: {\n        location: { pathname },\n    },\n}: RouteComponentProps) => {\n    return (\n        <div className=\"leftMenu\">\n            {routes.map((route) => (\n                <Link\n                    key={route.path}\n                    to={route.path}\n                    className={lenkeBem.classNames(\n                        lenkeBem.block,\n                        lenkeBem.modifierConditional('active', isActiveRoute(route.path, pathname))\n                    )}>\n                    {route.title}\n                </Link>\n            ))}\n        </div>\n    );\n};\n\nexport default withRouter(LeftMenu);\n","import React from 'react';\nimport MediaQuery from 'react-responsive';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport HeaderMenu from './components/header-menu/HeaderMenu';\nimport LeftMenu from './components/left-menu/LeftMenu';\nimport { getRouteConfig } from './config/routeConfig';\nimport Intro from './Intro';\n\ntype Props = RouteComponentProps;\n\nconst DevContent = ({\n    history: {\n        location: { pathname },\n    },\n}: Props) => {\n    const routeConfig = getRouteConfig(pathname);\n    return (\n        <>\n            <MediaQuery minWidth={1072}>\n                <aside className=\"asideContent\">\n                    <LeftMenu />\n                </aside>\n                <article style={{ maxWidth: '1000px' }} className=\"mainContent\">\n                    {routeConfig ? routeConfig.renderContent() : <Intro />}\n                </article>\n            </MediaQuery>\n            <MediaQuery maxWidth={1071}>\n                <aside className=\"asideContentTop\">\n                    <HeaderMenu />\n                </aside>\n                <article style={{ maxWidth: '1000px' }} className=\"mainContent\">\n                    {routeConfig ? routeConfig.renderContent() : <Intro />}\n                </article>\n            </MediaQuery>\n        </>\n    );\n};\n\nexport default withRouter(DevContent);\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { HashRouter } from 'react-router-dom';\nimport LanguageToggle from '@navikt/sif-common-core/lib/components/language-toggle/LanguageToggle';\nimport { Locale } from '@navikt/sif-common-core/lib/types/Locale';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport NAVLogo from './components/svg/NAVLogo';\nimport DevContent from './DevContent';\nimport './styles/dev.less';\n\ninterface Props {\n    onChangeLocale: (locale: Locale) => void;\n}\n\nconst DevPage = ({ onChangeLocale }: Props) => {\n    const intl = useIntl();\n    return (\n        <main className=\"devPage\">\n            <header className=\"header\">\n                <span className=\"navLogo\">\n                    <NAVLogo />\n                </span>\n                <span className=\"header__title\">\n                    <Systemtittel>Sykdom i familien - sif-common-forms</Systemtittel>\n                </span>\n                <span className=\"languageToggler\">\n                    <LanguageToggle toggle={onChangeLocale} locale={intl.locale as Locale} />\n                </span>\n            </header>\n            <div className=\"contentWrapper\">\n                <HashRouter>\n                    <DevContent />\n                </HashRouter>\n            </div>\n        </main>\n    );\n};\n\nexport default DevPage;\n","import * as React from 'react';\nimport '@formatjs/intl-pluralrules//locale-data/nb';\nimport '@formatjs/intl-pluralrules//locale-data/nn';\nimport '@formatjs/intl-pluralrules/polyfill';\nimport { Locale } from '@navikt/sif-common-core/lib/types/Locale';\nimport { getLocaleFromSessionStorage, setLocaleInSessionStorage } from '@navikt/sif-common-core/lib/utils/localeUtils';\nimport 'nav-frontend-skjema-style';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport AppIntlProvider from './dev/components/app-intl-provider/AppIntlProvider';\nimport DevPage from './dev/DevPage';\nimport '@navikt/sif-common-core/lib/styles/globalStyles.less';\n\nconst localeFromSessionStorage = getLocaleFromSessionStorage();\n\nconst App = () => {\n    const [locale, setLocale] = React.useState(localeFromSessionStorage || 'nb');\n    return (\n        <Normaltekst tag=\"div\">\n            <AppIntlProvider locale={locale as Locale}>\n                <DevPage\n                    onChangeLocale={(l: Locale) => {\n                        setLocaleInSessionStorage(l);\n                        setLocale(l);\n                    }}\n                />\n            </AppIntlProvider>\n        </Normaltekst>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Modal from 'react-modal';\nimport App from './App';\n\nModal.setAppElement('#root');\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}